// QHSE Management System JavaScript
console.log('üîÑ QHSE Script wird geladen... Version 2024-07-05-02');

class QHSEDashboard {
    constructor() {
        this.currentUserId = 'root-admin';
        this.currentSection = 'dashboard';
        this.currentMonth = new Date().getMonth();
        this.currentYear = new Date().getFullYear();
        this.documents = this.loadDocumentsFromStorage();
        this.users = this.loadUsersFromStorage();
        this.areas = this.loadAreasFromStorage();
        this.departments = this.loadDepartmentsFromStorage();
        this.timeEntries = this.loadTimeEntriesFromStorage();
        this.machines = this.loadMachinesFromStorage();
        this.maintenanceTasks = this.loadMaintenanceTasksFromStorage();
        this.issues = this.loadIssuesFromStorage();
        this.safetyAnnouncements = this.loadSafetyAnnouncementsFromStorage();
        this.safetyPdfs = this.loadSafetyPdfsFromStorage();
        this.auditContent = this.loadAuditContentFromStorage();
        this.auditCertifications = this.loadAuditCertificationsFromStorage();
        this.dashboardKpis = this.loadDashboardKpisFromStorage();
        this.customKpis = this.loadCustomKpisFromStorage();
        this.hazardousSubstances = this.loadHazardousSubstancesFromStorage();
        this.trainings = this.loadTrainingsFromStorage();
        this.trainingAssignments = this.loadTrainingAssignmentsFromStorage();
        this.certificates = this.loadCertificatesFromStorage();
        this.suppliers = this.loadSuppliersFromStorage();
        this.supplierEvaluations = this.loadSupplierEvaluationsFromStorage();
        this.supplierDocuments = this.loadSupplierDocumentsFromStorage();
        this.supplierAudits = this.loadSupplierAuditsFromStorage();
        this.riskAssessments = this.loadRiskAssessmentsFromStorage();
        this.auditExchanges = this.loadAuditExchangesFromStorage();
        this.exchangeRequests = this.loadExchangeRequestsFromStorage();
        this.auditors = this.loadAuditorsFromStorage();
        this.znNumbers = [];
        this.initializeRootAdmin();
        this.initializeDefaultAreas();
        this.initializeDefaultDepartments();
        this.initializeDefaultAuditExchanges();
        this.init();
    }

    init() {
        this.setupUserManagement();
        this.setupAreaManagement();
        this.setupDepartmentManagement();
        this.setupUserSelection();
        this.setupNavigation();
        this.setupFileUpload();
        this.setupSearchFunctionality();
        this.setupModals();
        this.setupUserProfile();
        this.setupFormTabs();
        this.setupEditableCompanyName();
        this.setupSettings();
        // Ensure permission dropdown is populated after settings are configured
        this.populatePermissionUserDropdown();
        this.setupTimeTracking();
        this.setupMaintenanceManagement();
        this.setupSafetyCorner();
        this.setupAuditManagement();
        this.setupAuditCertificationsManagement();
        this.setupDashboardAudits();
        this.setupDashboardKpiManagement();
        this.setupHazardousSubstances();
        this.setupTrainingManagement();
        this.setupSupplierManagement();
        this.setupVacationManagement();
        this.setupUserProfiles();
        this.setupRiskAssessment();
        this.setupAuditExchange();
        this.setupAuditorManagement();
        this.setupAuditPlanGenerator();
        this.loadCustomLabels();
        
        // Apply saved color theme on load
        this.loadAndApplyColorTheme();
        
        // Make dashboard globally available for onclick handlers
        window.qhseDashboard = this;
        
        this.updateUIForUser();
        this.renderDocumentsInSections();
        this.renderUsersList();
        this.renderAreasList();
        this.renderDepartmentsList();
        this.renderDynamicAreas();
        this.populateUserDropdown();
        this.populateDepartmentDropdowns();
        this.populateDocumentCategories();
        
        // Setup UI components after DOM is ready
        setTimeout(() => {
            this.setupExpandableInfo();
            this.setupCustomerFeedback();
            this.setupQHSENotesAreas();
            
            // Initialize ZN numbers display
            this.updateZNNumbersDisplay();
            
            // Setup outside click for dropdown
            this.setupDropdownOutsideClick();
            
            // Ensure machine management is properly initialized
            this.ensureMachineManagementWorks();
            
            // Ensure safety corner is properly rendered
            this.renderSafetyAnnouncements();
            this.renderSafetyPdfs();
            
            // Ensure audit content is properly rendered
            this.renderAuditContent();
            this.renderAuditCertifications();
            this.renderDashboardAudits();
            
            // Update dashboard KPIs
            this.updateDashboardKpiDisplay();
            this.renderCustomKpisOnDashboard();
            
            // Initialize supplier management after DOM is ready
            this.initializeSupplierSection();
            
            // Add debug functions to window for testing
            window.debugQHSE = {
                grantGefahrstoffeToUser: (userId) => {
                    this.updateUserModulePermission(userId, 'gefahrstoffe', true);
                },
                checkUserAccess: (userId) => {
                    const user = this.users.find(u => u.id === userId);
                    const moduleSettings = this.loadModuleSettingsFromStorage();
                    console.log('User:', user);
                    console.log('Module Settings:', moduleSettings);
                    console.log('Has Access:', this.userHasGefahrstoffeAccess(user, moduleSettings));
                },
                listUsers: () => {
                    console.table(this.users.map(u => ({
                        id: u.id,
                        name: u.displayName || u.name,
                        role: u.role,
                        gefahrstoffePermission: u.permissions?.gefahrstoffe
                    })));
                }
            };
        }, 500);
    }

    // User Profile Management
    setupUserProfiles() {
        // Setup profile modal handlers
        this.setupProfileModal();
        this.setupProfilePictureUpload();
        this.setupQualificationsManagement();
        this.setupResponsibilitiesManagement();
        this.setupActivityLog();
        this.setupPublicProfileSearch();
    }

    setupProfileModal() {
        const profileModal = document.getElementById('userProfileModal');
        const editProfileBtn = document.getElementById('editProfileBtn');
        const profileDropdown = document.querySelector('.user-profile-dropdown');
        
        if (editProfileBtn) {
            editProfileBtn.addEventListener('click', () => {
                this.showCurrentUserProfile();
            });
        }

        // Setup profile dropdown if it exists
        if (profileDropdown) {
            const viewProfileBtn = profileDropdown.querySelector('.view-profile-btn');
            const editProfileDropdownBtn = profileDropdown.querySelector('.edit-profile-btn');
            
            if (viewProfileBtn) {
                viewProfileBtn.addEventListener('click', () => {
                    this.showCurrentUserProfile(false); // View mode
                });
            }
            
            if (editProfileDropdownBtn) {
                editProfileDropdownBtn.addEventListener('click', () => {
                    this.showCurrentUserProfile(true); // Edit mode
                });
            }
        }
    }

    showCurrentUserProfile(editMode = false) {
        const currentUser = this.getCurrentUser();
        if (!currentUser) {
            alert('Benutzer nicht gefunden.');
            return;
        }

        this.renderUserProfileModal(currentUser, editMode);
    }

    renderUserProfileModal(user, editMode = false) {
        // Check if modal exists, if not create it
        let modal = document.getElementById('userProfileModal');
        if (!modal) {
            this.createProfileModal();
            modal = document.getElementById('userProfileModal');
        }

        const modalContent = modal.querySelector('.modal-content');
        const userName = user.displayName || user.name || 'Unbekannter Benutzer';
        const userRole = this.getRoleDisplayName(user.role);

        modalContent.innerHTML = `
            <div class="modal-header">
                <h2><i class="fas fa-user"></i> ${editMode ? 'Profil bearbeiten' : 'Mein Profil'}</h2>
                <span class="close" onclick="document.getElementById('userProfileModal').style.display='none'">&times;</span>
            </div>
            <div class="profile-content">
                ${this.renderProfileTabs(user, editMode)}
            </div>
            <div class="modal-footer">
                ${editMode ? 
                    '<button onclick="window.qhseDashboard.saveUserProfile()" class="btn-primary">Speichern</button>' +
                    '<button onclick="document.getElementById(\'userProfileModal\').style.display=\'none\'" class="btn-secondary">Abbrechen</button>'
                    : 
                    '<button onclick="window.qhseDashboard.renderUserProfileModal(window.qhseDashboard.getCurrentUser(), true)" class="btn-primary">Bearbeiten</button>' +
                    '<button onclick="document.getElementById(\'userProfileModal\').style.display=\'none\'" class="btn-secondary">Schlie√üen</button>'
                }
            </div>
        `;

        modal.style.display = 'block';
        this.setupProfileTabs();
    }

    createProfileModal() {
        const modal = document.createElement('div');
        modal.id = 'userProfileModal';
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content profile-modal">
                <!-- Content will be populated by renderUserProfileModal -->
            </div>
        `;
        document.body.appendChild(modal);
    }

    renderProfileTabs(user, editMode) {
        const tabs = [
            { id: 'personal', label: 'Pers√∂nliche Daten', icon: 'fas fa-user' },
            { id: 'roles', label: 'Rollen & Berechtigungen', icon: 'fas fa-key' },
            { id: 'qualifications', label: 'Qualifikationen', icon: 'fas fa-certificate' },
            { id: 'responsibilities', label: 'Verantwortlichkeiten', icon: 'fas fa-tasks' },
            { id: 'activity', label: 'Aktivit√§ten', icon: 'fas fa-history' },
            { id: 'settings', label: 'Sichtbarkeit', icon: 'fas fa-eye' }
        ];

        return `
            <div class="profile-tabs">
                <div class="tab-header">
                    ${tabs.map(tab => `
                        <button class="tab-btn ${tab.id === 'personal' ? 'active' : ''}" 
                                data-tab="${tab.id}">
                            <i class="${tab.icon}"></i> ${tab.label}
                        </button>
                    `).join('')}
                </div>
                <div class="tab-content">
                    ${tabs.map(tab => `
                        <div class="tab-pane ${tab.id === 'personal' ? 'active' : ''}" id="tab-${tab.id}">
                            ${this.renderProfileTabContent(tab.id, user, editMode)}
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    renderProfileTabContent(tabId, user, editMode) {
        switch (tabId) {
            case 'personal':
                return this.renderPersonalInfoTab(user, editMode);
            case 'roles':
                return this.renderRolesTab(user, editMode);
            case 'qualifications':
                return this.renderQualificationsTab(user, editMode);
            case 'responsibilities':
                return this.renderResponsibilitiesTab(user, editMode);
            case 'activity':
                return this.renderActivityTab(user, editMode);
            case 'settings':
                return this.renderVisibilityTab(user, editMode);
            default:
                return '<p>Tab-Inhalt wird geladen...</p>';
        }
    }

    renderPersonalInfoTab(user, editMode) {
        const departments = this.departments || [];
        const currentDept = departments.find(d => d.id === user.department);
        
        return `
            <div class="tab-content-header">
                <h3><i class="fas fa-user"></i> Pers√∂nliche Daten</h3>
                <button class="btn-primary tab-edit-btn" onclick="window.qhseDashboard.openPersonalDataEditor('${user.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
            </div>
            
            <div class="profile-info-display">
                <div class="info-grid">
                    <div class="info-group">
                        <label>Vollst√§ndiger Name</label>
                        <div class="info-value">${user.displayName || 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Benutzername</label>
                        <div class="info-value">${user.id}</div>
                    </div>
                    <div class="info-group">
                        <label>E-Mail</label>
                        <div class="info-value">${user.email || 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Telefon</label>
                        <div class="info-value">${user.phone || 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Mobil</label>
                        <div class="info-value">${user.mobile || 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Geburtsdatum</label>
                        <div class="info-value">${user.birthdate ? new Date(user.birthdate).toLocaleDateString('de-DE') : 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Abteilung</label>
                        <div class="info-value">${currentDept ? currentDept.name : user.department || 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Position/Jobtitel</label>
                        <div class="info-value">${user.position || 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Adresse</label>
                        <div class="info-value">${user.address ? user.address.replace(/\n/g, '<br>') : 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Notfallkontakt</label>
                        <div class="info-value">${user.emergencyContact || 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Eintrittsdatum</label>
                        <div class="info-value">${user.startDate ? new Date(user.startDate).toLocaleDateString('de-DE') : 'Nicht angegeben'}</div>
                    </div>
                    <div class="info-group">
                        <label>Notizen</label>
                        <div class="info-value">${user.notes || 'Keine Notizen'}</div>
                    </div>
                </div>
            </div>
        `;
    }

    // Detailed editor functions for each profile section
    openPersonalDataEditor(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const departments = this.departments || [];
        
        const modal = this.createSubModal('personalDataEditor', 'Pers√∂nliche Daten bearbeiten');
        modal.querySelector('.modal-body').innerHTML = `
            <div class="editor-form">
                <div class="form-grid">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Vollst√§ndiger Name *</label>
                            <input type="text" id="edit_displayName" value="${user.displayName || ''}" required>
                        </div>
                        <div class="form-group">
                            <label>Benutzername</label>
                            <input type="text" value="${user.id}" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>E-Mail</label>
                            <input type="email" id="edit_email" value="${user.email || ''}">
                        </div>
                        <div class="form-group">
                            <label>Telefon</label>
                            <input type="tel" id="edit_phone" value="${user.phone || ''}" placeholder="+49 xxx xxxx-xxx">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Mobil</label>
                            <input type="tel" id="edit_mobile" value="${user.mobile || ''}" placeholder="+49 xxx xxxxxxx">
                        </div>
                        <div class="form-group">
                            <label>Geburtsdatum</label>
                            <input type="date" id="edit_birthdate" value="${user.birthdate || ''}">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Abteilung</label>
                            <select id="edit_department">
                                <option value="">Bitte w√§hlen...</option>
                                ${departments.map(dept => `
                                    <option value="${dept.id}" ${dept.id === user.department ? 'selected' : ''}>
                                        ${dept.name}
                                    </option>
                                `).join('')}
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Position/Jobtitel</label>
                            <input type="text" id="edit_position" value="${user.position || ''}" placeholder="z.B. Senior Entwickler">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Eintrittsdatum</label>
                            <input type="date" id="edit_startDate" value="${user.startDate || ''}">
                        </div>
                        <div class="form-group">
                            <label>Notfallkontakt</label>
                            <input type="text" id="edit_emergencyContact" value="${user.emergencyContact || ''}" 
                                   placeholder="Name und Telefonnummer">
                        </div>
                    </div>
                    <div class="form-group full-width">
                        <label>Adresse</label>
                        <textarea id="edit_address" rows="3" placeholder="Stra√üe, Hausnummer
PLZ Ort">${user.address || ''}</textarea>
                    </div>
                    <div class="form-group full-width">
                        <label>Notizen</label>
                        <textarea id="edit_notes" rows="3" placeholder="Zus√§tzliche Informationen...">${user.notes || ''}</textarea>
                    </div>
                </div>
            </div>
        `;

        modal.querySelector('.modal-footer').innerHTML = `
            <button onclick="window.qhseDashboard.savePersonalData('${userId}')" class="btn-primary">
                <i class="fas fa-save"></i> Speichern
            </button>
            <button onclick="window.qhseDashboard.closeSubModal('personalDataEditor')" class="btn-secondary">
                Abbrechen
            </button>
        `;

        modal.style.display = 'block';
    }

    savePersonalData(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        // Get form values
        user.displayName = document.getElementById('edit_displayName').value;
        user.email = document.getElementById('edit_email').value;
        user.phone = document.getElementById('edit_phone').value;
        user.mobile = document.getElementById('edit_mobile').value;
        user.birthdate = document.getElementById('edit_birthdate').value;
        user.department = document.getElementById('edit_department').value;
        user.position = document.getElementById('edit_position').value;
        user.startDate = document.getElementById('edit_startDate').value;
        user.emergencyContact = document.getElementById('edit_emergencyContact').value;
        user.address = document.getElementById('edit_address').value;
        user.notes = document.getElementById('edit_notes').value;

        // Save to storage
        this.saveUsersToStorage();

        // Update UI
        this.updateUIForUser();
        this.populateUserDropdown();

        // Close modal
        this.closeSubModal('personalDataEditor');

        // Refresh profile modal if open
        const profileModal = document.getElementById('userProfileModal');
        if (profileModal && profileModal.style.display === 'block') {
            this.showCurrentUserProfile();
        }

        alert('Pers√∂nliche Daten erfolgreich gespeichert!');
    }

    createSubModal(id, title) {
        // Remove existing modal if any
        const existing = document.getElementById(id);
        if (existing) {
            existing.remove();
        }

        const modal = document.createElement('div');
        modal.id = id;
        modal.className = 'modal sub-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-edit"></i> ${title}</h2>
                    <span class="close" onclick="window.qhseDashboard.closeSubModal('${id}')">&times;</span>
                </div>
                <div class="modal-body">
                    <!-- Content will be populated -->
                </div>
                <div class="modal-footer">
                    <!-- Buttons will be populated -->
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        return modal;
    }

    closeSubModal(id) {
        const modal = document.getElementById(id);
        if (modal) {
            modal.style.display = 'none';
            modal.remove();
        }
    }

    // Roles Editor
    openRolesEditor(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const currentUser = this.getCurrentUser();
        const canEditRoles = currentUser && (currentUser.role === 'root-admin' || currentUser.role === 'admin');
        
        const modal = this.createSubModal('rolesEditor', 'Rollen & Berechtigungen verwalten');
        modal.querySelector('.modal-body').innerHTML = `
            <div class="roles-editor">
                <div class="current-role-section">
                    <h4><i class="fas fa-user-tag"></i> Aktuelle Systemrolle</h4>
                    <div class="role-display">
                        <div class="role-info">
                            <h5>${this.getRoleDisplayName(user.role)}</h5>
                            <p><strong>Systemrolle:</strong> <code>${user.role}</code></p>
                            <p><strong>Status:</strong> <span class="status-badge ${user.isActive ? 'valid' : 'inactive'}">${user.isActive ? 'Aktiv' : 'Inaktiv'}</span></p>
                        </div>
                        ${canEditRoles ? `
                            <div class="role-actions">
                                <button onclick="window.qhseDashboard.showRoleChangeForm()" class="btn-primary">
                                    <i class="fas fa-exchange-alt"></i> Rolle √§ndern
                                </button>
                            </div>
                        ` : ''}
                    </div>
                </div>

                ${canEditRoles ? `
                    <div id="roleChangeForm" style="display: none;">
                        <h4>Rolle √§ndern</h4>
                        <div class="form-group">
                            <label>Neue Rolle w√§hlen:</label>
                            <select id="newUserRole">
                                ${Object.entries(this.roleDefinitions).map(([roleKey, roleDef]) => `
                                    <option value="${roleKey}" ${roleKey === user.role ? 'selected' : ''}>${roleDef.name}</option>
                                `).join('')}
                            </select>
                        </div>
                        <div class="form-actions">
                            <button onclick="window.qhseDashboard.saveRoleChange('${userId}')" class="btn-primary">
                                <i class="fas fa-save"></i> Rolle speichern
                            </button>
                            <button onclick="window.qhseDashboard.hideRoleChangeForm()" class="btn-secondary">
                                Abbrechen
                            </button>
                        </div>
                    </div>
                ` : ''}

                <div class="permissions-section">
                    <h4><i class="fas fa-key"></i> Berechtigungen</h4>
                    <div class="permissions-display">
                        ${this.renderUserPermissions(user)}
                    </div>
                </div>

                <div class="special-permissions-section">
                    <h4><i class="fas fa-star"></i> Spezielle Modulberechtigungen</h4>
                    <div class="special-permissions-display">
                        ${this.renderSpecialPermissions(user, canEditRoles)}
                    </div>
                </div>
            </div>
        `;

        modal.querySelector('.modal-footer').innerHTML = `
            <button onclick="window.qhseDashboard.closeSubModal('rolesEditor')" class="btn-secondary">
                Schlie√üen
            </button>
        `;

        modal.style.display = 'block';
    }

    renderUserPermissions(user) {
        const roleDefinition = this.roleDefinitions[user.role];
        const allowedSections = roleDefinition ? roleDefinition.allowedSections || [] : [];
        
        return `
            <div class="permissions-grid">
                ${allowedSections.map(section => `
                    <div class="permission-item granted">
                        <i class="fas fa-check-circle"></i>
                        <span>${this.getSectionDisplayName(section)}</span>
                    </div>
                `).join('')}
            </div>
        `;
    }

    renderSpecialPermissions(user, canEdit) {
        const permissions = user.permissions || {};
        const modules = ['gefahrstoffe', 'zeitauswertung', 'maschinen-verwaltung'];
        
        return `
            <div class="special-permissions-list">
                ${modules.map(module => {
                    const hasAccess = permissions[module] !== false; // Default true unless explicitly denied
                    return `
                        <div class="special-permission-item">
                            <div class="permission-info">
                                <h5>${this.getModuleDisplayName(module)}</h5>
                                <span class="permission-status ${hasAccess ? 'granted' : 'denied'}">
                                    <i class="fas ${hasAccess ? 'fa-check-circle' : 'fa-times-circle'}"></i>
                                    ${hasAccess ? 'Erlaubt' : 'Verweigert'}
                                </span>
                            </div>
                            ${canEdit ? `
                                <div class="permission-actions">
                                    <button onclick="window.qhseDashboard.toggleModulePermission('${user.id}', '${module}')" 
                                            class="btn-small ${hasAccess ? 'btn-danger' : 'btn-success'}">
                                        ${hasAccess ? 'Entziehen' : 'Gew√§hren'}
                                    </button>
                                </div>
                            ` : ''}
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }

    showRoleChangeForm() {
        document.getElementById('roleChangeForm').style.display = 'block';
    }

    hideRoleChangeForm() {
        document.getElementById('roleChangeForm').style.display = 'none';
    }

    saveRoleChange(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const newRole = document.getElementById('newUserRole').value;
        if (!newRole || newRole === user.role) {
            alert('Keine √Ñnderung vorgenommen.');
            return;
        }

        if (confirm(`M√∂chten Sie die Rolle von "${this.getRoleDisplayName(user.role)}" zu "${this.getRoleDisplayName(newRole)}" √§ndern?`)) {
            user.role = newRole;
            this.saveUsersToStorage();
            
            // Refresh the editor
            this.openRolesEditor(userId);
            
            // Update main UI if it's the current user
            if (userId === this.currentUserId) {
                this.updateUIForUser();
            }
            
            alert('Rolle erfolgreich ge√§ndert!');
        }
    }

    toggleModulePermission(userId, module) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        if (!user.permissions) {
            user.permissions = {};
        }

        const currentAccess = user.permissions[module] !== false;
        user.permissions[module] = !currentAccess;
        
        this.saveUsersToStorage();
        
        // Refresh the editor
        this.openRolesEditor(userId);
        
        const action = currentAccess ? 'entzogen' : 'gew√§hrt';
        alert(`Berechtigung f√ºr ${this.getModuleDisplayName(module)} wurde ${action}.`);
    }

    getModuleDisplayName(module) {
        const moduleNames = {
            'gefahrstoffe': 'Gefahrstoffverzeichnis',
            'zeitauswertung': 'Zeitauswertung',
            'maschinen-verwaltung': 'Maschinenmanagement'
        };
        return moduleNames[module] || module;
    }

    // Responsibilities Editor
    openResponsibilitiesEditor(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;
        
        const modal = this.createSubModal('responsibilitiesEditor', 'Verantwortlichkeiten verwalten');
        modal.querySelector('.modal-body').innerHTML = `
            <div class="responsibilities-editor">
                <div class="resp-summary">
                    <h4><i class="fas fa-tasks"></i> Verantwortlichkeiten √úbersicht</h4>
                    <div class="resp-stats">
                        <div class="resp-stat">
                            <span class="stat-number">${this.getMachineResponsibilitiesCount(user)}</span>
                            <span class="stat-label">Maschinen</span>
                        </div>
                        <div class="resp-stat">
                            <span class="stat-number">${this.getSubstanceResponsibilitiesCount(user)}</span>
                            <span class="stat-label">Gefahrstoffe</span>
                        </div>
                        <div class="resp-stat">
                            <span class="stat-number">${this.getAuditResponsibilitiesCount(user)}</span>
                            <span class="stat-label">Pr√ºfungen</span>
                        </div>
                        <div class="resp-stat">
                            <span class="stat-number">${this.getStaffResponsibilitiesCount(user)}</span>
                            <span class="stat-label">Mitarbeiter</span>
                        </div>
                    </div>
                </div>

                <div class="resp-categories">
                    <div class="resp-category-editor">
                        <h4><i class="fas fa-cogs"></i> Maschinen & Anlagen</h4>
                        <div class="resp-content">
                            ${this.renderMachineResponsibilitiesEditor(user)}
                        </div>
                    </div>
                    
                    <div class="resp-category-editor">
                        <h4><i class="fas fa-flask"></i> Gefahrstoffe</h4>
                        <div class="resp-content">
                            ${this.renderSubstanceResponsibilitiesEditor(user)}
                        </div>
                    </div>
                    
                    <div class="resp-category-editor">
                        <h4><i class="fas fa-clipboard-check"></i> Pr√ºfungen & Audits</h4>
                        <div class="resp-content">
                            ${this.renderAuditResponsibilitiesEditor(user)}
                        </div>
                    </div>
                    
                    <div class="resp-category-editor">
                        <h4><i class="fas fa-users"></i> Mitarbeiterverantwortung</h4>
                        <div class="resp-content">
                            ${this.renderStaffResponsibilitiesEditor(user)}
                        </div>
                    </div>
                </div>
            </div>
        `;

        modal.querySelector('.modal-footer').innerHTML = `
            <button onclick="window.qhseDashboard.closeSubModal('responsibilitiesEditor')" class="btn-secondary">
                Schlie√üen
            </button>
        `;

        modal.style.display = 'block';
    }

    getMachineResponsibilitiesCount(user) {
        // Count machines assigned to this user
        const machines = this.machines || [];
        return machines.filter(machine => machine.responsiblePerson === user.id).length;
    }

    getSubstanceResponsibilitiesCount(user) {
        // Count hazardous substances assigned to this user
        const substances = this.hazardousSubstances || [];
        return substances.filter(substance => substance.responsiblePerson === user.id).length;
    }

    getAuditResponsibilitiesCount(user) {
        // Count audits assigned to this user (simplified)
        return user.assignedAudits ? user.assignedAudits.length : 0;
    }

    getStaffResponsibilitiesCount(user) {
        // Count staff under this user's supervision
        const subordinates = this.users.filter(u => u.supervisor === user.id);
        return subordinates.length;
    }

    renderMachineResponsibilitiesEditor(user) {
        const machines = this.machines || [];
        const userMachines = machines.filter(machine => machine.responsiblePerson === user.id);
        
        return `
            <div class="responsibility-section">
                ${userMachines.length === 0 ? 
                    '<p class="no-data">Keine Maschinenverantwortlichkeiten zugewiesen.</p>' :
                    `<div class="responsibility-list">
                        ${userMachines.map(machine => `
                            <div class="responsibility-item">
                                <div class="item-info">
                                    <h5>${machine.name}</h5>
                                    <p>Seriennummer: ${machine.serialNumber || 'Nicht angegeben'}</p>
                                    <span class="status-badge ${machine.status}">${machine.status || 'Unbekannt'}</span>
                                </div>
                                <div class="item-actions">
                                    <button onclick="window.qhseDashboard.viewMachineDetails('${machine.id}')" class="btn-small btn-secondary">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>`
                }
            </div>
        `;
    }

    renderSubstanceResponsibilitiesEditor(user) {
        const substances = this.hazardousSubstances || [];
        const userSubstances = substances.filter(substance => substance.responsiblePerson === user.id);
        
        return `
            <div class="responsibility-section">
                ${userSubstances.length === 0 ? 
                    '<p class="no-data">Keine Gefahrstoff-Verantwortlichkeiten zugewiesen.</p>' :
                    `<div class="responsibility-list">
                        ${userSubstances.map(substance => `
                            <div class="responsibility-item">
                                <div class="item-info">
                                    <h5>${substance.name}</h5>
                                    <p>CAS-Nr.: ${substance.casNumber || 'Nicht angegeben'}</p>
                                    <span class="hazard-class">${substance.hazardClass || 'Unbekannt'}</span>
                                </div>
                                <div class="item-actions">
                                    <button onclick="window.qhseDashboard.viewSubstanceDetails('${substance.id}')" class="btn-small btn-secondary">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>`
                }
            </div>
        `;
    }

    renderAuditResponsibilitiesEditor(user) {
        const assignedAudits = user.assignedAudits || [];
        
        return `
            <div class="responsibility-section">
                ${assignedAudits.length === 0 ? 
                    '<p class="no-data">Keine Audit-Verantwortlichkeiten zugewiesen.</p>' :
                    `<div class="responsibility-list">
                        ${assignedAudits.map(audit => `
                            <div class="responsibility-item">
                                <div class="item-info">
                                    <h5>${audit.title}</h5>
                                    <p>F√§llig: ${audit.dueDate ? new Date(audit.dueDate).toLocaleDateString('de-DE') : 'Nicht angegeben'}</p>
                                    <span class="status-badge ${audit.status}">${audit.status || 'Offen'}</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>`
                }
                <div class="add-responsibility">
                    <button onclick="window.qhseDashboard.showAddAuditForm('${user.id}')" class="btn-primary btn-sm">
                        <i class="fas fa-plus"></i> Pr√ºfung zuweisen
                    </button>
                </div>
            </div>
        `;
    }

    renderStaffResponsibilitiesEditor(user) {
        const subordinates = this.users.filter(u => u.supervisor === user.id);
        
        return `
            <div class="responsibility-section">
                ${subordinates.length === 0 ? 
                    '<p class="no-data">Keine Mitarbeiter unter Ihrer Aufsicht.</p>' :
                    `<div class="responsibility-list">
                        ${subordinates.map(subordinate => `
                            <div class="responsibility-item">
                                <div class="item-info">
                                    <h5>${subordinate.displayName}</h5>
                                    <p>Rolle: ${this.getRoleDisplayName(subordinate.role)}</p>
                                    <p>Abteilung: ${subordinate.department || 'Nicht angegeben'}</p>
                                </div>
                                <div class="item-actions">
                                    <button onclick="window.qhseDashboard.viewEmployeeProfile('${subordinate.id}')" class="btn-small btn-secondary">
                                        <i class="fas fa-user"></i>
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>`
                }
            </div>
        `;
    }

    // Activity Editor
    openActivityEditor(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;
        
        const activities = this.getUserActivities(userId);
        
        const modal = this.createSubModal('activityEditor', 'Aktivit√§tsverlauf verwalten');
        modal.querySelector('.modal-body').innerHTML = `
            <div class="activity-editor">
                <div class="activity-summary">
                    <h4><i class="fas fa-chart-bar"></i> Aktivit√§ts-Statistiken</h4>
                    <div class="activity-stats">
                        <div class="stat-card">
                            <h5>${activities.length}</h5>
                            <p>Gesamt-Aktivit√§ten</p>
                        </div>
                        <div class="stat-card">
                            <h5>${activities.filter(a => a.timestamp > Date.now() - 7*24*60*60*1000).length}</h5>
                            <p>Diese Woche</p>
                        </div>
                        <div class="stat-card">
                            <h5>${activities.filter(a => a.timestamp > Date.now() - 30*24*60*60*1000).length}</h5>
                            <p>Letzten 30 Tage</p>
                        </div>
                    </div>
                </div>

                <div class="activity-management">
                    <div class="activity-controls">
                        <h4><i class="fas fa-filter"></i> Filter & Einstellungen</h4>
                        <div class="control-row">
                            <select id="activityTypeFilter">
                                <option value="all">Alle Aktivit√§ten</option>
                                <option value="documents">Dokumente</option>
                                <option value="audits">Pr√ºfungen</option>
                                <option value="machines">Maschinen</option>
                                <option value="substances">Gefahrstoffe</option>
                                <option value="profile">Profil-√Ñnderungen</option>
                            </select>
                            <button onclick="window.qhseDashboard.filterActivities()" class="btn-secondary">
                                <i class="fas fa-search"></i> Filtern
                            </button>
                        </div>
                    </div>

                    <div class="activity-settings">
                        <h4><i class="fas fa-cog"></i> Aktivit√§ts-Einstellungen</h4>
                        <div class="setting-group">
                            <label>
                                <input type="checkbox" id="trackDocumentActivity" ${user.activitySettings?.trackDocuments !== false ? 'checked' : ''}>
                                Dokument-Aktivit√§ten verfolgen
                            </label>
                        </div>
                        <div class="setting-group">
                            <label>
                                <input type="checkbox" id="trackProfileActivity" ${user.activitySettings?.trackProfile !== false ? 'checked' : ''}>
                                Profil-√Ñnderungen verfolgen
                            </label>
                        </div>
                        <div class="setting-actions">
                            <button onclick="window.qhseDashboard.saveActivitySettings('${userId}')" class="btn-primary">
                                <i class="fas fa-save"></i> Einstellungen speichern
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        modal.querySelector('.modal-footer').innerHTML = `
            <button onclick="window.qhseDashboard.closeSubModal('activityEditor')" class="btn-secondary">
                Schlie√üen
            </button>
        `;

        modal.style.display = 'block';
    }

    saveActivitySettings(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        if (!user.activitySettings) {
            user.activitySettings = {};
        }

        user.activitySettings.trackDocuments = document.getElementById('trackDocumentActivity').checked;
        user.activitySettings.trackProfile = document.getElementById('trackProfileActivity').checked;

        this.saveUsersToStorage();
        alert('Aktivit√§ts-Einstellungen gespeichert!');
    }

    // Visibility Editor
    openVisibilityEditor(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;
        
        const visibility = user.profileVisibility || {
            name: true,
            department: true,
            position: true,
            phone: false,
            email: false,
            responsibilities: true,
            qualifications: true
        };
        
        const modal = this.createSubModal('visibilityEditor', 'Profilsichtbarkeit verwalten');
        modal.querySelector('.modal-body').innerHTML = `
            <div class="visibility-editor">
                <div class="visibility-preview">
                    <h4><i class="fas fa-eye"></i> Sichtbarkeits-Vorschau</h4>
                    <p class="section-description">So sehen andere Benutzer Ihr Profil</p>
                    
                    <div class="preview-profile">
                        <div class="preview-header">
                            <h5>${user.displayName}</h5>
                            <p class="preview-role">${this.getRoleDisplayName(user.role)}</p>
                        </div>
                        <div class="preview-fields" id="visibilityPreview">
                            ${this.renderVisibilityPreview(user, visibility)}
                        </div>
                    </div>
                </div>

                <div class="visibility-controls">
                    <h4><i class="fas fa-sliders-h"></i> Sichtbarkeits-Einstellungen</h4>
                    <div class="visibility-options">
                        ${Object.entries(visibility).map(([field, visible]) => `
                            <div class="visibility-option">
                                <label class="toggle-label">
                                    <input type="checkbox" id="visibility_${field}" ${visible ? 'checked' : ''} 
                                           onchange="window.qhseDashboard.updateVisibilityPreview()">
                                    <span class="toggle-switch"></span>
                                    <div class="option-info">
                                        <h5>${this.getFieldDisplayName(field)}</h5>
                                        <p class="field-description">${this.getFieldDescription(field)}</p>
                                    </div>
                                </label>
                            </div>
                        `).join('')}
                    </div>
                </div>

                <div class="gdpr-notice">
                    <i class="fas fa-balance-scale"></i>
                    <p><strong>DSGVO-Hinweis:</strong> Sie k√∂nnen Ihre Sichtbarkeitseinstellungen jederzeit √§ndern.</p>
                </div>
            </div>
        `;

        modal.querySelector('.modal-footer').innerHTML = `
            <button onclick="window.qhseDashboard.saveVisibilitySettings('${userId}')" class="btn-primary">
                <i class="fas fa-save"></i> Einstellungen speichern
            </button>
            <button onclick="window.qhseDashboard.closeSubModal('visibilityEditor')" class="btn-secondary">
                Schlie√üen
            </button>
        `;

        modal.style.display = 'block';
    }

    renderVisibilityPreview(user, visibility) {
        return `
            ${visibility.name ? `<div class="preview-field"><strong>Name:</strong> ${user.displayName}</div>` : ''}
            ${visibility.department ? `<div class="preview-field"><strong>Abteilung:</strong> ${user.department || 'Nicht angegeben'}</div>` : ''}
            ${visibility.position ? `<div class="preview-field"><strong>Position:</strong> ${user.position || 'Nicht angegeben'}</div>` : ''}
            ${visibility.phone ? `<div class="preview-field"><strong>Telefon:</strong> ${user.phone || 'Nicht angegeben'}</div>` : ''}
            ${visibility.email ? `<div class="preview-field"><strong>E-Mail:</strong> ${user.email || 'Nicht angegeben'}</div>` : ''}
            ${visibility.responsibilities ? `<div class="preview-field"><strong>Verantwortlichkeiten:</strong> Sichtbar</div>` : ''}
            ${visibility.qualifications ? `<div class="preview-field"><strong>Qualifikationen:</strong> Sichtbar</div>` : ''}
        `;
    }

    updateVisibilityPreview() {
        const visibilityInputs = document.querySelectorAll('[id^="visibility_"]');
        const newVisibility = {};
        
        visibilityInputs.forEach(input => {
            const field = input.id.replace('visibility_', '');
            newVisibility[field] = input.checked;
        });

        const currentUser = this.getCurrentUser();
        const previewContainer = document.getElementById('visibilityPreview');
        if (previewContainer) {
            previewContainer.innerHTML = this.renderVisibilityPreview(currentUser, newVisibility);
        }
    }

    saveVisibilitySettings(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const visibilityInputs = document.querySelectorAll('[id^="visibility_"]');
        const newVisibility = {};
        
        visibilityInputs.forEach(input => {
            const field = input.id.replace('visibility_', '');
            newVisibility[field] = input.checked;
        });

        user.profileVisibility = newVisibility;
        this.saveUsersToStorage();
        
        alert('Sichtbarkeits-Einstellungen erfolgreich gespeichert!');
        this.closeSubModal('visibilityEditor');
    }

    // Helper methods for profile functionality
    getUserActivities(userId) {
        // Simple placeholder for now - in a real system this would come from a database
        const activities = [
            {
                id: '1',
                type: 'profile',
                title: 'Profil aktualisiert',
                description: 'Pers√∂nliche Daten wurden ge√§ndert',
                timestamp: Date.now() - 2*24*60*60*1000,
                details: 'Telefonnummer aktualisiert'
            },
            {
                id: '2',
                type: 'documents',
                title: 'Dokument hochgeladen',
                description: 'Neues Sicherheitsdokument hinzugef√ºgt',
                timestamp: Date.now() - 5*24*60*60*1000,
                details: 'Arbeitsschutz-Richtlinie.pdf'
            },
            {
                id: '3',
                type: 'qualifications',
                title: 'Qualifikation hinzugef√ºgt',
                description: 'Neue Schulung abgeschlossen',
                timestamp: Date.now() - 10*24*60*60*1000,
                details: 'Brandschutz-Schulung'
            }
        ];
        return activities;
    }

    getActivityIcon(type) {
        const icons = {
            'profile': 'fas fa-user',
            'documents': 'fas fa-file',
            'audits': 'fas fa-clipboard-check',
            'machines': 'fas fa-cogs',
            'substances': 'fas fa-flask',
            'qualifications': 'fas fa-certificate',
            'system': 'fas fa-computer'
        };
        return icons[type] || 'fas fa-info-circle';
    }

    getFieldDisplayName(field) {
        const fieldNames = {
            'name': 'Name',
            'department': 'Abteilung',
            'position': 'Position',
            'phone': 'Telefon',
            'email': 'E-Mail',
            'responsibilities': 'Verantwortlichkeiten',
            'qualifications': 'Qualifikationen'
        };
        return fieldNames[field] || field;
    }

    getFieldDescription(field) {
        const descriptions = {
            'name': 'Ihr vollst√§ndiger Name wird anderen Benutzern angezeigt',
            'department': 'Ihre Abteilungszugeh√∂rigkeit ist f√ºr andere sichtbar',
            'position': 'Ihre Berufsbezeichnung wird in der Benutzerliste angezeigt',
            'phone': 'Ihre Telefonnummer kann von anderen Benutzern eingesehen werden',
            'email': 'Ihre E-Mail-Adresse ist f√ºr andere Benutzer sichtbar',
            'responsibilities': 'Ihre Verantwortlichkeiten werden in Ihrem Profil angezeigt',
            'qualifications': 'Ihre Qualifikationen sind f√ºr andere Benutzer einsehbar'
        };
        return descriptions[field] || 'Beschreibung nicht verf√ºgbar';
    }

    getSectionDisplayName(section) {
        const sectionNames = {
            'dashboard': 'Dashboard',
            'arbeitsschutz': 'Arbeitsschutz',
            'qualitaet': 'Qualit√§t',
            'umwelt': 'Umwelt',
            'datenschutz': 'Datenschutz',
            'gesundheit': 'Gesundheit',
            'audits': 'Audits',
            'kundenzufriedenheit': 'Kundenzufriedenheit',
            'dokumente': 'Dokumentenverwaltung',
            'nutzerverwaltung': 'Nutzerverwaltung',
            'einstellungen': 'Einstellungen',
            'zeiterfassung': 'Zeiterfassung',
            'maschinen': 'Maschinenmanagement',
            'gefahrstoffe': 'Gefahrstoffverzeichnis'
        };
        return sectionNames[section] || section;
    }

    renderMachineResponsibilities(user) {
        const machines = this.machines || [];
        const userMachines = machines.filter(machine => machine.responsiblePerson === user.id);
        
        if (userMachines.length === 0) {
            return '<p class="no-data">Keine Maschinenverantwortlichkeiten zugewiesen.</p>';
        }

        return `
            <div class="responsibility-list">
                ${userMachines.slice(0, 3).map(machine => `
                    <div class="responsibility-item-compact">
                        <span class="item-name">${machine.name}</span>
                        <span class="item-status status-badge ${machine.status}">${machine.status || 'Unbekannt'}</span>
                    </div>
                `).join('')}
                ${userMachines.length > 3 ? `<p class="more-items">und ${userMachines.length - 3} weitere...</p>` : ''}
            </div>
        `;
    }

    renderHazardousSubstanceResponsibilities(user) {
        const substances = this.hazardousSubstances || [];
        const userSubstances = substances.filter(substance => substance.responsiblePerson === user.id);
        
        if (userSubstances.length === 0) {
            return '<p class="no-data">Keine Gefahrstoff-Verantwortlichkeiten zugewiesen.</p>';
        }

        return `
            <div class="responsibility-list">
                ${userSubstances.slice(0, 3).map(substance => `
                    <div class="responsibility-item-compact">
                        <span class="item-name">${substance.name}</span>
                        <span class="item-hazard">${substance.hazardClass || 'Unbekannt'}</span>
                    </div>
                `).join('')}
                ${userSubstances.length > 3 ? `<p class="more-items">und ${userSubstances.length - 3} weitere...</p>` : ''}
            </div>
        `;
    }

    renderAuditResponsibilities(user) {
        const assignedAudits = user.assignedAudits || [];
        
        if (assignedAudits.length === 0) {
            return '<p class="no-data">Keine Audit-Verantwortlichkeiten zugewiesen.</p>';
        }

        return `
            <div class="responsibility-list">
                ${assignedAudits.slice(0, 3).map(audit => `
                    <div class="responsibility-item-compact">
                        <span class="item-name">${audit.title}</span>
                        <span class="item-status status-badge ${audit.status}">${audit.status || 'Offen'}</span>
                    </div>
                `).join('')}
                ${assignedAudits.length > 3 ? `<p class="more-items">und ${assignedAudits.length - 3} weitere...</p>` : ''}
            </div>
        `;
    }

    renderStaffResponsibilities(user) {
        const subordinates = this.users.filter(u => u.supervisor === user.id);
        
        if (subordinates.length === 0) {
            return '<p class="no-data">Keine Mitarbeiter unter Ihrer Aufsicht.</p>';
        }

        return `
            <div class="responsibility-list">
                ${subordinates.slice(0, 3).map(subordinate => `
                    <div class="responsibility-item-compact">
                        <span class="item-name">${subordinate.displayName}</span>
                        <span class="item-role">${this.getRoleDisplayName(subordinate.role)}</span>
                    </div>
                `).join('')}
                ${subordinates.length > 3 ? `<p class="more-items">und ${subordinates.length - 3} weitere...</p>` : ''}
            </div>
        `;
    }

    renderRolesTab(user, editMode) {
        const roleDefinition = this.roleDefinitions[user.role];
        const allowedSections = roleDefinition ? roleDefinition.allowedSections || [] : [];
        
        return `
            <div class="tab-content-header">
                <h3><i class="fas fa-key"></i> Rollen & Berechtigungen</h3>
                <button class="btn-primary tab-edit-btn" onclick="window.qhseDashboard.openRolesEditor('${user.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
            </div>
            
            <div class="roles-display">
                <div class="current-role">
                    <div class="role-card">
                        <h4><i class="fas fa-user-tag"></i> Aktuelle Systemrolle</h4>
                        <div class="role-info">
                            <h5>${this.getRoleDisplayName(user.role)}</h5>
                            <p><strong>Systemrolle:</strong> <code>${user.role}</code></p>
                            <p><strong>Aktiv seit:</strong> ${user.createdAt ? new Date(user.createdAt).toLocaleDateString('de-DE') : 'Unbekannt'}</p>
                            <p><strong>Status:</strong> <span class="status-badge ${user.isActive ? 'valid' : 'inactive'}">${user.isActive ? 'Aktiv' : 'Inaktiv'}</span></p>
                        </div>
                    </div>
                </div>
                
                <div class="permissions-overview">
                    <h4><i class="fas fa-key"></i> Standard-Berechtigungen</h4>
                    <div class="permissions-grid">
                        ${allowedSections.map(section => `
                            <div class="permission-item granted">
                                <i class="fas fa-check-circle"></i>
                                <span>${this.getSectionDisplayName(section)}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>

                ${user.permissions ? `
                    <div class="special-permissions">
                        <h4><i class="fas fa-star"></i> Spezielle Modulberechtigungen</h4>
                        <div class="permissions-grid">
                            ${Object.entries(user.permissions).map(([module, hasAccess]) => `
                                <div class="permission-item ${hasAccess ? 'granted' : 'denied'}">
                                    <i class="fas ${hasAccess ? 'fa-check-circle' : 'fa-times-circle'}"></i>
                                    <span>${module}: ${hasAccess ? 'Erlaubt' : 'Verweigert'}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    }

    renderQualificationsTab(user, editMode) {
        const qualifications = user.qualifications || [];
        
        return `
            <div class="tab-content-header">
                <h3><i class="fas fa-certificate"></i> Qualifikationen & Schulungen</h3>
                <button class="btn-primary tab-edit-btn" onclick="window.qhseDashboard.openQualificationsEditor('${user.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
            </div>
            
            <div class="qualifications-display">
                ${qualifications.length === 0 ? 
                    '<p class="no-data">Keine Qualifikationen erfasst.</p>' :
                    `<div class="qualifications-list">
                        ${qualifications.map((qual, index) => {
                            const isExpired = qual.expiryDate && new Date(qual.expiryDate) < new Date();
                            const daysUntilExpiry = qual.expiryDate ? Math.ceil((new Date(qual.expiryDate) - new Date()) / (1000 * 60 * 60 * 24)) : null;
                            const isExpiringSoon = daysUntilExpiry !== null && daysUntilExpiry <= 30 && daysUntilExpiry > 0;
                            
                            return `
                                <div class="qualification-item ${isExpired ? 'expired' : isExpiringSoon ? 'expiring-soon' : ''}">
                                    <div class="qual-header">
                                        <h5>${qual.title}</h5>
                                        <div class="qual-status">
                                            ${isExpired ? '<span class="status-badge expired">Abgelaufen</span>' : 
                                              isExpiringSoon ? '<span class="status-badge expiring">L√§uft bald ab</span>' : 
                                              '<span class="status-badge valid">G√ºltig</span>'}
                                        </div>
                                    </div>
                                    <div class="qual-details">
                                        <div class="qual-info">
                                            <p><strong>Erhalten am:</strong> ${qual.date ? new Date(qual.date).toLocaleDateString('de-DE') : 'Nicht angegeben'}</p>
                                            ${qual.expiryDate ? `<p><strong>G√ºltig bis:</strong> ${new Date(qual.expiryDate).toLocaleDateString('de-DE')}</p>` : ''}
                                            ${qual.institution ? `<p><strong>Institution:</strong> ${qual.institution}</p>` : ''}
                                            ${qual.description ? `<p><strong>Beschreibung:</strong> ${qual.description}</p>` : ''}
                                        </div>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>`
                }
            </div>
        `;
    }

    openQualificationsEditor(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const qualifications = user.qualifications || [];
        
        const modal = this.createSubModal('qualificationsEditor', 'Qualifikationen & Schulungen verwalten');
        modal.querySelector('.modal-body').innerHTML = `
            <div class="qualifications-editor">
                <div class="editor-header">
                    <h4>Vorhandene Qualifikationen</h4>
                    <button onclick="window.qhseDashboard.showAddQualificationForm()" class="btn-primary">
                        <i class="fas fa-plus"></i> Neue Qualifikation hinzuf√ºgen
                    </button>
                </div>
                
                <div class="qualifications-list" id="editQualificationsList">
                    ${qualifications.map((qual, index) => `
                        <div class="qualification-edit-item" data-index="${index}">
                            <div class="qual-content">
                                <h5>${qual.title}</h5>
                                <div class="qual-meta">
                                    <span>Erhalten: ${qual.date ? new Date(qual.date).toLocaleDateString('de-DE') : 'Unbekannt'}</span>
                                    ${qual.expiryDate ? `<span>G√ºltig bis: ${new Date(qual.expiryDate).toLocaleDateString('de-DE')}</span>` : ''}
                                    ${qual.institution ? `<span>Institution: ${qual.institution}</span>` : ''}
                                </div>
                            </div>
                            <div class="qual-actions">
                                <button onclick="window.qhseDashboard.editQualification(${index})" class="btn-small btn-secondary">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button onclick="window.qhseDashboard.deleteQualification(${index})" class="btn-small btn-danger">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                <div id="qualificationForm" style="display: none;">
                    <h4 id="qualFormTitle">Neue Qualifikation</h4>
                    <div class="form-grid">
                        <div class="form-row">
                            <div class="form-group">
                                <label>Titel/Bezeichnung *</label>
                                <input type="text" id="qual_title" required placeholder="z.B. Gabelstaplerf√ºhrerschein">
                            </div>
                            <div class="form-group">
                                <label>Institution/Anbieter</label>
                                <input type="text" id="qual_institution" placeholder="z.B. T√úV Nord">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Datum erhalten</label>
                                <input type="date" id="qual_date">
                            </div>
                            <div class="form-group">
                                <label>G√ºltig bis (optional)</label>
                                <input type="date" id="qual_expiry">
                            </div>
                        </div>
                        <div class="form-group full-width">
                            <label>Beschreibung/Notizen</label>
                            <textarea id="qual_description" rows="3" placeholder="Zus√§tzliche Informationen zur Qualifikation..."></textarea>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button onclick="window.qhseDashboard.saveQualification('${userId}')" class="btn-primary">
                            <i class="fas fa-save"></i> Speichern
                        </button>
                        <button onclick="window.qhseDashboard.cancelQualificationForm()" class="btn-secondary">
                            Abbrechen
                        </button>
                    </div>
                </div>
            </div>
        `;

        modal.querySelector('.modal-footer').innerHTML = `
            <button onclick="window.qhseDashboard.closeSubModal('qualificationsEditor')" class="btn-secondary">
                Schlie√üen
            </button>
        `;

        modal.style.display = 'block';
    }

    showAddQualificationForm() {
        document.getElementById('qualFormTitle').textContent = 'Neue Qualifikation hinzuf√ºgen';
        document.getElementById('qualificationForm').style.display = 'block';
        document.getElementById('qual_title').value = '';
        document.getElementById('qual_institution').value = '';
        document.getElementById('qual_date').value = '';
        document.getElementById('qual_expiry').value = '';
        document.getElementById('qual_description').value = '';
        
        // Store that we're adding a new qualification
        window.currentQualificationIndex = -1;
    }

    editQualification(index) {
        const currentUser = this.getCurrentUser();
        const qualification = currentUser.qualifications[index];
        
        document.getElementById('qualFormTitle').textContent = 'Qualifikation bearbeiten';
        document.getElementById('qualificationForm').style.display = 'block';
        document.getElementById('qual_title').value = qualification.title || '';
        document.getElementById('qual_institution').value = qualification.institution || '';
        document.getElementById('qual_date').value = qualification.date || '';
        document.getElementById('qual_expiry').value = qualification.expiryDate || '';
        document.getElementById('qual_description').value = qualification.description || '';
        
        // Store the index we're editing
        window.currentQualificationIndex = index;
    }

    saveQualification(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;

        const title = document.getElementById('qual_title').value.trim();
        if (!title) {
            alert('Bitte geben Sie einen Titel f√ºr die Qualifikation ein.');
            return;
        }

        const qualification = {
            title: title,
            institution: document.getElementById('qual_institution').value.trim(),
            date: document.getElementById('qual_date').value,
            expiryDate: document.getElementById('qual_expiry').value,
            description: document.getElementById('qual_description').value.trim(),
            addedAt: new Date().toISOString()
        };

        if (!user.qualifications) {
            user.qualifications = [];
        }

        if (window.currentQualificationIndex === -1) {
            // Adding new qualification
            user.qualifications.push(qualification);
        } else {
            // Editing existing qualification
            user.qualifications[window.currentQualificationIndex] = qualification;
        }

        this.saveUsersToStorage();
        this.cancelQualificationForm();
        
        // Refresh the qualifications list
        this.openQualificationsEditor(userId);
        
        alert('Qualifikation erfolgreich gespeichert!');
    }

    deleteQualification(index) {
        if (!confirm('M√∂chten Sie diese Qualifikation wirklich l√∂schen?')) return;
        
        const currentUser = this.getCurrentUser();
        currentUser.qualifications.splice(index, 1);
        
        this.saveUsersToStorage();
        
        // Refresh the qualifications list
        this.openQualificationsEditor(currentUser.id);
    }

    cancelQualificationForm() {
        document.getElementById('qualificationForm').style.display = 'none';
        window.currentQualificationIndex = null;
    }

    renderResponsibilitiesTab(user, editMode) {
        return `
            <div class="tab-content-header">
                <h3><i class="fas fa-tasks"></i> Verantwortlichkeiten</h3>
                <button class="btn-primary tab-edit-btn" onclick="window.qhseDashboard.openResponsibilitiesEditor('${user.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
            </div>
            
            <div class="responsibilities-display">
                <div class="responsibility-categories">
                    <div class="resp-category">
                        <div class="resp-header">
                            <h4><i class="fas fa-cogs"></i> Maschinen & Anlagen</h4>
                            <span class="resp-count">${this.getMachineResponsibilitiesCount(user)} Maschinen</span>
                        </div>
                        <div class="resp-content">
                            ${this.renderMachineResponsibilities(user)}
                        </div>
                    </div>
                    
                    <div class="resp-category">
                        <div class="resp-header">
                            <h4><i class="fas fa-flask"></i> Gefahrstoffe</h4>
                            <span class="resp-count">${this.getSubstanceResponsibilitiesCount(user)} Stoffe</span>
                        </div>
                        <div class="resp-content">
                            ${this.renderHazardousSubstanceResponsibilities(user)}
                        </div>
                    </div>
                    
                    <div class="resp-category">
                        <div class="resp-header">
                            <h4><i class="fas fa-clipboard-check"></i> Pr√ºfungen & Audits</h4>
                            <span class="resp-count">${this.getAuditResponsibilitiesCount(user)} Pr√ºfungen</span>
                        </div>
                        <div class="resp-content">
                            ${this.renderAuditResponsibilities(user)}
                        </div>
                    </div>
                    
                    <div class="resp-category">
                        <div class="resp-header">
                            <h4><i class="fas fa-users"></i> Mitarbeiterverantwortung</h4>
                            <span class="resp-count">${this.getStaffResponsibilitiesCount(user)} Mitarbeiter</span>
                        </div>
                        <div class="resp-content">
                            ${this.renderStaffResponsibilities(user)}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    renderActivityTab(user, editMode) {
        const activities = this.getUserActivities(user.id);
        
        return `
            <div class="tab-content-header">
                <h3><i class="fas fa-history"></i> Aktivit√§tsverlauf</h3>
                <button class="btn-primary tab-edit-btn" onclick="window.qhseDashboard.openActivityEditor('${user.id}')">
                    <i class="fas fa-edit"></i> Verwalten
                </button>
            </div>
            
            <div class="activity-display">
                <div class="activity-stats">
                    <div class="stat-card">
                        <h4>${activities.length}</h4>
                        <p>Gesamt-Aktivit√§ten</p>
                    </div>
                    <div class="stat-card">
                        <h4>${activities.filter(a => a.timestamp > Date.now() - 7*24*60*60*1000).length}</h4>
                        <p>Diese Woche</p>
                    </div>
                    <div class="stat-card">
                        <h4>${activities.filter(a => a.timestamp > Date.now() - 30*24*60*60*1000).length}</h4>
                        <p>Letzten 30 Tage</p>
                    </div>
                </div>
                
                <div class="activity-filters">
                    <select id="activityFilter" onchange="window.qhseDashboard.filterActivities(this.value)">
                        <option value="all">Alle Aktivit√§ten</option>
                        <option value="documents">Dokumente</option>
                        <option value="audits">Pr√ºfungen</option>
                        <option value="machines">Maschinen</option>
                        <option value="substances">Gefahrstoffe</option>
                        <option value="profile">Profil-√Ñnderungen</option>
                    </select>
                </div>
                
                ${activities.length === 0 ? 
                    '<p class="no-data">Keine Aktivit√§ten erfasst.</p>' :
                    `<div class="activity-timeline" id="activityTimeline">
                        ${activities.slice(0, 20).map(activity => `
                            <div class="activity-item" data-type="${activity.type}">
                                <div class="activity-icon">
                                    <i class="${this.getActivityIcon(activity.type)}"></i>
                                </div>
                                <div class="activity-content">
                                    <div class="activity-header">
                                        <span class="activity-title">${activity.title}</span>
                                        <span class="activity-date">${new Date(activity.timestamp).toLocaleString('de-DE')}</span>
                                    </div>
                                    <p class="activity-description">${activity.description}</p>
                                    ${activity.details ? `<div class="activity-details">${activity.details}</div>` : ''}
                                </div>
                            </div>
                        `).join('')}
                    </div>`
                }
                
                ${activities.length > 20 ? `
                    <div class="activity-pagination">
                        <button onclick="window.qhseDashboard.loadMoreActivities('${user.id}')" class="btn-secondary">
                            Weitere Aktivit√§ten laden (${activities.length - 20} verbleibend)
                        </button>
                    </div>
                ` : ''}
            </div>
        `;
    }

    renderVisibilityTab(user, editMode) {
        const visibility = user.profileVisibility || {
            name: true,
            department: true,
            position: true,
            phone: false,
            email: false,
            responsibilities: true,
            qualifications: true
        };
        
        return `
            <div class="tab-content-header">
                <h3><i class="fas fa-eye"></i> Profilsichtbarkeit</h3>
                <button class="btn-primary tab-edit-btn" onclick="window.qhseDashboard.openVisibilityEditor('${user.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
            </div>
            
            <div class="visibility-display">
                <div class="visibility-preview">
                    <h4>Aktuelle Sichtbarkeitseinstellungen</h4>
                    <p class="section-description">Diese Einstellungen bestimmen, welche Informationen andere Benutzer in Ihrem √∂ffentlichen Profil sehen k√∂nnen.</p>
                    
                    <div class="visibility-grid">
                        ${Object.entries(visibility).map(([field, visible]) => `
                            <div class="visibility-item ${visible ? 'visible' : 'hidden'}">
                                <div class="visibility-icon">
                                    <i class="fas ${visible ? 'fa-eye' : 'fa-eye-slash'}"></i>
                                </div>
                                <div class="visibility-content">
                                    <h5>${this.getFieldDisplayName(field)}</h5>
                                    <p class="visibility-status ${visible ? 'visible' : 'hidden'}">
                                        ${visible ? 'F√ºr andere Benutzer sichtbar' : 'Vor anderen Benutzern verborgen'}
                                    </p>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <div class="privacy-note">
                    <i class="fas fa-info-circle"></i>
                    <p><strong>Hinweis:</strong> Administratoren k√∂nnen immer alle Profilinformationen einsehen. Diese Einstellungen gelten nur f√ºr andere Benutzer und die √∂ffentliche Profilansicht.</p>
                </div>
            </div>
        `;
    }

    // Helper methods for user profiles
    setupProfileTabs() {
        setTimeout(() => {
            const modal = document.getElementById('userProfileModal');
            if (!modal) return;
            
            const tabBtns = modal.querySelectorAll('.tab-btn');
            const tabPanes = modal.querySelectorAll('.tab-pane');
            
            console.log(`Setting up ${tabBtns.length} profile tabs`);
            
            tabBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const targetTab = btn.dataset.tab;
                    
                    console.log(`Switching to tab: ${targetTab}`);
                    
                    // Remove active class from all tabs and panes
                    tabBtns.forEach(b => b.classList.remove('active'));
                    tabPanes.forEach(p => p.classList.remove('active'));
                    
                    // Add active class to clicked tab and corresponding pane
                    btn.classList.add('active');
                    const targetPane = modal.querySelector(`#tab-${targetTab}`);
                    if (targetPane) {
                        targetPane.classList.add('active');
                    } else {
                        console.error(`Tab pane not found: tab-${targetTab}`);
                    }
                });
            });
        }, 200);
    }

    saveUserProfile() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) {
            alert('Benutzer nicht gefunden.');
            return;
        }

        // Collect personal info
        const updatedUser = {
            ...currentUser,
            displayName: document.getElementById('profile_displayName').value,
            email: document.getElementById('profile_email').value,
            phone: document.getElementById('profile_phone').value,
            mobile: document.getElementById('profile_mobile').value,
            birthdate: document.getElementById('profile_birthdate').value,
            department: document.getElementById('profile_department').value,
            position: document.getElementById('profile_position').value,
            startDate: document.getElementById('profile_startDate').value,
            emergencyContact: document.getElementById('profile_emergencyContact').value,
            address: document.getElementById('profile_address').value,
            notes: document.getElementById('profile_notes').value
        };

        // Collect visibility settings
        const visibilityFields = ['name', 'department', 'position', 'phone', 'email', 'responsibilities', 'qualifications'];
        updatedUser.profileVisibility = {};
        visibilityFields.forEach(field => {
            const checkbox = document.getElementById(`visibility_${field}`);
            if (checkbox) {
                updatedUser.profileVisibility[field] = checkbox.checked;
            }
        });

        // Update user in array
        const userIndex = this.users.findIndex(u => u.id === currentUser.id);
        if (userIndex !== -1) {
            this.users[userIndex] = updatedUser;
            this.saveUsersToStorage();
            
            // Update current user if it's the same user
            if (this.currentUserId === currentUser.id) {
                this.updateUIForUser();
            }
            
            alert('Profil erfolgreich gespeichert!');
            document.getElementById('userProfileModal').style.display = 'none';
        } else {
            alert('Fehler beim Speichern des Profils.');
        }
    }

    getSectionDisplayName(section) {
        const sectionNames = {
            'dashboard': 'Dashboard',
            'sicherheitsecke': 'Sicherheitsecke',
            'arbeitsanweisungen': 'Arbeitsanweisungen',
            'verfahrensanweisungen': 'Verfahrensanweisungen',
            'audits': 'Auditauswertungen',
            'kundenzufriedenheit': 'Kundenzufriedenheit',
            'dokumente': 'Dokumente verwalten',
            'nutzerverwaltung': 'Nutzerverwaltung',
            'bereichsverwaltung': 'Bereichsverwaltung',
            'abteilungsverwaltung': 'Abteilungsverwaltung',
            'zeiterfassung': 'Zeiterfassung',
            'zeitauswertung': 'Zeitauswertung',
            'maschinen': 'Maschinen',
            'wartungsplanung': 'Wartungsplanung',
            'stoerungen': 'St√∂rungen',
            'instandhaltung-auswertung': 'Instandhaltung Auswertung',
            'gefahrstoffe': 'Gefahrstoffe',
            'audit-tauschboerse': 'Audit-Tauschb√∂rse',
            'auditor-verwaltung': 'Auditor-Verwaltung',
            'einstellungen': 'Einstellungen'
        };
        return sectionNames[section] || section;
    }

    getFieldDisplayName(field) {
        const fieldNames = {
            'name': 'Name',
            'department': 'Abteilung',
            'position': 'Position',
            'phone': 'Telefon',
            'email': 'E-Mail',
            'responsibilities': 'Verantwortlichkeiten',
            'qualifications': 'Qualifikationen'
        };
        return fieldNames[field] || field;
    }

    getFieldDescription(field) {
        const descriptions = {
            'name': 'Ihr vollst√§ndiger Name',
            'department': 'Ihre Abteilungszugeh√∂rigkeit',
            'position': 'Ihr Jobtitel/Position',
            'phone': 'Ihre Telefonnummer',
            'email': 'Ihre E-Mail-Adresse',
            'responsibilities': 'Ihre Verantwortlichkeiten f√ºr Maschinen, Gefahrstoffe etc.',
            'qualifications': 'Ihre Qualifikationen und Schulungen'
        };
        return descriptions[field] || '';
    }

    renderMachineResponsibilities(user) {
        const machines = this.machines || [];
        const userMachines = machines.filter(m => m.responsibleUser === user.id);
        
        if (userMachines.length === 0) {
            return '<p class="no-data">Keine Maschinenverantwortlichkeiten</p>';
        }
        
        return `
            <div class="responsibility-list">
                ${userMachines.map(machine => `
                    <div class="responsibility-item">
                        <i class="fas fa-cog"></i>
                        <span class="item-name">${machine.name}</span>
                        <span class="item-status status-${machine.status}">${machine.status}</span>
                    </div>
                `).join('')}
            </div>
        `;
    }

    renderHazardousSubstanceResponsibilities(user) {
        const substances = this.hazardousSubstances || [];
        const userSubstances = substances.filter(s => s.responsibleUser === user.id);
        
        if (userSubstances.length === 0) {
            return '<p class="no-data">Keine Gefahrstoffverantwortlichkeiten</p>';
        }
        
        return `
            <div class="responsibility-list">
                ${userSubstances.map(substance => `
                    <div class="responsibility-item">
                        <i class="fas fa-flask"></i>
                        <span class="item-name">${substance.name}</span>
                        <span class="item-info">${substance.classification}</span>
                    </div>
                `).join('')}
            </div>
        `;
    }

    renderAuditResponsibilities(user) {
        // This would integrate with audit system when available
        return '<p class="no-data">Pr√ºfungsverantwortlichkeiten werden geladen...</p>';
    }

    renderStaffResponsibilities(user) {
        const subordinates = this.users.filter(u => u.supervisor === user.id);
        
        if (subordinates.length === 0) {
            return '<p class="no-data">Keine Mitarbeiterverantwortung</p>';
        }
        
        return `
            <div class="responsibility-list">
                ${subordinates.map(subordinate => `
                    <div class="responsibility-item">
                        <i class="fas fa-user"></i>
                        <span class="item-name">${subordinate.displayName}</span>
                        <span class="item-info">${subordinate.role}</span>
                    </div>
                `).join('')}
            </div>
        `;
    }

    getUserActivities(userId) {
        // This would be expanded to collect activities from various system modules
        const activities = [];
        
        // Example activities - this would be replaced with real activity tracking
        const now = new Date();
        
        activities.push({
            type: 'profile',
            title: 'Profil aktualisiert',
            description: 'Pers√∂nliche Daten wurden bearbeitet',
            timestamp: now.toISOString(),
            details: null
        });
        
        return activities.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    }

    getActivityIcon(type) {
        const icons = {
            'profile': 'fas fa-user-edit',
            'document': 'fas fa-file',
            'audit': 'fas fa-clipboard-check',
            'machine': 'fas fa-cog',
            'substance': 'fas fa-flask',
            'login': 'fas fa-sign-in-alt',
            'logout': 'fas fa-sign-out-alt'
        };
        return icons[type] || 'fas fa-circle';
    }

    // Qualification management methods
    addQualification() {
        document.getElementById('qualificationForm').style.display = 'block';
    }

    saveQualification() {
        const title = document.getElementById('qual_title').value;
        const institution = document.getElementById('qual_institution').value;
        const date = document.getElementById('qual_date').value;
        const expiry = document.getElementById('qual_expiry').value;
        const description = document.getElementById('qual_description').value;
        
        if (!title) {
            alert('Bitte geben Sie einen Titel ein.');
            return;
        }
        
        const currentUser = this.getCurrentUser();
        if (!currentUser.qualifications) {
            currentUser.qualifications = [];
        }
        
        currentUser.qualifications.push({
            title,
            institution,
            date,
            expiryDate: expiry,
            description,
            addedAt: new Date().toISOString()
        });
        
        const userIndex = this.users.findIndex(u => u.id === currentUser.id);
        if (userIndex !== -1) {
            this.users[userIndex] = currentUser;
            this.saveUsersToStorage();
            this.renderUserProfileModal(currentUser, true);
        }
    }

    cancelQualification() {
        document.getElementById('qualificationForm').style.display = 'none';
        // Clear form
        document.getElementById('qual_title').value = '';
        document.getElementById('qual_institution').value = '';
        document.getElementById('qual_date').value = '';
        document.getElementById('qual_expiry').value = '';
        document.getElementById('qual_description').value = '';
    }

    removeQualification(index) {
        if (!confirm('M√∂chten Sie diese Qualifikation wirklich entfernen?')) {
            return;
        }
        
        const currentUser = this.getCurrentUser();
        if (currentUser.qualifications && currentUser.qualifications[index]) {
            currentUser.qualifications.splice(index, 1);
            
            const userIndex = this.users.findIndex(u => u.id === currentUser.id);
            if (userIndex !== -1) {
                this.users[userIndex] = currentUser;
                this.saveUsersToStorage();
                this.renderUserProfileModal(currentUser, true);
            }
        }
    }

    // Additional Profile Setup Methods
    setupProfilePictureUpload() {
        // Profile picture upload functionality would be implemented here
        // This is a placeholder for future implementation
    }

    setupQualificationsManagement() {
        // Additional qualification management setup would be implemented here
        // This is a placeholder for future implementation
    }

    setupResponsibilitiesManagement() {
        // Additional responsibility management setup would be implemented here
        // This is a placeholder for future implementation
    }

    setupActivityLog() {
        // Activity logging setup would be implemented here
        // This is a placeholder for future implementation
    }

    setupPublicProfileSearch() {
        // Public profile search functionality would be implemented here
        // This is a placeholder for future implementation
    }

    loadMoreActivities(userId) {
        // Load more activities functionality would be implemented here
        alert('Weitere Aktivit√§ten laden - Feature wird implementiert...');
    }

    // User Selection Management
    setupUserSelection() {
        const userSelect = document.getElementById('userSelect');
        const userRole = document.getElementById('userRole');
        const userName = document.getElementById('userName');

        if (!userSelect || !userRole || !userName) {
            console.error('User selection elements not found in DOM');
            return;
        }

        // Role definitions
        this.roleDefinitions = {
            'root-admin': {
                name: 'Root Administrator',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'verfahrensanweisungen', 'gefaehrdungsbeurteilung', 'audits', 'kundenzufriedenheit', 'dokumente', 'nutzerverwaltung', 'bereichsverwaltung', 'abteilungsverwaltung', 'zeiterfassung', 'zeitauswertung', 'maschinen', 'wartungsplanung', 'stoerungen', 'instandhaltung-auswertung', 'gefahrstoffe', 'schulungen', 'lieferanten', 'urlaubsplanung', 'einstellungen', 'mein-profil', 'audit-tauschboerse', 'auditor-verwaltung'],
                canManageUsers: true,
                canManageAreas: true,
                canManageDepartments: true,
                canViewAllTimeEntries: true
            },
            admin: {
                name: 'Administrator',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'verfahrensanweisungen', 'gefaehrdungsbeurteilung', 'audits', 'kundenzufriedenheit', 'dokumente', 'nutzerverwaltung', 'bereichsverwaltung', 'abteilungsverwaltung', 'zeiterfassung', 'zeitauswertung', 'maschinen', 'wartungsplanung', 'stoerungen', 'instandhaltung-auswertung', 'gefahrstoffe', 'schulungen', 'lieferanten', 'urlaubsplanung', 'mein-profil', 'audit-tauschboerse', 'auditor-verwaltung'],
                canManageUsers: true,
                canManageAreas: true,
                canManageDepartments: true,
                canViewAllTimeEntries: true
            },
            geschaeftsfuehrung: {
                name: 'Gesch√§ftsf√ºhrung',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'verfahrensanweisungen', 'gefaehrdungsbeurteilung', 'audits', 'kundenzufriedenheit', 'dokumente', 'zeiterfassung', 'maschinen', 'wartungsplanung', 'stoerungen', 'instandhaltung-auswertung', 'gefahrstoffe', 'schulungen', 'lieferanten', 'urlaubsplanung', 'mein-profil', 'audit-tauschboerse', 'auditor-verwaltung'],
                hierarchyLevel: 1,
                canSupervise: ['betriebsleiter', 'qhse']
            },
            betriebsleiter: {
                name: 'Betriebsleiter',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'verfahrensanweisungen', 'gefaehrdungsbeurteilung', 'audits', 'zeiterfassung', 'maschinen', 'wartungsplanung', 'stoerungen', 'instandhaltung-auswertung', 'gefahrstoffe', 'schulungen', 'lieferanten', 'urlaubsplanung', 'mein-profil', 'audit-tauschboerse', 'auditor-verwaltung'],
                hierarchyLevel: 2,
                canSupervise: ['abteilungsleiter'],
                mustHaveSupervisor: ['geschaeftsfuehrung']
            },
            abteilungsleiter: {
                name: 'Abteilungsleiter',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'verfahrensanweisungen', 'gefaehrdungsbeurteilung', 'audits', 'zeiterfassung', 'maschinen', 'wartungsplanung', 'stoerungen', 'gefahrstoffe', 'schulungen', 'lieferanten', 'urlaubsplanung', 'mein-profil', 'audit-tauschboerse', 'auditor-verwaltung'],
                hierarchyLevel: 3,
                canSupervise: ['mitarbeiter'],
                mustHaveSupervisor: ['betriebsleiter']
            },
            qhse: {
                name: 'QHSE-Mitarbeiter',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'verfahrensanweisungen', 'gefaehrdungsbeurteilung', 'audits', 'kundenzufriedenheit', 'dokumente', 'zeiterfassung', 'gefahrstoffe', 'schulungen', 'lieferanten', 'urlaubsplanung', 'mein-profil', 'audit-tauschboerse', 'auditor-verwaltung'],
                hierarchyLevel: 2,
                isStaffPosition: true,
                mustHaveSupervisor: ['geschaeftsfuehrung']
            },
            mitarbeiter: {
                name: 'Mitarbeiter',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'audits', 'zeiterfassung', 'gefahrstoffe', 'schulungen', 'urlaubsplanung', 'mein-profil'],
                hierarchyLevel: 4,
                mustHaveSupervisor: ['abteilungsleiter']
            },
            techniker: {
                name: 'Techniker',
                allowedSections: ['dashboard', 'sicherheitsecke', 'arbeitsanweisungen', 'audits', 'zeiterfassung', 'maschinen', 'wartungsplanung', 'stoerungen', 'instandhaltung-auswertung', 'gefahrstoffe', 'schulungen', 'urlaubsplanung', 'mein-profil'],
                hierarchyLevel: 4,
                canManageMachines: true,
                canReportIssues: true,
                mustHaveSupervisor: ['abteilungsleiter']
            }
        };

        userSelect.addEventListener('change', (e) => {
            const newUserId = e.target.value;
            if (newUserId && this.users.find(u => u.id === newUserId && u.isActive)) {
                this.currentUserId = newUserId;
                this.updateUIForUser();
            } else {
                console.error('Invalid user ID selected:', newUserId);
                // Reset to previous value
                userSelect.value = this.currentUserId;
            }
        });

        // Initialize with default user
        this.updateUIForUser();
    }

    updateUIForUser() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) {
            console.error('No current user found');
            return;
        }
        
        const roleDefinition = this.roleDefinitions[currentUser.role];
        const userRole = document.getElementById('userRole');
        const userName = document.getElementById('userName');
        
        if (userRole) {
            userRole.textContent = roleDefinition ? roleDefinition.name : currentUser.role;
        }
        if (userName) {
            userName.textContent = currentUser.displayName || currentUser.name || 'Unbekannter Benutzer';
        }
        
        // Update body data attribute for CSS styling
        document.body.setAttribute('data-role', currentUser.role);
        
        // Show/hide menu items based on user's role
        this.updateMenuVisibility();
        
        // Update document visibility for putzkraft
        this.updateDocumentVisibility();
        
        // Update document categories based on user's role
        this.populateDocumentCategories();
        
        // Update QHSE notes visibility
        this.updateQHSENotesVisibility();
        
        // Update safety corner content
        this.renderSafetyAnnouncements();
        this.renderSafetyPdfs();
        this.renderExistingAnnouncements();
        
        // Update audit content to show/hide delete buttons based on user role
        this.renderAuditContent();
        
        // Update dashboard KPIs and visibility
        this.updateElementVisibilityByRole();
        
        // Update user dropdown selection
        const userSelect = document.getElementById('userSelect');
        if (userSelect) {
            userSelect.value = this.currentUserId;
        }
    }

    updateMenuVisibility() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;
        
        const menuItems = document.querySelectorAll('.menu-item');
        const roleDefinition = this.roleDefinitions[currentUser.role];
        const allowedSections = roleDefinition ? roleDefinition.allowedSections || [] : [];
        
        // Add dynamic areas to allowed sections
        const dynamicAreaIds = this.areas.filter(area => 
            area.allowedRoles && area.allowedRoles.includes(currentUser.role)
        ).map(area => area.id);
        
        const allAllowedSections = [...allowedSections, ...dynamicAreaIds];
        
        // Get module settings
        const moduleSettings = this.loadModuleSettingsFromStorage();
        
        menuItems.forEach(item => {
            const section = item.getAttribute('data-section');
            let hasAccess = false;
            
            // Check access based on section type
            if (section === 'gefahrstoffe') {
                // Special handling for Gefahrstoffe module
                hasAccess = this.userHasGefahrstoffeAccess(currentUser, moduleSettings);
            } else {
                // Standard access check for other sections
                hasAccess = this.userHasAccessToSection(currentUser, section, allAllowedSections);
            }
            
            if (hasAccess) {
                item.classList.remove('hidden');
            } else {
                item.classList.add('hidden');
            }
        });
    }

    updateDocumentVisibility() {
        const documentItems = document.querySelectorAll('.document-item');
        
        if (this.currentRole === 'putzkraft') {
            documentItems.forEach(item => {
                if (!item.classList.contains('putzkraft-only')) {
                    item.style.display = 'none';
                } else {
                    item.style.display = 'flex';
                }
            });
        } else {
            documentItems.forEach(item => {
                item.style.display = 'flex';
            });
        }
    }

    // Navigation Management
    setupNavigation() {
        const menuItems = document.querySelectorAll('.menu-item');
        const sections = document.querySelectorAll('.content-section');
        const pageTitle = document.getElementById('pageTitle');

        menuItems.forEach(item => {
            item.addEventListener('click', () => {
                const targetSection = item.getAttribute('data-section');
                
                // Check if user has access to this section
                const currentUser = this.getCurrentUser();
                if (!currentUser) {
                    this.showAccessDenied();
                    return;
                }
                
                const roleDefinition = this.roleDefinitions[currentUser.role];
                const allowedSections = roleDefinition ? roleDefinition.allowedSections : [];
                
                // Add dynamic areas to allowed sections
                const dynamicAreaIds = this.areas.filter(area => 
                    area.allowedRoles.includes(currentUser.role)
                ).map(area => area.id);
                
                const allAllowedSections = [...allowedSections, ...dynamicAreaIds];
                
                // Check access permissions with special handling for Gefahrstoffe
                let hasAccess = false;
                if (targetSection === 'gefahrstoffe') {
                    const moduleSettings = this.loadModuleSettingsFromStorage();
                    hasAccess = this.userHasGefahrstoffeAccess(currentUser, moduleSettings);
                } else {
                    hasAccess = this.userHasAccessToSection(currentUser, targetSection, allAllowedSections);
                }
                
                if (!hasAccess) {
                    this.showAccessDenied();
                    return;
                }

                // Update active menu item
                menuItems.forEach(mi => mi.classList.remove('active'));
                item.classList.add('active');

                // Show target section
                sections.forEach(section => section.classList.remove('active'));
                const targetSectionElement = document.getElementById(targetSection + '-section');
                
                console.log('üîç Navigation debug:', {
                    targetSection,
                    elementId: targetSection + '-section',
                    elementFound: !!targetSectionElement,
                    elementClasses: targetSectionElement ? targetSectionElement.className : 'not found'
                });
                
                if (targetSectionElement) {
                    targetSectionElement.classList.add('active');
                    console.log('‚úÖ Section activated:', targetSection);
                    
                    // Special handling for specific sections
                    if (targetSection === 'gefahrstoffe') {
                        console.log('üß™ Gefahrstoffe section activated - re-initializing...');
                        setTimeout(() => {
                            this.setupHazardousSubstances();
                        }, 100);
                    }
                } else {
                    console.error('‚ùå Section element not found:', targetSection + '-section');
                }

                // Update page title
                const sectionTitles = {
                    dashboard: localStorage.getItem('qhse_dashboard_name') || 'Dashboard',
                    arbeitsschutz: 'Arbeitsschutz',
                    qualitaet: 'Qualit√§tsmanagement',
                    umwelt: 'Umweltmanagement',
                    datenschutz: 'Datenschutz',
                    gesundheit: 'Gesundheitsmanagement',
                    arbeitsanweisungen: 'Arbeitsanweisungen',
                    verfahrensanweisungen: 'Verfahrensanweisungen',
                    audits: 'Auditauswertungen',
                    kundenzufriedenheit: 'Kundenzufriedenheit',
                    dokumente: 'Dokumentenverwaltung',
                    nutzerverwaltung: 'Nutzerverwaltung',
                    bereichsverwaltung: 'Bereichsverwaltung',
                    abteilungsverwaltung: 'Abteilungsverwaltung',
                    zeiterfassung: 'Zeiterfassung',
                    zeitauswertung: 'Zeitauswertung',
                    maschinen: 'Maschinenmanagement',
                    wartungsplanung: 'Wartungsplanung',
                    stoerungen: 'St√∂rungsmeldungen',
                    'instandhaltung-auswertung': 'Instandhaltungs-Auswertung',
                    gefahrstoffe: 'Gefahrstoffverzeichnis',
                    schulungen: 'Schulungsmanagement',
                    lieferanten: 'Lieferantenbewertung',
                    urlaubsplanung: 'Urlaubsplanung & Abwesenheitsmanagement',
                    einstellungen: 'System-Einstellungen'
                };
                
                pageTitle.textContent = sectionTitles[targetSection] || (localStorage.getItem('qhse_dashboard_name') || 'Dashboard');
                this.currentSection = targetSection;
                
                // Section-specific initialization
                this.handleSectionChange(targetSection);
                
                // Section-specific initialization
                if (targetSection === 'einstellungen') {
                    this.populatePermissionUserDropdown();
                } else if (targetSection === 'mein-profil') {
                    // Show profile modal when navigating to profile section
                    setTimeout(() => this.showCurrentUserProfile(false), 100);
                } else if (targetSection === 'lieferanten') {
                    // Initialize supplier management when section is accessed
                    setTimeout(() => this.renderSupplierDashboard(), 100);
                }
            });
        });
    }

    handleSectionChange(targetSection) {
        console.log('üîÑ Section changed to:', targetSection);
        
        // Section-specific initialization
        switch(targetSection) {
            case 'urlaubsplanung':
                console.log('üèñÔ∏è Initializing vacation planning section...');
                // Force re-setup vacation management to ensure everything works
                setTimeout(() => {
                    // Reset initialization flag to force re-setup
                    this.vacationManagementInitialized = false;
                    this.setupVacationManagement();
                }, 100);
                break;
            case 'maschinen':
                // Ensure machine management works
                setTimeout(() => this.ensureMachineManagementWorks(), 100);
                break;
            // Add more cases as needed
        }
    }

    showAccessDenied() {
        alert('Zugriff verweigert. Sie haben keine Berechtigung f√ºr diesen Bereich.');
    }

    userHasAccessToSection(user, targetSection, baseSections) {
        // Check if user has access through role-based permissions
        if (baseSections.includes(targetSection)) {
            return true;
        }
        
        // Check for user-specific permissions
        if (user.permissions) {
            switch (targetSection) {
                case 'gefahrstoffe':
                    // For gefahrstoffe, use the new access logic (access denied when false)
                    return user.permissions.gefahrstoffe !== false;
                // Add more specific permission checks here for future modules
                default:
                    return false;
            }
        }
        
        return false;
    }
    
    userHasGefahrstoffeAccess(user, moduleSettings) {
        const userName = user.displayName || user.name || user.id;
        
        // First check if module is globally enabled
        if (!moduleSettings || moduleSettings.gefahrstoffe !== true) {
            console.log(`Gefahrstoffe module is globally disabled for user ${userName}`);
            return false;
        }
        
        // Admin users always have access
        if (user.role === 'admin' || user.role === 'root-admin') {
            return true;
        }
        
        // Check if user has been explicitly denied access
        if (user.permissions && user.permissions.gefahrstoffe === false) {
            console.log(`User ${userName} has been explicitly denied Gefahrstoffe access`);
            return false;
        }
        
        // DEFAULT: All users have access unless explicitly denied
        return true;
    }

    // File Upload Management
    setupFileUpload() {
        const uploadZone = document.querySelector('.upload-zone');
        const fileInput = document.getElementById('fileUpload');
        const uploadBtn = document.getElementById('uploadBtn');
        const categorySelect = document.getElementById('documentCategory');

        // Click to upload
        uploadZone.addEventListener('click', () => {
            fileInput.click();
        });

        // Drag and drop
        uploadZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadZone.style.borderColor = '#3b82f6';
            uploadZone.style.backgroundColor = 'rgba(59, 130, 246, 0.05)';
        });

        uploadZone.addEventListener('dragleave', () => {
            uploadZone.style.borderColor = '#cbd5e1';
            uploadZone.style.backgroundColor = 'transparent';
        });

        uploadZone.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadZone.style.borderColor = '#cbd5e1';
            uploadZone.style.backgroundColor = 'transparent';
            
            const files = e.dataTransfer.files;
            this.handleFileSelection(files);
        });

        // File input change
        fileInput.addEventListener('change', (e) => {
            this.handleFileSelection(e.target.files);
        });

        // Upload button
        uploadBtn.addEventListener('click', () => {
            this.uploadFiles();
        });
    }

    handleFileSelection(files) {
        if (files.length > 0) {
            const fileNames = Array.from(files).map(file => file.name).join(', ');
            document.querySelector('.upload-zone p').textContent = `Ausgew√§hlte Dateien: ${fileNames}`;
        }
    }

    uploadFiles() {
        const fileInput = document.getElementById('fileUpload');
        const categorySelect = document.getElementById('documentCategory');
        
        if (fileInput.files.length === 0) {
            alert('Bitte w√§hlen Sie Dateien zum Hochladen aus.');
            return;
        }
        
        if (!categorySelect.value) {
            alert('Bitte w√§hlen Sie eine Kategorie aus.');
            return;
        }

        const uploadBtn = document.getElementById('uploadBtn');
        uploadBtn.textContent = 'Wird hochgeladen...';
        uploadBtn.disabled = true;

        // Process each file
        Array.from(fileInput.files).forEach(file => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const currentUser = this.getCurrentUser();
                const existingDoc = this.documents.find(doc => doc.name === file.name && doc.category === categorySelect.value);
                
                if (existingDoc) {
                    // Create new revision
                    const newRevision = {
                        version: (existingDoc.revisions?.length || 0) + 1,
                        uploadDate: new Date().toISOString(),
                        uploadedBy: currentUser.displayName,
                        content: e.target.result,
                        size: file.size,
                        changes: 'Dokument aktualisiert'
                    };
                    
                    if (!existingDoc.revisions) existingDoc.revisions = [];
                    existingDoc.revisions.push(newRevision);
                    existingDoc.currentRevision = newRevision.version;
                    existingDoc.uploadDate = new Date().toISOString();
                    existingDoc.uploadedBy = currentUser.displayName;
                    existingDoc.content = e.target.result;
                    existingDoc.size = file.size;
                } else {
                    // Create new document
                    const document = {
                        id: Date.now() + Math.random(),
                        name: file.name,
                        category: categorySelect.value,
                        uploadDate: new Date().toISOString(),
                        size: file.size,
                        type: file.type,
                        content: e.target.result,
                        uploadedBy: currentUser.displayName,
                        currentRevision: 1,
                        revisions: [{
                            version: 1,
                            uploadDate: new Date().toISOString(),
                            uploadedBy: currentUser.displayName,
                            content: e.target.result,
                            size: file.size,
                            changes: 'Initialer Upload'
                        }]
                    };
                    
                    this.documents.push(document);
                }
                
                this.saveDocumentsToStorage();
            };
            reader.readAsDataURL(file);
        });

        setTimeout(() => {
            alert('Dateien erfolgreich hochgeladen!');
            uploadBtn.textContent = 'Hochladen';
            uploadBtn.disabled = false;
            
            // Reset form
            fileInput.value = '';
            categorySelect.value = '';
            document.querySelector('.upload-zone p').textContent = 'Dateien hier ablegen oder klicken zum Hochladen';
            
            // Re-render documents in sections
            this.renderDocumentsInSections();
        }, 1000);
    }

    // Search Functionality
    setupSearchFunctionality() {
        const searchInput = document.querySelector('.search-box input');
        const searchIcon = document.querySelector('.search-box i');
        
        if (!searchInput) return;

        // Add ID for better access
        searchInput.id = 'globalSearchInput';
        
        // Search on input with debouncing
        let searchTimeout;
        searchInput.addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            const searchTerm = e.target.value.trim();
            
            searchTimeout = setTimeout(() => {
                this.performSearch(searchTerm);
            }, 300);
        });

        // Search on Enter key
        searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                const searchTerm = e.target.value.trim();
                this.performSearch(searchTerm);
            }
        });

        // Clear search on Escape
        searchInput.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                e.target.value = '';
                this.clearSearch();
            }
        });

        // Visual feedback
        searchInput.addEventListener('focus', () => {
            searchInput.parentNode.classList.add('search-active');
        });

        searchInput.addEventListener('blur', () => {
            searchInput.parentNode.classList.remove('search-active');
        });
    }

    performSearch(searchTerm) {
        // Clear previous search results
        this.clearSearch();

        if (!searchTerm || searchTerm.length < 2) {
            this.hideSearchResults();
            return;
        }

        console.log('Searching for:', searchTerm);
        
        const results = this.searchAllContent(searchTerm.toLowerCase());
        this.displaySearchResults(results, searchTerm);
    }

    searchAllContent(searchTerm) {
        const results = [];

        // Search in documents
        this.documents.forEach(doc => {
            if (doc.name.toLowerCase().includes(searchTerm) || 
                doc.category.toLowerCase().includes(searchTerm) ||
                (doc.description && doc.description.toLowerCase().includes(searchTerm))) {
                results.push({
                    type: 'document',
                    title: doc.name,
                    category: this.getCategoryDisplayName(doc.category),
                    content: doc.description || 'Dokument',
                    section: doc.category,
                    id: doc.id
                });
            }
        });

        // Search in KPIs (static and custom)
        const kpiSearchData = [
            { title: 'Arbeitsschutz', value: this.dashboardKpis?.safety?.value || '98.5', label: this.dashboardKpis?.safety?.label || 'Compliance Rate', section: 'dashboard' },
            { title: 'Qualit√§t', value: this.dashboardKpis?.quality?.value || '99.2', label: this.dashboardKpis?.quality?.label || 'Qualit√§tsrate', section: 'dashboard' },
            { title: 'Umwelt', value: this.dashboardKpis?.environment?.value || '12', label: this.dashboardKpis?.environment?.label || 'CO‚ÇÇ Einsparung', section: 'dashboard' },
            { title: 'Gesundheit', value: this.dashboardKpis?.health?.value || '2.1', label: this.dashboardKpis?.health?.label || 'Krankentage', section: 'dashboard' }
        ];

        // Add custom KPIs
        this.customKpis?.forEach(kpi => {
            kpiSearchData.push({
                title: kpi.title,
                value: kpi.value,
                label: kpi.label,
                section: 'dashboard'
            });
        });

        kpiSearchData.forEach(kpi => {
            if (kpi.title.toLowerCase().includes(searchTerm) ||
                kpi.label.toLowerCase().includes(searchTerm) ||
                kpi.value.toString().includes(searchTerm)) {
                results.push({
                    type: 'kpi',
                    title: kpi.title,
                    category: 'KPI',
                    content: `${kpi.value} - ${kpi.label}`,
                    section: kpi.section
                });
            }
        });

        // Search in audit certifications
        this.auditCertifications?.certifications?.forEach(cert => {
            if ((cert.name && cert.name.toLowerCase().includes(searchTerm)) ||
                (cert.validity && cert.validity.toLowerCase().includes(searchTerm))) {
                results.push({
                    type: 'certification',
                    title: cert.name || 'Unbekannte Zertifizierung',
                    category: 'T√úV Zertifizierung',
                    content: cert.validity || 'Unbekannte G√ºltigkeit',
                    section: 'audits'
                });
            }
        });

        // Search in internal audits
        this.auditCertifications?.internalAudits?.forEach(audit => {
            if ((audit.title && audit.title.toLowerCase().includes(searchTerm)) ||
                (audit.type && audit.type.toLowerCase().includes(searchTerm)) ||
                (audit.status && audit.status.toLowerCase().includes(searchTerm))) {
                results.push({
                    type: 'audit',
                    title: audit.title || 'Unbekanntes Audit',
                    category: 'Internes Audit',
                    content: `${audit.type || 'Unbekannter Typ'} - ${audit.status || 'Unbekannter Status'}`,
                    section: 'audits'
                });
            }
        });

        // Search in external audits
        this.auditCertifications?.externalAudits?.forEach(audit => {
            if ((audit.title && audit.title.toLowerCase().includes(searchTerm)) ||
                (audit.type && audit.type.toLowerCase().includes(searchTerm)) ||
                (audit.auditor && audit.auditor.toLowerCase().includes(searchTerm)) ||
                (audit.status && audit.status.toLowerCase().includes(searchTerm))) {
                results.push({
                    type: 'audit',
                    title: audit.title || 'Unbekanntes externes Audit',
                    category: 'Externes Audit',
                    content: `${audit.type || 'Unbekannter Typ'} - ${audit.auditor || 'Unbekannter Auditor'} - ${audit.status || 'Unbekannter Status'}`,
                    section: 'audits'
                });
            }
        });

        // Search in users (for admins)
        const currentUser = this.getCurrentUser();
        if (currentUser && (currentUser.role === 'admin' || currentUser.role === 'root-admin')) {
            this.users.forEach(user => {
                if ((user.displayName && user.displayName.toLowerCase().includes(searchTerm)) ||
                    (user.email && user.email.toLowerCase().includes(searchTerm)) ||
                    (user.department && user.department.toLowerCase().includes(searchTerm)) ||
                    (user.phone && user.phone.toLowerCase().includes(searchTerm)) ||
                    (user.position && user.position.toLowerCase().includes(searchTerm))) {
                    results.push({
                        type: 'user',
                        title: user.displayName || 'Unbekannter Benutzer',
                        category: 'Benutzer',
                        content: `${user.email || 'Keine E-Mail'} - ${user.department || 'Keine Abteilung'}`,
                        section: 'nutzerverwaltung',
                        id: user.id,
                        userData: user
                    });
                }
            });
        }

        // Search in safety announcements
        this.safetyAnnouncements?.forEach(announcement => {
            if (announcement.content && announcement.content.toLowerCase().includes(searchTerm)) {
                results.push({
                    type: 'announcement',
                    title: 'Sicherheitsmitteilung',
                    category: 'Sicherheitsecke',
                    content: announcement.content.substring(0, 100) + '...',
                    section: 'sicherheitsecke'
                });
            }
        });

        // Search in machines (if user has access)
        if (this.machines) {
            this.machines.forEach(machine => {
                if ((machine.name && machine.name.toLowerCase().includes(searchTerm)) ||
                    (machine.type && machine.type.toLowerCase().includes(searchTerm)) ||
                    (machine.manufacturer && machine.manufacturer.toLowerCase().includes(searchTerm))) {
                    results.push({
                        type: 'machine',
                        title: machine.name || 'Unbekannte Maschine',
                        category: 'Maschine',
                        content: `${machine.type || 'Unbekannter Typ'} - ${machine.manufacturer || 'Unbekannter Hersteller'}`,
                        section: 'maschinen'
                    });
                }
            });
        }

        // Search in hazardous substances (if user has access)
        if (this.hazardousSubstances && currentUser) {
            const moduleSettings = this.loadModuleSettingsFromStorage();
            if (this.userHasGefahrstoffeAccess(currentUser, moduleSettings)) {
            this.hazardousSubstances.forEach(substance => {
                if ((substance.name && substance.name.toLowerCase().includes(searchTerm)) ||
                    (substance.casNumber && substance.casNumber.toLowerCase().includes(searchTerm)) ||
                    (substance.supplier && substance.supplier.toLowerCase().includes(searchTerm)) ||
                    (substance.purpose && substance.purpose.toLowerCase().includes(searchTerm)) ||
                    (substance.storageLocation && substance.storageLocation.toLowerCase().includes(searchTerm))) {
                    results.push({
                        type: 'substance',
                        title: substance.name || 'Unbekannter Gefahrstoff',
                        category: 'Gefahrstoff',
                        content: `${substance.casNumber ? 'CAS: ' + substance.casNumber + ' - ' : ''}${substance.supplier || 'Unbekannter Hersteller'}`,
                        section: 'gefahrstoffe',
                        id: substance.id
                    });
                }
            });
            }
        }

        return results;
    }

    displaySearchResults(results, searchTerm) {
        // Remove existing search results
        this.hideSearchResults();

        if (results.length === 0) {
            this.showNoResults(searchTerm);
            return;
        }

        // Create search results container
        const searchResults = document.createElement('div');
        searchResults.id = 'searchResults';
        searchResults.className = 'search-results';
        
        const resultsHtml = `
            <div class="search-results-header">
                <h3>Suchergebnisse f√ºr "${searchTerm}" (${results.length})</h3>
                <button id="closeSearchResults" class="close-search-btn">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="search-results-list">
                ${results.map(result => `
                    <div class="search-result-item" data-section="${result.section}" data-type="${result.type}" data-id="${result.id || ''}">
                        <div class="result-icon">
                            <i class="${this.getResultIcon(result.type)}"></i>
                        </div>
                        <div class="result-content">
                            <h4>${this.highlightText(result.title, searchTerm)}</h4>
                            <span class="result-category">${result.category}</span>
                            <p>${this.highlightText(result.content, searchTerm)}</p>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;

        searchResults.innerHTML = resultsHtml;

        // Insert after main content
        const contentBody = document.querySelector('.content-body');
        contentBody.appendChild(searchResults);

        // Add event listeners
        document.getElementById('closeSearchResults').addEventListener('click', () => {
            this.hideSearchResults();
        });

        // Add click handlers for results
        searchResults.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', () => {
                const section = item.getAttribute('data-section');
                const type = item.getAttribute('data-type');
                const id = item.getAttribute('data-id');
                
                this.navigateToSearchResult(section, type, id);
                this.hideSearchResults();
            });
        });

        // Show results
        searchResults.style.display = 'block';
    }

    getResultIcon(type) {
        const icons = {
            document: 'fas fa-file-alt',
            kpi: 'fas fa-chart-line',
            certification: 'fas fa-certificate',
            audit: 'fas fa-search',
            user: 'fas fa-user',
            announcement: 'fas fa-bullhorn',
            machine: 'fas fa-cogs',
            substance: 'fas fa-flask'
        };
        return icons[type] || 'fas fa-file';
    }

    highlightText(text, searchTerm) {
        if (!text || !searchTerm) return text;
        const regex = new RegExp(`(${searchTerm})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }

    navigateToSearchResult(section, type, id) {
        // Special handling for user profiles
        if (type === 'user' && id) {
            this.showUserProfile(id);
            return;
        }
        
        // Special handling for substance details
        if (type === 'substance' && id) {
            this.showSection(section);
            setTimeout(() => {
                this.viewSubstanceDetails(id);
            }, 500);
            return;
        }
        
        // Navigate to the appropriate section
        this.showSection(section);
        
        // Additional navigation logic for specific types
        setTimeout(() => {
            if (type === 'document' && id) {
                // Scroll to document
                const docElement = document.querySelector(`[data-doc-id="${id}"]`);
                if (docElement) {
                    docElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    docElement.style.background = '#fef3c7';
                    setTimeout(() => {
                        docElement.style.background = '';
                    }, 2000);
                }
            }
        }, 500);
    }

    showNoResults(searchTerm) {
        const searchResults = document.createElement('div');
        searchResults.id = 'searchResults';
        searchResults.className = 'search-results no-results';
        
        searchResults.innerHTML = `
            <div class="search-results-header">
                <h3>Keine Ergebnisse f√ºr "${searchTerm}"</h3>
                <button id="closeSearchResults" class="close-search-btn">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="no-results-content">
                <i class="fas fa-search" style="font-size: 3rem; color: #64748b; margin-bottom: 1rem;"></i>
                <p>Keine passenden Inhalte gefunden.</p>
                <p>Versuchen Sie es mit anderen Suchbegriffen.</p>
            </div>
        `;

        const contentBody = document.querySelector('.content-body');
        contentBody.appendChild(searchResults);

        document.getElementById('closeSearchResults').addEventListener('click', () => {
            this.hideSearchResults();
        });
    }

    hideSearchResults() {
        const searchResults = document.getElementById('searchResults');
        if (searchResults) {
            searchResults.remove();
        }
    }

    showUserProfile(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user) {
            alert('Benutzer nicht gefunden.');
            return;
        }

        // Create user profile modal
        const profileModal = document.createElement('div');
        profileModal.id = 'userProfileViewModal';
        profileModal.className = 'modal';
        profileModal.style.display = 'block';

        const departmentName = this.getDepartmentName(user.department);
        const roleName = this.getRoleName(user.role);
        
        profileModal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-user"></i> Benutzerprofil: ${user.displayName || 'Unbekannter Benutzer'}</h2>
                    <span class="close" id="closeUserProfileModal">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="user-profile-tabs">
                        <div class="tab-buttons">
                            <button class="tab-btn active" data-tab="basic">Grunddaten</button>
                            <button class="tab-btn" data-tab="contact">Kontakt</button>
                            <button class="tab-btn" data-tab="work">Arbeitsplatz</button>
                            <button class="tab-btn" data-tab="personal">Pers√∂nlich</button>
                        </div>
                        
                        <div class="tab-content active" data-tab="basic">
                            <div class="profile-info-grid">
                                <div class="info-item">
                                    <label>Name:</label>
                                    <span>${user.displayName || 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Rolle:</label>
                                    <span class="role-badge role-${user.role}">${roleName}</span>
                                </div>
                                <div class="info-item">
                                    <label>Abteilung:</label>
                                    <span>${departmentName || 'Nicht zugeordnet'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Status:</label>
                                    <span class="status-badge ${user.isActive ? 'active' : 'inactive'}">
                                        <i class="fas ${user.isActive ? 'fa-check-circle' : 'fa-times-circle'}"></i>
                                        ${user.isActive ? 'Aktiv' : 'Inaktiv'}
                                    </span>
                                </div>
                                <div class="info-item">
                                    <label>Erstellt am:</label>
                                    <span>${user.createdAt ? new Date(user.createdAt).toLocaleDateString('de-DE') : 'Nicht bekannt'}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="tab-content" data-tab="contact">
                            <div class="profile-info-grid">
                                <div class="info-item">
                                    <label>E-Mail:</label>
                                    <span>${user.email ? `<a href="mailto:${user.email}">${user.email}</a>` : 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Telefon:</label>
                                    <span>${user.phone ? `<a href="tel:${user.phone}">${user.phone}</a>` : 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Mobil:</label>
                                    <span>${user.mobile ? `<a href="tel:${user.mobile}">${user.mobile}</a>` : 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Adresse:</label>
                                    <span>${user.address || 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Notfallkontakt:</label>
                                    <span>${user.emergencyContact || 'Nicht angegeben'}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="tab-content" data-tab="work">
                            <div class="profile-info-grid">
                                <div class="info-item">
                                    <label>Position:</label>
                                    <span>${user.position || 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Vorgesetzter:</label>
                                    <span>${user.supervisor || 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Einstellungsdatum:</label>
                                    <span>${user.startDate ? new Date(user.startDate).toLocaleDateString('de-DE') : 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item">
                                    <label>Berechtigung:</label>
                                    <span>${user.canBeDeleted ? 'Standard-Benutzer' : 'System-Benutzer'}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="tab-content" data-tab="personal">
                            <div class="profile-info-grid">
                                <div class="info-item">
                                    <label>Geburtsdatum:</label>
                                    <span>${user.birthdate ? new Date(user.birthdate).toLocaleDateString('de-DE') : 'Nicht angegeben'}</span>
                                </div>
                                <div class="info-item full-width">
                                    <label>Anmerkungen:</label>
                                    <span>${user.notes || 'Keine Anmerkungen'}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="closeUserProfileModalBtn" class="btn-secondary">Schlie√üen</button>
                </div>
            </div>
        `;

        document.body.appendChild(profileModal);

        // Setup tab switching
        const tabButtons = profileModal.querySelectorAll('.tab-btn');
        const tabContents = profileModal.querySelectorAll('.tab-content');

        tabButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetTab = btn.getAttribute('data-tab');
                
                // Update active tab button
                tabButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // Update active tab content
                tabContents.forEach(content => {
                    content.classList.toggle('active', content.getAttribute('data-tab') === targetTab);
                });
            });
        });

        // Setup close handlers
        const closeBtn = document.getElementById('closeUserProfileModal');
        const closeFooterBtn = document.getElementById('closeUserProfileModalBtn');
        
        const closeModal = () => {
            profileModal.remove();
        };

        closeBtn.addEventListener('click', closeModal);
        closeFooterBtn.addEventListener('click', closeModal);

        // Close on outside click
        profileModal.addEventListener('click', (e) => {
            if (e.target === profileModal) {
                closeModal();
            }
        });

        // Close on Escape key
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                closeModal();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
    }

    getDepartmentName(departmentId) {
        const department = this.departments.find(d => d.id === departmentId);
        return department ? department.name : departmentId;
    }

    getRoleName(roleId) {
        const roleNames = {
            'root-admin': 'Root Administrator',
            'admin': 'Administrator',
            'geschaeftsfuehrung': 'Gesch√§ftsf√ºhrung',
            'betriebsleiter': 'Betriebsleiter',
            'abteilungsleiter': 'Abteilungsleiter',
            'qhse': 'QHSE-Beauftragter',
            'mitarbeiter': 'Mitarbeiter',
            'techniker': 'Techniker'
        };
        return roleNames[roleId] || roleId;
    }

    clearSearch() {
        // Clear highlights and reset visibility
        const highlightedElements = document.querySelectorAll('mark');
        highlightedElements.forEach(el => {
            el.outerHTML = el.innerHTML;
        });

        // Reset any hidden elements
        const hiddenElements = document.querySelectorAll('[style*="display: none"]');
        hiddenElements.forEach(el => {
            if (el.style.display === 'none') {
                el.style.display = '';
            }
        });

        // Hide search results
        this.hideSearchResults();
    }

    // Notification Management
    setupNotifications() {
        const notifications = [
            { type: 'audit', message: 'OHSAS 18001 Audit in 2 Wochen geplant', priority: 'high' },
            { type: 'training', message: '5 Mitarbeiter ben√∂tigen Sicherheitsschulung', priority: 'medium' },
            { type: 'document', message: 'Neue Arbeitsanweisung verf√ºgbar', priority: 'low' }
        ];

        // Update notification badge
        const badge = document.querySelector('.notification-badge');
        badge.textContent = notifications.length;

        // Handle notification clicks
        const notificationBtn = document.querySelector('.notification-btn');
        notificationBtn.addEventListener('click', () => {
            this.showNotifications(notifications);
        });
    }

    showNotifications(notifications) {
        const notificationHtml = notifications.map(notification => `
            <div class="notification-item ${notification.priority}">
                <strong>${notification.type.toUpperCase()}:</strong> ${notification.message}
            </div>
        `).join('');

        // Create modal or popup for notifications
        alert('Benachrichtigungen:\n' + notifications.map(n => `${n.type}: ${n.message}`).join('\n'));
    }

    // KPI Updates (simulated real-time data)
    updateKPIs() {
        const kpiUpdates = {
            safety: Math.random() * 2 + 97, // 97-99%
            quality: Math.random() * 1 + 98.5, // 98.5-99.5%
            environment: Math.floor(Math.random() * 5 + 10), // 10-15 tons
            health: Math.random() * 1 + 1.5 // 1.5-2.5 days
        };

        // Update KPI values
        document.querySelector('.kpi-card.safety .kpi-value').textContent = kpiUpdates.safety.toFixed(1) + '%';
        document.querySelector('.kpi-card.quality .kpi-value').textContent = kpiUpdates.quality.toFixed(1) + '%';
        document.querySelector('.kpi-card.environment .kpi-value').textContent = kpiUpdates.environment;
        document.querySelector('.kpi-card.health .kpi-value').textContent = kpiUpdates.health.toFixed(1);
    }

    // Generate Reports
    generateReport(type) {
        const reports = {
            safety: 'Arbeitsschutz-Bericht_' + new Date().toISOString().split('T')[0] + '.pdf',
            quality: 'Qualit√§ts-Bericht_' + new Date().toISOString().split('T')[0] + '.pdf',
            environment: 'Umwelt-Bericht_' + new Date().toISOString().split('T')[0] + '.pdf',
            audit: 'Audit-Bericht_' + new Date().toISOString().split('T')[0] + '.pdf'
        };

        // Simulate report generation
        alert(`Bericht wird generiert: ${reports[type]}`);
        
        // In a real application, this would trigger a download
        setTimeout(() => {
            alert(`Bericht "${reports[type]}" wurde erfolgreich erstellt und steht zum Download bereit.`);
        }, 1500);
    }

    // Document Management
    loadDocumentsFromStorage() {
        const stored = localStorage.getItem('qhse_documents');
        return stored ? JSON.parse(stored) : [];
    }

    saveDocumentsToStorage() {
        localStorage.setItem('qhse_documents', JSON.stringify(this.documents));
    }

    renderDocumentsInSections() {
        // Get all area categories (both default and custom)
        const categories = this.areas.map(area => area.id);
        
        categories.forEach(category => {
            this.renderDocumentsForCategory(category);
        });
        
        // Update Arbeitsanweisungen and Verfahrensanweisungen sections
        this.updateWorkInstructions();
    }

    renderDocumentsForCategory(category) {
        const section = document.getElementById(category + '-section');
        if (!section) return;

        const categoryDocs = this.documents.filter(doc => doc.category === category);
        
        if (categoryDocs.length === 0) return;

        // Find or create document list container
        let documentContainer = section.querySelector('.uploaded-documents');
        if (!documentContainer) {
            documentContainer = document.createElement('div');
            documentContainer.className = 'uploaded-documents';
            documentContainer.innerHTML = '<h3>Hochgeladene Dokumente</h3><div class="document-list"></div>';
            section.querySelector('.section-content').appendChild(documentContainer);
        }

        const documentList = documentContainer.querySelector('.document-list');
        documentList.innerHTML = '';

        categoryDocs.forEach(doc => {
            const docElement = this.createDocumentElement(doc);
            documentList.appendChild(docElement);
        });
    }

    createDocumentElement(doc) {
        const docElement = document.createElement('div');
        docElement.className = 'document-item uploaded-doc';
        
        const fileIcon = this.getFileIcon(doc.type);
        const formattedDate = new Date(doc.uploadDate).toLocaleDateString('de-DE');
        const formattedSize = this.formatFileSize(doc.size);
        
        docElement.innerHTML = `
            <i class="${fileIcon}"></i>
            <div class="document-info">
                <span class="document-name">${doc.name}</span>
                <div class="document-meta">
                    <span class="upload-date">Hochgeladen: ${formattedDate}</span>
                    <span class="file-size">${formattedSize}</span>
                    <span class="uploaded-by">von ${doc.uploadedBy}</span>
                    <span class="revision-badge">Rev. ${doc.currentRevision || 1}</span>
                </div>
            </div>
            <div class="document-actions">
                <button class="preview-btn" onclick="window.qhseDashboard.previewDocument('${doc.id}')">
                    <i class="fas fa-eye"></i> Anzeigen
                </button>
                <button class="download-btn" onclick="window.qhseDashboard.downloadDocument('${doc.id}')">
                    <i class="fas fa-download"></i> Download
                </button>
                <button class="delete-btn" onclick="window.qhseDashboard.deleteDocument('${doc.id}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        
        return docElement;
    }

    getFileIcon(mimeType) {
        if (mimeType.includes('pdf')) return 'fas fa-file-pdf';
        if (mimeType.includes('word') || mimeType.includes('document')) return 'fas fa-file-word';
        if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'fas fa-file-excel';
        if (mimeType.includes('image')) return 'fas fa-file-image';
        return 'fas fa-file';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    downloadDocument(docId) {
        const doc = this.documents.find(d => d.id == docId);
        if (!doc) return;

        const link = document.createElement('a');
        link.href = doc.content;
        link.download = doc.name;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    deleteDocument(docId) {
        if (confirm('M√∂chten Sie dieses Dokument wirklich l√∂schen?')) {
            this.documents = this.documents.filter(d => d.id != docId);
            this.saveDocumentsToStorage();
            this.renderDocumentsInSections();
        }
    }

    updateWorkInstructions() {
        // Add uploaded documents to work instructions sections
        const workInstructionDocs = this.documents.filter(doc => 
            doc.category === 'arbeitsschutz' || doc.category === 'qualitaet'
        );
        
        if (workInstructionDocs.length > 0) {
            const arbeitsanweisungenSection = document.getElementById('arbeitsanweisungen-section');
            const verfahrensanweisungenSection = document.getElementById('verfahrensanweisungen-section');
            
            [arbeitsanweisungenSection, verfahrensanweisungenSection].forEach(section => {
                if (!section) return;
                
                let uploadedContainer = section.querySelector('.uploaded-work-instructions');
                if (!uploadedContainer && workInstructionDocs.length > 0) {
                    uploadedContainer = document.createElement('div');
                    uploadedContainer.className = 'uploaded-work-instructions';
                    uploadedContainer.innerHTML = '<h3>Neue Arbeitsanweisungen</h3><div class="document-list"></div>';
                    section.querySelector('.section-content').appendChild(uploadedContainer);
                }
                
                if (uploadedContainer) {
                    const documentList = uploadedContainer.querySelector('.document-list');
                    documentList.innerHTML = '';
                    
                    workInstructionDocs.forEach(doc => {
                        const docElement = this.createDocumentElement(doc);
                        documentList.appendChild(docElement);
                    });
                }
            });
        }
    }

    // Modal Management
    setupModals() {
        // Document modal
        const documentModal = document.getElementById('documentModal');
        const closeModal = document.getElementById('closeModal');
        const modalCloseBtn = document.getElementById('modalCloseBtn');
        
        [closeModal, modalCloseBtn].forEach(btn => {
            btn.addEventListener('click', () => {
                documentModal.style.display = 'none';
            });
        });
        
        // Profile modal
        const profileModal = document.getElementById('profileModal');
        const closeProfileModal = document.getElementById('closeProfileModal');
        const cancelProfileBtn = document.getElementById('cancelProfileBtn');
        
        [closeProfileModal, cancelProfileBtn].forEach(btn => {
            btn.addEventListener('click', () => {
                profileModal.style.display = 'none';
            });
        });
        
        // Close modals when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === documentModal) {
                documentModal.style.display = 'none';
            }
            if (e.target === profileModal) {
                profileModal.style.display = 'none';
            }
        });
    }

    previewDocument(docId) {
        const doc = this.documents.find(d => d.id == docId);
        if (!doc) return;

        // Populate modal with document details
        document.getElementById('modalDocumentTitle').textContent = doc.name;
        document.getElementById('modalFileName').textContent = doc.name;
        document.getElementById('modalCategory').textContent = this.getCategoryDisplayName(doc.category);
        document.getElementById('modalUploadedBy').textContent = doc.uploadedBy;
        document.getElementById('modalUploadDate').textContent = this.formatDateTime(doc.uploadDate);
        document.getElementById('modalFileSize').textContent = this.formatFileSize(doc.size);
        document.getElementById('modalRevision').textContent = `Version ${doc.currentRevision || 1}`;
        
        // Setup preview content
        this.setupDocumentPreview(doc);
        
        // Setup revision history
        this.setupRevisionHistory(doc);
        
        // Setup download button
        document.getElementById('modalDownloadBtn').onclick = () => this.downloadDocument(docId);
        
        // Show modal
        document.getElementById('documentModal').style.display = 'block';
    }

    setupDocumentPreview(doc) {
        const previewContent = document.getElementById('documentPreviewContent');
        
        if (doc.type.includes('image')) {
            previewContent.innerHTML = `<img src="${doc.content}" alt="${doc.name}" style="max-width: 100%; height: auto;">`;
        } else if (doc.type.includes('pdf')) {
            previewContent.innerHTML = `
                <iframe src="${doc.content}" width="100%" height="400px"></iframe>
                <p style="margin-top: 1rem; font-size: 0.875rem; color: #64748b;">
                    PDF-Vorschau. Falls das Dokument nicht angezeigt wird, verwenden Sie den Download-Button.
                </p>
            `;
        } else {
            previewContent.innerHTML = `
                <div style="text-align: center; padding: 2rem; color: #64748b;">
                    <i class="fas fa-file" style="font-size: 3rem; margin-bottom: 1rem;"></i>
                    <p>Vorschau f√ºr diesen Dateityp nicht verf√ºgbar.</p>
                    <p>Verwenden Sie den Download-Button zum √ñffnen der Datei.</p>
                </div>
            `;
        }
    }

    setupRevisionHistory(doc) {
        const historyContainer = document.getElementById('revisionHistory');
        
        if (!doc.revisions || doc.revisions.length === 0) {
            historyContainer.innerHTML = '<p style="color: #64748b;">Keine Revisionshistorie verf√ºgbar.</p>';
            return;
        }
        
        const revisionsHtml = doc.revisions.map(revision => `
            <div class="revision-item">
                <button class="revision-download-btn" onclick="window.qhseDashboard.downloadRevision('${doc.id}', ${revision.version})">
                    <i class="fas fa-download"></i> Download
                </button>
                <div class="revision-header">
                    <span class="revision-version">Version ${revision.version}</span>
                    <span class="revision-date">${this.formatDateTime(revision.uploadDate)}</span>
                </div>
                <div class="revision-details">
                    <p><strong>Hochgeladen von:</strong> ${revision.uploadedBy}</p>
                    <p><strong>√Ñnderungen:</strong> ${revision.changes}</p>
                    <p><strong>Dateigr√∂√üe:</strong> ${this.formatFileSize(revision.size)}</p>
                </div>
            </div>
        `).reverse().join('');
        
        historyContainer.innerHTML = revisionsHtml;
    }

    getCategoryDisplayName(category) {
        const categoryNames = {
            'arbeitsschutz': 'Arbeitsschutz',
            'qualitaet': 'Qualit√§t',
            'umwelt': 'Umwelt',
            'datenschutz': 'Datenschutz',
            'gesundheit': 'Gesundheit'
        };
        
        // Check if it's a custom area
        const area = this.areas.find(a => a.id === category);
        if (area) {
            return area.name;
        }
        
        return categoryNames[category] || category;
    }

    formatDateTime(isoString) {
        const date = new Date(isoString);
        return date.toLocaleString('de-DE', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }

    downloadRevision(docId, revisionVersion) {
        const doc = this.documents.find(d => d.id == docId);
        if (!doc || !doc.revisions) return;
        
        const revision = doc.revisions.find(r => r.version == revisionVersion);
        if (!revision) return;
        
        const link = document.createElement('a');
        link.href = revision.content;
        link.download = `${doc.name.split('.')[0]}_v${revisionVersion}.${doc.name.split('.').pop()}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    // User Management
    initializeRootAdmin() {
        console.log('Initializing root admin and default users...');
        console.log('Current users count:', this.users.length);
        
        const existingRootAdmin = this.users.find(user => user.id === 'root-admin');
        if (!existingRootAdmin) {
            console.log('Creating root admin user...');
            this.createDefaultUserForRole('root-admin');
        } else {
            console.log('Root admin already exists:', existingRootAdmin.displayName);
        }
        
        // Ensure we have default users for demonstration
        this.initializeDefaultUsers();
        
        // Final verification
        console.log('After initialization, total users:', this.users.length);
        this.users.forEach(user => {
            console.log('User initialized:', user.id, user.displayName, user.isActive);
        });
    }

    initializeDefaultUsers() {
        const requiredRoles = ['admin', 'geschaeftsfuehrung', 'betriebsleiter', 'qhse', 'abteilungsleiter', 'mitarbeiter', 'techniker'];
        
        console.log('Checking required roles:', requiredRoles);
        
        requiredRoles.forEach(role => {
            const existingUser = this.users.find(user => user.role === role && user.isActive);
            if (!existingUser) {
                console.log('Creating default user for role:', role);
                this.createDefaultUserForRole(role);
            } else {
                console.log('User already exists for role:', role, existingUser.displayName);
            }
        });
        
        // Save users after all are created
        this.saveUsersToStorage();
        console.log('Default users initialization complete');
    }

    loadUsersFromStorage() {
        const stored = localStorage.getItem('qhse_users');
        return stored ? JSON.parse(stored) : [];
    }

    saveUsersToStorage() {
        localStorage.setItem('qhse_users', JSON.stringify(this.users));
    }

    setupUserManagement() {
        const addUserBtn = document.getElementById('addUserBtn');
        const saveUserBtn = document.getElementById('saveUserBtn');
        const cancelUserBtn = document.getElementById('cancelUserBtn');
        const closeUserModal = document.getElementById('closeUserModal');
        
        addUserBtn.addEventListener('click', () => {
            this.openUserEditor();
        });
        
        saveUserBtn.addEventListener('click', () => {
            this.saveUser();
        });
        
        [cancelUserBtn, closeUserModal].forEach(btn => {
            btn.addEventListener('click', () => {
                document.getElementById('userManagementModal').style.display = 'none';
            });
        });

        // New profile overview and reports buttons
        const userProfilesOverviewBtn = document.getElementById('userProfilesOverviewBtn');
        const userReportsBtn = document.getElementById('userReportsBtn');

        if (userProfilesOverviewBtn) {
            console.log('üë• DEBUGGING: Setting up user profiles overview button listener');
            userProfilesOverviewBtn.addEventListener('click', () => {
                console.log('üë• DEBUGGING: User profiles overview button clicked!');
                this.showUserProfilesOverview();
            });
        } else {
            console.error('üë• DEBUGGING: userProfilesOverviewBtn not found in DOM!');
        }

        if (userReportsBtn) {
            console.log('üìä DEBUGGING: Setting up user reports button listener');
            userReportsBtn.addEventListener('click', () => {
                console.log('üìä DEBUGGING: User reports button clicked!');
                this.showUserReports();
            });
        } else {
            console.error('üìä DEBUGGING: userReportsBtn not found in DOM!');
        }
    }

    showUserProfilesOverview() {
        console.log('üë• DEBUGGING: Opening user profiles overview modal...');
        console.log('üë• DEBUGGING: Users data:', this.users);
        console.log('üë• DEBUGGING: Departments data:', this.departments);
        
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content large">
                <div class="modal-header">
                    <h2><i class="fas fa-users"></i> Mitarbeiter-Profile √úbersicht</h2>
                    <span class="close-modal">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="profile-overview-controls">
                        <div class="control-group">
                            <div class="form-group">
                                <label for="profileViewType">Ansicht:</label>
                                <select id="profileViewType">
                                    <option value="cards">Karten-Ansicht</option>
                                    <option value="table">Tabellen-Ansicht</option>
                                    <option value="detailed">Detaillierte Ansicht</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="profileDepartmentFilter">Abteilung:</label>
                                <select id="profileDepartmentFilter">
                                    <option value="">Alle Abteilungen</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="profileRoleFilter">Rolle:</label>
                                <select id="profileRoleFilter">
                                    <option value="">Alle Rollen</option>
                                    <option value="root-admin">System Administrator</option>
                                    <option value="admin">Administrator</option>
                                    <option value="geschaeftsfuehrung">Gesch√§ftsf√ºhrung</option>
                                    <option value="betriebsleiter">Betriebsleiter</option>
                                    <option value="abteilungsleiter">Abteilungsleiter</option>
                                    <option value="qhse">QHSE-Manager</option>
                                    <option value="mitarbeiter">Mitarbeiter</option>
                                    <option value="techniker">Techniker</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="profileStatusFilter">Status:</label>
                                <select id="profileStatusFilter">
                                    <option value="">Alle Status</option>
                                    <option value="active">Aktiv</option>
                                    <option value="inactive">Inaktiv</option>
                                </select>
                            </div>
                        </div>
                        <div class="profile-actions">
                            <button id="refreshProfilesBtn" class="btn-primary">
                                <i class="fas fa-sync"></i> Aktualisieren
                            </button>
                            <button id="exportProfilesBtn" class="btn-secondary">
                                <i class="fas fa-download"></i> Exportieren
                            </button>
                            <button id="printProfilesBtn" class="btn-secondary">
                                <i class="fas fa-print"></i> Drucken
                            </button>
                        </div>
                    </div>
                    <div class="profile-overview-content" id="profileOverviewContent">
                        <!-- Profile content will be populated here -->
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        console.log('üë• DEBUGGING: Modal added to DOM');
        
        this.populateProfileDepartmentFilter();
        console.log('üë• DEBUGGING: Department filter populated');
        
        // Event listeners
        const closeBtn = modal.querySelector('.close-modal');
        const refreshBtn = modal.querySelector('#refreshProfilesBtn');
        const exportBtn = modal.querySelector('#exportProfilesBtn');
        const printBtn = modal.querySelector('#printProfilesBtn');
        
        const viewTypeSelect = modal.querySelector('#profileViewType');
        const departmentFilter = modal.querySelector('#profileDepartmentFilter');
        const roleFilter = modal.querySelector('#profileRoleFilter');
        const statusFilter = modal.querySelector('#profileStatusFilter');
        
        closeBtn.addEventListener('click', () => {
            document.body.removeChild(modal);
        });
        
        refreshBtn.addEventListener('click', () => {
            console.log('üë• DEBUGGING: Refresh profiles clicked');
            this.renderProfileOverview();
        });
        
        exportBtn.addEventListener('click', () => {
            console.log('üë• DEBUGGING: Export profiles clicked');
            this.exportUserProfiles();
        });
        
        printBtn.addEventListener('click', () => {
            console.log('üë• DEBUGGING: Print profiles clicked');
            this.printUserProfiles();
        });
        
        // Filter change listeners
        [viewTypeSelect, departmentFilter, roleFilter, statusFilter].forEach(select => {
            select.addEventListener('change', () => {
                console.log('üë• DEBUGGING: Filter changed');
                this.renderProfileOverview();
            });
        });
        
        // Close modal when clicking outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });
        
        // Show the modal
        modal.style.display = 'block';
        console.log('üë• DEBUGGING: Modal display set to block');
        
        // Initial render
        this.renderProfileOverview();
    }

    populateProfileDepartmentFilter() {
        const departmentSelect = document.getElementById('profileDepartmentFilter');
        if (departmentSelect) {
            departmentSelect.innerHTML = '<option value="">Alle Abteilungen</option>';
            this.departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                departmentSelect.appendChild(option);
            });
        }
    }

    renderProfileOverview() {
        console.log('üë• DEBUGGING: Rendering profile overview...');
        
        const content = document.getElementById('profileOverviewContent');
        const viewType = document.getElementById('profileViewType').value;
        const departmentFilter = document.getElementById('profileDepartmentFilter').value;
        const roleFilter = document.getElementById('profileRoleFilter').value;
        const statusFilter = document.getElementById('profileStatusFilter').value;
        
        // Filter users
        let filteredUsers = this.users.filter(user => {
            if (departmentFilter && user.department !== departmentFilter) return false;
            if (roleFilter && user.role !== roleFilter) return false;
            if (statusFilter === 'active' && !user.isActive) return false;
            if (statusFilter === 'inactive' && user.isActive) return false;
            return true;
        });
        
        console.log('üë• DEBUGGING: Filtered users:', filteredUsers.length);
        
        if (filteredUsers.length === 0) {
            content.innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-users"></i>
                    <h3>Keine Mitarbeiter gefunden</h3>
                    <p>Keine Mitarbeiter entsprechen den ausgew√§hlten Filterkriterien.</p>
                </div>
            `;
            return;
        }
        
        if (viewType === 'cards') {
            this.renderProfileCards(content, filteredUsers);
        } else if (viewType === 'table') {
            this.renderProfileTable(content, filteredUsers);
        } else if (viewType === 'detailed') {
            this.renderDetailedProfiles(content, filteredUsers);
        }
    }

    renderProfileCards(container, users) {
        container.innerHTML = `
            <div class="profile-cards-grid">
                ${users.map(user => this.generateProfileCard(user)).join('')}
            </div>
        `;
        
        // Add click listeners for individual profile actions
        users.forEach(user => {
            const viewBtn = container.querySelector(`#viewProfile_${user.id}`);
            const editBtn = container.querySelector(`#editProfile_${user.id}`);
            
            if (viewBtn) {
                viewBtn.addEventListener('click', () => this.showDetailedUserProfile(user.id));
            }
            if (editBtn) {
                editBtn.addEventListener('click', () => this.editUser(user.id));
            }
        });
    }

    generateProfileCard(user) {
        const department = this.departments.find(d => d.id === user.department);
        const departmentName = department ? department.name : 'Unbekannt';
        const roleDisplayName = this.getRoleDisplayName(user.role);
        const initials = this.getUserInitials(user.displayName || user.name);
        const statusBadge = user.isActive ? 
            '<span class="status-badge active">Aktiv</span>' : 
            '<span class="status-badge inactive">Inaktiv</span>';
        
        return `
            <div class="profile-card ${user.role}">
                <div class="profile-card-header">
                    <div class="profile-avatar large">${initials}</div>
                    <div class="profile-basic-info">
                        <h3>${user.displayName || user.name}</h3>
                        <div class="role-badge ${user.role}">${roleDisplayName}</div>
                        ${statusBadge}
                    </div>
                </div>
                <div class="profile-card-body">
                    <div class="profile-detail">
                        <i class="fas fa-envelope"></i>
                        <span>${user.email || 'Nicht angegeben'}</span>
                    </div>
                    <div class="profile-detail">
                        <i class="fas fa-phone"></i>
                        <span>${user.phone || 'Nicht angegeben'}</span>
                    </div>
                    <div class="profile-detail">
                        <i class="fas fa-building"></i>
                        <span>${departmentName}</span>
                    </div>
                    <div class="profile-detail">
                        <i class="fas fa-briefcase"></i>
                        <span>${user.position || 'Nicht angegeben'}</span>
                    </div>
                    <div class="profile-detail">
                        <i class="fas fa-calendar"></i>
                        <span>Seit ${user.startDate || 'Unbekannt'}</span>
                    </div>
                </div>
                <div class="profile-card-actions">
                    <button id="viewProfile_${user.id}" class="btn-small btn-primary">
                        <i class="fas fa-eye"></i> Ansehen
                    </button>
                    <button id="editProfile_${user.id}" class="btn-small btn-secondary">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                </div>
            </div>
        `;
    }

    renderProfileTable(container, users) {
        container.innerHTML = `
            <div class="profile-table-container">
                <table class="profile-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Rolle</th>
                            <th>Abteilung</th>
                            <th>E-Mail</th>
                            <th>Telefon</th>
                            <th>Status</th>
                            <th>Aktionen</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${users.map(user => this.generateProfileTableRow(user)).join('')}
                    </tbody>
                </table>
            </div>
        `;
        
        // Add click listeners for table actions
        users.forEach(user => {
            const viewBtn = container.querySelector(`#viewTableProfile_${user.id}`);
            const editBtn = container.querySelector(`#editTableProfile_${user.id}`);
            
            if (viewBtn) {
                viewBtn.addEventListener('click', () => this.showDetailedUserProfile(user.id));
            }
            if (editBtn) {
                editBtn.addEventListener('click', () => this.editUser(user.id));
            }
        });
    }

    generateProfileTableRow(user) {
        const department = this.departments.find(d => d.id === user.department);
        const departmentName = department ? department.name : 'Unbekannt';
        const roleDisplayName = this.getRoleDisplayName(user.role);
        const statusBadge = user.isActive ? 
            '<span class="status-badge active">Aktiv</span>' : 
            '<span class="status-badge inactive">Inaktiv</span>';
        
        return `
            <tr class="profile-row ${user.role}">
                <td>
                    <div class="profile-name-cell">
                        <div class="profile-avatar small">${this.getUserInitials(user.displayName || user.name)}</div>
                        <span>${user.displayName || user.name}</span>
                    </div>
                </td>
                <td><span class="role-badge ${user.role}">${roleDisplayName}</span></td>
                <td>${departmentName}</td>
                <td>${user.email || 'Nicht angegeben'}</td>
                <td>${user.phone || 'Nicht angegeben'}</td>
                <td>${statusBadge}</td>
                <td>
                    <div class="table-actions">
                        <button id="viewTableProfile_${user.id}" class="btn-icon" title="Profil ansehen">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button id="editTableProfile_${user.id}" class="btn-icon" title="Profil bearbeiten">
                            <i class="fas fa-edit"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }

    renderDetailedProfiles(container, users) {
        container.innerHTML = `
            <div class="detailed-profiles-container">
                ${users.map(user => this.generateDetailedProfile(user)).join('')}
            </div>
        `;
        
        // Add click listeners for detailed profile actions
        users.forEach(user => {
            const editBtn = container.querySelector(`#editDetailedProfile_${user.id}`);
            const expandBtn = container.querySelector(`#expandProfile_${user.id}`);
            
            if (editBtn) {
                editBtn.addEventListener('click', () => this.editUser(user.id));
            }
            if (expandBtn) {
                expandBtn.addEventListener('click', () => this.showDetailedUserProfile(user.id));
            }
        });
    }

    generateDetailedProfile(user) {
        const department = this.departments.find(d => d.id === user.department);
        const departmentName = department ? department.name : 'Unbekannt';
        const roleDisplayName = this.getRoleDisplayName(user.role);
        const initials = this.getUserInitials(user.displayName || user.name);
        const statusBadge = user.isActive ? 
            '<span class="status-badge active">Aktiv</span>' : 
            '<span class="status-badge inactive">Inaktiv</span>';
        
        // Calculate some profile statistics
        const qualifications = user.qualifications || [];
        const activeQualifications = qualifications.filter(q => !q.expiryDate || new Date(q.expiryDate) > new Date());
        const expiredQualifications = qualifications.filter(q => q.expiryDate && new Date(q.expiryDate) <= new Date());
        
        return `
            <div class="detailed-profile-card ${user.role}">
                <div class="detailed-profile-header">
                    <div class="profile-avatar large">${initials}</div>
                    <div class="profile-header-info">
                        <h2>${user.displayName || user.name}</h2>
                        <div class="profile-meta">
                            <div class="role-badge ${user.role}">${roleDisplayName}</div>
                            ${statusBadge}
                            <span class="profile-id">ID: ${user.id}</span>
                        </div>
                        <div class="profile-actions-header">
                            <button id="editDetailedProfile_${user.id}" class="btn-primary">
                                <i class="fas fa-edit"></i> Bearbeiten
                            </button>
                            <button id="expandProfile_${user.id}" class="btn-secondary">
                                <i class="fas fa-expand"></i> Vollansicht
                            </button>
                        </div>
                    </div>
                </div>
                <div class="detailed-profile-body">
                    <div class="profile-section">
                        <h4><i class="fas fa-user"></i> Grunddaten</h4>
                        <div class="profile-info-grid">
                            <div class="info-item">
                                <label>E-Mail:</label>
                                <span>${user.email || 'Nicht angegeben'}</span>
                            </div>
                            <div class="info-item">
                                <label>Telefon:</label>
                                <span>${user.phone || 'Nicht angegeben'}</span>
                            </div>
                            <div class="info-item">
                                <label>Abteilung:</label>
                                <span>${departmentName}</span>
                            </div>
                            <div class="info-item">
                                <label>Position:</label>
                                <span>${user.position || 'Nicht angegeben'}</span>
                            </div>
                            <div class="info-item">
                                <label>Startdatum:</label>
                                <span>${user.startDate || 'Unbekannt'}</span>
                            </div>
                            <div class="info-item">
                                <label>Erstellt:</label>
                                <span>${user.createdAt ? new Date(user.createdAt).toLocaleDateString('de-DE') : 'Unbekannt'}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="profile-section">
                        <h4><i class="fas fa-certificate"></i> Qualifikationen</h4>
                        <div class="qualification-summary">
                            <div class="qualification-stat">
                                <span class="stat-number">${qualifications.length}</span>
                                <span class="stat-label">Gesamt</span>
                            </div>
                            <div class="qualification-stat">
                                <span class="stat-number active">${activeQualifications.length}</span>
                                <span class="stat-label">Aktiv</span>
                            </div>
                            <div class="qualification-stat">
                                <span class="stat-number expired">${expiredQualifications.length}</span>
                                <span class="stat-label">Abgelaufen</span>
                            </div>
                        </div>
                        ${qualifications.length > 0 ? `
                            <div class="qualification-list">
                                ${qualifications.slice(0, 3).map(q => `
                                    <div class="qualification-item ${q.expiryDate && new Date(q.expiryDate) <= new Date() ? 'expired' : 'active'}">
                                        <span class="qualification-name">${q.name}</span>
                                        <span class="qualification-expiry">${q.expiryDate ? new Date(q.expiryDate).toLocaleDateString('de-DE') : 'Unbegrenzt'}</span>
                                    </div>
                                `).join('')}
                                ${qualifications.length > 3 ? `<div class="more-qualifications">... und ${qualifications.length - 3} weitere</div>` : ''}
                            </div>
                        ` : '<p class="no-data">Keine Qualifikationen erfasst</p>'}
                    </div>
                    
                    <div class="profile-section">
                        <h4><i class="fas fa-shield-alt"></i> Berechtigungen</h4>
                        <div class="permissions-summary">
                            ${this.generatePermissionsSummary(user)}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    generatePermissionsSummary(user) {
        const roleDefinitions = this.roleDefinitions || {};
        const userRole = roleDefinitions[user.role];
        
        if (!userRole) {
            return '<p class="no-data">Keine Berechtigungen definiert</p>';
        }
        
        const allowedSections = userRole.allowedSections || [];
        const permissions = userRole.permissions || {};
        
        return `
            <div class="permissions-grid">
                <div class="permission-item">
                    <span class="permission-label">Bereiche:</span>
                    <span class="permission-value">${allowedSections.length} Bereiche</span>
                </div>
                <div class="permission-item">
                    <span class="permission-label">Verwaltung:</span>
                    <span class="permission-value">${permissions.canManageUsers ? 'Ja' : 'Nein'}</span>
                </div>
                <div class="permission-item">
                    <span class="permission-label">Dokumente:</span>
                    <span class="permission-value">${permissions.canUploadDocuments ? 'Ja' : 'Nein'}</span>
                </div>
                <div class="permission-item">
                    <span class="permission-label">Berichte:</span>
                    <span class="permission-value">${permissions.canAccessReports ? 'Ja' : 'Nein'}</span>
                </div>
            </div>
        `;
    }

    getUserInitials(name) {
        if (!name) return '??';
        return name.split(' ')
            .map(part => part.charAt(0).toUpperCase())
            .slice(0, 2)
            .join('');
    }

    getRoleDisplayName(role) {
        const roleNames = {
            'root-admin': 'System Administrator',
            'admin': 'Administrator',
            'geschaeftsfuehrung': 'Gesch√§ftsf√ºhrung',
            'betriebsleiter': 'Betriebsleiter',
            'abteilungsleiter': 'Abteilungsleiter',
            'qhse': 'QHSE-Manager',
            'mitarbeiter': 'Mitarbeiter',
            'techniker': 'Techniker'
        };
        return roleNames[role] || role;
    }

    showDetailedUserProfile(userId) {
        console.log('üë• DEBUGGING: Showing detailed profile for user:', userId);
        // This will open the existing detailed profile modal that was already implemented
        this.showCurrentUserProfile(false, userId);
    }

    exportUserProfiles() {
        console.log('üìä DEBUGGING: Exporting user profiles...');
        
        const viewType = document.getElementById('profileViewType').value;
        const departmentFilter = document.getElementById('profileDepartmentFilter').value;
        const roleFilter = document.getElementById('profileRoleFilter').value;
        const statusFilter = document.getElementById('profileStatusFilter').value;
        
        // Filter users
        let filteredUsers = this.users.filter(user => {
            if (departmentFilter && user.department !== departmentFilter) return false;
            if (roleFilter && user.role !== roleFilter) return false;
            if (statusFilter === 'active' && !user.isActive) return false;
            if (statusFilter === 'inactive' && user.isActive) return false;
            return true;
        });
        
        // Generate CSV data
        const headers = ['Name', 'Rolle', 'Abteilung', 'E-Mail', 'Telefon', 'Position', 'Status', 'Startdatum'];
        const csvData = filteredUsers.map(user => {
            const department = this.departments.find(d => d.id === user.department);
            return [
                user.displayName || user.name,
                this.getRoleDisplayName(user.role),
                department ? department.name : 'Unbekannt',
                user.email || '',
                user.phone || '',
                user.position || '',
                user.isActive ? 'Aktiv' : 'Inaktiv',
                user.startDate || ''
            ];
        });
        
        // Create CSV content
        const csvContent = [headers, ...csvData]
            .map(row => row.map(field => `"${field}"`).join(','))
            .join('\n');
        
        // Download CSV
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `mitarbeiter_profile_${new Date().toISOString().split('T')[0]}.csv`;
        link.click();
        
        console.log('üìä DEBUGGING: CSV export completed');
    }

    printUserProfiles() {
        console.log('üñ®Ô∏è DEBUGGING: Printing user profiles...');
        
        const printWindow = window.open('', '_blank');
        const profileContent = document.getElementById('profileOverviewContent').innerHTML;
        
        printWindow.document.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>Mitarbeiter-Profile - ${new Date().toLocaleDateString('de-DE')}</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .profile-cards-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }
                    .profile-card { border: 1px solid #ddd; padding: 15px; border-radius: 8px; page-break-inside: avoid; }
                    .profile-card-header { margin-bottom: 10px; }
                    .profile-avatar { width: 40px; height: 40px; border-radius: 50%; background: #007bff; color: white; display: inline-flex; align-items: center; justify-content: center; font-weight: bold; margin-right: 10px; }
                    .role-badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; background: #f8f9fa; border: 1px solid #dee2e6; }
                    .status-badge.active { background: #d4edda; color: #155724; }
                    .status-badge.inactive { background: #f8d7da; color: #721c24; }
                    .profile-detail { margin: 5px 0; }
                    .profile-detail i { width: 20px; }
                    @media print { .btn-small { display: none; } }
                </style>
            </head>
            <body>
                <h1>Mitarbeiter-Profile √úbersicht</h1>
                <p>Erstellt am: ${new Date().toLocaleString('de-DE')}</p>
                ${profileContent}
            </body>
            </html>
        `);
        
        printWindow.document.close();
        printWindow.print();
        
        console.log('üñ®Ô∏è DEBUGGING: Print dialog opened');
    }

    showUserReports() {
        console.log('üìä DEBUGGING: Opening user reports modal...');
        console.log('üìä DEBUGGING: Users data:', this.users);
        
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content large">
                <div class="modal-header">
                    <h2><i class="fas fa-chart-line"></i> Mitarbeiter-Berichte</h2>
                    <span class="close-modal">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="report-controls">
                        <div class="control-group">
                            <div class="form-group">
                                <label for="userReportType">Berichtstyp:</label>
                                <select id="userReportType">
                                    <option value="overview">Mitarbeiter-√úbersicht</option>
                                    <option value="departments">Abteilungs-Aufschl√ºsselung</option>
                                    <option value="roles">Rollen-Verteilung</option>
                                    <option value="qualifications">Qualifikations-Status</option>
                                    <option value="activity">Aktivit√§ts-Report</option>
                                    <option value="complete">Vollst√§ndiger Bericht</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="userReportDepartment">Abteilung:</label>
                                <select id="userReportDepartment">
                                    <option value="">Alle Abteilungen</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="userReportFormat">Format:</label>
                                <select id="userReportFormat">
                                    <option value="pdf">PDF</option>
                                    <option value="csv">CSV</option>
                                    <option value="excel">Excel</option>
                                </select>
                            </div>
                        </div>
                        <div class="report-actions">
                            <button id="generateUserReportBtn" class="btn-primary">
                                <i class="fas fa-file-download"></i> Bericht erstellen
                            </button>
                            <button id="previewUserReportBtn" class="btn-secondary">
                                <i class="fas fa-eye"></i> Vorschau
                            </button>
                        </div>
                    </div>
                    <div class="report-preview" id="userReportPreview" style="display: none;">
                        <h3>Bericht Vorschau</h3>
                        <div id="userReportContent"></div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        console.log('üìä DEBUGGING: Modal added to DOM');
        
        this.populateUserReportDepartmentDropdown();
        console.log('üìä DEBUGGING: Department dropdown populated');
        
        // Event listeners
        const closeBtn = modal.querySelector('.close-modal');
        const generateBtn = modal.querySelector('#generateUserReportBtn');
        const previewBtn = modal.querySelector('#previewUserReportBtn');
        
        closeBtn.addEventListener('click', () => {
            document.body.removeChild(modal);
        });
        
        generateBtn.addEventListener('click', () => {
            console.log('üìä DEBUGGING: Generate user report button clicked');
            this.generateUserReport();
        });
        
        previewBtn.addEventListener('click', () => {
            console.log('üìä DEBUGGING: Preview user report button clicked');
            this.previewUserReport();
        });
        
        // Close modal when clicking outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });
        
        // Show the modal
        modal.style.display = 'block';
        console.log('üìä DEBUGGING: Modal display set to block');
    }

    populateUserReportDepartmentDropdown() {
        const departmentSelect = document.getElementById('userReportDepartment');
        if (departmentSelect) {
            departmentSelect.innerHTML = '<option value="">Alle Abteilungen</option>';
            this.departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                departmentSelect.appendChild(option);
            });
        }
    }

    generateUserReport() {
        console.log('üìä DEBUGGING: Generating user report...');
        
        const reportType = document.getElementById('userReportType').value;
        const department = document.getElementById('userReportDepartment').value;
        const format = document.getElementById('userReportFormat').value;
        
        console.log('üìä DEBUGGING: Report parameters:', { reportType, department, format });
        
        if (!reportType) {
            alert('Bitte w√§hlen Sie einen Berichtstyp aus.');
            return;
        }
        
        if (!format) {
            alert('Bitte w√§hlen Sie ein Format aus.');
            return;
        }
        
        const reportData = this.prepareUserReportData(reportType, department);
        
        console.log('üìä DEBUGGING: Report data prepared for generation:', reportData);
        
        if (reportData.users.length === 0) {
            alert('Keine Daten f√ºr den ausgew√§hlten Berichtstyp gefunden.');
            return;
        }
        
        console.log('üìä DEBUGGING: Starting export with format:', format);
        
        if (format === 'pdf') {
            console.log('üìä DEBUGGING: Calling PDF export');
            this.exportUserReportAsPDF(reportData, reportType);
        } else if (format === 'csv') {
            console.log('üìä DEBUGGING: Calling CSV export');
            this.exportUserReportAsCSV(reportData, reportType);
        } else if (format === 'excel') {
            console.log('üìä DEBUGGING: Calling Excel export');
            this.exportUserReportAsExcel(reportData, reportType);
        } else {
            console.error('üìä DEBUGGING: Unknown format:', format);
        }
    }

    previewUserReport() {
        console.log('üìä DEBUGGING: Previewing user report...');
        
        const reportType = document.getElementById('userReportType').value;
        const department = document.getElementById('userReportDepartment').value;
        
        console.log('üìä DEBUGGING: Preview parameters:', { reportType, department });
        
        const reportData = this.prepareUserReportData(reportType, department);
        const preview = document.getElementById('userReportPreview');
        const content = document.getElementById('userReportContent');
        
        if (reportData.users.length === 0) {
            content.innerHTML = '<p class="no-data">Keine Daten f√ºr den ausgew√§hlten Berichtstyp gefunden.</p>';
            preview.style.display = 'block';
            return;
        }
        
        content.innerHTML = this.generateUserReportHTML(reportData, reportType);
        preview.style.display = 'block';
        
        console.log('üìä DEBUGGING: Preview generated successfully');
    }

    prepareUserReportData(reportType, department) {
        console.log('üìä DEBUGGING: Preparing user report data...');
        
        let filteredUsers = this.users.filter(user => {
            if (department && user.department !== department) return false;
            return true;
        });
        
        console.log('üìä DEBUGGING: Users after department filter:', filteredUsers.length);
        
        const reportData = {
            users: filteredUsers,
            type: reportType,
            department: department,
            generatedAt: new Date().toISOString(),
            stats: this.calculateUserStats(filteredUsers)
        };
        
        // Add specific data based on report type
        if (reportType === 'departments') {
            reportData.departmentBreakdown = this.generateDepartmentBreakdown(filteredUsers);
        } else if (reportType === 'roles') {
            reportData.roleDistribution = this.generateRoleDistribution(filteredUsers);
        } else if (reportType === 'qualifications') {
            reportData.qualificationStats = this.generateQualificationStats(filteredUsers);
        }
        
        console.log('üìä DEBUGGING: Final report data:', reportData);
        
        return reportData;
    }

    calculateUserStats(users) {
        const stats = {
            total: users.length,
            active: users.filter(u => u.isActive).length,
            inactive: users.filter(u => !u.isActive).length,
            byRole: {},
            byDepartment: {},
            totalQualifications: 0,
            expiredQualifications: 0
        };
        
        users.forEach(user => {
            // Role stats
            stats.byRole[user.role] = (stats.byRole[user.role] || 0) + 1;
            
            // Department stats
            if (user.department) {
                stats.byDepartment[user.department] = (stats.byDepartment[user.department] || 0) + 1;
            }
            
            // Qualification stats
            const qualifications = user.qualifications || [];
            stats.totalQualifications += qualifications.length;
            stats.expiredQualifications += qualifications.filter(q => 
                q.expiryDate && new Date(q.expiryDate) <= new Date()
            ).length;
        });
        
        return stats;
    }

    generateDepartmentBreakdown(users) {
        const breakdown = {};
        
        this.departments.forEach(dept => {
            const deptUsers = users.filter(u => u.department === dept.id);
            breakdown[dept.id] = {
                name: dept.name,
                total: deptUsers.length,
                active: deptUsers.filter(u => u.isActive).length,
                roles: {}
            };
            
            deptUsers.forEach(user => {
                breakdown[dept.id].roles[user.role] = (breakdown[dept.id].roles[user.role] || 0) + 1;
            });
        });
        
        return breakdown;
    }

    generateRoleDistribution(users) {
        const distribution = {};
        
        users.forEach(user => {
            if (!distribution[user.role]) {
                distribution[user.role] = {
                    name: this.getRoleDisplayName(user.role),
                    count: 0,
                    users: []
                };
            }
            distribution[user.role].count++;
            distribution[user.role].users.push({
                name: user.displayName || user.name,
                department: user.department,
                active: user.isActive
            });
        });
        
        return distribution;
    }

    generateQualificationStats(users) {
        const stats = {
            total: 0,
            active: 0,
            expired: 0,
            expiringSoon: 0,
            byType: {},
            userStats: []
        };
        
        users.forEach(user => {
            const qualifications = user.qualifications || [];
            const userStat = {
                name: user.displayName || user.name,
                department: user.department,
                total: qualifications.length,
                active: 0,
                expired: 0,
                expiringSoon: 0
            };
            
            qualifications.forEach(q => {
                stats.total++;
                
                if (q.expiryDate) {
                    const expiryDate = new Date(q.expiryDate);
                    const now = new Date();
                    const in30Days = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
                    
                    if (expiryDate <= now) {
                        stats.expired++;
                        userStat.expired++;
                    } else if (expiryDate <= in30Days) {
                        stats.expiringSoon++;
                        userStat.expiringSoon++;
                    } else {
                        stats.active++;
                        userStat.active++;
                    }
                } else {
                    stats.active++;
                    userStat.active++;
                }
                
                // By type stats
                const type = q.type || 'Unbekannt';
                stats.byType[type] = (stats.byType[type] || 0) + 1;
            });
            
            stats.userStats.push(userStat);
        });
        
        return stats;
    }

    generateUserReportHTML(reportData, reportType) {
        let html = `
            <div class="report-summary">
                <h4>Zusammenfassung</h4>
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-number">${reportData.stats.total}</span>
                        <span class="stat-label">Gesamt</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">${reportData.stats.active}</span>
                        <span class="stat-label">Aktiv</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">${reportData.stats.inactive}</span>
                        <span class="stat-label">Inaktiv</span>
                    </div>
                </div>
            </div>
        `;
        
        if (reportType === 'overview' || reportType === 'complete') {
            html += this.generateUserListHTML(reportData.users);
        }
        
        if (reportType === 'departments' || reportType === 'complete') {
            html += this.generateDepartmentReportHTML(reportData.departmentBreakdown);
        }
        
        if (reportType === 'roles' || reportType === 'complete') {
            html += this.generateRoleReportHTML(reportData.roleDistribution);
        }
        
        if (reportType === 'qualifications' || reportType === 'complete') {
            html += this.generateQualificationReportHTML(reportData.qualificationStats);
        }
        
        return html;
    }

    generateUserListHTML(users) {
        return `
            <div class="report-section">
                <h4>Mitarbeiterliste</h4>
                <table class="report-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Rolle</th>
                            <th>Abteilung</th>
                            <th>E-Mail</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${users.map(user => {
                            const dept = this.departments.find(d => d.id === user.department);
                            return `
                                <tr>
                                    <td>${user.displayName || user.name}</td>
                                    <td>${this.getRoleDisplayName(user.role)}</td>
                                    <td>${dept ? dept.name : 'Unbekannt'}</td>
                                    <td>${user.email || 'Nicht angegeben'}</td>
                                    <td><span class="status-badge ${user.isActive ? 'active' : 'inactive'}">${user.isActive ? 'Aktiv' : 'Inaktiv'}</span></td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    generateDepartmentReportHTML(breakdown) {
        return `
            <div class="report-section">
                <h4>Abteilungs-Aufschl√ºsselung</h4>
                ${Object.values(breakdown).map(dept => `
                    <div class="department-breakdown">
                        <h5>${dept.name}</h5>
                        <div class="dept-stats">
                            <span>Gesamt: ${dept.total}</span>
                            <span>Aktiv: ${dept.active}</span>
                        </div>
                        <div class="role-breakdown">
                            ${Object.entries(dept.roles).map(([role, count]) => `
                                <span class="role-stat">${this.getRoleDisplayName(role)}: ${count}</span>
                            `).join('')}
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    generateRoleReportHTML(distribution) {
        return `
            <div class="report-section">
                <h4>Rollen-Verteilung</h4>
                ${Object.values(distribution).map(role => `
                    <div class="role-distribution">
                        <h5>${role.name} (${role.count})</h5>
                        <ul class="user-list">
                            ${role.users.map(user => `
                                <li>${user.name} - ${user.department} ${user.active ? '' : '(Inaktiv)'}</li>
                            `).join('')}
                        </ul>
                    </div>
                `).join('')}
            </div>
        `;
    }

    generateQualificationReportHTML(stats) {
        return `
            <div class="report-section">
                <h4>Qualifikations-Status</h4>
                <div class="qualification-overview">
                    <div class="qual-stats">
                        <span>Gesamt: ${stats.total}</span>
                        <span>Aktiv: ${stats.active}</span>
                        <span>Abgelaufen: ${stats.expired}</span>
                        <span>L√§uft bald ab: ${stats.expiringSoon}</span>
                    </div>
                </div>
                <table class="report-table">
                    <thead>
                        <tr>
                            <th>Mitarbeiter</th>
                            <th>Abteilung</th>
                            <th>Gesamt</th>
                            <th>Aktiv</th>
                            <th>Abgelaufen</th>
                            <th>L√§uft bald ab</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${stats.userStats.map(user => {
                            const dept = this.departments.find(d => d.id === user.department);
                            return `
                                <tr>
                                    <td>${user.name}</td>
                                    <td>${dept ? dept.name : 'Unbekannt'}</td>
                                    <td>${user.total}</td>
                                    <td>${user.active}</td>
                                    <td>${user.expired}</td>
                                    <td>${user.expiringSoon}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    exportUserReportAsPDF(reportData, reportType) {
        console.log('üìä DEBUGGING: Exporting user report as PDF...');
        
        const printWindow = window.open('', '_blank');
        const reportHTML = this.generateUserReportHTML(reportData, reportType);
        
        printWindow.document.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>Mitarbeiter-Bericht - ${reportType}</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .report-summary { margin-bottom: 30px; }
                    .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 10px; margin: 10px 0; }
                    .stat-item { text-align: center; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
                    .stat-number { display: block; font-size: 24px; font-weight: bold; color: #007bff; }
                    .stat-label { font-size: 12px; color: #666; }
                    .report-table { width: 100%; border-collapse: collapse; margin: 10px 0; }
                    .report-table th, .report-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    .report-table th { background-color: #f8f9fa; }
                    .status-badge.active { background: #d4edda; color: #155724; padding: 2px 6px; border-radius: 3px; }
                    .status-badge.inactive { background: #f8d7da; color: #721c24; padding: 2px 6px; border-radius: 3px; }
                    .department-breakdown, .role-distribution { margin: 15px 0; padding: 10px; border-left: 4px solid #007bff; }
                    .dept-stats, .qual-stats { margin: 5px 0; }
                    .dept-stats span, .qual-stats span { margin-right: 15px; font-weight: bold; }
                    .role-breakdown { margin-top: 10px; }
                    .role-stat { display: inline-block; margin-right: 15px; padding: 2px 6px; background: #f8f9fa; border-radius: 3px; }
                    .user-list { margin: 10px 0; }
                    @media print { body { margin: 0; } }
                </style>
            </head>
            <body>
                <h1>Mitarbeiter-Bericht: ${this.getReportTypeDisplayName(reportType)}</h1>
                <p>Erstellt am: ${new Date().toLocaleString('de-DE')}</p>
                <p>Firma: ${document.getElementById('companyName').textContent}</p>
                ${reportHTML}
            </body>
            </html>
        `);
        
        printWindow.document.close();
        printWindow.print();
        
        console.log('üìä DEBUGGING: PDF export window opened');
    }

    exportUserReportAsCSV(reportData, reportType) {
        console.log('üìä DEBUGGING: Exporting user report as CSV...');
        
        const headers = ['Name', 'Rolle', 'Abteilung', 'E-Mail', 'Telefon', 'Position', 'Status', 'Startdatum'];
        const csvData = reportData.users.map(user => {
            const department = this.departments.find(d => d.id === user.department);
            return [
                user.displayName || user.name,
                this.getRoleDisplayName(user.role),
                department ? department.name : 'Unbekannt',
                user.email || '',
                user.phone || '',
                user.position || '',
                user.isActive ? 'Aktiv' : 'Inaktiv',
                user.startDate || ''
            ];
        });
        
        const csvContent = [headers, ...csvData]
            .map(row => row.map(field => `"${field}"`).join(','))
            .join('\n');
        
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `mitarbeiter_bericht_${reportType}_${new Date().toISOString().split('T')[0]}.csv`;
        link.click();
        
        console.log('üìä DEBUGGING: CSV export completed');
    }

    exportUserReportAsExcel(reportData, reportType) {
        console.log('üìä DEBUGGING: Exporting user report as Excel...');
        // For now, export as CSV with .xlsx extension for Excel compatibility
        this.exportUserReportAsCSV(reportData, reportType);
    }

    getReportTypeDisplayName(reportType) {
        const reportNames = {
            'overview': 'Mitarbeiter-√úbersicht',
            'departments': 'Abteilungs-Aufschl√ºsselung',
            'roles': 'Rollen-Verteilung',
            'qualifications': 'Qualifikations-Status',
            'activity': 'Aktivit√§ts-Report',
            'complete': 'Vollst√§ndiger Bericht'
        };
        return reportNames[reportType] || reportType;
    }

    // ========================================
    // TRAINING MANAGEMENT SYSTEM
    // ========================================

    loadTrainingsFromStorage() {
        try {
            const stored = localStorage.getItem('qhse_trainings');
            const trainings = stored ? JSON.parse(stored) : [];
            
            // Initialize with default trainings if empty
            if (trainings.length === 0) {
                return this.initializeDefaultTrainings();
            }
            
            return trainings;
        } catch (error) {
            console.error('üéì ERROR: Failed to load trainings from storage:', error);
            return this.initializeDefaultTrainings();
        }
    }

    loadTrainingAssignmentsFromStorage() {
        try {
            const stored = localStorage.getItem('qhse_training_assignments');
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('üéì ERROR: Failed to load training assignments from storage:', error);
            return [];
        }
    }

    loadCertificatesFromStorage() {
        try {
            const stored = localStorage.getItem('qhse_certificates');
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('üéì ERROR: Failed to load certificates from storage:', error);
            return [];
        }
    }

    saveTrainingsToStorage() {
        try {
            localStorage.setItem('qhse_trainings', JSON.stringify(this.trainings));
            console.log('üéì SUCCESS: Trainings saved to storage');
        } catch (error) {
            console.error('üéì ERROR: Failed to save trainings to storage:', error);
        }
    }

    saveTrainingAssignmentsToStorage() {
        try {
            localStorage.setItem('qhse_training_assignments', JSON.stringify(this.trainingAssignments));
            console.log('üéì SUCCESS: Training assignments saved to storage');
        } catch (error) {
            console.error('üéì ERROR: Failed to save training assignments to storage:', error);
        }
    }

    saveCertificatesToStorage() {
        try {
            localStorage.setItem('qhse_certificates', JSON.stringify(this.certificates));
            console.log('üéì SUCCESS: Certificates saved to storage');
        } catch (error) {
            console.error('üéì ERROR: Failed to save certificates to storage:', error);
        }
    }

    initializeDefaultTrainings() {
        const defaultTrainings = [
            {
                id: 'training-001',
                title: 'Allgemeine Arbeitssicherheit',
                description: 'Grundlegende Unterweisung in Arbeitssicherheit f√ºr alle Mitarbeiter',
                category: 'safety',
                type: 'mandatory',
                duration: 120, // minutes
                validityPeriod: 12, // months
                isRecurring: true,
                content: {
                    materials: [],
                    videos: [],
                    documents: [],
                    testQuestions: []
                },
                targetRoles: ['mitarbeiter', 'techniker', 'abteilungsleiter', 'betriebsleiter'],
                targetDepartments: [],
                createdAt: new Date().toISOString(),
                createdBy: 'root-admin',
                isActive: true,
                completionCriteria: {
                    requiresTest: false,
                    passingScore: 80,
                    requiresSignature: true
                }
            },
            {
                id: 'training-002',
                title: 'Gefahrstoffunterweisung',
                description: 'Unterweisung im Umgang mit Gefahrstoffen nach GefStoffV',
                category: 'safety',
                type: 'mandatory',
                duration: 90,
                validityPeriod: 12,
                isRecurring: true,
                content: {
                    materials: [],
                    videos: [],
                    documents: [],
                    testQuestions: []
                },
                targetRoles: ['techniker', 'abteilungsleiter', 'betriebsleiter'],
                targetDepartments: ['produktion', 'instandhaltung'],
                createdAt: new Date().toISOString(),
                createdBy: 'root-admin',
                isActive: true,
                completionCriteria: {
                    requiresTest: true,
                    passingScore: 80,
                    requiresSignature: true
                }
            },
            {
                id: 'training-003',
                title: 'Qualit√§tsmanagement ISO 9001',
                description: 'Schulung zu den Grundlagen des Qualit√§tsmanagements',
                category: 'quality',
                type: 'optional',
                duration: 180,
                validityPeriod: 24,
                isRecurring: true,
                content: {
                    materials: [],
                    videos: [],
                    documents: [],
                    testQuestions: []
                },
                targetRoles: ['abteilungsleiter', 'betriebsleiter', 'qhse'],
                targetDepartments: [],
                createdAt: new Date().toISOString(),
                createdBy: 'root-admin',
                isActive: true,
                completionCriteria: {
                    requiresTest: true,
                    passingScore: 85,
                    requiresSignature: false
                }
            },
            {
                id: 'training-004',
                title: 'Datenschutz DSGVO',
                description: 'Schulung zu Datenschutzbestimmungen und DSGVO-Compliance',
                category: 'data-protection',
                type: 'mandatory',
                duration: 60,
                validityPeriod: 12,
                isRecurring: true,
                content: {
                    materials: [],
                    videos: [],
                    documents: [],
                    testQuestions: []
                },
                targetRoles: ['mitarbeiter', 'techniker', 'abteilungsleiter', 'betriebsleiter', 'qhse', 'admin'],
                targetDepartments: [],
                createdAt: new Date().toISOString(),
                createdBy: 'root-admin',
                isActive: true,
                completionCriteria: {
                    requiresTest: true,
                    passingScore: 80,
                    requiresSignature: true
                }
            }
        ];

        this.trainings = defaultTrainings;
        this.saveTrainingsToStorage();
        return defaultTrainings;
    }

    setupTrainingManagement() {
        console.log('üéì DEBUGGING: Setting up training management...');
        
        // Setup training navigation and event listeners
        this.setupTrainingEventListeners();
        this.setupTrainingTabs();
        this.updateTrainingStatistics();
        
        console.log('üéì DEBUGGING: Training management setup completed');
    }

    setupTrainingEventListeners() {
        console.log('üéì DEBUGGING: Setting up training event listeners...');
        
        // Main action buttons
        const addTrainingBtn = document.getElementById('addTrainingBtn');
        const trainingReportsBtn = document.getElementById('trainingReportsBtn');
        const trainingCalendarBtn = document.getElementById('trainingCalendarBtn');
        
        // Quick action buttons
        const myTrainingsBtn = document.getElementById('myTrainingsBtn');
        const assignTrainingsBtn = document.getElementById('assignTrainingsBtn');
        const certificatesBtn = document.getElementById('certificatesBtn');
        
        // Control buttons
        const bulkAssignBtn = document.getElementById('bulkAssignBtn');
        const exportTrainingsBtn = document.getElementById('exportTrainingsBtn');
        const newAssignmentBtn = document.getElementById('newAssignmentBtn');
        const uploadCertificateBtn = document.getElementById('uploadCertificateBtn');
        
        // Main action handlers
        if (addTrainingBtn) {
            addTrainingBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Add training button clicked');
                this.openTrainingModal();
            });
        }
        
        if (trainingReportsBtn) {
            trainingReportsBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Training reports button clicked');
                this.openTrainingReports();
            });
        }
        
        if (trainingCalendarBtn) {
            trainingCalendarBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Training calendar button clicked');
                this.openTrainingCalendar();
            });
        }
        
        // Quick action handlers
        if (myTrainingsBtn) {
            myTrainingsBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: My trainings button clicked');
                this.switchTrainingTab('my-trainings');
            });
        }
        
        if (assignTrainingsBtn) {
            assignTrainingsBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Assign trainings button clicked');
                this.switchTrainingTab('assignments');
            });
        }
        
        if (certificatesBtn) {
            certificatesBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Certificates button clicked');
                this.switchTrainingTab('certificates');
            });
        }
        
        // Control button handlers
        if (bulkAssignBtn) {
            bulkAssignBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Bulk assign button clicked');
                this.openBulkAssignmentModal();
            });
        }
        
        if (exportTrainingsBtn) {
            exportTrainingsBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Export trainings button clicked');
                this.exportTrainingData();
            });
        }
        
        if (newAssignmentBtn) {
            newAssignmentBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: New assignment button clicked');
                this.openAssignmentModal();
            });
        }
        
        if (uploadCertificateBtn) {
            uploadCertificateBtn.addEventListener('click', () => {
                console.log('üéì DEBUGGING: Upload certificate button clicked');
                this.openCertificateUploadModal();
            });
        }
        
        // Filter event listeners
        this.setupTrainingFilters();
        
        console.log('üéì DEBUGGING: Training event listeners setup completed');
    }

    setupTrainingTabs() {
        console.log('üéì DEBUGGING: Setting up training tabs...');
        
        const tabButtons = document.querySelectorAll('.training-tab-btn');
        const tabPanels = document.querySelectorAll('.training-tab-panel');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.getAttribute('data-tab');
                console.log('üéì DEBUGGING: Tab clicked:', tabId);
                
                this.switchTrainingTab(tabId);
            });
        });
        
        // Initialize with overview tab
        this.switchTrainingTab('overview');
        
        console.log('üéì DEBUGGING: Training tabs setup completed');
    }

    switchTrainingTab(tabId) {
        console.log('üéì DEBUGGING: Switching to tab:', tabId);
        
        // Update tab buttons
        const tabButtons = document.querySelectorAll('.training-tab-btn');
        const tabPanels = document.querySelectorAll('.training-tab-panel');
        
        tabButtons.forEach(btn => {
            if (btn.getAttribute('data-tab') === tabId) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
        
        // Update tab panels
        tabPanels.forEach(panel => {
            if (panel.id === `training-${tabId}`) {
                panel.classList.add('active');
            } else {
                panel.classList.remove('active');
            }
        });
        
        // Load content for the active tab
        this.loadTrainingTabContent(tabId);
    }

    loadTrainingTabContent(tabId) {
        console.log('üéì DEBUGGING: Loading content for tab:', tabId);
        
        switch (tabId) {
            case 'overview':
                this.renderTrainingOverview();
                break;
            case 'my-trainings':
                this.renderMyTrainings();
                break;
            case 'all-trainings':
                this.renderAllTrainings();
                break;
            case 'assignments':
                this.renderTrainingAssignments();
                break;
            case 'certificates':
                this.renderCertificates();
                break;
            default:
                console.log('üéì DEBUGGING: Unknown tab:', tabId);
        }
    }

    setupTrainingFilters() {
        const statusFilter = document.getElementById('trainingStatusFilter');
        const categoryFilter = document.getElementById('trainingCategoryFilter');
        const searchInput = document.getElementById('trainingSearch');
        
        if (statusFilter) {
            statusFilter.addEventListener('change', () => {
                console.log('üéì DEBUGGING: Status filter changed:', statusFilter.value);
                this.renderTrainingOverview();
            });
        }
        
        if (categoryFilter) {
            categoryFilter.addEventListener('change', () => {
                console.log('üéì DEBUGGING: Category filter changed:', categoryFilter.value);
                this.renderTrainingOverview();
            });
        }
        
        if (searchInput) {
            searchInput.addEventListener('input', () => {
                console.log('üéì DEBUGGING: Search input changed:', searchInput.value);
                this.renderTrainingOverview();
            });
        }
    }

    updateTrainingStatistics() {
        console.log('üéì DEBUGGING: Updating training statistics...');
        
        const currentUser = this.getCurrentUser();
        const userAssignments = this.getUserTrainingAssignments(currentUser.id);
        
        // Calculate statistics
        const totalCount = this.trainings.length;
        const completedCount = userAssignments.filter(a => a.status === 'completed').length;
        const pendingCount = userAssignments.filter(a => a.status === 'assigned' || a.status === 'in-progress').length;
        const overdueCount = userAssignments.filter(a => a.status === 'overdue').length;
        
        // Update UI elements
        const totalElement = document.getElementById('totalTrainingsCount');
        const completedElement = document.getElementById('completedTrainingsCount');
        const pendingElement = document.getElementById('pendingTrainingsCount');
        const overdueElement = document.getElementById('overdueTrainingsCount');
        
        if (totalElement) totalElement.textContent = totalCount;
        if (completedElement) completedElement.textContent = completedCount;
        if (pendingElement) pendingElement.textContent = pendingCount;
        if (overdueElement) overdueElement.textContent = overdueCount;
        
        console.log('üéì DEBUGGING: Statistics updated:', {
            total: totalCount,
            completed: completedCount,
            pending: pendingCount,
            overdue: overdueCount
        });
    }

    getUserTrainingAssignments(userId) {
        return this.trainingAssignments.filter(assignment => assignment.userId === userId);
    }

    renderTrainingOverview() {
        console.log('üéì DEBUGGING: Rendering training overview...');
        
        const container = document.getElementById('trainingOverviewList');
        if (!container) {
            console.error('üéì ERROR: Training overview container not found');
            return;
        }
        
        // Get filter values
        const statusFilter = document.getElementById('trainingStatusFilter')?.value || '';
        const categoryFilter = document.getElementById('trainingCategoryFilter')?.value || '';
        const searchQuery = document.getElementById('trainingSearch')?.value?.toLowerCase() || '';
        
        // Filter trainings
        let filteredTrainings = this.trainings.filter(training => {
            if (categoryFilter && training.category !== categoryFilter) return false;
            if (searchQuery && !training.title.toLowerCase().includes(searchQuery)) return false;
            return true;
        });
        
        console.log('üéì DEBUGGING: Filtered trainings:', filteredTrainings.length);
        
        if (filteredTrainings.length === 0) {
            container.innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-graduation-cap"></i>
                    <h3>Keine Schulungen gefunden</h3>
                    <p>Keine Schulungen entsprechen den ausgew√§hlten Filterkriterien.</p>
                </div>
            `;
            return;
        }
        
        // Render training items
        container.innerHTML = filteredTrainings.map(training => this.generateTrainingCard(training)).join('');
        
        // Add event listeners for training actions
        this.setupTrainingCardListeners(filteredTrainings);
        
        console.log('üéì DEBUGGING: Training overview rendered');
    }

    generateTrainingCard(training) {
        const categoryIcon = this.getTrainingCategoryIcon(training.category);
        const statusBadge = this.getTrainingStatusBadge(training);
        const durationText = this.formatDuration(training.duration);
        
        return `
            <div class="training-card" data-training-id="${training.id}">
                <div class="training-card-header">
                    <div class="training-icon">
                        <i class="fas ${categoryIcon}"></i>
                    </div>
                    <div class="training-info">
                        <h4>${training.title}</h4>
                        <p class="training-description">${training.description}</p>
                        <div class="training-meta">
                            <span class="training-duration">
                                <i class="fas fa-clock"></i> ${durationText}
                            </span>
                            <span class="training-category">
                                <i class="fas fa-tag"></i> ${this.getTrainingCategoryDisplayName(training.category)}
                            </span>
                        </div>
                    </div>
                    <div class="training-status">
                        ${statusBadge}
                    </div>
                </div>
                <div class="training-card-actions">
                    <button class="btn-small btn-primary view-training" data-training-id="${training.id}">
                        <i class="fas fa-eye"></i> Ansehen
                    </button>
                    <button class="btn-small btn-secondary assign-training" data-training-id="${training.id}">
                        <i class="fas fa-user-plus"></i> Zuweisen
                    </button>
                    <button class="btn-small btn-secondary edit-training" data-training-id="${training.id}">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                </div>
            </div>
        `;
    }

    getTrainingCategoryIcon(category) {
        const icons = {
            'safety': 'fa-shield-alt',
            'quality': 'fa-star',
            'environment': 'fa-leaf',
            'health': 'fa-heartbeat',
            'data-protection': 'fa-shield-alt',
            'compliance': 'fa-gavel',
            'technical': 'fa-cogs'
        };
        return icons[category] || 'fa-graduation-cap';
    }

    getTrainingCategoryDisplayName(category) {
        const names = {
            'safety': 'Arbeitssicherheit',
            'quality': 'Qualit√§tsmanagement',
            'environment': 'Umweltschutz',
            'health': 'Gesundheitsschutz',
            'data-protection': 'Datenschutz',
            'compliance': 'Compliance',
            'technical': 'Technische Schulung'
        };
        return names[category] || category;
    }

    getTrainingStatusBadge(training) {
        const currentUser = this.getCurrentUser();
        const assignment = this.trainingAssignments.find(a => 
            a.trainingId === training.id && a.userId === currentUser.id
        );
        
        if (!assignment) {
            return '<span class="status-badge not-assigned">Nicht zugewiesen</span>';
        }
        
        switch (assignment.status) {
            case 'completed':
                return '<span class="status-badge completed">Abgeschlossen</span>';
            case 'in-progress':
                return '<span class="status-badge in-progress">In Bearbeitung</span>';
            case 'overdue':
                return '<span class="status-badge overdue">√úberf√§llig</span>';
            case 'assigned':
                return '<span class="status-badge assigned">Zugewiesen</span>';
            default:
                return '<span class="status-badge unknown">Unbekannt</span>';
        }
    }

    formatDuration(minutes) {
        if (minutes < 60) {
            return `${minutes} Min`;
        } else {
            const hours = Math.floor(minutes / 60);
            const remainingMinutes = minutes % 60;
            if (remainingMinutes === 0) {
                return `${hours} Std`;
            } else {
                return `${hours}:${remainingMinutes.toString().padStart(2, '0')} Std`;
            }
        }
    }

    setupTrainingCardListeners(trainings) {
        trainings.forEach(training => {
            const viewBtn = document.querySelector(`.view-training[data-training-id="${training.id}"]`);
            const assignBtn = document.querySelector(`.assign-training[data-training-id="${training.id}"]`);
            const editBtn = document.querySelector(`.edit-training[data-training-id="${training.id}"]`);
            
            if (viewBtn) {
                viewBtn.addEventListener('click', () => this.viewTrainingDetails(training.id));
            }
            if (assignBtn) {
                assignBtn.addEventListener('click', () => this.openTrainingAssignmentModal(training.id));
            }
            if (editBtn) {
                editBtn.addEventListener('click', () => this.editTraining(training.id));
            }
        });
    }

    renderMyTrainings() {
        console.log('üéì DEBUGGING: Rendering my trainings...');
        
        const container = document.getElementById('myTrainingsList');
        if (!container) {
            console.error('üéì ERROR: My trainings container not found');
            return;
        }
        
        const currentUser = this.getCurrentUser();
        const userAssignments = this.getUserTrainingAssignments(currentUser.id);
        
        if (userAssignments.length === 0) {
            container.innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-user-graduate"></i>
                    <h3>Keine Schulungen zugewiesen</h3>
                    <p>Ihnen wurden noch keine Schulungen zugewiesen.</p>
                </div>
            `;
            return;
        }
        
        // Update progress bar
        this.updateMyTrainingProgress(userAssignments);
        
        // Render training assignments
        const trainingItems = userAssignments.map(assignment => {
            const training = this.trainings.find(t => t.id === assignment.trainingId);
            return training ? this.generateMyTrainingCard(training, assignment) : '';
        }).filter(item => item);
        
        container.innerHTML = trainingItems.join('');
        
        console.log('üéì DEBUGGING: My trainings rendered');
    }

    updateMyTrainingProgress(assignments) {
        const completedCount = assignments.filter(a => a.status === 'completed').length;
        const totalCount = assignments.length;
        const percentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;
        
        const progressElement = document.getElementById('myTrainingProgress');
        const progressBarElement = document.getElementById('myTrainingProgressBar');
        
        if (progressElement) {
            progressElement.textContent = `${percentage}% abgeschlossen (${completedCount} von ${totalCount})`;
        }
        
        if (progressBarElement) {
            progressBarElement.style.width = `${percentage}%`;
        }
    }

    generateMyTrainingCard(training, assignment) {
        const statusClass = assignment.status;
        const durationText = this.formatDuration(training.duration);
        const dueDate = assignment.dueDate ? new Date(assignment.dueDate).toLocaleDateString('de-DE') : 'Keine Frist';
        const isOverdue = assignment.dueDate && new Date(assignment.dueDate) < new Date();
        
        return `
            <div class="my-training-card ${statusClass} ${isOverdue ? 'overdue' : ''}">
                <div class="training-progress-indicator">
                    <div class="progress-circle ${statusClass}">
                        ${assignment.status === 'completed' ? '<i class="fas fa-check"></i>' : 
                          assignment.status === 'in-progress' ? '<i class="fas fa-play"></i>' : 
                          '<i class="fas fa-clock"></i>'}
                    </div>
                </div>
                <div class="my-training-info">
                    <h4>${training.title}</h4>
                    <p>${training.description}</p>
                    <div class="training-details">
                        <span><i class="fas fa-clock"></i> ${durationText}</span>
                        <span><i class="fas fa-calendar"></i> Frist: ${dueDate}</span>
                        <span class="training-status ${statusClass}">
                            ${this.getTrainingStatusDisplayName(assignment.status)}
                        </span>
                    </div>
                </div>
                <div class="my-training-actions">
                    ${assignment.status === 'completed' ? 
                        `<button class="btn-small btn-success view-certificate" data-assignment-id="${assignment.id}">
                            <i class="fas fa-certificate"></i> Zertifikat
                        </button>` :
                        `<button class="btn-small btn-primary start-training" data-training-id="${training.id}">
                            <i class="fas fa-play"></i> ${assignment.status === 'in-progress' ? 'Fortsetzen' : 'Starten'}
                        </button>`
                    }
                    <button class="btn-small btn-secondary view-details" data-training-id="${training.id}">
                        <i class="fas fa-info"></i> Details
                    </button>
                </div>
            </div>
        `;
    }

    getTrainingStatusDisplayName(status) {
        const names = {
            'completed': 'Abgeschlossen',
            'in-progress': 'In Bearbeitung',
            'assigned': 'Zugewiesen',
            'overdue': '√úberf√§llig',
            'not-started': 'Nicht begonnen'
        };
        return names[status] || status;
    }

    renderAllTrainings() {
        console.log('üéì DEBUGGING: Rendering all trainings...');
        const container = document.getElementById('allTrainingsList');
        if (!container) return;
        
        if (this.trainings.length === 0) {
            container.innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-graduation-cap"></i>
                    <h3>Keine Schulungen vorhanden</h3>
                    <p>Es wurden noch keine Schulungen erstellt.</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = this.trainings.map(training => this.generateDetailedTrainingCard(training)).join('');
        this.setupDetailedTrainingCardListeners();
    }

    generateDetailedTrainingCard(training) {
        const assignmentCount = this.trainingAssignments.filter(a => a.trainingId === training.id).length;
        const completedCount = this.trainingAssignments.filter(a => a.trainingId === training.id && a.status === 'completed').length;
        const completionRate = assignmentCount > 0 ? ((completedCount / assignmentCount) * 100).toFixed(1) : 0;
        
        return `
            <div class="detailed-training-card" data-training-id="${training.id}">
                <div class="training-card-header">
                    <div class="training-main-info">
                        <h4>${training.title}</h4>
                        <p>${training.description}</p>
                        <div class="training-meta-extended">
                            <span><i class="fas fa-tag"></i> ${this.getTrainingCategoryDisplayName(training.category)}</span>
                            <span><i class="fas fa-clock"></i> ${this.formatDuration(training.duration)}</span>
                            <span><i class="fas fa-users"></i> ${assignmentCount} Zuweisungen</span>
                            <span><i class="fas fa-percentage"></i> ${completionRate}% Abschluss</span>
                            <span><i class="fas fa-calendar"></i> Erstellt: ${new Date(training.createdAt).toLocaleDateString('de-DE')}</span>
                        </div>
                    </div>
                    <div class="training-actions-extended">
                        <button class="btn-small btn-primary view-detailed-training" data-training-id="${training.id}">
                            <i class="fas fa-eye"></i> Details
                        </button>
                        <button class="btn-small btn-secondary assign-detailed-training" data-training-id="${training.id}">
                            <i class="fas fa-user-plus"></i> Zuweisen
                        </button>
                        <button class="btn-small btn-secondary edit-detailed-training" data-training-id="${training.id}">
                            <i class="fas fa-edit"></i> Bearbeiten
                        </button>
                        <button class="btn-small btn-danger delete-training" data-training-id="${training.id}">
                            <i class="fas fa-trash"></i> L√∂schen
                        </button>
                    </div>
                </div>
                <div class="training-progress-bar">
                    <div class="progress-fill" style="width: ${completionRate}%"></div>
                </div>
            </div>
        `;
    }

    setupDetailedTrainingCardListeners() {
        document.querySelectorAll('.view-detailed-training').forEach(btn => {
            btn.addEventListener('click', () => {
                this.viewTrainingDetails(btn.dataset.trainingId);
            });
        });
        
        document.querySelectorAll('.assign-detailed-training').forEach(btn => {
            btn.addEventListener('click', () => {
                this.openTrainingAssignmentModal(btn.dataset.trainingId);
            });
        });
        
        document.querySelectorAll('.edit-detailed-training').forEach(btn => {
            btn.addEventListener('click', () => {
                this.editTraining(btn.dataset.trainingId);
            });
        });
        
        document.querySelectorAll('.delete-training').forEach(btn => {
            btn.addEventListener('click', () => {
                this.deleteTraining(btn.dataset.trainingId);
            });
        });
    }

    deleteTraining(trainingId) {
        const training = this.trainings.find(t => t.id === trainingId);
        if (!training) {
            alert('Schulung nicht gefunden!');
            return;
        }

        if (!confirm(`Sind Sie sicher, dass Sie die Schulung "${training.title}" l√∂schen m√∂chten? Alle zugeh√∂rigen Zuweisungen werden ebenfalls gel√∂scht.`)) {
            return;
        }
        
        // Remove training
        this.trainings = this.trainings.filter(t => t.id !== trainingId);
        
        // Remove related assignments
        this.trainingAssignments = this.trainingAssignments.filter(a => a.trainingId !== trainingId);
        
        // Save changes
        this.saveTrainingsToStorage();
        this.saveTrainingAssignmentsToStorage();
        
        // Update UI
        this.updateTrainingStatistics();
        this.renderAllTrainings();
        this.renderTrainingOverview();
        
        alert('Schulung wurde erfolgreich gel√∂scht.');
    }

    renderTrainingAssignments() {
        console.log('üéì DEBUGGING: Rendering training assignments...');
        const container = document.getElementById('assignmentsList');
        if (!container) return;
        
        const assignments = this.trainingAssignments.map(assignment => {
            const training = this.trainings.find(t => t.id === assignment.trainingId);
            const user = this.users.find(u => u.id === assignment.userId);
            return { ...assignment, training, user };
        }).filter(a => a.training && a.user);
        
        if (assignments.length === 0) {
            container.innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-users"></i>
                    <h3>Keine Zuweisungen vorhanden</h3>
                    <p>Es wurden noch keine Schulungen zugewiesen.</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = assignments.map(assignment => this.generateAssignmentCard(assignment)).join('');
        this.setupAssignmentCardListeners();
    }

    generateAssignmentCard(assignment) {
        const statusClass = assignment.status.replace('-', '_');
        const deadlineText = assignment.deadline ? new Date(assignment.deadline).toLocaleDateString('de-DE') : 'Keine Frist';
        const priorityText = assignment.priority || 'normal';
        const priorityIcon = this.getPriorityIcon(priorityText);
        
        return `
            <div class="assignment-card ${statusClass}" data-assignment-id="${assignment.id}">
                <div class="assignment-header">
                    <div class="assignment-info">
                        <h4>${assignment.training.title}</h4>
                        <p><strong>Benutzer:</strong> ${assignment.user.displayName || assignment.user.name || assignment.user.id}</p>
                        <p><strong>Abteilung:</strong> ${this.departments.find(d => d.id === assignment.user.department)?.name || 'Unbekannt'}</p>
                        <p><strong>Rolle:</strong> ${this.roleDefinitions[assignment.user.role]?.name || assignment.user.role}</p>
                        ${assignment.notes ? `<p><strong>Notizen:</strong> ${assignment.notes}</p>` : ''}
                    </div>
                    <div class="assignment-status">
                        <span class="status-badge ${assignment.status}">
                            ${this.getAssignmentStatusText(assignment.status)}
                        </span>
                        <div class="assignment-priority ${priorityText}">
                            <i class="${priorityIcon}"></i> ${priorityText.charAt(0).toUpperCase() + priorityText.slice(1)}
                        </div>
                    </div>
                </div>
                <div class="assignment-details">
                    <div class="assignment-meta">
                        <span><i class="fas fa-calendar"></i> Frist: ${deadlineText}</span>
                        <span><i class="fas fa-clock"></i> Zugewiesen: ${new Date(assignment.assignedAt).toLocaleDateString('de-DE')}</span>
                        ${assignment.startedAt ? `<span><i class="fas fa-play"></i> Gestartet: ${new Date(assignment.startedAt).toLocaleDateString('de-DE')}</span>` : ''}
                        <span><i class="fas fa-chart-line"></i> Fortschritt: ${assignment.progress || 0}%</span>
                    </div>
                    <div class="assignment-progress-bar">
                        <div class="progress-fill" style="width: ${assignment.progress || 0}%"></div>
                    </div>
                    <div class="assignment-actions">
                        <button class="btn-small btn-primary view-assignment-progress" data-assignment-id="${assignment.id}">
                            <i class="fas fa-chart-line"></i> Fortschritt
                        </button>
                        <button class="btn-small btn-secondary edit-assignment" data-assignment-id="${assignment.id}">
                            <i class="fas fa-edit"></i> Bearbeiten
                        </button>
                        ${assignment.status === 'assigned' || assignment.status === 'in-progress' ? `
                            <button class="btn-small btn-success complete-assignment" data-assignment-id="${assignment.id}">
                                <i class="fas fa-check"></i> Abschlie√üen
                            </button>
                        ` : ''}
                        <button class="btn-small btn-danger remove-assignment" data-assignment-id="${assignment.id}">
                            <i class="fas fa-times"></i> Entfernen
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    getPriorityIcon(priority) {
        const icons = {
            'normal': 'fas fa-minus',
            'high': 'fas fa-exclamation',
            'urgent': 'fas fa-exclamation-triangle'
        };
        return icons[priority] || 'fas fa-minus';
    }

    setupAssignmentCardListeners() {
        document.querySelectorAll('.view-assignment-progress').forEach(btn => {
            btn.addEventListener('click', () => {
                this.viewAssignmentProgress(btn.dataset.assignmentId);
            });
        });
        
        document.querySelectorAll('.edit-assignment').forEach(btn => {
            btn.addEventListener('click', () => {
                this.editAssignment(btn.dataset.assignmentId);
            });
        });
        
        document.querySelectorAll('.complete-assignment').forEach(btn => {
            btn.addEventListener('click', () => {
                this.completeAssignment(btn.dataset.assignmentId);
            });
        });
        
        document.querySelectorAll('.remove-assignment').forEach(btn => {
            btn.addEventListener('click', () => {
                this.removeAssignment(btn.dataset.assignmentId);
            });
        });
    }

    viewAssignmentProgress(assignmentId) {
        const assignment = this.trainingAssignments.find(a => a.id === assignmentId);
        if (!assignment) {
            alert('Zuweisung nicht gefunden!');
            return;
        }

        const training = this.trainings.find(t => t.id === assignment.trainingId);
        const user = this.users.find(u => u.id === assignment.userId);

        const modal = this.createAssignmentProgressModal(assignment, training, user);
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createAssignmentProgressModal(assignment, training, user) {
        const modal = document.createElement('div');
        modal.className = 'modal assignment-progress-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-chart-line"></i> Fortschritt: ${training.title}</h2>
                    <span class="close progress-modal-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="progress-details">
                        <div class="progress-info">
                            <h3>Benutzerinformationen</h3>
                            <p><strong>Name:</strong> ${user.displayName || user.name || user.id}</p>
                            <p><strong>Rolle:</strong> ${this.roleDefinitions[user.role]?.name || user.role}</p>
                            <p><strong>Abteilung:</strong> ${this.departments.find(d => d.id === user.department)?.name || 'Unbekannt'}</p>
                        </div>
                        <div class="progress-status">
                            <h3>Status</h3>
                            <p><strong>Aktueller Status:</strong> ${this.getAssignmentStatusText(assignment.status)}</p>
                            <p><strong>Fortschritt:</strong> ${assignment.progress || 0}%</p>
                            <p><strong>Zugewiesen am:</strong> ${new Date(assignment.assignedAt).toLocaleDateString('de-DE')}</p>
                            ${assignment.startedAt ? `<p><strong>Gestartet am:</strong> ${new Date(assignment.startedAt).toLocaleDateString('de-DE')}</p>` : ''}
                            ${assignment.deadline ? `<p><strong>Frist:</strong> ${new Date(assignment.deadline).toLocaleDateString('de-DE')}</p>` : ''}
                        </div>
                        <div class="progress-update">
                            <h3>Fortschritt aktualisieren</h3>
                            <div class="form-group">
                                <label for="updateProgress">Fortschritt (%):</label>
                                <input type="number" id="updateProgress" min="0" max="100" value="${assignment.progress || 0}">
                            </div>
                            <div class="form-group">
                                <label for="updateStatus">Status:</label>
                                <select id="updateStatus">
                                    <option value="assigned" ${assignment.status === 'assigned' ? 'selected' : ''}>Zugewiesen</option>
                                    <option value="in-progress" ${assignment.status === 'in-progress' ? 'selected' : ''}>In Bearbeitung</option>
                                    <option value="completed" ${assignment.status === 'completed' ? 'selected' : ''}>Abgeschlossen</option>
                                </select>
                            </div>
                            <div class="form-actions">
                                <button class="btn-primary" id="saveProgress">
                                    <i class="fas fa-save"></i> Speichern
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.progress-modal-close');
        closeBtn.addEventListener('click', () => modal.remove());

        const saveBtn = modal.querySelector('#saveProgress');
        saveBtn.addEventListener('click', () => {
            this.updateAssignmentProgress(assignment.id, modal);
        });

        return modal;
    }

    updateAssignmentProgress(assignmentId, modal) {
        const progress = parseInt(modal.querySelector('#updateProgress').value);
        const status = modal.querySelector('#updateStatus').value;

        const assignmentIndex = this.trainingAssignments.findIndex(a => a.id === assignmentId);
        if (assignmentIndex === -1) {
            alert('Zuweisung nicht gefunden!');
            return;
        }

        this.trainingAssignments[assignmentIndex].progress = progress;
        this.trainingAssignments[assignmentIndex].status = status;
        
        if (status === 'completed' && progress < 100) {
            this.trainingAssignments[assignmentIndex].progress = 100;
        }

        this.saveTrainingAssignmentsToStorage();
        this.renderTrainingAssignments();
        this.updateTrainingStatistics();

        alert('Fortschritt wurde aktualisiert!');
        modal.remove();
    }

    editAssignment(assignmentId) {
        const assignment = this.trainingAssignments.find(a => a.id === assignmentId);
        if (!assignment) {
            alert('Zuweisung nicht gefunden!');
            return;
        }

        // For now, open the progress modal which allows editing
        this.viewAssignmentProgress(assignmentId);
    }

    completeAssignment(assignmentId) {
        const assignmentIndex = this.trainingAssignments.findIndex(a => a.id === assignmentId);
        if (assignmentIndex === -1) {
            alert('Zuweisung nicht gefunden!');
            return;
        }

        if (confirm('Soll diese Zuweisung als abgeschlossen markiert werden?')) {
            this.trainingAssignments[assignmentIndex].status = 'completed';
            this.trainingAssignments[assignmentIndex].progress = 100;
            this.trainingAssignments[assignmentIndex].completedAt = new Date().toISOString();

            this.saveTrainingAssignmentsToStorage();
            this.renderTrainingAssignments();
            this.updateTrainingStatistics();

            alert('Zuweisung wurde als abgeschlossen markiert!');
        }
    }

    removeAssignment(assignmentId) {
        if (!confirm('Sind Sie sicher, dass Sie diese Zuweisung entfernen m√∂chten?')) {
            return;
        }
        
        this.trainingAssignments = this.trainingAssignments.filter(a => a.id !== assignmentId);
        this.saveTrainingAssignmentsToStorage();
        this.renderTrainingAssignments();
        this.updateTrainingStatistics();
        
        alert('Zuweisung wurde entfernt.');
    }

    renderCertificates() {
        console.log('üéì DEBUGGING: Rendering certificates...');
        const container = document.getElementById('certificatesList');
        if (!container) return;
        
        // Filter certificates based on search and status
        const searchQuery = document.getElementById('certificateSearch')?.value?.toLowerCase() || '';
        const statusFilter = document.getElementById('certificateStatusFilter')?.value || '';
        
        let filteredCertificates = this.certificates.filter(certificate => {
            // Search filter
            if (searchQuery && !certificate.title.toLowerCase().includes(searchQuery)) return false;
            
            // Status filter
            if (statusFilter) {
                const expiryDate = certificate.expiryDate ? new Date(certificate.expiryDate) : null;
                const isExpired = expiryDate && expiryDate < new Date();
                const isExpiring = expiryDate && expiryDate < new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
                
                if (statusFilter === 'valid' && (isExpired || isExpiring)) return false;
                if (statusFilter === 'expiring' && (!isExpiring || isExpired)) return false;
                if (statusFilter === 'expired' && !isExpired) return false;
            }
            
            return true;
        });
        
        if (filteredCertificates.length === 0) {
            container.innerHTML = `
                <div class="no-data-message">
                    <i class="fas fa-certificate"></i>
                    <h3>Keine Zertifikate gefunden</h3>
                    <p>Keine Zertifikate entsprechen den ausgew√§hlten Kriterien.</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = filteredCertificates.map(certificate => this.generateCertificateCard(certificate)).join('');
        this.setupCertificateCardListeners();
    }

    generateCertificateCard(certificate) {
        const expiryDate = certificate.expiryDate ? new Date(certificate.expiryDate) : null;
        const isExpired = expiryDate && expiryDate < new Date();
        const isExpiring = expiryDate && expiryDate < new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
        
        let statusClass = 'valid';
        let statusText = 'G√ºltig';
        
        if (isExpired) {
            statusClass = 'expired';
            statusText = 'Abgelaufen';
        } else if (isExpiring) {
            statusClass = 'expiring';
            statusText = 'L√§uft ab';
        }
        
        return `
            <div class="certificate-card ${statusClass}" data-certificate-id="${certificate.id}">
                <div class="certificate-header">
                    <div class="certificate-info">
                        <h4>${certificate.title}</h4>
                        <p><strong>Inhaber:</strong> ${certificate.holderName}</p>
                        <p><strong>Aussteller:</strong> ${certificate.issuer}</p>
                        ${certificate.notes ? `<p><strong>Notizen:</strong> ${certificate.notes}</p>` : ''}
                    </div>
                    <div class="certificate-status">
                        <span class="certificate-badge ${statusClass}">${statusText}</span>
                    </div>
                </div>
                <div class="certificate-details">
                    <div class="certificate-meta">
                        <span><i class="fas fa-calendar"></i> Ausgestellt: ${new Date(certificate.issueDate).toLocaleDateString('de-DE')}</span>
                        ${expiryDate ? `<span><i class="fas fa-calendar-times"></i> G√ºltig bis: ${expiryDate.toLocaleDateString('de-DE')}</span>` : ''}
                        ${certificate.fileName ? `<span><i class="fas fa-file"></i> Datei: ${certificate.fileName}</span>` : ''}
                    </div>
                    <div class="certificate-actions">
                        ${certificate.fileData ? `
                            <button class="btn-small btn-primary view-certificate" data-certificate-id="${certificate.id}">
                                <i class="fas fa-eye"></i> Anzeigen
                            </button>
                            <button class="btn-small btn-secondary download-certificate" data-certificate-id="${certificate.id}">
                                <i class="fas fa-download"></i> Download
                            </button>
                            <button class="btn-small btn-secondary print-certificate" data-certificate-id="${certificate.id}">
                                <i class="fas fa-print"></i> Drucken
                            </button>
                        ` : ''}
                        <button class="btn-small btn-danger delete-certificate" data-certificate-id="${certificate.id}">
                            <i class="fas fa-trash"></i> L√∂schen
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    setupCertificateCardListeners() {
        // View certificate
        document.querySelectorAll('.view-certificate').forEach(btn => {
            btn.addEventListener('click', () => {
                this.viewCertificate(btn.dataset.certificateId);
            });
        });

        // Download certificate
        document.querySelectorAll('.download-certificate').forEach(btn => {
            btn.addEventListener('click', () => {
                this.downloadCertificate(btn.dataset.certificateId);
            });
        });

        // Print certificate
        document.querySelectorAll('.print-certificate').forEach(btn => {
            btn.addEventListener('click', () => {
                this.printCertificate(btn.dataset.certificateId);
            });
        });

        // Delete certificate
        document.querySelectorAll('.delete-certificate').forEach(btn => {
            btn.addEventListener('click', () => {
                this.deleteCertificate(btn.dataset.certificateId);
            });
        });

        // Setup certificate filters
        const searchInput = document.getElementById('certificateSearch');
        const statusFilter = document.getElementById('certificateStatusFilter');
        
        if (searchInput) {
            searchInput.addEventListener('input', () => {
                this.renderCertificates();
            });
        }
        
        if (statusFilter) {
            statusFilter.addEventListener('change', () => {
                this.renderCertificates();
            });
        }
    }

    viewCertificate(certificateId) {
        const certificate = this.certificates.find(c => c.id === certificateId);
        if (!certificate || !certificate.fileData) {
            alert('Zertifikatsdatei nicht gefunden!');
            return;
        }

        const modal = this.createCertificateViewModal(certificate);
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createCertificateViewModal(certificate) {
        const modal = document.createElement('div');
        modal.className = 'modal certificate-view-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-certificate"></i> ${certificate.title}</h2>
                    <span class="close certificate-view-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="certificate-viewer">
                        <div class="certificate-info-panel">
                            <h3>Zertifikatsinformationen</h3>
                            <div class="info-grid">
                                <div class="info-item">
                                    <label>Titel:</label>
                                    <span>${certificate.title}</span>
                                </div>
                                <div class="info-item">
                                    <label>Inhaber:</label>
                                    <span>${certificate.holderName}</span>
                                </div>
                                <div class="info-item">
                                    <label>Aussteller:</label>
                                    <span>${certificate.issuer}</span>
                                </div>
                                <div class="info-item">
                                    <label>Ausstellungsdatum:</label>
                                    <span>${new Date(certificate.issueDate).toLocaleDateString('de-DE')}</span>
                                </div>
                                ${certificate.expiryDate ? `
                                    <div class="info-item">
                                        <label>Ablaufdatum:</label>
                                        <span>${new Date(certificate.expiryDate).toLocaleDateString('de-DE')}</span>
                                    </div>
                                ` : ''}
                                ${certificate.notes ? `
                                    <div class="info-item full-width">
                                        <label>Notizen:</label>
                                        <span>${certificate.notes}</span>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                        <div class="certificate-preview">
                            ${this.generateCertificatePreview(certificate)}
                        </div>
                    </div>
                    <div class="certificate-view-actions">
                        <button class="btn-primary download-cert-modal" data-certificate-id="${certificate.id}">
                            <i class="fas fa-download"></i> Download
                        </button>
                        <button class="btn-secondary print-cert-modal" data-certificate-id="${certificate.id}">
                            <i class="fas fa-print"></i> Drucken
                        </button>
                        <button class="btn-secondary close-cert-view">
                            <i class="fas fa-times"></i> Schlie√üen
                        </button>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.certificate-view-close');
        const closeViewBtn = modal.querySelector('.close-cert-view');
        [closeBtn, closeViewBtn].forEach(btn => {
            btn.addEventListener('click', () => modal.remove());
        });

        const downloadBtn = modal.querySelector('.download-cert-modal');
        downloadBtn.addEventListener('click', () => {
            this.downloadCertificate(certificate.id);
        });

        const printBtn = modal.querySelector('.print-cert-modal');
        printBtn.addEventListener('click', () => {
            this.printCertificate(certificate.id);
        });

        return modal;
    }

    generateCertificatePreview(certificate) {
        if (!certificate.fileData) {
            return '<div class="no-preview">Keine Vorschau verf√ºgbar</div>';
        }

        const fileType = certificate.fileData.split(';')[0].split(':')[1];
        
        if (fileType.startsWith('image/')) {
            return `
                <div class="image-preview">
                    <img src="${certificate.fileData}" alt="${certificate.title}" style="max-width: 100%; max-height: 500px;">
                </div>
            `;
        } else if (fileType === 'application/pdf') {
            return `
                <div class="pdf-preview">
                    <iframe src="${certificate.fileData}" width="100%" height="500px" style="border: none;">
                        <p>PDF-Vorschau nicht verf√ºgbar. <a href="${certificate.fileData}" target="_blank">Hier klicken zum √ñffnen</a></p>
                    </iframe>
                </div>
            `;
        } else {
            return `
                <div class="file-preview">
                    <i class="fas fa-file fa-3x"></i>
                    <p>Dateivorschau nicht verf√ºgbar</p>
                    <p>Dateityp: ${fileType}</p>
                </div>
            `;
        }
    }

    downloadCertificate(certificateId) {
        const certificate = this.certificates.find(c => c.id === certificateId);
        if (!certificate || !certificate.fileData) {
            alert('Zertifikatsdatei nicht gefunden!');
            return;
        }

        const link = document.createElement('a');
        link.href = certificate.fileData;
        link.download = certificate.fileName || `${certificate.title}.pdf`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    printCertificate(certificateId) {
        const certificate = this.certificates.find(c => c.id === certificateId);
        if (!certificate || !certificate.fileData) {
            alert('Zertifikatsdatei nicht gefunden!');
            return;
        }

        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>Zertifikat: ${certificate.title}</title>
                    <style>
                        body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
                        .certificate-header { margin-bottom: 20px; }
                        .certificate-info { margin-bottom: 10px; }
                        img { max-width: 100%; height: auto; }
                        @media print { body { margin: 0; } }
                    </style>
                </head>
                <body>
                    <div class="certificate-header">
                        <h1>${certificate.title}</h1>
                        <div class="certificate-info">
                            <p><strong>Inhaber:</strong> ${certificate.holderName}</p>
                            <p><strong>Aussteller:</strong> ${certificate.issuer}</p>
                            <p><strong>Ausstellungsdatum:</strong> ${new Date(certificate.issueDate).toLocaleDateString('de-DE')}</p>
                            ${certificate.expiryDate ? `<p><strong>Ablaufdatum:</strong> ${new Date(certificate.expiryDate).toLocaleDateString('de-DE')}</p>` : ''}
                        </div>
                    </div>
                    ${certificate.fileData.startsWith('data:image/') ? 
                        `<img src="${certificate.fileData}" alt="${certificate.title}">` : 
                        `<iframe src="${certificate.fileData}" width="100%" height="600px"></iframe>`
                    }
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.focus();
        setTimeout(() => {
            printWindow.print();
            printWindow.close();
        }, 250);
    }

    deleteCertificate(certificateId) {
        const certificate = this.certificates.find(c => c.id === certificateId);
        if (!certificate) {
            alert('Zertifikat nicht gefunden!');
            return;
        }

        if (confirm(`Sind Sie sicher, dass Sie das Zertifikat "${certificate.title}" l√∂schen m√∂chten? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.`)) {
            this.certificates = this.certificates.filter(c => c.id !== certificateId);
            this.saveCertificatesToStorage();
            this.renderCertificates();
            alert('Zertifikat wurde erfolgreich gel√∂scht.');
        }
    }

    // ========================================
    // FULL TRAINING FUNCTIONALITY IMPLEMENTATION
    // ========================================

    openTrainingModal() {
        console.log('üéì DEBUGGING: Opening training creation modal...');
        const modal = this.createNewTrainingModal();
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    openTrainingReports() {
        console.log('üéì DEBUGGING: Opening training reports...');
        this.openTrainingReportsModal();
    }

    openTrainingCalendar() {
        console.log('üéì DEBUGGING: Opening training calendar...');
        this.openTrainingCalendarModal();
    }

    // ========================================
    // TRAINING DETAIL FUNCTIONS
    // ========================================

    viewTrainingDetails(trainingId) {
        const training = this.trainings.find(t => t.id === trainingId);
        if (!training) {
            alert('Schulung nicht gefunden!');
            return;
        }

        const modal = this.createTrainingDetailModal(training);
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createTrainingDetailModal(training) {
        const modal = document.createElement('div');
        modal.className = 'modal training-detail-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-graduation-cap"></i> ${training.title}</h2>
                    <span class="close training-detail-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="training-detail-content">
                        <div class="training-info-grid">
                            <div class="training-main-info">
                                <div class="info-section">
                                    <h3>Beschreibung</h3>
                                    <p>${training.description}</p>
                                </div>
                                <div class="info-section">
                                    <h3>Details</h3>
                                    <div class="detail-grid">
                                        <div class="detail-item">
                                            <label>Kategorie:</label>
                                            <span>${this.getTrainingCategoryDisplayName(training.category)}</span>
                                        </div>
                                        <div class="detail-item">
                                            <label>Typ:</label>
                                            <span>${training.type === 'mandatory' ? 'Pflicht' : 'Optional'}</span>
                                        </div>
                                        <div class="detail-item">
                                            <label>Dauer:</label>
                                            <span>${this.formatDuration(training.duration)}</span>
                                        </div>
                                        <div class="detail-item">
                                            <label>G√ºltigkeit:</label>
                                            <span>${training.validityPeriod} Monate</span>
                                        </div>
                                        <div class="detail-item">
                                            <label>Wiederkehrend:</label>
                                            <span>${training.isRecurring ? 'Ja' : 'Nein'}</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="info-section">
                                    <h3>Zielgruppe</h3>
                                    <div class="target-info">
                                        <div class="target-roles">
                                            <label>Rollen:</label>
                                            <div class="role-tags">
                                                ${training.targetRoles.map(role => `<span class="role-tag">${this.roleDefinitions[role]?.name || role}</span>`).join('')}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="training-actions">
                            <button class="btn-primary start-training" data-training-id="${training.id}">
                                <i class="fas fa-play"></i> Schulung starten
                            </button>
                            <button class="btn-secondary assign-to-users" data-training-id="${training.id}">
                                <i class="fas fa-users"></i> Nutzer zuweisen
                            </button>
                            <button class="btn-secondary view-progress" data-training-id="${training.id}">
                                <i class="fas fa-chart-line"></i> Fortschritt anzeigen
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.training-detail-close');
        closeBtn.addEventListener('click', () => {
            modal.remove();
        });

        const startBtn = modal.querySelector('.start-training');
        startBtn.addEventListener('click', () => {
            this.startTraining(training.id);
            modal.remove();
        });

        const assignBtn = modal.querySelector('.assign-to-users');
        assignBtn.addEventListener('click', () => {
            this.openTrainingAssignmentModal(training.id);
        });

        const progressBtn = modal.querySelector('.view-progress');
        progressBtn.addEventListener('click', () => {
            this.viewTrainingProgress(training.id);
        });

        return modal;
    }

    startTraining(trainingId) {
        const currentUser = this.getCurrentUser();
        let assignment = this.trainingAssignments.find(a => 
            a.trainingId === trainingId && a.userId === currentUser.id
        );

        if (!assignment) {
            // Create new assignment
            assignment = {
                id: `assignment-${Date.now()}`,
                trainingId: trainingId,
                userId: currentUser.id,
                assignedBy: currentUser.id,
                assignedAt: new Date().toISOString(),
                status: 'in-progress',
                progress: 0,
                startedAt: new Date().toISOString()
            };
            this.trainingAssignments.push(assignment);
        } else {
            assignment.status = 'in-progress';
            assignment.startedAt = new Date().toISOString();
        }

        this.saveTrainingAssignmentsToStorage();
        this.updateTrainingStatistics();
        this.renderTrainingOverview();
        
        alert('Schulung wurde gestartet!');
    }

    // ========================================
    // TRAINING ASSIGNMENT FUNCTIONS
    // ========================================

    openTrainingAssignmentModal(trainingId) {
        const training = this.trainings.find(t => t.id === trainingId);
        if (!training) {
            alert('Schulung nicht gefunden!');
            return;
        }

        const modal = this.createTrainingAssignmentModal(training);
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createTrainingAssignmentModal(training) {
        const modal = document.createElement('div');
        modal.className = 'modal assignment-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-user-plus"></i> Schulung zuweisen: ${training.title}</h2>
                    <span class="close assignment-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="assignment-form">
                        <div class="form-section">
                            <h3>Benutzer ausw√§hlen</h3>
                            <div class="user-selection">
                                <div class="selection-filters">
                                    <select id="assignmentDepartmentSelect">
                                        <option value="">Alle Abteilungen</option>
                                        ${this.departments.map(dept => `<option value="${dept.id}">${dept.name}</option>`).join('')}
                                    </select>
                                    <select id="assignmentRoleSelect">
                                        <option value="">Alle Rollen</option>
                                        ${Object.entries(this.roleDefinitions).map(([key, role]) => `<option value="${key}">${role.name}</option>`).join('')}
                                    </select>
                                </div>
                                <div class="user-list" id="assignmentUserList">
                                    ${this.renderAssignmentUserList()}
                                </div>
                            </div>
                        </div>
                        <div class="form-section">
                            <h3>Zuweisung konfigurieren</h3>
                            <div class="assignment-config">
                                <div class="form-group">
                                    <label for="assignmentDeadline">Frist:</label>
                                    <input type="date" id="assignmentDeadline" min="${new Date().toISOString().split('T')[0]}">
                                </div>
                                <div class="form-group">
                                    <label for="assignmentPriority">Priorit√§t:</label>
                                    <select id="assignmentPriority">
                                        <option value="normal">Normal</option>
                                        <option value="high">Hoch</option>
                                        <option value="urgent">Dringend</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="assignmentNotes">Notizen:</label>
                                    <textarea id="assignmentNotes" placeholder="Zus√§tzliche Informationen zur Zuweisung..."></textarea>
                                </div>
                            </div>
                        </div>
                        <div class="form-actions">
                            <button class="btn-primary" id="confirmAssignment">
                                <i class="fas fa-check"></i> Zuweisen
                            </button>
                            <button class="btn-secondary" id="cancelAssignment">
                                <i class="fas fa-times"></i> Abbrechen
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.assignment-close');
        const cancelBtn = modal.querySelector('#cancelAssignment');
        [closeBtn, cancelBtn].forEach(btn => {
            btn.addEventListener('click', () => modal.remove());
        });

        const confirmBtn = modal.querySelector('#confirmAssignment');
        confirmBtn.addEventListener('click', () => {
            this.confirmTrainingAssignment(training.id, modal);
        });

        // Filter event listeners
        const deptSelect = modal.querySelector('#assignmentDepartmentSelect');
        const roleSelect = modal.querySelector('#assignmentRoleSelect');
        [deptSelect, roleSelect].forEach(select => {
            select.addEventListener('change', () => {
                this.updateAssignmentUserList(modal);
            });
        });

        return modal;
    }

    renderAssignmentUserList(departmentFilter = '', roleFilter = '') {
        return this.users.filter(user => {
            if (departmentFilter && user.department !== departmentFilter) return false;
            if (roleFilter && user.role !== roleFilter) return false;
            return true;
        }).map(user => `
            <div class="user-item">
                <label>
                    <input type="checkbox" class="user-checkbox" value="${user.id}">
                    <span class="user-info">
                        <strong>${user.displayName || user.name || user.id}</strong>
                        <small>${this.roleDefinitions[user.role]?.name || user.role} - ${this.departments.find(d => d.id === user.department)?.name || 'Keine Abteilung'}</small>
                    </span>
                </label>
            </div>
        `).join('');
    }

    updateAssignmentUserList(modal) {
        const deptFilter = modal.querySelector('#assignmentDepartmentSelect').value;
        const roleFilter = modal.querySelector('#assignmentRoleSelect').value;
        const userList = modal.querySelector('#assignmentUserList');
        userList.innerHTML = this.renderAssignmentUserList(deptFilter, roleFilter);
    }

    confirmTrainingAssignment(trainingId, modal) {
        const selectedUsers = Array.from(modal.querySelectorAll('.user-checkbox:checked')).map(cb => cb.value);
        const deadline = modal.querySelector('#assignmentDeadline').value;
        const priority = modal.querySelector('#assignmentPriority').value;
        const notes = modal.querySelector('#assignmentNotes').value;

        if (selectedUsers.length === 0) {
            alert('Bitte mindestens einen Benutzer ausw√§hlen.');
            return;
        }

        const currentUser = this.getCurrentUser();
        const assignmentDate = new Date().toISOString();

        selectedUsers.forEach(userId => {
            // Check if assignment already exists
            const existingAssignment = this.trainingAssignments.find(a => 
                a.trainingId === trainingId && a.userId === userId
            );

            if (!existingAssignment) {
                const newAssignment = {
                    id: `assignment-${Date.now()}-${userId}`,
                    trainingId: trainingId,
                    userId: userId,
                    assignedBy: currentUser.id,
                    assignedAt: assignmentDate,
                    deadline: deadline || null,
                    priority: priority,
                    notes: notes,
                    status: 'assigned',
                    progress: 0
                };
                this.trainingAssignments.push(newAssignment);
            }
        });

        this.saveTrainingAssignmentsToStorage();
        this.updateTrainingStatistics();
        
        alert(`Schulung wurde an ${selectedUsers.length} Benutzer zugewiesen.`);
        modal.remove();
    }

    editTraining(trainingId) {
        const training = this.trainings.find(t => t.id === trainingId);
        if (!training) {
            alert('Schulung nicht gefunden!');
            return;
        }
        
        // Create edit modal similar to new training modal but pre-filled
        const modal = this.createEditTrainingModal(training);
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createEditTrainingModal(training) {
        const modal = this.createNewTrainingModal();
        
        // Change title and button text
        modal.querySelector('.modal-header h2').innerHTML = `<i class="fas fa-edit"></i> Schulung bearbeiten`;
        modal.querySelector('button[type="submit"]').innerHTML = `<i class="fas fa-save"></i> √Ñnderungen speichern`;
        
        // Pre-fill form with existing data
        modal.querySelector('#trainingTitle').value = training.title;
        modal.querySelector('#trainingDescription').value = training.description;
        modal.querySelector('#trainingCategory').value = training.category;
        modal.querySelector('#trainingType').value = training.type;
        modal.querySelector('#trainingDuration').value = training.duration;
        modal.querySelector('#trainingValidity').value = training.validityPeriod;
        modal.querySelector('#trainingRecurring').checked = training.isRecurring;
        modal.querySelector('#requiresTest').checked = training.completionCriteria.requiresTest;
        modal.querySelector('#passingScore').value = training.completionCriteria.passingScore;
        modal.querySelector('#requiresSignature').checked = training.completionCriteria.requiresSignature;
        
        // Select target roles
        training.targetRoles.forEach(role => {
            const checkbox = modal.querySelector(`input[name="targetRoles"][value="${role}"]`);
            if (checkbox) checkbox.checked = true;
        });
        
        // Select target departments
        training.targetDepartments.forEach(dept => {
            const checkbox = modal.querySelector(`input[name="targetDepartments"][value="${dept}"]`);
            if (checkbox) checkbox.checked = true;
        });
        
        // Update form submission handler
        const form = modal.querySelector('#newTrainingForm');
        form.removeEventListener('submit', this.createNewTraining);
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.updateTraining(training.id, modal);
        });
        
        return modal;
    }

    updateTraining(trainingId, modal) {
        const trainingIndex = this.trainings.findIndex(t => t.id === trainingId);
        if (trainingIndex === -1) {
            alert('Schulung nicht gefunden!');
            return;
        }
        
        const currentUser = this.getCurrentUser();
        
        // Get form values (same as createNewTraining)
        const title = modal.querySelector('#trainingTitle').value;
        const description = modal.querySelector('#trainingDescription').value;
        const category = modal.querySelector('#trainingCategory').value;
        const type = modal.querySelector('#trainingType').value;
        const duration = parseInt(modal.querySelector('#trainingDuration').value);
        const validity = parseInt(modal.querySelector('#trainingValidity').value) || 12;
        const isRecurring = modal.querySelector('#trainingRecurring').checked;
        const requiresTest = modal.querySelector('#requiresTest').checked;
        const passingScore = parseInt(modal.querySelector('#passingScore').value) || 80;
        const requiresSignature = modal.querySelector('#requiresSignature').checked;
        
        const targetRoles = Array.from(modal.querySelectorAll('input[name="targetRoles"]:checked')).map(cb => cb.value);
        const targetDepartments = Array.from(modal.querySelectorAll('input[name="targetDepartments"]:checked')).map(cb => cb.value);
        
        if (!title || !description || !category || !type || !duration || targetRoles.length === 0) {
            alert('Bitte f√ºllen Sie alle Pflichtfelder aus und w√§hlen Sie mindestens eine Zielrolle.');
            return;
        }
        
        // Update training
        this.trainings[trainingIndex] = {
            ...this.trainings[trainingIndex],
            title: title,
            description: description,
            category: category,
            type: type,
            duration: duration,
            validityPeriod: validity,
            isRecurring: isRecurring,
            targetRoles: targetRoles,
            targetDepartments: targetDepartments,
            updatedAt: new Date().toISOString(),
            updatedBy: currentUser.id,
            completionCriteria: {
                requiresTest: requiresTest,
                passingScore: passingScore,
                requiresSignature: requiresSignature
            }
        };
        
        this.saveTrainingsToStorage();
        this.updateTrainingStatistics();
        this.renderTrainingOverview();
        
        alert('Schulung wurde erfolgreich aktualisiert!');
        modal.remove();
    }

    openBulkAssignmentModal() {
        const modal = this.createBulkAssignmentModal();
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createBulkAssignmentModal() {
        const modal = document.createElement('div');
        modal.className = 'modal bulk-assignment-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-users"></i> Massen-Zuweisung</h2>
                    <span class="close bulk-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="bulk-assignment-form">
                        <div class="form-section">
                            <h3>Schulungen ausw√§hlen</h3>
                            <div class="training-selection">
                                ${this.trainings.map(training => `
                                    <label class="checkbox-item">
                                        <input type="checkbox" name="bulkTrainings" value="${training.id}">
                                        ${training.title} (${this.getTrainingCategoryDisplayName(training.category)})
                                    </label>
                                `).join('')}
                            </div>
                        </div>
                        <div class="form-section">
                            <h3>Benutzer ausw√§hlen</h3>
                            <div class="bulk-user-selection">
                                <div class="selection-options">
                                    <label>
                                        <input type="radio" name="selectionType" value="department" checked>
                                        Nach Abteilung
                                    </label>
                                    <label>
                                        <input type="radio" name="selectionType" value="role">
                                        Nach Rolle
                                    </label>
                                    <label>
                                        <input type="radio" name="selectionType" value="individual">
                                        Individuelle Auswahl
                                    </label>
                                </div>
                                <div id="departmentSelection" class="selection-content">
                                    ${this.departments.map(dept => `
                                        <label class="checkbox-item">
                                            <input type="checkbox" name="bulkDepartments" value="${dept.id}">
                                            ${dept.name}
                                        </label>
                                    `).join('')}
                                </div>
                                <div id="roleSelection" class="selection-content hidden">
                                    ${Object.entries(this.roleDefinitions).map(([key, role]) => `
                                        <label class="checkbox-item">
                                            <input type="checkbox" name="bulkRoles" value="${key}">
                                            ${role.name}
                                        </label>
                                    `).join('')}
                                </div>
                                <div id="individualSelection" class="selection-content hidden">
                                    ${this.users.map(user => `
                                        <label class="checkbox-item">
                                            <input type="checkbox" name="bulkUsers" value="${user.id}">
                                            ${user.displayName || user.name || user.id} (${this.roleDefinitions[user.role]?.name || user.role})
                                        </label>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                        <div class="form-section">
                            <h3>Konfiguration</h3>
                            <div class="bulk-config">
                                <div class="form-group">
                                    <label for="bulkDeadline">Frist:</label>
                                    <input type="date" id="bulkDeadline" min="${new Date().toISOString().split('T')[0]}">
                                </div>
                                <div class="form-group">
                                    <label for="bulkPriority">Priorit√§t:</label>
                                    <select id="bulkPriority">
                                        <option value="normal">Normal</option>
                                        <option value="high">Hoch</option>
                                        <option value="urgent">Dringend</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="form-actions">
                            <button class="btn-primary" id="confirmBulkAssignment">
                                <i class="fas fa-check"></i> Massen-Zuweisung durchf√ºhren
                            </button>
                            <button class="btn-secondary" id="cancelBulkAssignment">
                                <i class="fas fa-times"></i> Abbrechen
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.bulk-close');
        const cancelBtn = modal.querySelector('#cancelBulkAssignment');
        [closeBtn, cancelBtn].forEach(btn => {
            btn.addEventListener('click', () => modal.remove());
        });

        // Selection type toggle
        modal.querySelectorAll('input[name="selectionType"]').forEach(radio => {
            radio.addEventListener('change', () => {
                modal.querySelectorAll('.selection-content').forEach(content => content.classList.add('hidden'));
                if (radio.value === 'department') {
                    modal.querySelector('#departmentSelection').classList.remove('hidden');
                } else if (radio.value === 'role') {
                    modal.querySelector('#roleSelection').classList.remove('hidden');
                } else if (radio.value === 'individual') {
                    modal.querySelector('#individualSelection').classList.remove('hidden');
                }
            });
        });

        const confirmBtn = modal.querySelector('#confirmBulkAssignment');
        confirmBtn.addEventListener('click', () => {
            this.confirmBulkAssignment(modal);
        });

        return modal;
    }

    confirmBulkAssignment(modal) {
        const selectedTrainings = Array.from(modal.querySelectorAll('input[name="bulkTrainings"]:checked')).map(cb => cb.value);
        const selectionType = modal.querySelector('input[name="selectionType"]:checked').value;
        const deadline = modal.querySelector('#bulkDeadline').value;
        const priority = modal.querySelector('#bulkPriority').value;

        if (selectedTrainings.length === 0) {
            alert('Bitte mindestens eine Schulung ausw√§hlen.');
            return;
        }

        let targetUsers = [];

        if (selectionType === 'department') {
            const selectedDepartments = Array.from(modal.querySelectorAll('input[name="bulkDepartments"]:checked')).map(cb => cb.value);
            if (selectedDepartments.length === 0) {
                alert('Bitte mindestens eine Abteilung ausw√§hlen.');
                return;
            }
            targetUsers = this.users.filter(user => selectedDepartments.includes(user.department));
        } else if (selectionType === 'role') {
            const selectedRoles = Array.from(modal.querySelectorAll('input[name="bulkRoles"]:checked')).map(cb => cb.value);
            if (selectedRoles.length === 0) {
                alert('Bitte mindestens eine Rolle ausw√§hlen.');
                return;
            }
            targetUsers = this.users.filter(user => selectedRoles.includes(user.role));
        } else if (selectionType === 'individual') {
            const selectedUserIds = Array.from(modal.querySelectorAll('input[name="bulkUsers"]:checked')).map(cb => cb.value);
            if (selectedUserIds.length === 0) {
                alert('Bitte mindestens einen Benutzer ausw√§hlen.');
                return;
            }
            targetUsers = this.users.filter(user => selectedUserIds.includes(user.id));
        }

        const currentUser = this.getCurrentUser();
        const assignmentDate = new Date().toISOString();
        let assignmentCount = 0;

        selectedTrainings.forEach(trainingId => {
            targetUsers.forEach(user => {
                // Check if assignment already exists
                const existingAssignment = this.trainingAssignments.find(a => 
                    a.trainingId === trainingId && a.userId === user.id
                );

                if (!existingAssignment) {
                    const newAssignment = {
                        id: `assignment-${Date.now()}-${trainingId}-${user.id}`,
                        trainingId: trainingId,
                        userId: user.id,
                        assignedBy: currentUser.id,
                        assignedAt: assignmentDate,
                        deadline: deadline || null,
                        priority: priority,
                        status: 'assigned',
                        progress: 0
                    };
                    this.trainingAssignments.push(newAssignment);
                    assignmentCount++;
                }
            });
        });

        this.saveTrainingAssignmentsToStorage();
        this.updateTrainingStatistics();

        alert(`Massen-Zuweisung abgeschlossen: ${assignmentCount} neue Zuweisungen erstellt.`);
        modal.remove();
    }

    exportTrainingData() {
        const data = {
            trainings: this.trainings,
            assignments: this.trainingAssignments,
            certificates: this.certificates,
            exportDate: new Date().toISOString(),
            exportedBy: this.getCurrentUser().id
        };

        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `training-data-export-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        alert('Schulungsdaten wurden erfolgreich exportiert!');
    }

    // Enhanced Training Export Functions
    exportTrainingReportAsCSV(reportData, reportType) {
        console.log('üìä Exporting training report as CSV...');
        
        let csvContent = '';
        let headers = [];
        let rows = [];
        
        switch (reportType) {
            case 'overview':
                headers = [
                    'Schulungsname',
                    'Kategorie', 
                    'Typ',
                    'Dauer (Min)',
                    'G√ºltigkeitsdauer (Monate)',
                    'Zielgruppen',
                    'Zugewiesene Personen',
                    'Abgeschlossen',
                    'Offene Zuweisungen',
                    'Abschlussrate (%)',
                    'Status'
                ];
                
                reportData.trainings.forEach(training => {
                    const assignments = this.trainingAssignments.filter(a => a.trainingId === training.id);
                    const completed = assignments.filter(a => a.status === 'completed').length;
                    const total = assignments.length;
                    const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;
                    
                    rows.push([
                        training.title,
                        this.getTrainingCategoryText(training.category),
                        training.type === 'mandatory' ? 'Pflichtschulung' : 'Freiwillig',
                        training.duration || 0,
                        training.validityPeriod || 12,
                        training.targetRoles.join('; '),
                        total,
                        completed,
                        total - completed,
                        completionRate,
                        training.isActive ? 'Aktiv' : 'Inaktiv'
                    ]);
                });
                break;
                
            case 'completion':
                headers = [
                    'Kategorie',
                    'Gesamte Schulungen',
                    'Abgeschlossene Zuweisungen',
                    'Offene Zuweisungen',
                    '√úberf√§llige Zuweisungen',
                    'Abschlussrate (%)',
                    'Compliance-Status'
                ];
                
                reportData.categories.forEach(cat => {
                    rows.push([
                        cat.name,
                        cat.totalTrainings,
                        cat.completed,
                        cat.pending,
                        cat.overdue,
                        cat.completionRate,
                        cat.completionRate >= 90 ? 'Konform' : cat.completionRate >= 75 ? 'Akzeptabel' : 'Kritisch'
                    ]);
                });
                break;
                
            case 'compliance':
                headers = [
                    'Mitarbeiter',
                    'Abteilung',
                    'Rolle',
                    'Pflichtschulungen Gesamt',
                    'Abgeschlossen',
                    '√úberf√§llig',
                    'Compliance-Rate (%)',
                    'Status',
                    'N√§chste F√§lligkeit'
                ];
                
                reportData.users.forEach(user => {
                    const nextDue = user.upcomingDeadlines.length > 0 ? 
                        new Date(Math.min(...user.upcomingDeadlines.map(d => new Date(d)))).toLocaleDateString('de-DE') : 
                        'Keine';
                    
                    rows.push([
                        user.name,
                        user.department || 'Nicht zugewiesen',
                        user.role,
                        user.mandatoryTotal,
                        user.mandatoryCompleted,
                        user.overdue,
                        user.complianceRate,
                        user.complianceRate >= 90 ? 'Konform' : user.complianceRate >= 75 ? 'Warnung' : 'Kritisch',
                        nextDue
                    ]);
                });
                break;
                
            case 'individual':
                if (reportData.user) {
                    headers = [
                        'Schulungsname',
                        'Kategorie',
                        'Typ',
                        'Status',
                        'Zugewiesen am',
                        'Abgeschlossen am',
                        'F√§llig am',
                        'Bewertung',
                        'Zertifikat'
                    ];
                    
                    reportData.assignments.forEach(assignment => {
                        const training = this.trainings.find(t => t.id === assignment.trainingId);
                        const certificate = this.certificates.find(c => 
                            c.userId === assignment.userId && c.trainingId === assignment.trainingId
                        );
                        
                        rows.push([
                            training ? training.title : 'Unbekannt',
                            training ? this.getTrainingCategoryText(training.category) : '-',
                            training ? (training.type === 'mandatory' ? 'Pflichtschulung' : 'Freiwillig') : '-',
                            this.getAssignmentStatusText(assignment.status),
                            assignment.assignedAt ? new Date(assignment.assignedAt).toLocaleDateString('de-DE') : '-',
                            assignment.completedAt ? new Date(assignment.completedAt).toLocaleDateString('de-DE') : '-',
                            assignment.dueDate ? new Date(assignment.dueDate).toLocaleDateString('de-DE') : '-',
                            assignment.score ? `${assignment.score}%` : '-',
                            certificate ? 'Vorhanden' : 'Nicht vorhanden'
                        ]);
                    });
                }
                break;
        }
        
        // Build CSV content
        csvContent = headers.join(',') + '\n';
        rows.forEach(row => {
            const csvRow = row.map(cell => {
                // Escape quotes and wrap in quotes if contains comma, quote, or newline
                const cellStr = String(cell || '');
                if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
                    return '"' + cellStr.replace(/"/g, '""') + '"';
                }
                return cellStr;
            });
            csvContent += csvRow.join(',') + '\n';
        });
        
        // Add BOM for proper Excel UTF-8 handling
        const bom = '\uFEFF';
        const blob = new Blob([bom + csvContent], { type: 'text/csv;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `schulungen-bericht-${reportType}-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        alert(`CSV-Export erfolgreich: schulungen-bericht-${reportType}-${new Date().toISOString().split('T')[0]}.csv`);
    }

    exportTrainingReportAsExcel(reportData, reportType) {
        console.log('üìà Exporting training report as Excel...');
        this.exportTrainingReportAsCSV(reportData, reportType);
        alert('Excel-Export wird als CSV-Datei bereitgestellt, die in Excel ge√∂ffnet werden kann.');
    }

    exportTrainingReportAsPDF(reportData, reportType) {
        console.log('üìÑ Generating training report PDF...');
        
        // Import jsPDF library dynamically if not available
        if (typeof window.jsPDF === 'undefined') {
            this.loadJsPDFLibrary(() => this.exportTrainingReportAsPDF(reportData, reportType));
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('p', 'mm', 'a4');
        
        // PDF Configuration
        const margin = 20;
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const contentWidth = pageWidth - (margin * 2);
        let yPosition = margin;
        
        // Company Header
        doc.setFontSize(20);
        doc.setFont('helvetica', 'bold');
        doc.text('SCHULUNGSBERICHT', margin, yPosition);
        yPosition += 10;
        
        doc.setFontSize(14);
        doc.setFont('helvetica', 'normal');
        doc.text(`${document.getElementById('companyName')?.textContent || 'Hoffmann & Voss'}`, margin, yPosition);
        yPosition += 15;
        
        // Report Header
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text(`${this.getTrainingReportTitle(reportType)}`, margin, yPosition);
        yPosition += 8;
        
        doc.setFont('helvetica', 'normal');
        doc.text(`Generiert am: ${new Date().toLocaleString('de-DE')}`, margin, yPosition);
        yPosition += 8;
        doc.text(`Erstellt von: ${this.getCurrentUser().name}`, margin, yPosition);
        yPosition += 15;
        
        switch (reportType) {
            case 'overview':
                this.addOverviewReportToPDF(doc, reportData, yPosition, margin, contentWidth);
                break;
            case 'completion':
                this.addCompletionReportToPDF(doc, reportData, yPosition, margin, contentWidth);
                break;
            case 'compliance':
                this.addComplianceReportToPDF(doc, reportData, yPosition, margin, contentWidth);
                break;
            case 'individual':
                this.addIndividualReportToPDF(doc, reportData, yPosition, margin, contentWidth);
                break;
        }
        
        // Save PDF
        const fileName = `schulungen-bericht-${reportType}-${new Date().toISOString().split('T')[0]}.pdf`;
        doc.save(fileName);
        
        alert(`PDF-Export erfolgreich: ${fileName}`);
    }

    getTrainingReportTitle(reportType) {
        const titles = {
            'overview': 'SCHULUNGS√úBERSICHT',
            'completion': 'ABSCHLUSSRATEN NACH KATEGORIEN',
            'compliance': 'COMPLIANCE-BERICHT PFLICHTSCHULUNGEN',
            'individual': 'INDIVIDUELLER SCHULUNGSBERICHT'
        };
        return titles[reportType] || 'SCHULUNGSBERICHT';
    }

    getTrainingCategoryText(category) {
        const categories = {
            'safety': 'Arbeitssicherheit',
            'quality': 'Qualit√§t',
            'environment': 'Umweltschutz',
            'health': 'Gesundheit',
            'compliance': 'Compliance',
            'technical': 'Technisch',
            'soft-skills': 'Soft Skills',
            'management': 'F√ºhrung'
        };
        return categories[category] || category;
    }

    getAssignmentStatusText(status) {
        const statusTexts = {
            'pending': 'Ausstehend',
            'in_progress': 'In Bearbeitung',
            'completed': 'Abgeschlossen',
            'overdue': '√úberf√§llig'
        };
        return statusTexts[status] || status;
    }

    prepareTrainingReportData(reportType, filters = {}) {
        console.log(`üìä Preparing training report data for type: ${reportType}`);
        
        switch (reportType) {
            case 'overview':
                return {
                    trainings: this.trainings.filter(t => 
                        !filters.department || t.targetDepartments.includes(filters.department)
                    ),
                    totalTrainings: this.trainings.length,
                    activeTrainings: this.trainings.filter(t => t.isActive).length,
                    totalAssignments: this.trainingAssignments.length,
                    completedAssignments: this.trainingAssignments.filter(a => a.status === 'completed').length
                };
                
            case 'completion':
                return this.calculateCompletionRatesByCategory(filters);
                
            case 'compliance':
                return this.calculateComplianceByUser(filters);
                
            case 'individual':
                return this.prepareIndividualReport(filters.userId);
                
            default:
                return {};
        }
    }

    // PDF Helper Functions for Training Reports
    addOverviewReportToPDF(doc, reportData, startY, margin, contentWidth) {
        let yPosition = startY;
        
        doc.setFont('helvetica', 'bold');
        doc.text('SCHULUNGSSTATISTIKEN', margin, yPosition);
        yPosition += 10;
        
        // Summary statistics
        const stats = [
            [`Gesamte Schulungen:`, reportData.totalTrainings || this.trainings.length],
            [`Aktive Schulungen:`, reportData.activeTrainings || this.trainings.filter(t => t.isActive).length],
            [`Gesamte Zuweisungen:`, reportData.totalAssignments || this.trainingAssignments.length],
            [`Abgeschlossene Zuweisungen:`, reportData.completedAssignments || this.trainingAssignments.filter(a => a.status === 'completed').length]
        ];
        
        stats.forEach(([label, value]) => {
            doc.setFont('helvetica', 'normal');
            doc.text(`${label} ${value}`, margin, yPosition);
            yPosition += 7;
        });
        
        yPosition += 10;
        
        // Training details
        doc.setFont('helvetica', 'bold');
        doc.text('SCHULUNGSDETAILS', margin, yPosition);
        yPosition += 10;
        
        reportData.trainings.forEach(training => {
            if (this.checkPageSpace(doc, yPosition, 25)) {
                doc.addPage();
                yPosition = margin;
            }
            
            const assignments = this.trainingAssignments.filter(a => a.trainingId === training.id);
            const completed = assignments.filter(a => a.status === 'completed').length;
            const total = assignments.length;
            const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;
            
            doc.setFont('helvetica', 'bold');
            doc.text(training.title, margin, yPosition);
            yPosition += 7;
            
            doc.setFont('helvetica', 'normal');
            doc.text(`Kategorie: ${this.getTrainingCategoryText(training.category)}`, margin + 5, yPosition);
            yPosition += 5;
            doc.text(`Typ: ${training.type === 'mandatory' ? 'Pflichtschulung' : 'Freiwillig'}`, margin + 5, yPosition);
            yPosition += 5;
            doc.text(`Zuweisungen: ${total} | Abgeschlossen: ${completed} | Rate: ${completionRate}%`, margin + 5, yPosition);
            yPosition += 10;
        });
    }

    addCompletionReportToPDF(doc, reportData, startY, margin, contentWidth) {
        let yPosition = startY;
        
        doc.setFont('helvetica', 'bold');
        doc.text('ABSCHLUSSRATEN NACH KATEGORIEN', margin, yPosition);
        yPosition += 15;
        
        reportData.categories.forEach(category => {
            if (this.checkPageSpace(doc, yPosition, 20)) {
                doc.addPage();
                yPosition = margin;
            }
            
            doc.setFont('helvetica', 'bold');
            doc.text(category.name, margin, yPosition);
            yPosition += 8;
            
            doc.setFont('helvetica', 'normal');
            doc.text(`Schulungen: ${category.totalTrainings}`, margin + 5, yPosition);
            yPosition += 5;
            doc.text(`Abgeschlossen: ${category.completed} | Offen: ${category.pending} | √úberf√§llig: ${category.overdue}`, margin + 5, yPosition);
            yPosition += 5;
            
            // Color-coded completion rate
            const rate = category.completionRate;
            doc.text(`Abschlussrate: ${rate}%`, margin + 5, yPosition);
            yPosition += 5;
            
            let status = 'Kritisch';
            if (rate >= 90) status = 'Konform';
            else if (rate >= 75) status = 'Akzeptabel';
            
            doc.text(`Status: ${status}`, margin + 5, yPosition);
            yPosition += 10;
        });
    }

    addComplianceReportToPDF(doc, reportData, startY, margin, contentWidth) {
        let yPosition = startY;
        
        doc.setFont('helvetica', 'bold');
        doc.text('COMPLIANCE-BERICHT PFLICHTSCHULUNGEN', margin, yPosition);
        yPosition += 15;
        
        reportData.users.forEach(user => {
            if (this.checkPageSpace(doc, yPosition, 25)) {
                doc.addPage();
                yPosition = margin;
            }
            
            doc.setFont('helvetica', 'bold');
            doc.text(`${user.name} (${user.role})`, margin, yPosition);
            yPosition += 8;
            
            doc.setFont('helvetica', 'normal');
            doc.text(`Abteilung: ${user.department || 'Nicht zugewiesen'}`, margin + 5, yPosition);
            yPosition += 5;
            doc.text(`Pflichtschulungen: ${user.mandatoryCompleted}/${user.mandatoryTotal}`, margin + 5, yPosition);
            yPosition += 5;
            doc.text(`Compliance-Rate: ${user.complianceRate}%`, margin + 5, yPosition);
            yPosition += 5;
            
            if (user.overdue > 0) {
                doc.text(`‚ö†Ô∏è √úberf√§llige Schulungen: ${user.overdue}`, margin + 5, yPosition);
                yPosition += 5;
            }
            
            yPosition += 8;
        });
    }

    addIndividualReportToPDF(doc, reportData, startY, margin, contentWidth) {
        let yPosition = startY;
        
        if (reportData.user) {
            doc.setFont('helvetica', 'bold');
            doc.text(`INDIVIDUELLER BERICHT F√úR: ${reportData.user.name}`, margin, yPosition);
            yPosition += 8;
            
            doc.setFont('helvetica', 'normal');
            doc.text(`Abteilung: ${reportData.user.department || 'Nicht zugewiesen'}`, margin, yPosition);
            yPosition += 5;
            doc.text(`Rolle: ${reportData.user.role}`, margin, yPosition);
            yPosition += 15;
            
            doc.setFont('helvetica', 'bold');
            doc.text('SCHULUNGSZUWEISUNGEN', margin, yPosition);
            yPosition += 10;
            
            reportData.assignments.forEach(assignment => {
                if (this.checkPageSpace(doc, yPosition, 20)) {
                    doc.addPage();
                    yPosition = margin;
                }
                
                const training = this.trainings.find(t => t.id === assignment.trainingId);
                
                doc.setFont('helvetica', 'bold');
                doc.text(training ? training.title : 'Unbekannte Schulung', margin, yPosition);
                yPosition += 7;
                
                doc.setFont('helvetica', 'normal');
                doc.text(`Status: ${this.getAssignmentStatusText(assignment.status)}`, margin + 5, yPosition);
                yPosition += 5;
                
                if (assignment.completedAt) {
                    doc.text(`Abgeschlossen: ${new Date(assignment.completedAt).toLocaleDateString('de-DE')}`, margin + 5, yPosition);
                    yPosition += 5;
                }
                
                if (assignment.score) {
                    doc.text(`Bewertung: ${assignment.score}%`, margin + 5, yPosition);
                    yPosition += 5;
                }
                
                yPosition += 8;
            });
        }
    }

    calculateCompletionRatesByCategory(filters = {}) {
        const categories = ['safety', 'quality', 'environment', 'health', 'compliance', 'technical'];
        
        return {
            categories: categories.map(category => {
                const categoryTrainings = this.trainings.filter(t => t.category === category);
                const categoryAssignments = this.trainingAssignments.filter(a => 
                    categoryTrainings.some(t => t.id === a.trainingId)
                );
                
                const completed = categoryAssignments.filter(a => a.status === 'completed').length;
                const pending = categoryAssignments.filter(a => a.status === 'pending' || a.status === 'in_progress').length;
                const overdue = categoryAssignments.filter(a => a.status === 'overdue').length;
                const total = categoryAssignments.length;
                
                return {
                    name: this.getTrainingCategoryText(category),
                    totalTrainings: categoryTrainings.length,
                    completed,
                    pending,
                    overdue,
                    completionRate: total > 0 ? Math.round((completed / total) * 100) : 0
                };
            }).filter(cat => cat.totalTrainings > 0)
        };
    }

    calculateComplianceByUser(filters = {}) {
        const users = this.users.filter(u => 
            !filters.department || u.department === filters.department
        );
        
        return {
            users: users.map(user => {
                const userAssignments = this.trainingAssignments.filter(a => a.userId === user.id);
                const mandatoryAssignments = userAssignments.filter(a => {
                    const training = this.trainings.find(t => t.id === a.trainingId);
                    return training && training.type === 'mandatory';
                });
                
                const mandatoryCompleted = mandatoryAssignments.filter(a => a.status === 'completed').length;
                const overdue = mandatoryAssignments.filter(a => a.status === 'overdue').length;
                const mandatoryTotal = mandatoryAssignments.length;
                
                return {
                    name: user.name,
                    department: user.department,
                    role: user.role,
                    mandatoryTotal,
                    mandatoryCompleted,
                    overdue,
                    complianceRate: mandatoryTotal > 0 ? Math.round((mandatoryCompleted / mandatoryTotal) * 100) : 100,
                    upcomingDeadlines: userAssignments
                        .filter(a => a.dueDate && new Date(a.dueDate) > new Date())
                        .map(a => a.dueDate)
                        .sort()
                };
            })
        };
    }

    prepareIndividualReport(userId) {
        const user = this.users.find(u => u.id === userId);
        const assignments = this.trainingAssignments.filter(a => a.userId === userId);
        
        return {
            user,
            assignments: assignments.sort((a, b) => new Date(b.assignedAt) - new Date(a.assignedAt))
        };
    }

    // Helper Functions for PDF Generation
    checkPageSpace(doc, currentY, neededSpace) {
        const pageHeight = doc.internal.pageSize.getHeight();
        const margin = 20;
        return currentY + neededSpace > pageHeight - margin;
    }

    loadJsPDFLibrary(callback) {
        if (typeof window.jspdf !== 'undefined') {
            callback();
            return;
        }

        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
        script.onload = () => {
            console.log('‚úÖ jsPDF library loaded successfully');
            callback();
        };
        script.onerror = () => {
            console.error('‚ùå Failed to load jsPDF library');
            alert('PDF-Export nicht verf√ºgbar. jsPDF-Bibliothek konnte nicht geladen werden.');
        };
        document.head.appendChild(script);
    }

    openAssignmentModal() {
        // This opens the general assignment modal without a specific training
        const modal = this.createGeneralAssignmentModal();
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createGeneralAssignmentModal() {
        const modal = document.createElement('div');
        modal.className = 'modal general-assignment-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-plus"></i> Neue Schulungszuweisung</h2>
                    <span class="close general-assignment-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="assignment-wizard">
                        <div class="wizard-step active" id="step1">
                            <h3>1. Schulung ausw√§hlen</h3>
                            <div class="training-list-selection">
                                ${this.trainings.map(training => `
                                    <div class="training-option" data-training-id="${training.id}">
                                        <input type="radio" name="selectedTraining" value="${training.id}" id="training-${training.id}">
                                        <label for="training-${training.id}">
                                            <strong>${training.title}</strong>
                                            <p>${training.description}</p>
                                            <small>${this.getTrainingCategoryDisplayName(training.category)} - ${this.formatDuration(training.duration)}</small>
                                        </label>
                                    </div>
                                `).join('')}
                            </div>
                            <div class="wizard-actions">
                                <button class="btn-primary" id="nextToStep2">
                                    Weiter <i class="fas fa-arrow-right"></i>
                                </button>
                            </div>
                        </div>
                        <div class="wizard-step" id="step2">
                            <h3>2. Benutzer ausw√§hlen</h3>
                            <div class="user-selection-wizard">
                                <div class="selection-filters">
                                    <select id="wizardDepartmentSelect">
                                        <option value="">Alle Abteilungen</option>
                                        ${this.departments.map(dept => `<option value="${dept.id}">${dept.name}</option>`).join('')}
                                    </select>
                                    <select id="wizardRoleSelect">
                                        <option value="">Alle Rollen</option>
                                        ${Object.entries(this.roleDefinitions).map(([key, role]) => `<option value="${key}">${role.name}</option>`).join('')}
                                    </select>
                                </div>
                                <div class="user-list-wizard" id="wizardUserList">
                                    ${this.renderWizardUserList()}
                                </div>
                            </div>
                            <div class="wizard-actions">
                                <button class="btn-secondary" id="backToStep1">
                                    <i class="fas fa-arrow-left"></i> Zur√ºck
                                </button>
                                <button class="btn-primary" id="nextToStep3">
                                    Weiter <i class="fas fa-arrow-right"></i>
                                </button>
                            </div>
                        </div>
                        <div class="wizard-step" id="step3">
                            <h3>3. Konfiguration</h3>
                            <div class="wizard-config">
                                <div class="form-group">
                                    <label for="wizardDeadline">Frist:</label>
                                    <input type="date" id="wizardDeadline" min="${new Date().toISOString().split('T')[0]}">
                                </div>
                                <div class="form-group">
                                    <label for="wizardPriority">Priorit√§t:</label>
                                    <select id="wizardPriority">
                                        <option value="normal">Normal</option>
                                        <option value="high">Hoch</option>
                                        <option value="urgent">Dringend</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="wizardNotes">Notizen:</label>
                                    <textarea id="wizardNotes" placeholder="Zus√§tzliche Informationen..."></textarea>
                                </div>
                            </div>
                            <div class="wizard-actions">
                                <button class="btn-secondary" id="backToStep2">
                                    <i class="fas fa-arrow-left"></i> Zur√ºck
                                </button>
                                <button class="btn-primary" id="completeAssignment">
                                    <i class="fas fa-check"></i> Zuweisung abschlie√üen
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add wizard navigation listeners
        this.setupWizardNavigation(modal);

        return modal;
    }

    renderWizardUserList(departmentFilter = '', roleFilter = '') {
        return this.users.filter(user => {
            if (departmentFilter && user.department !== departmentFilter) return false;
            if (roleFilter && user.role !== roleFilter) return false;
            return true;
        }).map(user => `
            <div class="wizard-user-item">
                <label>
                    <input type="checkbox" class="wizard-user-checkbox" value="${user.id}">
                    <span class="wizard-user-info">
                        <strong>${user.displayName || user.name || user.id}</strong>
                        <small>${this.roleDefinitions[user.role]?.name || user.role} - ${this.departments.find(d => d.id === user.department)?.name || 'Keine Abteilung'}</small>
                    </span>
                </label>
            </div>
        `).join('');
    }

    setupWizardNavigation(modal) {
        const closeBtn = modal.querySelector('.general-assignment-close');
        closeBtn.addEventListener('click', () => modal.remove());

        // Step navigation
        modal.querySelector('#nextToStep2').addEventListener('click', () => {
            const selectedTraining = modal.querySelector('input[name="selectedTraining"]:checked');
            if (!selectedTraining) {
                alert('Bitte w√§hlen Sie eine Schulung aus.');
                return;
            }
            this.showWizardStep(modal, 2);
        });

        modal.querySelector('#backToStep1').addEventListener('click', () => {
            this.showWizardStep(modal, 1);
        });

        modal.querySelector('#nextToStep3').addEventListener('click', () => {
            const selectedUsers = modal.querySelectorAll('.wizard-user-checkbox:checked');
            if (selectedUsers.length === 0) {
                alert('Bitte w√§hlen Sie mindestens einen Benutzer aus.');
                return;
            }
            this.showWizardStep(modal, 3);
        });

        modal.querySelector('#backToStep2').addEventListener('click', () => {
            this.showWizardStep(modal, 2);
        });

        modal.querySelector('#completeAssignment').addEventListener('click', () => {
            this.completeWizardAssignment(modal);
        });

        // Filter listeners
        const deptSelect = modal.querySelector('#wizardDepartmentSelect');
        const roleSelect = modal.querySelector('#wizardRoleSelect');
        [deptSelect, roleSelect].forEach(select => {
            select.addEventListener('change', () => {
                this.updateWizardUserList(modal);
            });
        });
    }

    showWizardStep(modal, stepNumber) {
        modal.querySelectorAll('.wizard-step').forEach(step => step.classList.remove('active'));
        modal.querySelector(`#step${stepNumber}`).classList.add('active');
    }

    updateWizardUserList(modal) {
        const deptFilter = modal.querySelector('#wizardDepartmentSelect').value;
        const roleFilter = modal.querySelector('#wizardRoleSelect').value;
        const userList = modal.querySelector('#wizardUserList');
        userList.innerHTML = this.renderWizardUserList(deptFilter, roleFilter);
    }

    completeWizardAssignment(modal) {
        const selectedTraining = modal.querySelector('input[name="selectedTraining"]:checked').value;
        const selectedUsers = Array.from(modal.querySelectorAll('.wizard-user-checkbox:checked')).map(cb => cb.value);
        const deadline = modal.querySelector('#wizardDeadline').value;
        const priority = modal.querySelector('#wizardPriority').value;
        const notes = modal.querySelector('#wizardNotes').value;

        const currentUser = this.getCurrentUser();
        const assignmentDate = new Date().toISOString();

        selectedUsers.forEach(userId => {
            const existingAssignment = this.trainingAssignments.find(a => 
                a.trainingId === selectedTraining && a.userId === userId
            );

            if (!existingAssignment) {
                const newAssignment = {
                    id: `assignment-${Date.now()}-${userId}`,
                    trainingId: selectedTraining,
                    userId: userId,
                    assignedBy: currentUser.id,
                    assignedAt: assignmentDate,
                    deadline: deadline || null,
                    priority: priority,
                    notes: notes,
                    status: 'assigned',
                    progress: 0
                };
                this.trainingAssignments.push(newAssignment);
            }
        });

        this.saveTrainingAssignmentsToStorage();
        this.updateTrainingStatistics();

        alert(`Schulung wurde an ${selectedUsers.length} Benutzer zugewiesen.`);
        modal.remove();
    }

    openCertificateUploadModal() {
        const modal = this.createCertificateUploadModal();
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createCertificateUploadModal() {
        const modal = document.createElement('div');
        modal.className = 'modal certificate-upload-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-upload"></i> Zertifikat hochladen</h2>
                    <span class="close certificate-upload-close">&times;</span>
                </div>
                <div class="modal-body">
                    <form class="certificate-form" id="certificateUploadForm">
                        <div class="form-group">
                            <label for="certificateTitle">Zertifikatstitel *</label>
                            <input type="text" id="certificateTitle" required placeholder="z.B. Arbeitssicherheit Grundausbildung">
                        </div>
                        <div class="form-group">
                            <label for="certificateHolder">Inhaber *</label>
                            <select id="certificateHolder" required>
                                <option value="">Bitte w√§hlen...</option>
                                ${this.users.map(user => `
                                    <option value="${user.id}" ${user.id === this.getCurrentUser().id ? 'selected' : ''}>
                                        ${user.displayName || user.name || user.id}
                                    </option>
                                `).join('')}
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="certificateIssuer">Aussteller *</label>
                            <input type="text" id="certificateIssuer" required placeholder="z.B. T√úV Nord, IHK, etc.">
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="certificateIssueDate">Ausstellungsdatum *</label>
                                <input type="date" id="certificateIssueDate" required>
                            </div>
                            <div class="form-group">
                                <label for="certificateExpiryDate">Ablaufdatum</label>
                                <input type="date" id="certificateExpiryDate">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="certificateFile">Zertifikatsdatei</label>
                            <input type="file" id="certificateFile" accept=".pdf,.jpg,.jpeg,.png">
                            <small>Unterst√ºtzte Formate: PDF, JPG, PNG (max. 5MB)</small>
                        </div>
                        <div class="form-group">
                            <label for="certificateNotes">Notizen</label>
                            <textarea id="certificateNotes" placeholder="Zus√§tzliche Informationen zum Zertifikat..."></textarea>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-save"></i> Zertifikat speichern
                            </button>
                            <button type="button" class="btn-secondary" id="cancelCertificateUpload">
                                <i class="fas fa-times"></i> Abbrechen
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.certificate-upload-close');
        const cancelBtn = modal.querySelector('#cancelCertificateUpload');
        [closeBtn, cancelBtn].forEach(btn => {
            btn.addEventListener('click', () => modal.remove());
        });

        const form = modal.querySelector('#certificateUploadForm');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveCertificate(modal);
        });

        return modal;
    }

    saveCertificate(modal) {
        const title = modal.querySelector('#certificateTitle').value;
        const holderId = modal.querySelector('#certificateHolder').value;
        const issuer = modal.querySelector('#certificateIssuer').value;
        const issueDate = modal.querySelector('#certificateIssueDate').value;
        const expiryDate = modal.querySelector('#certificateExpiryDate').value;
        const fileInput = modal.querySelector('#certificateFile');
        const notes = modal.querySelector('#certificateNotes').value;

        if (!title || !holderId || !issuer || !issueDate) {
            alert('Bitte f√ºllen Sie alle Pflichtfelder aus.');
            return;
        }

        const currentUser = this.getCurrentUser();
        const holderUser = this.users.find(u => u.id === holderId);

        const newCertificate = {
            id: `certificate-${Date.now()}`,
            title: title,
            holderId: holderId,
            holderName: holderUser ? (holderUser.displayName || holderUser.name || holderUser.id) : 'Unbekannt',
            issuer: issuer,
            issueDate: issueDate,
            expiryDate: expiryDate || null,
            notes: notes,
            uploadedBy: currentUser.id,
            uploadedAt: new Date().toISOString(),
            fileName: fileInput.files.length > 0 ? fileInput.files[0].name : null,
            fileSize: fileInput.files.length > 0 ? fileInput.files[0].size : null
        };

        // Handle file upload (in a real app, this would upload to a server)
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            const reader = new FileReader();
            reader.onload = (e) => {
                newCertificate.fileData = e.target.result;
                this.certificates.push(newCertificate);
                this.saveCertificatesToStorage();
                alert('Zertifikat wurde erfolgreich hochgeladen!');
                modal.remove();
            };
            reader.readAsDataURL(file);
        } else {
            this.certificates.push(newCertificate);
            this.saveCertificatesToStorage();
            alert('Zertifikat wurde erfolgreich gespeichert!');
            modal.remove();
        }
    }

    viewTrainingProgress(trainingId) {
        const training = this.trainings.find(t => t.id === trainingId);
        if (!training) {
            alert('Schulung nicht gefunden!');
            return;
        }

        const assignments = this.trainingAssignments.filter(a => a.trainingId === trainingId);
        const modal = this.createProgressModal(training, assignments);
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createProgressModal(training, assignments) {
        const totalAssignments = assignments.length;
        const completedAssignments = assignments.filter(a => a.status === 'completed').length;
        const inProgressAssignments = assignments.filter(a => a.status === 'in-progress').length;
        const overdueAssignments = assignments.filter(a => a.status === 'overdue').length;
        const completionRate = totalAssignments > 0 ? ((completedAssignments / totalAssignments) * 100).toFixed(1) : 0;

        const modal = document.createElement('div');
        modal.className = 'modal progress-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-chart-line"></i> Fortschritt: ${training.title}</h2>
                    <span class="close progress-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="progress-overview">
                        <div class="progress-stats">
                            <div class="stat-item">
                                <h3>${totalAssignments}</h3>
                                <p>Gesamt Zuweisungen</p>
                            </div>
                            <div class="stat-item">
                                <h3>${completedAssignments}</h3>
                                <p>Abgeschlossen</p>
                            </div>
                            <div class="stat-item">
                                <h3>${inProgressAssignments}</h3>
                                <p>In Bearbeitung</p>
                            </div>
                            <div class="stat-item">
                                <h3>${overdueAssignments}</h3>
                                <p>√úberf√§llig</p>
                            </div>
                        </div>
                        <div class="progress-chart">
                            <h4>Abschlussrate: ${completionRate}%</h4>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${completionRate}%"></div>
                            </div>
                        </div>
                        <div class="assignment-details">
                            <h4>Detaillierte √úbersicht</h4>
                            <div class="assignment-list">
                                ${assignments.map(assignment => {
                                    const user = this.users.find(u => u.id === assignment.userId);
                                    const statusClass = assignment.status.replace('-', '_');
                                    return `
                                        <div class="assignment-detail-item ${statusClass}">
                                            <div class="user-info">
                                                <strong>${user ? (user.displayName || user.name || user.id) : 'Unbekannter Benutzer'}</strong>
                                                <small>${user ? (this.roleDefinitions[user.role]?.name || user.role) : ''}</small>
                                            </div>
                                            <div class="assignment-progress">
                                                <span class="status-badge ${assignment.status}">
                                                    ${this.getAssignmentStatusText(assignment.status)}
                                                </span>
                                                <div class="progress-bar-small">
                                                    <div class="progress-fill-small" style="width: ${assignment.progress || 0}%"></div>
                                                </div>
                                                <span class="progress-percent">${assignment.progress || 0}%</span>
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        const closeBtn = modal.querySelector('.progress-close');
        closeBtn.addEventListener('click', () => modal.remove());

        return modal;
    }

    // ========================================
    // TRAINING CREATION FUNCTIONS
    // ========================================


    createNewTrainingModal() {
        const modal = document.createElement('div');
        modal.className = 'modal new-training-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-plus"></i> Neue Schulung erstellen</h2>
                    <span class="close new-training-close">&times;</span>
                </div>
                <div class="modal-body">
                    <form class="training-form" id="newTrainingForm">
                        <!-- Tab Navigation -->
                        <div class="form-tabs">
                            <button type="button" class="tab-btn active" data-tab="basic">Grunddaten</button>
                            <button type="button" class="tab-btn" data-tab="content">Inhalte</button>
                            <button type="button" class="tab-btn" data-tab="targets">Zielgruppe</button>
                            <button type="button" class="tab-btn" data-tab="requirements">Pr√ºfung</button>
                            <button type="button" class="tab-btn" data-tab="questions">Fragen</button>
                            <button type="button" class="tab-btn" data-tab="media">Multimedia</button>
                            <button type="button" class="tab-btn" data-tab="certification">Zertifizierung</button>
                            <button type="button" class="tab-btn" data-tab="quality">Qualit√§t</button>
                            <button type="button" class="tab-btn" data-tab="advanced">Erweitert</button>
                        </div>

                        <div class="form-sections">
                            <!-- Tab 1: Grunddaten -->
                            <div class="form-section tab-content active" data-tab="basic">
                                <h3><i class="fas fa-info-circle"></i> Grundinformationen</h3>
                                <div class="form-grid">
                                    <div class="form-group full-width">
                                        <label for="trainingTitle">Schulungstitel * <span class="help-text">(T√úV-konforme Bezeichnung)</span></label>
                                        <input type="text" id="trainingTitle" name="trainingTitle" required placeholder="z.B. Arbeitssicherheit nach DGUV Vorschrift 1">
                                    </div>
                                    <div class="form-group">
                                        <label for="trainingCode">Schulungs-ID/Code *</label>
                                        <input type="text" id="trainingCode" name="trainingCode" required placeholder="z.B. AS-001-2024" pattern="[A-Z]{2}-[0-9]{3}-[0-9]{4}">
                                        <small>Format: XX-000-YYYY (z.B. AS-001-2024)</small>
                                    </div>
                                    <div class="form-group">
                                        <label for="trainingVersion">Version *</label>
                                        <input type="text" id="trainingVersion" name="trainingVersion" required value="1.0" placeholder="1.0">
                                    </div>
                                    <div class="form-group full-width">
                                        <label for="trainingDescription">Detaillierte Beschreibung *</label>
                                        <textarea id="trainingDescription" name="trainingDescription" required placeholder="Umfassende Beschreibung der Schulungsinhalte, Lernziele und Methoden..." rows="4"></textarea>
                                    </div>
                                    <div class="form-group">
                                        <label for="trainingCategory">Kategorie *</label>
                                        <select id="trainingCategory" name="trainingCategory" required>
                                            <option value="">Bitte w√§hlen...</option>
                                            <option value="safety">Arbeitssicherheit (DGUV)</option>
                                            <option value="health">Gesundheitsschutz (ArbSchG)</option>
                                            <option value="environment">Umweltschutz (ISO 14001)</option>
                                            <option value="quality">Qualit√§tsmanagement (ISO 9001)</option>
                                            <option value="data-protection">Datenschutz (DSGVO)</option>
                                            <option value="compliance">Compliance & Recht</option>
                                            <option value="technical">Technische Qualifikation</option>
                                            <option value="fire-safety">Brandschutz</option>
                                            <option value="first-aid">Erste Hilfe</option>
                                            <option value="crane-operator">Kranf√ºhrer</option>
                                            <option value="forklift">Staplerfahrer</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="trainingType">Schulungstyp *</label>
                                        <select id="trainingType" name="trainingType" required>
                                            <option value="mandatory">Pflichtschulung (gesetzlich)</option>
                                            <option value="regulatory">Vorschriftenschulung (beh√∂rdlich)</option>
                                            <option value="certification">Zertifizierungsschulung</option>
                                            <option value="qualification">Qualifizierungsschulung</option>
                                            <option value="refresher">Auffrischungsschulung</option>
                                            <option value="optional">Freiwillige Weiterbildung</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="trainingDuration">Schulungsdauer (Minuten) *</label>
                                        <input type="number" id="trainingDuration" name="trainingDuration" required min="15" max="960" placeholder="60">
                                        <small>Inkl. Pausen (15 min - 16 Std)</small>
                                    </div>
                                    <div class="form-group">
                                        <label for="trainingValidity">G√ºltigkeitsdauer (Monate) *</label>
                                        <select id="trainingValidity" name="trainingValidity" required>
                                            <option value="6">6 Monate</option>
                                            <option value="12" selected>12 Monate (Standard)</option>
                                            <option value="24">24 Monate</option>
                                            <option value="36">36 Monate</option>
                                            <option value="60">5 Jahre</option>
                                            <option value="unbegrenzt">Unbegrenzt</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="trainingLanguage">Sprache *</label>
                                        <select id="trainingLanguage" name="trainingLanguage" required>
                                            <option value="de" selected>Deutsch</option>
                                            <option value="en">Englisch</option>
                                            <option value="fr">Franz√∂sisch</option>
                                            <option value="es">Spanisch</option>
                                            <option value="multi">Mehrsprachig</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group checkbox-group">
                                    <label><input type="checkbox" id="trainingRecurring" name="trainingRecurring"> Wiederkehrende Schulung (automatische Neuzuweisung)</label>
                                    <label><input type="checkbox" id="trainingMandatory" name="trainingMandatory"> Gesetzliche Pflichtschulung</label>
                                    <label><input type="checkbox" id="trainingCertified" name="trainingCertified"> T√úV/externe Zertifizierung erforderlich</label>
                                </div>
                            </div>

                            <!-- Tab 2: Inhalte -->
                            <div class="form-section tab-content" data-tab="content">
                                <h3><i class="fas fa-book"></i> Schulungsinhalte & Materialien</h3>
                                
                                <div class="form-group">
                                    <label for="learningObjectives">Lernziele * <span class="help-text">(messbare Kompetenzen)</span></label>
                                    <textarea id="learningObjectives" name="learningObjectives" required placeholder="1. Teilnehmer k√∂nnen...&#10;2. Teilnehmer sind in der Lage...&#10;3. Teilnehmer verstehen..." rows="4"></textarea>
                                </div>

                                <div class="form-group">
                                    <label for="trainingContent">Detaillierte Inhalte *</label>
                                    <textarea id="trainingContent" name="trainingContent" required placeholder="Gliederung der Schulungsinhalte:&#10;1. Einf√ºhrung&#10;2. Theoretische Grundlagen&#10;3. Praktische √úbungen&#10;4. Pr√ºfung" rows="6"></textarea>
                                </div>

                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="trainingMethod">Schulungsmethode *</label>
                                        <select id="trainingMethod" name="trainingMethod" required>
                                            <option value="">Bitte w√§hlen...</option>
                                            <option value="classroom">Pr√§senzschulung</option>
                                            <option value="online">Online-Schulung</option>
                                            <option value="blended">Blended Learning</option>
                                            <option value="practical">Praktische Unterweisung</option>
                                            <option value="workshop">Workshop</option>
                                            <option value="elearning">E-Learning Modul</option>
                                            <option value="simulation">Simulation/VR</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="maxParticipants">Max. Teilnehmerzahl</label>
                                        <input type="number" id="maxParticipants" name="maxParticipants" min="1" max="50" placeholder="12">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Schulungsunterlagen</label>
                                    <div class="file-upload-area" id="trainingMaterials">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                        <p>Materialien hochladen (PDF, DOC, PPT)</p>
                                        <input type="file" multiple accept=".pdf,.doc,.docx,.ppt,.pptx,.mp4,.mp3">
                                    </div>
                                    <div id="uploadedMaterials" class="uploaded-files"></div>
                                </div>
                            </div>
                            <!-- Tab 3: Zielgruppe -->
                            <div class="form-section tab-content" data-tab="targets">
                                <h3><i class="fas fa-users"></i> Zielgruppe & Teilnahmevoraussetzungen</h3>
                                
                                <div class="form-group">
                                    <label>Zielrollen: *</label>
                                    <div class="checkbox-grid">
                                        ${Object.entries(this.roleDefinitions).map(([key, role]) => `
                                            <label class="checkbox-item">
                                                <input type="checkbox" name="targetRoles" value="${key}">
                                                ${role.name}
                                            </label>
                                        `).join('')}
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label>Abteilungen (optional):</label>
                                    <div class="checkbox-grid">
                                        ${this.departments.map(dept => `
                                            <label class="checkbox-item">
                                                <input type="checkbox" name="targetDepartments" value="${dept.id}">
                                                ${dept.name}
                                            </label>
                                        `).join('')}
                                    </div>
                                </div>

                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="minExperience">Mindesterfahrung (Jahre)</label>
                                        <input type="number" id="minExperience" name="minExperience" min="0" max="10" placeholder="0">
                                    </div>
                                    <div class="form-group">
                                        <label for="requiredEducation">Erforderliche Ausbildung</label>
                                        <select id="requiredEducation" name="requiredEducation">
                                            <option value="">Keine spezielle Ausbildung</option>
                                            <option value="apprentice">Abgeschlossene Ausbildung</option>
                                            <option value="bachelor">Bachelor/FH</option>
                                            <option value="master">Master/Diplom</option>
                                            <option value="certification">Fachzertifikat</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="prerequisites">Teilnahmevoraussetzungen</label>
                                    <textarea id="prerequisites" name="prerequisites" placeholder="z.B. Grundkenntnisse in..., Abgeschlossene Schulung XY, Mindestqualifikation..." rows="3"></textarea>
                                </div>
                            </div>

                            <!-- Tab 4: Anforderungen -->
                            <div class="form-section tab-content" data-tab="requirements">
                                <h3><i class="fas fa-clipboard-check"></i> Pr√ºfungs- & Abschlusskriterien</h3>
                                
                                <div class="form-group">
                                    <label>Pr√ºfungsform *</label>
                                    <div class="radio-group">
                                        <label><input type="radio" name="assessmentType" value="none"> Keine Pr√ºfung</label>
                                        <label><input type="radio" name="assessmentType" value="quiz" checked> Online-Test/Quiz</label>
                                        <label><input type="radio" name="assessmentType" value="practical"> Praktische Pr√ºfung</label>
                                        <label><input type="radio" name="assessmentType" value="written"> Schriftliche Pr√ºfung</label>
                                        <label><input type="radio" name="assessmentType" value="oral"> M√ºndliche Pr√ºfung</label>
                                        <label><input type="radio" name="assessmentType" value="combined"> Kombiniert (Theorie + Praxis)</label>
                                    </div>
                                </div>

                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="passingScore">Mindestpunktzahl (%) *</label>
                                        <input type="number" id="passingScore" name="passingScore" min="50" max="100" value="80" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="maxAttempts">Max. Pr√ºfungsversuche</label>
                                        <input type="number" id="maxAttempts" name="maxAttempts" min="1" max="5" value="3">
                                    </div>
                                    <div class="form-group">
                                        <label for="examDuration">Pr√ºfungszeit (Minuten)</label>
                                        <input type="number" id="examDuration" name="examDuration" min="5" max="240" placeholder="30">
                                    </div>
                                    <div class="form-group">
                                        <label for="questionCount">Anzahl Fragen</label>
                                        <input type="number" id="questionCount" name="questionCount" min="1" max="100" placeholder="20">
                                    </div>
                                </div>

                                <div class="form-group checkbox-group">
                                    <label><input type="checkbox" id="requiresSignature" name="requiresSignature" checked> Digitale Unterschrift erforderlich</label>
                                    <label><input type="checkbox" id="requiresPresence" name="requiresPresence"> Anwesenheitspflicht (Pr√§senzschulung)</label>
                                    <label><input type="checkbox" id="requiresHomework" name="requiresHomework"> Hausaufgaben/Nachbereitung</label>
                                    <label><input type="checkbox" id="allowRetake" name="allowRetake"> Wiederholung bei Nichtbestehen m√∂glich</label>
                                </div>

                                <div class="form-group">
                                    <label for="failureConsequences">Konsequenzen bei Nichtbestehen</label>
                                    <textarea id="failureConsequences" name="failureConsequences" placeholder="z.B. Wiederholung nach 30 Tagen, Zus√§tzliche Unterweisung erforderlich..." rows="2"></textarea>
                                </div>
                            </div>

                            <!-- Tab 5: Zertifizierung -->
                            <div class="form-section tab-content" data-tab="certification">
                                <h3><i class="fas fa-certificate"></i> Zertifikate & Nachweise</h3>
                                
                                <div class="form-group checkbox-group">
                                    <label><input type="checkbox" id="generatesCertificate" name="generatesCertificate" checked> Automatische Zertifikatserstellung</label>
                                    <label><input type="checkbox" id="tuevCertified" name="tuevCertified"> T√úV-zertifizierte Schulung</label>
                                    <label><input type="checkbox" id="isoCompliant" name="isoCompliant"> ISO-konform</label>
                                    <label><input type="checkbox" id="dguvrCompliant" name="dguvrCompliant"> DGUV-konform</label>
                                </div>

                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="certificateTemplate">Zertifikat-Vorlage</label>
                                        <select id="certificateTemplate" name="certificateTemplate">
                                            <option value="standard">Standard-Zertifikat</option>
                                            <option value="safety">Arbeitssicherheit</option>
                                            <option value="quality">Qualit√§tsmanagement</option>
                                            <option value="tuev">T√úV-Zertifikat</option>
                                            <option value="dguv">DGUV-Nachweis</option>
                                            <option value="custom">Benutzerdefiniert</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="certificationBody">Zertifizierungsstelle</label>
                                        <input type="text" id="certificationBody" name="certificationBody" placeholder="z.B. T√úV NORD, DEKRA, BG BAU">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="certificationNumber">Zertifikatsnummer/Akkreditierung</label>
                                    <input type="text" id="certificationNumber" name="certificationNumber" placeholder="z.B. T√úV-12345-2024">
                                </div>

                                <div class="form-group">
                                    <label for="legalBasis">Rechtliche Grundlage</label>
                                    <textarea id="legalBasis" name="legalBasis" placeholder="z.B. ¬ß4 ArbSchG, DGUV Vorschrift 1, ISO 9001:2015..." rows="3"></textarea>
                                </div>

                                <div class="form-group">
                                    <label for="auditRequirements">Audit-Anforderungen</label>
                                    <textarea id="auditRequirements" name="auditRequirements" placeholder="Besondere Anforderungen f√ºr interne/externe Audits..." rows="2"></textarea>
                                </div>
                            </div>

                            <!-- Tab 6: Qualit√§tssicherung -->
                            <div class="form-section tab-content" data-tab="quality">
                                <h3><i class="fas fa-star"></i> Qualit√§tssicherung & Dokumentation</h3>
                                
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="trainer">Trainer/Dozent *</label>
                                        <select id="trainer" name="trainer" required>
                                            <option value="">Bitte ausw√§hlen...</option>
                                            ${this.users.filter(u => u.role === 'qhse' || u.role === 'admin' || u.role === 'root-admin').map(user => `
                                                <option value="${user.id}">${user.name}</option>
                                            `).join('')}
                                            <option value="external">Externer Trainer</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="trainerQualification">Trainer-Qualifikation</label>
                                        <input type="text" id="trainerQualification" name="trainerQualification" placeholder="z.B. Sifa, Ingenieur, T√úV-zertifiziert">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="reviewCycle">√úberpr√ºfungszyklus (Monate)</label>
                                    <select id="reviewCycle" name="reviewCycle">
                                        <option value="6">6 Monate</option>
                                        <option value="12" selected>12 Monate</option>
                                        <option value="24">24 Monate</option>
                                        <option value="36">36 Monate</option>
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label>Feedback-Verfahren</label>
                                    <div class="checkbox-group">
                                        <label><input type="checkbox" id="feedbackAuto" name="feedbackAuto" checked> Automatische Bewertungsabfrage</label>
                                        <label><input type="checkbox" id="feedbackTrainer" name="feedbackTrainer"> Trainer-Bewertung</label>
                                        <label><input type="checkbox" id="feedbackContent" name="feedbackContent"> Inhalts-Bewertung</label>
                                        <label><input type="checkbox" id="feedbackSuggestions" name="feedbackSuggestions"> Verbesserungsvorschl√§ge</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="recordKeeping">Aufbewahrung Schulungsnachweis</label>
                                    <select id="recordKeeping" name="recordKeeping">
                                        <option value="3">3 Jahre</option>
                                        <option value="5">5 Jahre</option>
                                        <option value="10" selected>10 Jahre</option>
                                        <option value="30">30 Jahre</option>
                                        <option value="permanent">Dauerhaft</option>
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="approvalProcess">Freigabeprozess</label>
                                    <div class="radio-group">
                                        <label><input type="radio" name="approval" value="automatic" checked> Automatische Freigabe</label>
                                        <label><input type="radio" name="approval" value="supervisor"> Vorgesetzten-Freigabe</label>
                                        <label><input type="radio" name="approval" value="qhse"> QHSE-Manager Freigabe</label>
                                        <label><input type="radio" name="approval" value="external"> Externe Zertifizierung</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="qualityNotes">Qualit√§tshinweise</label>
                                    <textarea id="qualityNotes" name="qualityNotes" placeholder="Besondere Qualit√§tsanforderungen, Standards, Hinweise f√ºr Auditoren..." rows="3"></textarea>
                                </div>
                            </div>

                            <!-- Tab 5: Fragenerstellung -->
                            <div class="form-section tab-content" data-tab="questions">
                                <h3><i class="fas fa-question-circle"></i> Pr√ºfungsfragen & Tests</h3>
                                
                                <div class="form-group">
                                    <label>Fragentypen</label>
                                    <div class="checkbox-group">
                                        <label><input type="checkbox" name="questionTypes" value="multiple-choice" checked> Multiple Choice</label>
                                        <label><input type="checkbox" name="questionTypes" value="true-false"> Richtig/Falsch</label>
                                        <label><input type="checkbox" name="questionTypes" value="fill-blank"> L√ºckentext</label>
                                        <label><input type="checkbox" name="questionTypes" value="short-answer"> Kurzantwort</label>
                                        <label><input type="checkbox" name="questionTypes" value="essay"> Freitext/Essay</label>
                                        <label><input type="checkbox" name="questionTypes" value="practical"> Praktische Aufgabe</label>
                                    </div>
                                </div>

                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="questionPool">Fragenpools verwenden</label>
                                        <select id="questionPool" name="questionPool">
                                            <option value="">Keine Pools</option>
                                            <option value="safety-basic">Arbeitssicherheit Grundlagen</option>
                                            <option value="safety-advanced">Arbeitssicherheit Fortgeschritten</option>
                                            <option value="quality-iso9001">ISO 9001 Fragen</option>
                                            <option value="environment-iso14001">ISO 14001 Fragen</option>
                                            <option value="dguv-general">DGUV Allgemein</option>
                                            <option value="fire-safety">Brandschutz</option>
                                            <option value="first-aid">Erste Hilfe</option>
                                            <option value="custom">Benutzerdefiniert</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="randomizeQuestions">Fragen randomisieren</label>
                                        <select id="randomizeQuestions" name="randomizeQuestions">
                                            <option value="none">Keine Randomisierung</option>
                                            <option value="partial">Teilweise (50%)</option>
                                            <option value="full" selected>Vollst√§ndig</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Schwierigkeitsgrad-Verteilung</label>
                                    <div class="difficulty-slider-group">
                                        <div class="difficulty-item">
                                            <label for="easyQuestions">Leicht (%):</label>
                                            <input type="range" id="easyQuestions" name="easyQuestions" min="0" max="100" value="30">
                                            <span class="difficulty-value">30%</span>
                                        </div>
                                        <div class="difficulty-item">
                                            <label for="mediumQuestions">Mittel (%):</label>
                                            <input type="range" id="mediumQuestions" name="mediumQuestions" min="0" max="100" value="50">
                                            <span class="difficulty-value">50%</span>
                                        </div>
                                        <div class="difficulty-item">
                                            <label for="hardQuestions">Schwer (%):</label>
                                            <input type="range" id="hardQuestions" name="hardQuestions" min="0" max="100" value="20">
                                            <span class="difficulty-value">20%</span>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="questionEditor">Fragen direkt erstellen</label>
                                    <div class="question-builder">
                                        <div class="question-creator">
                                            <button type="button" class="btn-secondary" onclick="addNewQuestion('multiple-choice')">
                                                <i class="fas fa-plus"></i> Multiple Choice
                                            </button>
                                            <button type="button" class="btn-secondary" onclick="addNewQuestion('true-false')">
                                                <i class="fas fa-plus"></i> Richtig/Falsch
                                            </button>
                                            <button type="button" class="btn-secondary" onclick="addNewQuestion('practical')">
                                                <i class="fas fa-plus"></i> Praktische Aufgabe
                                            </button>
                                        </div>
                                        <div id="questionsList" class="questions-container">
                                            <!-- Dynamisch erstellte Fragen -->
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Tab 6: Multimedia & Interaktivit√§t -->
                            <div class="form-section tab-content" data-tab="media">
                                <h3><i class="fas fa-video"></i> Multimedia & Interaktive Elemente</h3>
                                
                                <div class="form-group">
                                    <label>Medientypen</label>
                                    <div class="media-types-grid">
                                        <div class="media-type-card">
                                            <i class="fas fa-video"></i>
                                            <h4>Videos</h4>
                                            <label><input type="checkbox" name="mediaTypes" value="video"> Aktivieren</label>
                                            <input type="file" accept="video/*" multiple class="media-upload" data-type="video">
                                        </div>
                                        <div class="media-type-card">
                                            <i class="fas fa-volume-up"></i>
                                            <h4>Audio</h4>
                                            <label><input type="checkbox" name="mediaTypes" value="audio"> Aktivieren</label>
                                            <input type="file" accept="audio/*" multiple class="media-upload" data-type="audio">
                                        </div>
                                        <div class="media-type-card">
                                            <i class="fas fa-images"></i>
                                            <h4>Bilder/Grafiken</h4>
                                            <label><input type="checkbox" name="mediaTypes" value="images"> Aktivieren</label>
                                            <input type="file" accept="image/*" multiple class="media-upload" data-type="images">
                                        </div>
                                        <div class="media-type-card">
                                            <i class="fas fa-file-pdf"></i>
                                            <h4>Dokumente</h4>
                                            <label><input type="checkbox" name="mediaTypes" value="documents"> Aktivieren</label>
                                            <input type="file" accept=".pdf,.doc,.docx,.ppt,.pptx" multiple class="media-upload" data-type="documents">
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Interaktive Elemente</label>
                                    <div class="checkbox-group">
                                        <label><input type="checkbox" name="interactiveElements" value="simulations"> 3D-Simulationen</label>
                                        <label><input type="checkbox" name="interactiveElements" value="virtual-reality"> Virtual Reality (VR)</label>
                                        <label><input type="checkbox" name="interactiveElements" value="augmented-reality"> Augmented Reality (AR)</label>
                                        <label><input type="checkbox" name="interactiveElements" value="gamification"> Gamification</label>
                                        <label><input type="checkbox" name="interactiveElements" value="interactive-videos"> Interaktive Videos</label>
                                        <label><input type="checkbox" name="interactiveElements" value="case-studies"> Fallstudien</label>
                                        <label><input type="checkbox" name="interactiveElements" value="role-playing"> Rollenspiele</label>
                                    </div>
                                </div>

                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="vrEquipment">VR-Equipment erforderlich</label>
                                        <select id="vrEquipment" name="vrEquipment">
                                            <option value="">Kein VR</option>
                                            <option value="oculus">Oculus/Meta Quest</option>
                                            <option value="vive">HTC Vive</option>
                                            <option value="pico">Pico VR</option>
                                            <option value="mobile">Smartphone VR</option>
                                            <option value="any">Beliebiges VR-Ger√§t</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="simulationSoftware">Simulations-Software</label>
                                        <input type="text" id="simulationSoftware" name="simulationSoftware" placeholder="z.B. Unity, Unreal Engine, WebGL">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="progressTracking">Fortschritts-Tracking</label>
                                    <div class="checkbox-group">
                                        <label><input type="checkbox" name="progressTracking" value="time-spent" checked> Lernzeit erfassen</label>
                                        <label><input type="checkbox" name="progressTracking" value="interaction-rate" checked> Interaktionsrate messen</label>
                                        <label><input type="checkbox" name="progressTracking" value="completion-rate"> Abschlussraten verfolgen</label>
                                        <label><input type="checkbox" name="progressTracking" value="attention-analytics"> Aufmerksamkeits-Analytics</label>
                                        <label><input type="checkbox" name="progressTracking" value="learning-path"> Lernpfad-Optimierung</label>
                                    </div>
                                </div>
                            </div>

                            <!-- Tab 9: Erweiterte Konfiguration -->
                            <div class="form-section tab-content" data-tab="advanced">
                                <h3><i class="fas fa-cogs"></i> Erweiterte Konfiguration & KI-Integration</h3>
                                
                                <div class="form-group">
                                    <label>KI-gest√ºtzte Funktionen</label>
                                    <div class="checkbox-group">
                                        <label><input type="checkbox" id="aiAdaptiveLearning" name="aiAdaptiveLearning"> Adaptive Lernpfade (KI-optimiert)</label>
                                        <label><input type="checkbox" id="aiContentGeneration" name="aiContentGeneration"> Automatische Fragengenerierung</label>
                                        <label><input type="checkbox" id="aiPersonalization" name="aiPersonalization"> Personalisierte Lernempfehlungen</label>
                                        <label><input type="checkbox" id="aiAnalytics" name="aiAnalytics"> KI-basierte Lernanalyse</label>
                                        <label><input type="checkbox" id="aiChatbot" name="aiChatbot"> Intelligenter Lern-Assistent</label>
                                        <label><input type="checkbox" id="aiPredictive" name="aiPredictive"> Vorhersage von Lernerfolg</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Experimentelle Technologien</label>
                                    <div class="experimental-features">
                                        <div class="experimental-card">
                                            <h4><i class="fas fa-microphone"></i> Sprachsteuerung</h4>
                                            <label><input type="checkbox" id="voiceCommands" name="voiceCommands"> Voice Commands aktivieren</label>
                                            <label><input type="checkbox" id="speechRecognition" name="speechRecognition"> Spracherkennung f√ºr Antworten</label>
                                        </div>
                                        <div class="experimental-card">
                                            <h4><i class="fas fa-fingerprint"></i> Biometrie</h4>
                                            <label><input type="checkbox" id="biometricAuth" name="biometricAuth"> Biometrische Authentifizierung</label>
                                            <label><input type="checkbox" id="attentionTracking" name="attentionTracking"> Aufmerksamkeitsmessung</label>
                                        </div>
                                        <div class="experimental-card">
                                            <h4><i class="fas fa-brain"></i> Neurofeedback</h4>
                                            <label><input type="checkbox" id="brainwaveTracking" name="brainwaveTracking"> EEG-Integration (experimentell)</label>
                                            <label><input type="checkbox" id="stressMonitoring" name="stressMonitoring"> Stress-Level √úberwachung</label>
                                        </div>
                                        <div class="experimental-card">
                                            <h4><i class="fas fa-robot"></i> Automation</h4>
                                            <label><input type="checkbox" id="autoScheduling" name="autoScheduling"> Intelligente Terminplanung</label>
                                            <label><input type="checkbox" id="autoReminders" name="autoReminders"> Adaptive Erinnerungen</label>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="aiModelProvider">KI-Anbieter</label>
                                        <select id="aiModelProvider" name="aiModelProvider">
                                            <option value="">Keine KI-Integration</option>
                                            <option value="openai">OpenAI GPT</option>
                                            <option value="claude">Anthropic Claude</option>
                                            <option value="gemini">Google Gemini</option>
                                            <option value="azure">Azure OpenAI</option>
                                            <option value="local">Lokales KI-Modell</option>
                                            <option value="custom">Benutzerdefiniert</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="adaptivityLevel">Adaptivit√§tslevel</label>
                                        <select id="adaptivityLevel" name="adaptivityLevel">
                                            <option value="none">Standard (keine Anpassung)</option>
                                            <option value="basic">Grundlegend</option>
                                            <option value="intermediate" selected>Fortgeschritten</option>
                                            <option value="advanced">Expertenebene</option>
                                            <option value="ai-driven">KI-gesteuert</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="learningPathEngine">Lernpfad-Engine</label>
                                    <div class="radio-group">
                                        <label><input type="radio" name="learningPathEngine" value="traditional" checked> Traditionell (vordefiniert)</label>
                                        <label><input type="radio" name="learningPathEngine" value="adaptive"> Adaptiv (nutzerbasiert)</label>
                                        <label><input type="radio" name="learningPathEngine" value="ai-optimized"> KI-optimiert</label>
                                        <label><input type="radio" name="learningPathEngine" value="predictive"> Pr√§diktiv</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="dataCollection">Datensammlung & Privacy</label>
                                    <div class="checkbox-group">
                                        <label><input type="checkbox" id="anonymousAnalytics" name="anonymousAnalytics" checked> Anonyme Nutzungsstatistiken</label>
                                        <label><input type="checkbox" id="detailedTracking" name="detailedTracking"> Detailliertes Lernverhalten</label>
                                        <label><input type="checkbox" id="performanceData" name="performanceData"> Leistungsdaten erfassen</label>
                                        <label><input type="checkbox" id="gdprCompliant" name="gdprCompliant" checked> DSGVO-konform</label>
                                        <label><input type="checkbox" id="dataRetention" name="dataRetention"> Erweiterte Datenspeicherung</label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Integration & API</label>
                                    <div class="api-integrations">
                                        <div class="integration-item">
                                            <label><input type="checkbox" id="lmsIntegration" name="lmsIntegration"> LMS-Integration (Moodle, Canvas)</label>
                                        </div>
                                        <div class="integration-item">
                                            <label><input type="checkbox" id="hrSystemIntegration" name="hrSystemIntegration"> HR-System Verbindung</label>
                                        </div>
                                        <div class="integration-item">
                                            <label><input type="checkbox" id="calendarIntegration" name="calendarIntegration"> Kalender-Synchronisation</label>
                                        </div>
                                        <div class="integration-item">
                                            <label><input type="checkbox" id="notificationIntegration" name="notificationIntegration"> Push-Notifications</label>
                                        </div>
                                        <div class="integration-item">
                                            <label><input type="checkbox" id="webhooksEnabled" name="webhooksEnabled"> Webhooks aktivieren</label>
                                        </div>
                                        <div class="integration-item">
                                            <label><input type="checkbox" id="apiAccess" name="apiAccess"> REST API Zugang</label>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="customConfiguration">Benutzerdefinierte Konfiguration (JSON)</label>
                                    <textarea id="customConfiguration" name="customConfiguration" placeholder="{&#10;  &quot;advanced_features&quot;: {},&#10;  &quot;ai_settings&quot;: {},&#10;  &quot;experimental&quot;: {}&#10;}" rows="6" style="font-family: monospace; font-size: 0.875rem;"></textarea>
                                    <small>Erweiterte Konfiguration f√ºr Entwickler und Power-User</small>
                                </div>

                                <div class="form-group">
                                    <label>Debugging & Entwicklung</label>
                                    <div class="checkbox-group">
                                        <label><input type="checkbox" id="debugMode" name="debugMode"> Debug-Modus aktivieren</label>
                                        <label><input type="checkbox" id="verboseLogging" name="verboseLogging"> Erweiterte Protokollierung</label>
                                        <label><input type="checkbox" id="betaFeatures" name="betaFeatures"> Beta-Features aktivieren</label>
                                        <label><input type="checkbox" id="experimentalApi" name="experimentalApi"> Experimentelle APIs</label>
                                    </div>
                                </div>

                                <div style="background: #fef3c7; border: 1px solid #f59e0b; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">
                                    <h4 style="color: #92400e; margin-top: 0;"><i class="fas fa-exclamation-triangle"></i> Hinweis zu experimentellen Features</h4>
                                    <p style="color: #92400e; font-size: 0.875rem; margin-bottom: 0;">
                                        Die hier aktivierten experimentellen Funktionen befinden sich noch in der Entwicklung und sollten nur in Testumgebungen verwendet werden. 
                                        F√ºr produktive T√úV-Audits empfehlen wir die Verwendung bew√§hrter Standards.
                                    </p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-actions">
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-save"></i> Schulung erstellen
                            </button>
                            <button type="button" class="btn-secondary" id="cancelNewTraining">
                                <i class="fas fa-times"></i> Abbrechen
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.new-training-close');
        const cancelBtn = modal.querySelector('#cancelNewTraining');
        [closeBtn, cancelBtn].forEach(btn => {
            btn.addEventListener('click', () => modal.remove());
        });

        // Tab navigation
        modal.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const targetTab = btn.getAttribute('data-tab');
                this.switchTrainingFormTab(modal, targetTab);
            });
        });

        // Auto-generate training code
        const titleInput = modal.querySelector('#trainingTitle');
        const codeInput = modal.querySelector('#trainingCode');
        if (titleInput && codeInput) {
            titleInput.addEventListener('input', () => {
                if (!codeInput.value) {
                    const title = titleInput.value.toUpperCase();
                    const year = new Date().getFullYear();
                    const category = title.substring(0, 2) || 'SC';
                    const number = String(this.trainings.length + 1).padStart(3, '0');
                    codeInput.value = category + '-' + number + '-' + year;
                }
            });
        }

        // File upload handling
        const fileInput = modal.querySelector('#trainingMaterials input[type="file"]');
        if (fileInput) {
            fileInput.addEventListener('change', (e) => {
                this.handleTrainingMaterialsUpload(e, modal);
            });
        }

        // Form submission
        const form = modal.querySelector('#newTrainingForm');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.createNewTraining(modal);
        });

        // Form validation on tab switch
        modal.querySelectorAll('input[required], select[required], textarea[required]').forEach(field => {
            field.addEventListener('blur', () => this.validateTrainingField(field));
        });

        // Enhanced Interactive Features
        this.setupAdvancedTrainingFeatures(modal);

        return modal;
    }

    createNewTraining(modal) {
        const currentUser = this.getCurrentUser();
        
        // Get all form values - comprehensive T√úV-compliant data collection
        const trainingData = {
            // Basic Information
            title: modal.querySelector('#trainingTitle').value,
            code: modal.querySelector('#trainingCode').value,
            version: modal.querySelector('#trainingVersion').value,
            description: modal.querySelector('#trainingDescription').value,
            category: modal.querySelector('#trainingCategory').value,
            type: modal.querySelector('#trainingType').value,
            duration: parseInt(modal.querySelector('#trainingDuration').value),
            validity: modal.querySelector('#trainingValidity').value,
            language: modal.querySelector('#trainingLanguage').value,
            isRecurring: modal.querySelector('#trainingRecurring').checked,
            isMandatory: modal.querySelector('#trainingMandatory').checked,
            isCertified: modal.querySelector('#trainingCertified').checked,

            // Content & Materials
            learningObjectives: modal.querySelector('#learningObjectives').value,
            content: modal.querySelector('#trainingContent').value,
            method: modal.querySelector('#trainingMethod').value,
            maxParticipants: parseInt(modal.querySelector('#maxParticipants').value) || null,

            // Target Group & Prerequisites
            targetRoles: Array.from(modal.querySelectorAll('input[name="targetRoles"]:checked')).map(cb => cb.value),
            targetDepartments: Array.from(modal.querySelectorAll('input[name="targetDepartments"]:checked')).map(cb => cb.value),
            minExperience: parseInt(modal.querySelector('#minExperience').value) || 0,
            requiredEducation: modal.querySelector('#requiredEducation').value,
            prerequisites: modal.querySelector('#prerequisites').value,

            // Assessment & Requirements
            assessmentType: modal.querySelector('input[name="assessmentType"]:checked')?.value || 'none',
            passingScore: parseInt(modal.querySelector('#passingScore').value) || 80,
            maxAttempts: parseInt(modal.querySelector('#maxAttempts').value) || 3,
            examDuration: parseInt(modal.querySelector('#examDuration').value) || null,
            questionCount: parseInt(modal.querySelector('#questionCount').value) || null,
            requiresSignature: modal.querySelector('#requiresSignature').checked,
            requiresPresence: modal.querySelector('#requiresPresence').checked,
            requiresHomework: modal.querySelector('#requiresHomework').checked,
            allowRetake: modal.querySelector('#allowRetake').checked,
            failureConsequences: modal.querySelector('#failureConsequences').value,

            // Certification
            generatesCertificate: modal.querySelector('#generatesCertificate').checked,
            tuevCertified: modal.querySelector('#tuevCertified').checked,
            isoCompliant: modal.querySelector('#isoCompliant').checked,
            dguvrCompliant: modal.querySelector('#dguvrCompliant').checked,
            certificateTemplate: modal.querySelector('#certificateTemplate').value,
            certificationBody: modal.querySelector('#certificationBody').value,
            certificationNumber: modal.querySelector('#certificationNumber').value,
            legalBasis: modal.querySelector('#legalBasis').value,
            auditRequirements: modal.querySelector('#auditRequirements').value,

            // Quality Assurance
            trainer: modal.querySelector('#trainer').value,
            trainerQualification: modal.querySelector('#trainerQualification').value,
            reviewCycle: parseInt(modal.querySelector('#reviewCycle').value) || 12,
            recordKeeping: modal.querySelector('#recordKeeping').value,
            approvalProcess: modal.querySelector('input[name="approval"]:checked')?.value || 'automatic',
            qualityNotes: modal.querySelector('#qualityNotes').value,

            // Questions & Testing (Tab 5)
            questionTypes: Array.from(modal.querySelectorAll('input[name="questionTypes"]:checked')).map(cb => cb.value),
            questionPool: modal.querySelector('#questionPool')?.value || '',
            randomizeQuestions: modal.querySelector('#randomizeQuestions')?.value || 'none',
            easyQuestions: parseInt(modal.querySelector('#easyQuestions')?.value) || 30,
            mediumQuestions: parseInt(modal.querySelector('#mediumQuestions')?.value) || 50,
            hardQuestions: parseInt(modal.querySelector('#hardQuestions')?.value) || 20,

            // Multimedia & Interactive Elements (Tab 6)
            mediaTypes: Array.from(modal.querySelectorAll('input[name="mediaTypes"]:checked')).map(cb => cb.value),
            interactiveElements: Array.from(modal.querySelectorAll('input[name="interactiveElements"]:checked')).map(cb => cb.value),
            vrEquipment: modal.querySelector('#vrEquipment')?.value || '',
            simulationSoftware: modal.querySelector('#simulationSoftware')?.value || '',
            progressTracking: Array.from(modal.querySelectorAll('input[name="progressTracking"]:checked')).map(cb => cb.value),

            // Advanced Configuration (Tab 9)
            aiAdaptiveLearning: modal.querySelector('#aiAdaptiveLearning')?.checked || false,
            aiContentGeneration: modal.querySelector('#aiContentGeneration')?.checked || false,
            aiPersonalization: modal.querySelector('#aiPersonalization')?.checked || false,
            aiAnalytics: modal.querySelector('#aiAnalytics')?.checked || false,
            aiChatbot: modal.querySelector('#aiChatbot')?.checked || false,
            aiPredictive: modal.querySelector('#aiPredictive')?.checked || false,

            // Experimental Technologies
            voiceCommands: modal.querySelector('#voiceCommands')?.checked || false,
            speechRecognition: modal.querySelector('#speechRecognition')?.checked || false,
            biometricAuth: modal.querySelector('#biometricAuth')?.checked || false,
            attentionTracking: modal.querySelector('#attentionTracking')?.checked || false,
            brainwaveTracking: modal.querySelector('#brainwaveTracking')?.checked || false,
            stressMonitoring: modal.querySelector('#stressMonitoring')?.checked || false,
            autoScheduling: modal.querySelector('#autoScheduling')?.checked || false,
            autoReminders: modal.querySelector('#autoReminders')?.checked || false,

            // AI Configuration
            aiModelProvider: modal.querySelector('#aiModelProvider')?.value || '',
            adaptivityLevel: modal.querySelector('#adaptivityLevel')?.value || 'none',
            learningPathEngine: modal.querySelector('input[name="learningPathEngine"]:checked')?.value || 'traditional',

            // Data Collection & Privacy
            anonymousAnalytics: modal.querySelector('#anonymousAnalytics')?.checked || false,
            detailedTracking: modal.querySelector('#detailedTracking')?.checked || false,
            performanceData: modal.querySelector('#performanceData')?.checked || false,
            gdprCompliant: modal.querySelector('#gdprCompliant')?.checked || true,
            dataRetention: modal.querySelector('#dataRetention')?.checked || false,

            // Integration & API
            lmsIntegration: modal.querySelector('#lmsIntegration')?.checked || false,
            hrSystemIntegration: modal.querySelector('#hrSystemIntegration')?.checked || false,
            calendarIntegration: modal.querySelector('#calendarIntegration')?.checked || false,
            notificationIntegration: modal.querySelector('#notificationIntegration')?.checked || false,
            webhooksEnabled: modal.querySelector('#webhooksEnabled')?.checked || false,
            apiAccess: modal.querySelector('#apiAccess')?.checked || false,

            // Custom Configuration
            customConfiguration: modal.querySelector('#customConfiguration')?.value || '',

            // Debugging & Development
            debugMode: modal.querySelector('#debugMode')?.checked || false,
            verboseLogging: modal.querySelector('#verboseLogging')?.checked || false,
            betaFeatures: modal.querySelector('#betaFeatures')?.checked || false,
            experimentalApi: modal.querySelector('#experimentalApi')?.checked || false
        };
        
        // Enhanced validation for T√úV compliance
        const validationErrors = this.validateTrainingData(trainingData);
        if (validationErrors.length > 0) {
            alert('Validierungsfehler:\n\n' + validationErrors.join('\n'));
            return;
        }
        
        // Generate compliance report and audit checklist
        const complianceReport = this.generateComplianceReport(trainingData);
        const auditChecklist = this.createAuditChecklist(trainingData);
        const auditScore = this.calculateAuditScore(auditChecklist);
        
        // Create comprehensive training object
        const newTraining = {
            id: `training-${Date.now()}`,
            ...trainingData,
            
            // System fields
            createdAt: new Date().toISOString(),
            createdBy: currentUser.id,
            lastModified: new Date().toISOString(),
            modifiedBy: currentUser.id,
            isActive: true,
            status: auditScore >= 80 ? 'ready' : 'draft',
            
            // Materials (uploaded files)
            materials: [], // Will be populated from file uploads
            
            // Enhanced compliance tracking
            compliance: {
                level: complianceReport.complianceLevel,
                certifications: complianceReport.certifications,
                auditScore: auditScore,
                auditReadiness: complianceReport.auditReadiness,
                tuevApproved: false,
                lastAudit: null,
                nextReview: new Date(Date.now() + trainingData.reviewCycle * 30 * 24 * 60 * 60 * 1000).toISOString(),
                complianceNotes: [],
                requirements: complianceReport.requirements,
                recommendations: complianceReport.recommendations,
                auditChecklist: auditChecklist
            },
            
            // Statistics
            stats: {
                totalAssignments: 0,
                completedAssignments: 0,
                averageScore: 0,
                passRate: 0
            }
        };
        
        // Save to trainings array
        this.trainings.push(newTraining);
        this.saveTrainingsToStorage();
        
        // Show enhanced success message with compliance details
        modal.remove();
        
        const complianceDetails = `
üéì SCHULUNG ERFOLGREICH ERSTELLT

üìã Grunddaten:
‚Ä¢ Titel: ${newTraining.title}
‚Ä¢ Code: ${newTraining.code}
‚Ä¢ Status: ${newTraining.status}

üèÜ Compliance-Level: ${newTraining.compliance.level}
üìä Audit-Score: ${newTraining.compliance.auditScore}%
üéØ Audit-Bereitschaft: ${newTraining.compliance.auditReadiness}%

${newTraining.compliance.certifications.length > 0 ? 
`üõ°Ô∏è Zertifizierungen: ${newTraining.compliance.certifications.join(', ')}` : 
'üìù Standard-Compliance'}

${newTraining.compliance.recommendations.length > 0 ? 
`\nüí° Empfehlungen:\n‚Ä¢ ${newTraining.compliance.recommendations.join('\n‚Ä¢ ')}` : 
'\n‚úÖ Keine weiteren Empfehlungen'}

${newTraining.aiAdaptiveLearning || newTraining.experimentalFeatures ? 
'\nüöÄ Erweiterte Features aktiviert' : ''}
        `;
        
        alert(complianceDetails);
        
        // Refresh the training list
        this.renderTrainingsList();
        
        // Console output with detailed information
        console.log('üéì New training created with enhanced compliance:', {
            ...newTraining,
            complianceReport: complianceReport,
            auditScore: auditScore
        });
    }

    // Helper functions for enhanced training management
    switchTrainingFormTab(modal, targetTab) {
        // Remove active class from all tabs and content
        modal.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        modal.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // Add active class to target tab and content
        modal.querySelector(`[data-tab="${targetTab}"]`).classList.add('active');
        modal.querySelector(`.tab-content[data-tab="${targetTab}"]`).classList.add('active');
    }

    validateTrainingData(data) {
        const errors = [];
        
        // Basic validation
        if (!data.title?.trim()) errors.push('‚Ä¢ Schulungstitel ist erforderlich');
        if (!data.code?.trim()) errors.push('‚Ä¢ Schulungs-Code ist erforderlich');
        if (!data.version?.trim()) errors.push('‚Ä¢ Version ist erforderlich');
        if (!data.description?.trim()) errors.push('‚Ä¢ Beschreibung ist erforderlich');
        if (!data.category) errors.push('‚Ä¢ Kategorie ist erforderlich');
        if (!data.type) errors.push('‚Ä¢ Schulungstyp ist erforderlich');
        if (!data.duration || data.duration < 15) errors.push('‚Ä¢ Mindestdauer: 15 Minuten');
        if (!data.language) errors.push('‚Ä¢ Sprache ist erforderlich');
        
        // Content validation
        if (!data.learningObjectives?.trim()) errors.push('‚Ä¢ Lernziele sind erforderlich');
        if (!data.content?.trim()) errors.push('‚Ä¢ Schulungsinhalte sind erforderlich');
        if (!data.method) errors.push('‚Ä¢ Schulungsmethode ist erforderlich');
        
        // Target group validation
        if (!data.targetRoles || data.targetRoles.length === 0) {
            errors.push('‚Ä¢ Mindestens eine Zielrolle muss ausgew√§hlt werden');
        }
        
        // Assessment validation
        if (data.assessmentType !== 'none') {
            if (!data.passingScore || data.passingScore < 50 || data.passingScore > 100) {
                errors.push('‚Ä¢ Mindestpunktzahl muss zwischen 50% und 100% liegen');
            }
        }
        
        // T√úV-specific validation - Enhanced
        if (data.tuevCertified) {
            if (!data.certificationBody?.trim()) errors.push('‚Ä¢ T√úV-Zertifizierung erfordert Zertifizierungsstelle');
            if (!data.legalBasis?.trim()) errors.push('‚Ä¢ T√úV-Zertifizierung erfordert rechtliche Grundlage');
            if (!data.trainer) errors.push('‚Ä¢ T√úV-Zertifizierung erfordert qualifizierten Trainer');
            if (!data.certificationNumber?.trim()) errors.push('‚Ä¢ T√úV-Zertifikation ben√∂tigt Zertifikatsnummer');
            if (!data.auditRequirements?.trim()) errors.push('‚Ä¢ T√úV-Zertifizierung erfordert Audit-Anforderungen');
            
            // Advanced T√úV checks
            if (data.assessmentType === 'none') errors.push('‚Ä¢ T√úV-zertifizierte Schulungen m√ºssen eine Pr√ºfung enthalten');
            if (!data.recordKeeping || data.recordKeeping < 5) errors.push('‚Ä¢ T√úV-Zertifikate m√ºssen mindestens 5 Jahre aufbewahrt werden');
        }
        
        // ISO Compliance checks
        if (data.isoCompliant) {
            if (!data.learningObjectives?.trim()) errors.push('‚Ä¢ ISO-konforme Schulungen erfordern messbare Lernziele');
            if (!data.reviewCycle || data.reviewCycle > 36) errors.push('‚Ä¢ ISO-Standards erfordern √úberpr√ºfung sp√§testens alle 36 Monate');
            if (data.approvalProcess === 'automatic') errors.push('‚Ä¢ ISO-konforme Schulungen ben√∂tigen formellen Freigabeprozess');
        }
        
        // DGUV Compliance checks  
        if (data.dguvrCompliant) {
            if (!data.prerequisites?.trim() && data.category === 'safety') errors.push('‚Ä¢ DGUV-Sicherheitsschulungen erfordern Teilnahmevoraussetzungen');
            if (!data.requiresPresence && data.category === 'safety') errors.push('‚Ä¢ DGUV-Sicherheitsschulungen erfordern meist Anwesenheitspflicht');
            if (data.validity === 'unbegrenzt') errors.push('‚Ä¢ DGUV-Schulungen haben begrenzte G√ºltigkeitsdauer');
        }
        
        // Enhanced compliance matrix check
        const complianceMatrix = this.checkComplianceMatrix(data);
        if (complianceMatrix.length > 0) {
            errors.push(...complianceMatrix.map(issue => `‚Ä¢ Compliance-Matrix: ${issue}`));
        }
        
        // Mandatory training validation
        if (data.isMandatory) {
            if (!data.legalBasis?.trim()) errors.push('‚Ä¢ Pflichtschulungen erfordern rechtliche Grundlage');
            if (data.assessmentType === 'none') errors.push('‚Ä¢ Pflichtschulungen erfordern eine Pr√ºfung');
        }
        
        // Code format validation
        const codePattern = /^[A-Z]{2}-[0-9]{3}-[0-9]{4}$/;
        if (!codePattern.test(data.code)) {
            errors.push('‚Ä¢ Schulungs-Code muss Format XX-000-YYYY haben (z.B. AS-001-2024)');
        }
        
        return errors;
    }

    validateTrainingField(field) {
        const value = field.value?.trim();
        const isRequired = field.hasAttribute('required');
        
        // Remove existing validation styling
        field.classList.remove('validation-error', 'validation-success');
        
        if (isRequired && !value) {
            field.classList.add('validation-error');
            return false;
        } else if (value) {
            field.classList.add('validation-success');
        }
        
        return true;
    }

    handleTrainingMaterialsUpload(event, modal) {
        const files = Array.from(event.target.files);
        const uploadedContainer = modal.querySelector('#uploadedMaterials');
        
        files.forEach(file => {
            // Create file preview
            const fileItem = document.createElement('div');
            fileItem.className = 'uploaded-file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-file-${this.getFileIcon(file.type)}"></i>
                    <span class="file-name">${file.name}</span>
                    <span class="file-size">(${this.formatFileSize(file.size)})</span>
                </div>
                <button type="button" class="btn-remove" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            uploadedContainer.appendChild(fileItem);
        });
        
        // Reset file input
        event.target.value = '';
    }

    getFileIcon(mimeType) {
        if (mimeType.includes('pdf')) return 'pdf';
        if (mimeType.includes('word') || mimeType.includes('document')) return 'word';
        if (mimeType.includes('presentation') || mimeType.includes('powerpoint')) return 'powerpoint';
        if (mimeType.includes('video')) return 'video';
        if (mimeType.includes('audio')) return 'audio';
        if (mimeType.includes('image')) return 'image';
        return 'alt';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // ========================================
    // ADVANCED TRAINING FEATURES
    // ========================================

    setupAdvancedTrainingFeatures(modal) {
        // Difficulty Sliders with Live Update
        this.setupDifficultySliders(modal);
        
        // Question Builder
        this.setupQuestionBuilder(modal);
        
        // Media Type Cards Interactive
        this.setupMediaTypeCards(modal);
        
        // Experimental Features Toggle
        this.setupExperimentalFeatures(modal);
        
        // T√úV Compliance Checker
        this.setupTuevComplianceChecker(modal);
        
        // AI Features Configuration
        this.setupAiFeatures(modal);
        
        // Integration Setup
        this.setupIntegrationFeatures(modal);
    }

    setupDifficultySliders(modal) {
        const easySlider = modal.querySelector('#easyQuestions');
        const mediumSlider = modal.querySelector('#mediumQuestions');
        const hardSlider = modal.querySelector('#hardQuestions');
        
        if (easySlider && mediumSlider && hardSlider) {
            const updateValues = () => {
                const easyValue = parseInt(easySlider.value);
                const mediumValue = parseInt(mediumSlider.value);
                const hardValue = parseInt(hardSlider.value);
                
                // Auto-balance to 100%
                const total = easyValue + mediumValue + hardValue;
                if (total !== 100) {
                    const diff = 100 - total;
                    if (Math.abs(diff) <= 10) {
                        // Auto-adjust medium if difference is small
                        mediumSlider.value = Math.max(0, Math.min(100, mediumValue + diff));
                    }
                }
                
                // Update display values with improved selector
                const difficultyValues = modal.querySelectorAll('.difficulty-value');
                if (difficultyValues.length >= 3) {
                    difficultyValues[0].textContent = easySlider.value + '%';
                    difficultyValues[1].textContent = mediumSlider.value + '%';
                    difficultyValues[2].textContent = hardSlider.value + '%';
                }
                
                // Visual feedback for balance
                const newTotal = parseInt(easySlider.value) + parseInt(mediumSlider.value) + parseInt(hardSlider.value);
                const balanceIndicator = modal.querySelector('.difficulty-balance') || this.createBalanceIndicator(modal);
                balanceIndicator.textContent = `Gesamt: ${newTotal}%`;
                balanceIndicator.className = `difficulty-balance ${newTotal === 100 ? 'balanced' : 'unbalanced'}`;
            };
            
            [easySlider, mediumSlider, hardSlider].forEach(slider => {
                slider.addEventListener('input', updateValues);
            });
            
            // Initial update
            updateValues();
        }
    }

    createBalanceIndicator(modal) {
        const indicator = document.createElement('div');
        indicator.className = 'difficulty-balance';
        const sliderGroup = modal.querySelector('.difficulty-slider-group');
        if (sliderGroup) {
            sliderGroup.appendChild(indicator);
        }
        return indicator;
    }

    setupQuestionBuilder(modal) {
        const questionsList = modal.querySelector('#questionsList');
        let questionCounter = 1;
        
        // Global functions for question management
        window.addNewQuestion = (type) => {
            const questionHtml = this.createQuestionHtml(type, questionCounter++);
            const questionDiv = document.createElement('div');
            questionDiv.className = 'question-item';
            questionDiv.innerHTML = questionHtml;
            questionsList.appendChild(questionDiv);
            
            // Add remove functionality
            questionDiv.querySelector('.remove-question').addEventListener('click', () => {
                questionDiv.remove();
            });
        };
        
        window.removeQuestion = (button) => {
            button.closest('.question-item').remove();
        };
    }

    createQuestionHtml(type, counter) {
        const baseHtml = `
            <div class="question-header">
                <span class="question-number">Frage ${counter}</span>
                <select class="question-type">
                    <option value="multiple-choice" ${type === 'multiple-choice' ? 'selected' : ''}>Multiple Choice</option>
                    <option value="true-false" ${type === 'true-false' ? 'selected' : ''}>Richtig/Falsch</option>
                    <option value="practical" ${type === 'practical' ? 'selected' : ''}>Praktische Aufgabe</option>
                </select>
                <button type="button" class="remove-question btn-danger">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="question-content">
                <label>Fragestellung:</label>
                <textarea placeholder="Geben Sie hier Ihre Frage ein..." rows="2"></textarea>
        `;
        
        switch(type) {
            case 'multiple-choice':
                return baseHtml + `
                    <label>Antwortm√∂glichkeiten:</label>
                    <div class="answer-options">
                        <div class="answer-option">
                            <input type="radio" name="correct_${counter}" value="1">
                            <input type="text" placeholder="Antwort 1">
                        </div>
                        <div class="answer-option">
                            <input type="radio" name="correct_${counter}" value="2">
                            <input type="text" placeholder="Antwort 2">
                        </div>
                        <div class="answer-option">
                            <input type="radio" name="correct_${counter}" value="3">
                            <input type="text" placeholder="Antwort 3">
                        </div>
                        <div class="answer-option">
                            <input type="radio" name="correct_${counter}" value="4">
                            <input type="text" placeholder="Antwort 4">
                        </div>
                    </div>
                </div>`;
                
            case 'true-false':
                return baseHtml + `
                    <label>Richtige Antwort:</label>
                    <div class="true-false-options">
                        <label><input type="radio" name="correct_${counter}" value="true"> Richtig</label>
                        <label><input type="radio" name="correct_${counter}" value="false"> Falsch</label>
                    </div>
                </div>`;
                
            case 'practical':
                return baseHtml + `
                    <label>Praktische Aufgabe:</label>
                    <textarea placeholder="Beschreiben Sie die praktische Aufgabe..." rows="3"></textarea>
                    <label>Bewertungskriterien:</label>
                    <textarea placeholder="Bewertungskriterien f√ºr die praktische Aufgabe..." rows="2"></textarea>
                </div>`;
                
            default:
                return baseHtml + '</div>';
        }
    }

    setupMediaTypeCards(modal) {
        const mediaCards = modal.querySelectorAll('.media-type-card');
        
        mediaCards.forEach(card => {
            const checkbox = card.querySelector('input[type="checkbox"]');
            const fileInput = card.querySelector('input[type="file"]');
            
            checkbox.addEventListener('change', () => {
                if (checkbox.checked) {
                    card.classList.add('active');
                    if (fileInput) fileInput.style.display = 'block';
                } else {
                    card.classList.remove('active');
                    if (fileInput) fileInput.style.display = 'none';
                }
            });
            
            if (fileInput) {
                fileInput.addEventListener('change', (e) => {
                    const files = Array.from(e.target.files);
                    this.handleMediaUpload(files, card);
                });
            }
        });
    }

    handleMediaUpload(files, card) {
        const mediaType = card.querySelector('input[type="file"]').dataset.type;
        console.log(`üìÅ ${files.length} ${mediaType} Dateien hochgeladen:`, files.map(f => f.name));
        
        // Create preview area if doesn't exist
        let previewArea = card.querySelector('.media-preview');
        if (!previewArea) {
            previewArea = document.createElement('div');
            previewArea.className = 'media-preview';
            card.appendChild(previewArea);
        }
        
        files.forEach(file => {
            const preview = document.createElement('div');
            preview.className = 'media-preview-item';
            preview.innerHTML = `
                <i class="fas fa-${this.getMediaIcon(file.type)}"></i>
                <span>${file.name}</span>
                <button type="button" onclick="this.parentElement.remove()">√ó</button>
            `;
            previewArea.appendChild(preview);
        });
    }

    getMediaIcon(mimeType) {
        if (mimeType.startsWith('video/')) return 'video';
        if (mimeType.startsWith('audio/')) return 'volume-up';
        if (mimeType.startsWith('image/')) return 'image';
        if (mimeType.includes('pdf')) return 'file-pdf';
        return 'file';
    }

    setupExperimentalFeatures(modal) {
        const experimentalCards = modal.querySelectorAll('.experimental-card');
        
        experimentalCards.forEach(card => {
            const checkboxes = card.querySelectorAll('input[type="checkbox"]');
            
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    const activeCount = Array.from(checkboxes).filter(cb => cb.checked).length;
                    
                    if (activeCount > 0) {
                        card.classList.add('experimental-active');
                        this.showExperimentalWarning(checkbox.id);
                    } else {
                        card.classList.remove('experimental-active');
                    }
                });
            });
        });
    }

    showExperimentalWarning(featureName) {
        const warnings = {
            'brainwaveTracking': '‚ö†Ô∏è EEG-Integration erfordert spezielle Hardware und ist noch experimentell.',
            'biometricAuth': 'üîí Biometrische Authentifizierung ben√∂tigt entsprechende Ger√§te.',
            'voiceCommands': 'üé§ Sprachsteuerung funktioniert nur mit Mikrofon-Berechtigung.',
            'stressMonitoring': 'üíì Stress-Monitoring erfordert Wearable-Ger√§te oder Sensoren.'
        };
        
        if (warnings[featureName]) {
            console.log('üö®', warnings[featureName]);
        }
    }

    setupTuevComplianceChecker(modal) {
        // Real-time T√úV compliance checking
        const tuevFields = ['#tuevCertified', '#isoCompliant', '#dguvrCompliant'];
        
        tuevFields.forEach(selector => {
            const field = modal.querySelector(selector);
            if (field) {
                field.addEventListener('change', () => {
                    this.checkTuevCompliance(modal);
                });
            }
        });
        
        // Initial check
        this.checkTuevCompliance(modal);
    }

    checkTuevCompliance(modal) {
        const isTuevCertified = modal.querySelector('#tuevCertified')?.checked;
        const isIsoCompliant = modal.querySelector('#isoCompliant')?.checked;
        const isDguvrCompliant = modal.querySelector('#dguvrCompliant')?.checked;
        
        let complianceLevel = 'Standard';
        let complianceColor = '#6b7280';
        
        if (isTuevCertified && isIsoCompliant && isDguvrCompliant) {
            complianceLevel = 'Premium T√úV + ISO + DGUV';
            complianceColor = '#10b981';
        } else if (isTuevCertified && isIsoCompliant) {
            complianceLevel = 'T√úV + ISO konform';
            complianceColor = '#3b82f6';
        } else if (isTuevCertified) {
            complianceLevel = 'T√úV-zertifiziert';
            complianceColor = '#f59e0b';
        }
        
        // Update compliance indicator
        this.updateComplianceIndicator(modal, complianceLevel, complianceColor);
    }

    updateComplianceIndicator(modal, level, color) {
        let indicator = modal.querySelector('.compliance-indicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.className = 'compliance-indicator';
            const certificationSection = modal.querySelector('[data-tab="certification"]');
            if (certificationSection) {
                certificationSection.insertBefore(indicator, certificationSection.firstChild);
            }
        }
        
        indicator.innerHTML = `
            <div style="background: ${color}; color: white; padding: 0.75rem; border-radius: 0.5rem; text-align: center; margin-bottom: 1rem;">
                <i class="fas fa-certificate"></i> <strong>Compliance-Level: ${level}</strong>
            </div>
        `;
    }

    setupAiFeatures(modal) {
        const aiProvider = modal.querySelector('#aiModelProvider');
        const adaptivityLevel = modal.querySelector('#adaptivityLevel');
        
        if (aiProvider) {
            aiProvider.addEventListener('change', () => {
                const selectedProvider = aiProvider.value;
                this.configureAiProvider(modal, selectedProvider);
            });
        }
        
        if (adaptivityLevel) {
            adaptivityLevel.addEventListener('change', () => {
                const level = adaptivityLevel.value;
                this.updateAdaptivityFeatures(modal, level);
            });
        }
    }

    configureAiProvider(modal, provider) {
        const aiFeatures = modal.querySelectorAll('[id^="ai"]');
        
        if (provider && provider !== '') {
            aiFeatures.forEach(feature => {
                feature.disabled = false;
                feature.closest('label').style.opacity = '1';
            });
            console.log(`ü§ñ KI-Anbieter konfiguriert: ${provider}`);
        } else {
            aiFeatures.forEach(feature => {
                feature.disabled = true;
                feature.checked = false;
                feature.closest('label').style.opacity = '0.5';
            });
            console.log('‚ùå KI-Features deaktiviert');
        }
    }

    updateAdaptivityFeatures(modal, level) {
        const adaptiveFeatures = {
            'none': 'Keine adaptiven Features',
            'basic': 'Grundlegende Anpassung',
            'intermediate': 'Fortgeschrittene Personalisierung',
            'advanced': 'Expertenebene mit Predictive Analytics',
            'ai-driven': 'Vollst√§ndig KI-gesteuerte Optimierung'
        };
        
        console.log(`üéØ Adaptivit√§t eingestellt: ${adaptiveFeatures[level]}`);
    }

    setupIntegrationFeatures(modal) {
        const integrationCheckboxes = modal.querySelectorAll('[id$="Integration"]');
        
        integrationCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                if (checkbox.checked) {
                    this.enableIntegration(checkbox.id);
                } else {
                    this.disableIntegration(checkbox.id);
                }
            });
        });
    }

    enableIntegration(integrationId) {
        const integrationMessages = {
            'lmsIntegration': 'üéì LMS-Integration wird vorbereitet...',
            'hrSystemIntegration': 'üë• HR-System Verbindung wird hergestellt...',
            'calendarIntegration': 'üìÖ Kalender-Synchronisation aktiviert',
            'notificationIntegration': 'üîî Push-Notifications konfiguriert'
        };
        
        if (integrationMessages[integrationId]) {
            console.log(integrationMessages[integrationId]);
        }
    }

    disableIntegration(integrationId) {
        console.log(`‚ùå ${integrationId} deaktiviert`);
    }

    // ========================================
    // T√úV COMPLIANCE & AUDIT FUNCTIONS
    // ========================================

    checkComplianceMatrix(data) {
        const issues = [];
        
        // Category-based compliance requirements
        const categoryRequirements = {
            'safety': {
                minDuration: 60,
                requiredAssessment: true,
                maxValidity: 12,
                requiredCertification: true
            },
            'quality': {
                minDuration: 45,
                requiredAssessment: true,
                maxValidity: 24,
                requiredDocumentation: true
            },
            'environment': {
                minDuration: 30,
                requiredAssessment: false,
                maxValidity: 36,
                requiredReview: true
            }
        };
        
        const requirements = categoryRequirements[data.category];
        if (requirements) {
            // Duration check
            if (data.duration < requirements.minDuration) {
                issues.push(`Mindestdauer f√ºr ${data.category}: ${requirements.minDuration} Minuten`);
            }
            
            // Assessment requirement
            if (requirements.requiredAssessment && data.assessmentType === 'none') {
                issues.push(`Kategorie ${data.category} erfordert Bewertung/Pr√ºfung`);
            }
            
            // Validity check
            if (data.validity > requirements.maxValidity) {
                issues.push(`Max. G√ºltigkeitsdauer f√ºr ${data.category}: ${requirements.maxValidity} Monate`);
            }
        }
        
        // Multi-standard compliance conflicts
        if (data.tuevCertified && data.isoCompliant && data.dguvrCompliant) {
            // Check for conflicting requirements
            if (data.approvalProcess === 'automatic') {
                issues.push('Multi-Standard Compliance erfordert manuelle Freigabe');
            }
            if (data.recordKeeping < 10) {
                issues.push('Multi-Standard Compliance: min. 10 Jahre Aufbewahrung');
            }
        }
        
        // Advanced feature compliance
        if (data.tuevCertified && (data.aiAdaptiveLearning || data.aiContentGeneration)) {
            issues.push('T√úV-Zertifizierung und KI-Features k√∂nnen Validierung erfordern');
        }
        
        if (data.experimentalFeatures && (data.tuevCertified || data.isoCompliant)) {
            issues.push('Experimentelle Features sind nicht f√ºr zertifizierte Schulungen geeignet');
        }
        
        return issues;
    }

    generateComplianceReport(trainingData) {
        const report = {
            complianceLevel: 'Standard',
            certifications: [],
            requirements: [],
            recommendations: [],
            auditReadiness: 0
        };
        
        // Determine compliance level
        if (trainingData.tuevCertified) report.certifications.push('T√úV');
        if (trainingData.isoCompliant) report.certifications.push('ISO');
        if (trainingData.dguvrCompliant) report.certifications.push('DGUV');
        
        if (report.certifications.length === 3) {
            report.complianceLevel = 'Premium Multi-Standard';
            report.auditReadiness = 95;
        } else if (report.certifications.length === 2) {
            report.complianceLevel = 'Professional Dual-Standard';
            report.auditReadiness = 85;
        } else if (report.certifications.length === 1) {
            report.complianceLevel = 'Single Standard Certified';
            report.auditReadiness = 75;
        } else {
            report.auditReadiness = 60;
        }
        
        // Generate requirements
        if (trainingData.tuevCertified) {
            report.requirements.push('Zertifizierte Trainer erforderlich');
            report.requirements.push('Dokumentierte Qualit√§tssicherung');
            report.requirements.push('Regelm√§√üige Audits');
        }
        
        if (trainingData.isoCompliant) {
            report.requirements.push('Prozessdokumentation nach ISO');
            report.requirements.push('Kontinuierliche Verbesserung');
            report.requirements.push('Management Review');
        }
        
        if (trainingData.dguvrCompliant) {
            report.requirements.push('Arbeitsschutz-konforme Inhalte');
            report.requirements.push('Gef√§hrdungsbeurteilung');
            report.requirements.push('Dokumentation nach DGUV');
        }
        
        // Generate recommendations
        if (report.auditReadiness < 90) {
            report.recommendations.push('Implementierung zus√§tzlicher Qualit√§tsma√ünahmen');
            report.recommendations.push('Erweiterung der Dokumentation');
        }
        
        if (!trainingData.gdprCompliant) {
            report.recommendations.push('DSGVO-Compliance sicherstellen');
        }
        
        if (trainingData.experimentalFeatures) {
            report.recommendations.push('Experimentelle Features f√ºr Produktiveinsatz validieren');
        }
        
        return report;
    }

    createAuditChecklist(trainingData) {
        const checklist = {
            'Grundlagen': [
                { item: 'Schulungstitel eindeutig und beschreibend', status: !!trainingData.title },
                { item: 'Schulungs-Code nach Standard-Format', status: /^[A-Z]{2}-[0-9]{3}-[0-9]{4}$/.test(trainingData.code) },
                { item: 'Versionierung implementiert', status: !!trainingData.version },
                { item: 'Detaillierte Beschreibung vorhanden', status: !!trainingData.description }
            ],
            'Inhalte': [
                { item: 'Messbare Lernziele definiert', status: !!trainingData.learningObjectives },
                { item: 'Strukturierte Inhalte vorhanden', status: !!trainingData.content },
                { item: 'Schulungsmethode festgelegt', status: !!trainingData.method },
                { item: 'Materialien bereitgestellt', status: trainingData.materials?.length > 0 }
            ],
            'Bewertung': [
                { item: 'Bewertungsverfahren definiert', status: trainingData.assessmentType !== 'none' },
                { item: 'Bestehensgrenze festgelegt', status: trainingData.passingScore >= 50 },
                { item: 'Wiederholungsversuche geregelt', status: trainingData.maxAttempts > 0 },
                { item: 'Pr√ºfungszeit angemessen', status: trainingData.examDuration > 0 }
            ],
            'Compliance': [
                { item: 'Rechtliche Grundlage dokumentiert', status: !!trainingData.legalBasis },
                { item: 'Trainer qualifiziert', status: !!trainingData.trainer },
                { item: 'Aufbewahrungsfristen definiert', status: !!trainingData.recordKeeping },
                { item: 'Freigabeprozess etabliert', status: trainingData.approvalProcess !== 'automatic' }
            ]
        };
        
        if (trainingData.tuevCertified) {
            checklist['T√úV-Spezifisch'] = [
                { item: 'Zertifizierungsstelle benannt', status: !!trainingData.certificationBody },
                { item: 'Zertifikatsnummer vergeben', status: !!trainingData.certificationNumber },
                { item: 'Audit-Anforderungen dokumentiert', status: !!trainingData.auditRequirements },
                { item: 'Qualit√§tssicherung implementiert', status: !!trainingData.qualityNotes }
            ];
        }
        
        return checklist;
    }

    calculateAuditScore(checklist) {
        let totalItems = 0;
        let passedItems = 0;
        
        Object.values(checklist).forEach(category => {
            category.forEach(item => {
                totalItems++;
                if (item.status) passedItems++;
            });
        });
        
        return Math.round((passedItems / totalItems) * 100);
    }

    // ========================================
    // TRAINING REPORTS AND CALENDAR
    // ========================================

    openTrainingReportsModal() {
        const modal = this.createTrainingReportsModal();
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createTrainingReportsModal() {
        const modal = document.createElement('div');
        modal.className = 'modal training-reports-modal';
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-chart-bar"></i> Schulungsberichte</h2>
                    <span class="close reports-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="reports-dashboard">
                        <div class="report-tabs">
                            <button class="report-tab-btn active" data-report="overview">√úbersicht</button>
                            <button class="report-tab-btn" data-report="completion">Abschlussraten</button>
                            <button class="report-tab-btn" data-report="compliance">Compliance</button>
                            <button class="report-tab-btn" data-report="individual">Individuelle Berichte</button>
                        </div>
                        <div class="report-content">
                            <div id="report-overview" class="report-panel active">
                                <div class="report-header">
                                    <h3>Schulungs√ºbersicht</h3>
                                    <div class="export-buttons">
                                        <button class="btn-export btn-csv" onclick="exportTrainingOverview('csv')">
                                            <i class="fas fa-file-csv"></i> CSV
                                        </button>
                                        <button class="btn-export btn-excel" onclick="exportTrainingOverview('excel')">
                                            <i class="fas fa-file-excel"></i> Excel
                                        </button>
                                        <button class="btn-export btn-pdf" onclick="exportTrainingOverview('pdf')">
                                            <i class="fas fa-file-pdf"></i> PDF
                                        </button>
                                    </div>
                                </div>
                                ${this.generateOverviewReport()}
                            </div>
                            <div id="report-completion" class="report-panel">
                                <div class="report-header">
                                    <h3>Abschlussraten nach Kategorien</h3>
                                    <div class="export-buttons">
                                        <button class="btn-export btn-csv" onclick="exportTrainingCompletion('csv')">
                                            <i class="fas fa-file-csv"></i> CSV
                                        </button>
                                        <button class="btn-export btn-excel" onclick="exportTrainingCompletion('excel')">
                                            <i class="fas fa-file-excel"></i> Excel
                                        </button>
                                        <button class="btn-export btn-pdf" onclick="exportTrainingCompletion('pdf')">
                                            <i class="fas fa-file-pdf"></i> PDF
                                        </button>
                                    </div>
                                </div>
                                ${this.generateCompletionReport()}
                            </div>
                            <div id="report-compliance" class="report-panel">
                                <div class="report-header">
                                    <h3>Compliance-Bericht Pflichtschulungen</h3>
                                    <div class="export-buttons">
                                        <button class="btn-export btn-csv" onclick="exportTrainingCompliance('csv')">
                                            <i class="fas fa-file-csv"></i> CSV
                                        </button>
                                        <button class="btn-export btn-excel" onclick="exportTrainingCompliance('excel')">
                                            <i class="fas fa-file-excel"></i> Excel
                                        </button>
                                        <button class="btn-export btn-pdf" onclick="exportTrainingCompliance('pdf')">
                                            <i class="fas fa-file-pdf"></i> PDF
                                        </button>
                                    </div>
                                </div>
                                ${this.generateComplianceReport()}
                            </div>
                            <div id="report-individual" class="report-panel">
                                <div class="report-header">
                                    <h3>Individuelle Schulungsberichte</h3>
                                    <div class="export-buttons">
                                        <button class="btn-export btn-csv" onclick="exportTrainingIndividual('csv')">
                                            <i class="fas fa-file-csv"></i> CSV
                                        </button>
                                        <button class="btn-export btn-excel" onclick="exportTrainingIndividual('excel')">
                                            <i class="fas fa-file-excel"></i> Excel
                                        </button>
                                        <button class="btn-export btn-pdf" onclick="exportTrainingIndividual('pdf')">
                                            <i class="fas fa-file-pdf"></i> PDF
                                        </button>
                                    </div>
                                </div>
                                ${this.generateIndividualReport()}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.reports-close');
        closeBtn.addEventListener('click', () => modal.remove());

        // Tab switching
        modal.querySelectorAll('.report-tab-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const reportType = btn.getAttribute('data-report');
                this.switchReportTab(modal, reportType);
            });
        });

        return modal;
    }

    switchReportTab(modal, reportType) {
        // Update active tab
        modal.querySelectorAll('.report-tab-btn').forEach(btn => btn.classList.remove('active'));
        modal.querySelector(`[data-report="${reportType}"]`).classList.add('active');

        // Update active panel
        modal.querySelectorAll('.report-panel').forEach(panel => panel.classList.remove('active'));
        modal.querySelector(`#report-${reportType}`).classList.add('active');
    }

    generateOverviewReport() {
        const totalTrainings = this.trainings.length;
        const totalAssignments = this.trainingAssignments.length;
        const completedAssignments = this.trainingAssignments.filter(a => a.status === 'completed').length;
        const overdueAssignments = this.trainingAssignments.filter(a => a.status === 'overdue').length;
        const completionRate = totalAssignments > 0 ? ((completedAssignments / totalAssignments) * 100).toFixed(1) : 0;

        return `
            <div class="overview-stats">
                <div class="stat-grid">
                    <div class="stat-item">
                        <h3>${totalTrainings}</h3>
                        <p>Verf√ºgbare Schulungen</p>
                    </div>
                    <div class="stat-item">
                        <h3>${totalAssignments}</h3>
                        <p>Gesamt Zuweisungen</p>
                    </div>
                    <div class="stat-item">
                        <h3>${completedAssignments}</h3>
                        <p>Abgeschlossen</p>
                    </div>
                    <div class="stat-item">
                        <h3>${overdueAssignments}</h3>
                        <p>√úberf√§llig</p>
                    </div>
                </div>
                <div class="completion-chart">
                    <h4>Abschlussrate: ${completionRate}%</h4>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${completionRate}%"></div>
                    </div>
                </div>
            </div>
        `;
    }

    generateCompletionReport() {
        const categoryStats = {};
        this.trainings.forEach(training => {
            if (!categoryStats[training.category]) {
                categoryStats[training.category] = { total: 0, completed: 0 };
            }
            categoryStats[training.category].total++;
            
            const completedCount = this.trainingAssignments.filter(a => 
                a.trainingId === training.id && a.status === 'completed'
            ).length;
            categoryStats[training.category].completed += completedCount;
        });

        return `
            <div class="completion-stats">
                <h4>Abschlussraten nach Kategorie</h4>
                <div class="category-stats">
                    ${Object.entries(categoryStats).map(([category, stats]) => {
                        const rate = stats.total > 0 ? ((stats.completed / stats.total) * 100).toFixed(1) : 0;
                        return `
                            <div class="category-item">
                                <div class="category-info">
                                    <strong>${this.getTrainingCategoryDisplayName(category)}</strong>
                                    <span>${stats.completed}/${stats.total} (${rate}%)</span>
                                </div>
                                <div class="category-bar">
                                    <div class="category-fill" style="width: ${rate}%"></div>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }

    generateComplianceReport() {
        const mandatoryTrainings = this.trainings.filter(t => t.type === 'mandatory');
        const complianceData = mandatoryTrainings.map(training => {
            const assignments = this.trainingAssignments.filter(a => a.trainingId === training.id);
            const completed = assignments.filter(a => a.status === 'completed').length;
            const total = assignments.length;
            const compliance = total > 0 ? ((completed / total) * 100).toFixed(1) : 0;
            
            return {
                training: training,
                completed: completed,
                total: total,
                compliance: compliance
            };
        });

        return `
            <div class="compliance-report">
                <h4>Compliance-Status (Pflichtschulungen)</h4>
                <div class="compliance-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Schulung</th>
                                <th>Abgeschlossen</th>
                                <th>Gesamt</th>
                                <th>Compliance</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${complianceData.map(data => `
                                <tr>
                                    <td>${data.training.title}</td>
                                    <td>${data.completed}</td>
                                    <td>${data.total}</td>
                                    <td>${data.compliance}%</td>
                                    <td>
                                        <span class="compliance-badge ${data.compliance >= 80 ? 'good' : data.compliance >= 60 ? 'warning' : 'critical'}">
                                            ${data.compliance >= 80 ? 'Gut' : data.compliance >= 60 ? 'Warnung' : 'Kritisch'}
                                        </span>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        `;
    }

    generateIndividualReport() {
        return `
            <div class="individual-report">
                <div class="report-filters">
                    <select id="individualReportUser">
                        <option value="">Benutzer w√§hlen...</option>
                        ${this.users.map(user => `
                            <option value="${user.id}">${user.displayName || user.name || user.id}</option>
                        `).join('')}
                    </select>
                    <button class="btn-primary" id="generateIndividualReport">
                        <i class="fas fa-chart-line"></i> Bericht generieren
                    </button>
                </div>
                <div id="individualReportContent">
                    <p>Bitte w√§hlen Sie einen Benutzer aus, um einen individuellen Bericht zu generieren.</p>
                </div>
            </div>
        `;
    }

    openTrainingCalendarModal() {
        const modal = this.createTrainingCalendarModal();
        document.body.appendChild(modal);
        modal.style.display = 'block';
    }

    createTrainingCalendarModal() {
        const modal = document.createElement('div');
        modal.className = 'modal training-calendar-modal';
        
        // Initialize calendar state
        this.calendarDate = new Date();
        
        modal.innerHTML = `
            <div class="modal-content large-modal">
                <div class="modal-header">
                    <h2><i class="fas fa-calendar-alt"></i> Schulungskalender</h2>
                    <span class="close calendar-close">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="calendar-container">
                        <div class="calendar-controls">
                            <button id="calendarPrevMonth" class="btn-secondary">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <h3 id="calendarCurrentMonth">${this.calendarDate.toLocaleDateString('de-DE', { month: 'long', year: 'numeric' })}</h3>
                            <button id="calendarNextMonth" class="btn-secondary">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                        <div class="calendar-view" id="calendarView">
                            ${this.generateCalendarView(this.calendarDate)}
                        </div>
                        <div class="calendar-legend">
                            <div class="legend-item">
                                <span class="legend-color deadline"></span>
                                <span>Frist</span>
                            </div>
                            <div class="legend-item">
                                <span class="legend-color completed"></span>
                                <span>Abgeschlossen</span>
                            </div>
                            <div class="legend-item">
                                <span class="legend-color overdue"></span>
                                <span>√úberf√§llig</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add event listeners
        const closeBtn = modal.querySelector('.calendar-close');
        closeBtn.addEventListener('click', () => modal.remove());

        // Calendar navigation
        const prevBtn = modal.querySelector('#calendarPrevMonth');
        const nextBtn = modal.querySelector('#calendarNextMonth');
        
        prevBtn.addEventListener('click', () => {
            this.calendarDate.setMonth(this.calendarDate.getMonth() - 1);
            this.updateCalendarView(modal);
        });
        
        nextBtn.addEventListener('click', () => {
            this.calendarDate.setMonth(this.calendarDate.getMonth() + 1);
            this.updateCalendarView(modal);
        });

        return modal;
    }

    updateCalendarView(modal) {
        const monthHeader = modal.querySelector('#calendarCurrentMonth');
        const calendarView = modal.querySelector('#calendarView');
        
        monthHeader.textContent = this.calendarDate.toLocaleDateString('de-DE', { month: 'long', year: 'numeric' });
        calendarView.innerHTML = this.generateCalendarView(this.calendarDate);
    }

    generateCalendarView(date = new Date()) {
        const year = date.getFullYear();
        const month = date.getMonth();
        
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startingDayOfWeek = firstDay.getDay();
        
        let calendarHTML = `
            <div class="calendar-grid">
                <div class="calendar-header">
                    <div class="day-header">Mo</div>
                    <div class="day-header">Di</div>
                    <div class="day-header">Mi</div>
                    <div class="day-header">Do</div>
                    <div class="day-header">Fr</div>
                    <div class="day-header">Sa</div>
                    <div class="day-header">So</div>
                </div>
                <div class="calendar-body">
        `;
        
        // Add empty cells for days before month starts
        const mondayStart = startingDayOfWeek === 0 ? 6 : startingDayOfWeek - 1;
        for (let i = 0; i < mondayStart; i++) {
            calendarHTML += '<div class="calendar-day empty"></div>';
        }
        
        // Add days of month
        for (let day = 1; day <= daysInMonth; day++) {
            const currentDate = new Date(year, month, day);
            const dateString = currentDate.toISOString().split('T')[0];
            const dayEvents = this.getTrainingEventsForDate(dateString);
            
            calendarHTML += `
                <div class="calendar-day" data-date="${dateString}">
                    <div class="day-number">${day}</div>
                    <div class="day-events">
                        ${dayEvents.map(event => `
                            <div class="event ${event.type}" title="${event.title}">
                                ${event.title.substring(0, 20)}${event.title.length > 20 ? '...' : ''}
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }
        
        calendarHTML += '</div></div>';
        return calendarHTML;
    }

    getTrainingEventsForDate(dateString) {
        const events = [];
        
        this.trainingAssignments.forEach(assignment => {
            if (assignment.deadline && assignment.deadline === dateString) {
                const training = this.trainings.find(t => t.id === assignment.trainingId);
                if (training) {
                    events.push({
                        title: training.title,
                        type: assignment.status === 'completed' ? 'completed' : 
                              assignment.status === 'overdue' ? 'overdue' : 'deadline'
                    });
                }
            }
        });
        
        return events;
    }

    getAssignmentStatusText(status) {
        const statusTexts = {
            'assigned': 'Zugewiesen',
            'in-progress': 'In Bearbeitung',
            'completed': 'Abgeschlossen',
            'overdue': '√úberf√§llig'
        };
        return statusTexts[status] || status;
    }

    renderUsersList() {
        const usersList = document.getElementById('usersList');
        if (!usersList) return;
        
        usersList.innerHTML = '';
        
        this.users.filter(user => user.isActive).forEach(user => {
            const userElement = this.createUserElement(user);
            usersList.appendChild(userElement);
        });
        
        // Update dropdown after rendering list
        this.populateUserDropdown();
    }

    createUserElement(user) {
        const userDiv = document.createElement('div');
        userDiv.className = `user-item ${user.role}`;
        
        const initials = user.displayName.split(' ').map(name => name[0]).join('').toUpperCase();
        
        const roleName = this.roleDefinitions[user.role]?.name || user.role;
        const departmentInfo = this.getDepartmentInfo(user.department);
        
        userDiv.innerHTML = `
            <div class="user-avatar">${initials}</div>
            <div class="user-info">
                <div class="user-name">${user.displayName}</div>
                <div class="user-role">
                    <span class="role-badge ${user.role}">${roleName}</span>
                </div>
                <div class="user-details">
                    <div>üìß ${user.email}</div>
                    <div>üì± ${user.phone || 'Nicht angegeben'}</div>
                    <div>üè¢ ${departmentInfo}</div>
                </div>
            </div>
            <div class="user-item-actions">
                <button class="edit-user-btn" onclick="window.qhseDashboard.editUser('${user.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
                ${user.canBeDeleted !== false ? `
                    <button class="delete-user-btn" onclick="window.qhseDashboard.deleteUser('${user.id}')">
                        <i class="fas fa-trash"></i> L√∂schen
                    </button>
                ` : `
                    <button class="delete-user-btn" disabled title="Root-Admin kann nicht gel√∂scht werden">
                        <i class="fas fa-shield-alt"></i> Gesch√ºtzt
                    </button>
                `}
            </div>
        `;
        
        return userDiv;
    }

    getDepartmentInfo(departmentId) {
        if (!departmentId) return 'Keine Abteilung';
        
        const department = this.departments.find(d => d.id === departmentId);
        if (department) {
            return `${department.name} (${department.code})`;
        }
        
        // Fallback for old department names (string instead of ID)
        return departmentId;
    }

    openUserEditor(userId = null) {
        const modal = document.getElementById('userManagementModal');
        const titleElement = document.getElementById('userModalTitle');
        const adminOption = document.getElementById('adminOption');
        
        // Show/hide admin option based on current user role
        if (this.currentRole === 'root-admin') {
            adminOption.style.display = 'block';
        } else {
            adminOption.style.display = 'none';
        }
        
        if (userId) {
            // Edit mode
            const user = this.users.find(u => u.id === userId);
            titleElement.textContent = 'Nutzer bearbeiten';
            
            // Basic tab
            document.getElementById('newUserName').value = user.displayName;
            document.getElementById('newUserEmail').value = user.email;
            document.getElementById('newUserPhone').value = user.phone || '';
            document.getElementById('newUserDepartment').value = user.department || '';
            document.getElementById('newUserRole').value = user.role;
            
            // Personal tab
            document.getElementById('newUserBirthdate').value = user.birthdate || '';
            document.getElementById('newUserAddress').value = user.address || '';
            document.getElementById('newUserMobile').value = user.mobile || '';
            document.getElementById('newUserEmergencyContact').value = user.emergencyContact || '';
            
            // Hierarchy tab
            document.getElementById('newUserSupervisor').value = user.supervisor || '';
            document.getElementById('newUserPosition').value = user.position || '';
            document.getElementById('newUserStartDate').value = user.startDate || '';
            
            // Notes tab
            document.getElementById('newUserNotes').value = user.notes || '';
            
            // Permissions tab - checkbox is checked when access is denied
            document.getElementById('newUserGefahrstoffeAccess').checked = user.permissions?.gefahrstoffe === false;
            
            document.getElementById('editUserId').value = user.id;
        } else {
            // Add mode
            titleElement.textContent = 'Neuen Nutzer hinzuf√ºgen';
            document.getElementById('userForm').reset();
            document.getElementById('editUserId').value = '';
            // Reset permissions
            document.getElementById('newUserGefahrstoffeAccess').checked = false;
        }
        
        modal.style.display = 'block';
    }

    // Helper function to create complete profile structure for any user
    createCompleteUserProfile(userData) {
        return {
            ...userData,
            // Ensure all profile fields exist
            mobile: userData.mobile || '',
            position: userData.position || '',
            startDate: userData.startDate || '',
            birthdate: userData.birthdate || '',
            address: userData.address || '',
            emergencyContact: userData.emergencyContact || '',
            notes: userData.notes || '',
            qualifications: userData.qualifications || [],
            profileVisibility: userData.profileVisibility || {
                name: true,
                department: true,
                position: true,
                phone: false,
                email: false,
                responsibilities: true,
                qualifications: true
            }
        };
    }

    saveUser() {
        const form = document.getElementById('userForm');
        const formData = new FormData(form);
        const userId = document.getElementById('editUserId').value;
        
        const userData = {
            displayName: formData.get('userName'),
            email: formData.get('userEmail'),
            phone: formData.get('userPhone'),
            department: formData.get('userDepartment'),
            role: formData.get('userRole'),
            // Personal tab fields
            birthdate: document.getElementById('newUserBirthdate').value,
            address: document.getElementById('newUserAddress').value,
            mobile: document.getElementById('newUserMobile').value,
            emergencyContact: document.getElementById('newUserEmergencyContact').value,
            // Hierarchy tab fields
            supervisor: document.getElementById('newUserSupervisor').value,
            position: document.getElementById('newUserPosition').value,
            startDate: document.getElementById('newUserStartDate').value,
            // Notes tab fields
            notes: document.getElementById('newUserNotes').value,
            // Permissions tab fields - checked means access is denied
            permissions: {
                gefahrstoffe: document.getElementById('newUserGefahrstoffeAccess').checked ? false : undefined
            }
        };
        
        if (userId) {
            // Update existing user
            const userIndex = this.users.findIndex(u => u.id === userId);
            if (userIndex !== -1) {
                this.users[userIndex] = { ...this.users[userIndex], ...userData };
                // Clean up permissions object if no permissions are set
                if (this.users[userIndex].permissions && 
                    Object.values(this.users[userIndex].permissions).every(val => val === undefined)) {
                    delete this.users[userIndex].permissions;
                }
            }
        } else {
            // Create new user with complete profile
            const newUser = this.createCompleteUserProfile({
                id: Date.now().toString(),
                ...userData,
                isActive: true,
                canBeDeleted: true,
                createdAt: new Date().toISOString()
            });
            // Clean up permissions object if no permissions are set
            if (newUser.permissions && 
                Object.values(newUser.permissions).every(val => val === undefined)) {
                delete newUser.permissions;
            }
            this.users.push(newUser);
        }
        
        this.saveUsersToStorage();
        this.renderUsersList();
        this.populateUserDropdown();
        document.getElementById('userManagementModal').style.display = 'none';
        
        alert(userId ? 'Nutzer erfolgreich aktualisiert!' : 'Nutzer erfolgreich hinzugef√ºgt!');
    }

    editUser(userId) {
        this.openUserEditor(userId);
    }

    deleteUser(userId) {
        const user = this.users.find(u => u.id === userId);
        if (!user || user.canBeDeleted === false) {
            alert('Dieser Nutzer kann nicht gel√∂scht werden.');
            return;
        }
        
        if (confirm(`M√∂chten Sie den Nutzer "${user.displayName}" wirklich l√∂schen?`)) {
            user.isActive = false;
            this.saveUsersToStorage();
            this.renderUsersList();
            this.populateUserDropdown();
            
            // If current user was deleted, switch to root-admin
            if (this.currentUserId === userId) {
                this.currentUserId = 'root-admin';
                this.updateUIForUser();
            }
            
            alert('Nutzer erfolgreich gel√∂scht!');
        }
    }

    // User Profile Management
    setupUserProfile() {
        const editProfileBtn = document.getElementById('editProfileBtn');
        const saveProfileBtn = document.getElementById('saveProfileBtn');
        
        editProfileBtn.addEventListener('click', () => {
            this.openProfileEditor();
        });
        
        saveProfileBtn.addEventListener('click', () => {
            this.saveUserProfile();
        });
    }

    getCurrentUser() {
        // Find user by ID
        let user = this.users.find(user => user.id === this.currentUserId && user.isActive);
        if (!user) {
            // Fallback to root-admin if current user not found
            user = this.users.find(user => user.id === 'root-admin');
            if (user) {
                this.currentUserId = 'root-admin';
            }
        }
        return user;
    }

    createDefaultUserForRole(role) {
        const defaultUsers = {
            'root-admin': {
                id: 'root-admin',
                displayName: 'System Administrator',
                email: 'admin@hoffmann-voss.de',
                phone: '+49 2162 12345-000',
                mobile: '+49 171 1234567',
                department: 'administration',
                position: 'System Administrator',
                role: 'root-admin',
                isActive: true,
                canBeDeleted: false,
                startDate: '2020-01-01',
                address: 'Musterstra√üe 1\n12345 Musterstadt',
                emergencyContact: 'Max Admin - +49 171 9876543',
                notes: 'System Administrator mit vollst√§ndigen Zugriffsrechten',
                qualifications: [
                    {
                        title: 'IT-Systemadministration',
                        institution: 'TechCert',
                        date: '2020-01-15',
                        expiryDate: '2025-01-15',
                        description: 'Zertifizierung f√ºr Systemadministration',
                        addedAt: new Date().toISOString()
                    }
                ],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: false,
                    email: false,
                    responsibilities: true,
                    qualifications: true
                }
            },
            'admin': {
                id: 'admin-default',
                displayName: 'Administrator',
                email: 'admin@hoffmann-voss.de',
                phone: '+49 2162 12345-001',
                mobile: '+49 171 1111111',
                department: 'administration',
                position: 'Administrator',
                role: 'admin',
                isActive: true,
                canBeDeleted: true,
                startDate: '2021-01-01',
                address: 'Verwaltungsstra√üe 1\n12345 Adminstadt',
                emergencyContact: 'Admin Notfall - +49 171 9999999',
                notes: 'Administrator mit erweiterten Rechten',
                qualifications: [],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: false,
                    email: false,
                    responsibilities: true,
                    qualifications: true
                }
            },
            'geschaeftsfuehrung': {
                id: 'gf-default',
                displayName: 'Dr. Michael Hoffmann',
                email: 'm.hoffmann@hoffmann-voss.de',
                phone: '+49 2162 12345-100',
                mobile: '+49 171 2222222',
                department: 'geschaeftsfuehrung',
                position: 'Gesch√§ftsf√ºhrer',
                role: 'geschaeftsfuehrung',
                isActive: true,
                canBeDeleted: true,
                startDate: '2010-01-01',
                address: 'Chefetage 1\n12345 F√ºhrungsstadt',
                emergencyContact: 'Eva Hoffmann - +49 171 8888888',
                notes: 'Gesch√§ftsf√ºhrer und Firmeninhaber',
                qualifications: [
                    {
                        title: 'MBA Business Administration',
                        institution: 'Business School Hamburg',
                        date: '2008-06-30',
                        description: 'Master of Business Administration',
                        addedAt: new Date().toISOString()
                    }
                ],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: true,
                    email: true,
                    responsibilities: true,
                    qualifications: true
                }
            },
            'betriebsleiter': {
                id: 'bl-default',
                displayName: 'Peter M√ºller',
                email: 'p.mueller@hoffmann-voss.de',
                phone: '+49 2162 12345-150',
                mobile: '+49 171 2345678',
                department: 'betriebsleitung',
                position: 'Betriebsleiter',
                role: 'betriebsleiter',
                isActive: true,
                canBeDeleted: true,
                startDate: '2015-03-01',
                birthdate: '1975-08-15',
                address: 'Industriestra√üe 25\n45678 Industriestadt',
                emergencyContact: 'Anna M√ºller - +49 171 8765432',
                notes: 'Betriebsleiter mit 8 Jahren Erfahrung',
                qualifications: [
                    {
                        title: 'Betriebsleiter-Qualifikation',
                        institution: 'IHK D√ºsseldorf',
                        date: '2015-02-20',
                        expiryDate: '2025-02-20',
                        description: 'Qualifikation zum Betriebsleiter nach BetrSichV',
                        addedAt: new Date().toISOString()
                    },
                    {
                        title: 'Arbeitsschutz-Koordinator',
                        institution: 'T√úV Nord',
                        date: '2020-09-15',
                        expiryDate: '2023-09-15',
                        description: 'Koordinator f√ºr Arbeitsschutz auf Baustellen',
                        addedAt: new Date().toISOString()
                    }
                ],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: true,
                    email: true,
                    responsibilities: true,
                    qualifications: true
                }
            },
            'qhse': {
                id: 'qhse-default',
                displayName: 'Sarah Weber',
                email: 's.weber@hoffmann-voss.de',
                phone: '+49 2162 12345-200',
                mobile: '+49 171 3333333',
                department: 'qhse',
                position: 'QHSE-Managerin',
                role: 'qhse',
                isActive: true,
                canBeDeleted: true,
                startDate: '2017-09-01',
                birthdate: '1982-04-20',
                address: 'Qualit√§tsstra√üe 15\n12345 QHSE-Stadt',
                emergencyContact: 'Max Weber - +49 171 7777777',
                notes: 'QHSE-Spezialistin mit umfangreicher Erfahrung',
                qualifications: [
                    {
                        title: 'QHSE-Manager (T√úV)',
                        institution: 'T√úV Rheinland',
                        date: '2017-08-15',
                        expiryDate: '2025-08-15',
                        description: 'Zertifizierter QHSE-Manager',
                        addedAt: new Date().toISOString()
                    },
                    {
                        title: 'Umweltmanagement ISO 14001',
                        institution: 'DQS',
                        date: '2019-03-20',
                        expiryDate: '2026-03-20',
                        description: 'Umweltmanagement-Auditor',
                        addedAt: new Date().toISOString()
                    }
                ],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: true,
                    email: true,
                    responsibilities: true,
                    qualifications: true
                }
            },
            'abteilungsleiter': {
                id: 'al-default',
                displayName: 'Thomas Schmidt',
                email: 't.schmidt@hoffmann-voss.de',
                phone: '+49 2162 12345-300',
                mobile: '+49 171 4444444',
                department: 'produktion',
                position: 'Abteilungsleiter Produktion',
                role: 'abteilungsleiter',
                isActive: true,
                canBeDeleted: true,
                startDate: '2016-05-01',
                birthdate: '1978-11-30',
                address: 'Produktionsweg 8\n12345 Fertigungsort',
                emergencyContact: 'Lisa Schmidt - +49 171 6666666',
                notes: 'Abteilungsleiter Produktion mit Personalverantwortung',
                qualifications: [
                    {
                        title: 'Meister Industriemechanik',
                        institution: 'IHK K√∂ln',
                        date: '2014-07-15',
                        description: 'Industriemeister Fachrichtung Metall',
                        addedAt: new Date().toISOString()
                    }
                ],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: true,
                    email: false,
                    responsibilities: true,
                    qualifications: true
                }
            },
            'mitarbeiter': {
                id: 'ma-default',
                displayName: 'Maria Santos',
                email: 'm.santos@hoffmann-voss.de',
                phone: '+49 2162 12345-400',
                mobile: '+49 171 3456789',
                department: 'facility',
                position: 'Facility Management',
                role: 'mitarbeiter',
                isActive: true,
                canBeDeleted: true,
                startDate: '2018-06-15',
                birthdate: '1985-12-10',
                address: 'Hauptstra√üe 45\n67890 Beispielort',
                emergencyContact: 'Carlos Santos - +49 171 7654321',
                notes: 'Zuverl√§ssige Mitarbeiterin im Facility Management',
                qualifications: [
                    {
                        title: 'Grundlehrgang Arbeitsschutz',
                        institution: 'T√úV S√ºd',
                        date: '2018-07-01',
                        expiryDate: '2024-07-01',
                        description: 'Grundlagen des Arbeitsschutzes f√ºr Mitarbeiter',
                        addedAt: new Date().toISOString()
                    }
                ],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: false,
                    email: false,
                    responsibilities: false,
                    qualifications: true
                }
            },
            'techniker': {
                id: 'tech-default',
                displayName: 'Klaus Fischer',
                email: 'k.fischer@hoffmann-voss.de',
                phone: '+49 2162 12345-350',
                mobile: '+49 171 5555555',
                department: 'instandhaltung',
                position: 'Instandhaltungstechniker',
                role: 'techniker',
                isActive: true,
                canBeDeleted: true,
                startDate: '2019-02-01',
                birthdate: '1990-07-08',
                address: 'Technikstra√üe 12\n12345 Wartungsort',
                emergencyContact: 'Sandra Fischer - +49 171 5555444',
                notes: 'Spezialist f√ºr Maschinenwartung und Reparaturen',
                qualifications: [
                    {
                        title: 'Elektroniker f√ºr Betriebstechnik',
                        institution: 'IHK M√ºnchen',
                        date: '2016-01-30',
                        description: 'Ausbildung zum Elektroniker f√ºr Betriebstechnik',
                        addedAt: new Date().toISOString()
                    },
                    {
                        title: 'SPS-Programmierung Siemens',
                        institution: 'Siemens Academy',
                        date: '2020-11-15',
                        expiryDate: '2025-11-15',
                        description: 'Zertifizierung f√ºr SPS-Programmierung',
                        addedAt: new Date().toISOString()
                    }
                ],
                profileVisibility: {
                    name: true,
                    department: true,
                    position: true,
                    phone: false,
                    email: false,
                    responsibilities: true,
                    qualifications: true
                }
            }
        };

        const defaultUser = defaultUsers[role];
        if (defaultUser) {
            // Add creation timestamp
            defaultUser.createdAt = new Date().toISOString();
            
            // Ensure critical properties are set
            defaultUser.isActive = true;
            if (!defaultUser.displayName && defaultUser.name) {
                defaultUser.displayName = defaultUser.name;
            }
            
            console.log('Adding default user:', defaultUser.id, defaultUser.displayName);
            this.users.push(defaultUser);
            this.saveUsersToStorage();
            
            console.log('User added successfully. Total users now:', this.users.length);
            return defaultUser;
        } else {
            console.error('No default user template found for role:', role);
        }
        
        // Fallback to root-admin if role not found
        return this.users.find(user => user.id === 'root-admin');
    }

    openProfileEditor() {
        const currentUser = this.getCurrentUser();
        
        document.getElementById('editUserName').value = currentUser.displayName;
        document.getElementById('editUserEmail').value = currentUser.email || '';
        document.getElementById('editUserPhone').value = currentUser.phone || '';
        document.getElementById('editUserDepartment').value = currentUser.department || '';
        
        document.getElementById('profileModal').style.display = 'block';
    }

    saveUserProfile() {
        const currentUser = this.getCurrentUser();
        const userIndex = this.users.findIndex(u => u.id === currentUser.id);
        
        if (userIndex !== -1) {
            this.users[userIndex].displayName = document.getElementById('editUserName').value;
            this.users[userIndex].email = document.getElementById('editUserEmail').value;
            this.users[userIndex].phone = document.getElementById('editUserPhone').value;
            this.users[userIndex].department = document.getElementById('editUserDepartment').value;
            
            this.saveUsersToStorage();
            
            // Update UI
            this.updateUIForUser();
            this.renderUsersList();
            this.populateUserDropdown();
        }
        
        // Close modal
        document.getElementById('profileModal').style.display = 'none';
        
        alert('Profil erfolgreich gespeichert!');
    }

    populateUserDropdown() {
        const userSelect = document.getElementById('userSelect');
        if (!userSelect) {
            console.error('userSelect element not found');
            return;
        }
        
        if (!this.users || !Array.isArray(this.users)) {
            console.error('Users array not available, reinitializing...');
            this.initializeRootAdmin();
            return;
        }
        
        try {
            // Clear existing options
            userSelect.innerHTML = '';
            
            // Enhanced debugging
            console.log('Total users in system:', this.users.length);
            this.users.forEach((user, index) => {
                console.log(`User ${index}:`, {
                    id: user.id,
                    displayName: user.displayName,
                    isActive: user.isActive,
                    role: user.role
                });
            });
            
            // Add all users (less restrictive filter)
            const availableUsers = this.users.filter(user => {
                if (!user) return false;
                
                // Ensure required properties exist
                if (!user.id) {
                    console.warn('User missing ID:', user);
                    return false;
                }
                
                if (!user.displayName) {
                    console.warn('User missing displayName:', user.id);
                    // Try to use other name fields as fallback
                    user.displayName = user.name || `User ${user.id}`;
                }
                
                // Set isActive to true if missing
                if (user.isActive === undefined) {
                    console.warn('User missing isActive property, setting to true:', user.id);
                    user.isActive = true;
                }
                
                return user.isActive;
            });
            
            console.log('Available users for dropdown:', availableUsers.length);
            
            if (availableUsers.length === 0) {
                console.error('No valid users found, reinitializing default users...');
                this.initializeRootAdmin();
                // Try again after initialization
                setTimeout(() => this.populateUserDropdown(), 100);
                return;
            }
            
            // Sort users by display name
            availableUsers.sort((a, b) => (a.displayName || '').localeCompare(b.displayName || ''));
            
            availableUsers.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                const roleName = this.roleDefinitions[user.role]?.name || user.role;
                option.textContent = `${user.displayName} (${roleName})`;
                userSelect.appendChild(option);
                console.log('Added user to dropdown:', option.textContent);
            });
            
            // Set current selection (only if the user exists in the dropdown)
            const userExists = availableUsers.find(user => user.id === this.currentUserId);
            if (userExists) {
                userSelect.value = this.currentUserId;
                console.log('Current user found in dropdown:', this.currentUserId);
            } else {
                // Fallback to first available user or root-admin
                const fallbackUser = availableUsers.find(user => user.id === 'root-admin') || availableUsers[0];
                if (fallbackUser) {
                    this.currentUserId = fallbackUser.id;
                    userSelect.value = this.currentUserId;
                    console.log('Set fallback user:', fallbackUser.id);
                    // Update UI for new user
                    this.updateUIForUser();
                }
            }
            
            // Save any fixes we made
            this.saveUsersToStorage();
            
        } catch (error) {
            console.error('Error populating user dropdown:', error);
            // Emergency fallback - create a basic root admin if nothing else works
            if (this.users.length === 0) {
                this.users.push({
                    id: 'root-admin',
                    displayName: 'System Administrator',
                    role: 'root-admin',
                    isActive: true,
                    email: 'admin@hoffmann-voss.de',
                    canBeDeleted: false
                });
                this.saveUsersToStorage();
                this.populateUserDropdown(); // Try again
            }
        }
    }

    // Setup Form Tabs
    setupFormTabs() {
        const tabBtns = document.querySelectorAll('.tab-btn');
        
        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetTab = btn.getAttribute('data-tab');
                const modalContainer = btn.closest('.modal-content, .content-section');
                
                if (!modalContainer) return;
                
                // Remove active class from tabs and contents within this container only
                const containerTabBtns = modalContainer.querySelectorAll('.tab-btn');
                const containerTabContents = modalContainer.querySelectorAll('.tab-content');
                
                containerTabBtns.forEach(b => b.classList.remove('active'));
                containerTabContents.forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab
                btn.classList.add('active');
                
                // Find matching tab content within the same container
                let targetContent = null;
                
                // Try different approaches to find the content
                if (modalContainer.querySelector(`#${targetTab}-tab`)) {
                    targetContent = modalContainer.querySelector(`#${targetTab}-tab`);
                } else if (modalContainer.querySelector(`#tab-${targetTab}`)) {
                    targetContent = modalContainer.querySelector(`#tab-${targetTab}`);
                } else if (modalContainer.querySelector(`#${targetTab}`)) {
                    targetContent = modalContainer.querySelector(`#${targetTab}`);
                } else {
                    // Try data-tab attribute matching
                    targetContent = modalContainer.querySelector(`[data-tab="${targetTab}"].tab-content`);
                }
                
                if (targetContent) {
                    targetContent.classList.add('active');
                } else {
                    // Only warn if this is not in a closed modal
                    const modal = btn.closest('.modal');
                    if (!modal || modal.style.display !== 'none') {
                        console.warn(`Tab content not found for: ${targetTab} in container`);
                    }
                }
            });
        });
    }

    // Setup Editable Company Name (only for root-admin)
    setupEditableCompanyName() {
        const companyNameElement = document.getElementById('companyName');
        const editCompanyBtn = document.getElementById('editCompanyBtn');
        if (!companyNameElement) return;
        
        // Load saved company name from localStorage
        const savedCompanyName = localStorage.getItem('qhse_company_name');
        if (savedCompanyName) {
            companyNameElement.textContent = savedCompanyName;
        }
        
        // Only allow editing for root-admin
        const currentUser = this.getCurrentUser();
        if (!currentUser || currentUser.role !== 'root-admin') {
            if (editCompanyBtn) {
                editCompanyBtn.style.display = 'none';
            }
            return;
        }
        
        function startEditing() {
            // Double check permissions
            const user = window.qhseDashboard.getCurrentUser();
            if (!user || user.role !== 'root-admin') {
                alert('Nur der System Administrator kann den Firmennamen √§ndern.');
                return;
            }
            
            const currentName = companyNameElement.textContent;
            
            // Create input element
            const input = document.createElement('input');
            input.type = 'text';
            input.value = currentName;
            input.className = 'company-name-input';
            
            // Replace h2 with input temporarily
            companyNameElement.style.display = 'none';
            if (editCompanyBtn) editCompanyBtn.style.display = 'none';
            companyNameElement.parentNode.insertBefore(input, companyNameElement);
            input.focus();
            input.select();
            
            // Save on blur or enter
            function saveCompanyName() {
                const newName = input.value.trim();
                if (newName && newName !== currentName) {
                    companyNameElement.textContent = newName;
                    localStorage.setItem('qhse_company_name', newName);
                    // Update settings input as well
                    const settingsInput = document.getElementById('settingsCompanyName');
                    if (settingsInput) {
                        settingsInput.value = newName;
                    }
                }
                input.remove();
                companyNameElement.style.display = '';
                if (editCompanyBtn) editCompanyBtn.style.display = '';
            }
            
            input.addEventListener('blur', saveCompanyName);
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    saveCompanyName();
                }
                if (e.key === 'Escape') {
                    input.remove();
                    companyNameElement.style.display = '';
                    if (editCompanyBtn) editCompanyBtn.style.display = '';
                }
            });
        }
        
        // Add click listeners to both the name and the edit button
        companyNameElement.addEventListener('click', startEditing);
        if (editCompanyBtn) {
            editCompanyBtn.addEventListener('click', startEditing);
        }
    }

    // Setup Settings Management
    setupSettings() {
        // Company Name Settings
        const saveCompanyNameBtn = document.getElementById('saveCompanyNameBtn');
        const resetCompanyNameBtn = document.getElementById('resetCompanyNameBtn');
        const settingsCompanyName = document.getElementById('settingsCompanyName');
        
        // Dashboard Name Settings
        const saveDashboardNameBtn = document.getElementById('saveDashboardNameBtn');
        const resetDashboardNameBtn = document.getElementById('resetDashboardNameBtn');
        const settingsDashboardName = document.getElementById('settingsDashboardName');
        
        // Color Theme Settings
        const saveColorThemeBtn = document.getElementById('saveColorThemeBtn');
        const resetColorThemeBtn = document.getElementById('resetColorThemeBtn');
        
        // Initialize Company Name Settings
        if (saveCompanyNameBtn && resetCompanyNameBtn && settingsCompanyName) {
            // Load current company name
            const savedCompanyName = localStorage.getItem('qhse_company_name') || 'Hoffmann & Voss';
            settingsCompanyName.value = savedCompanyName;
            
            // Save company name
            saveCompanyNameBtn.addEventListener('click', () => {
                const currentUser = this.getCurrentUser();
                if (!currentUser || currentUser.role !== 'root-admin') {
                    alert('Nur der System Administrator kann Einstellungen √§ndern.');
                    return;
                }
                
                const newName = settingsCompanyName.value.trim();
                if (newName) {
                    localStorage.setItem('qhse_company_name', newName);
                    
                    // Update sidebar company name
                    const companyNameElement = document.getElementById('companyName');
                    if (companyNameElement) {
                        companyNameElement.textContent = newName;
                    }
                    
                    alert('Firmenname erfolgreich gespeichert!');
                } else {
                    alert('Bitte geben Sie einen g√ºltigen Firmennamen ein.');
                }
            });
            
            // Reset company name
            resetCompanyNameBtn.addEventListener('click', () => {
                const currentUser = this.getCurrentUser();
                if (!currentUser || currentUser.role !== 'root-admin') {
                    alert('Nur der System Administrator kann Einstellungen √§ndern.');
                    return;
                }
                
                if (confirm('M√∂chten Sie den Firmennamen auf "Hoffmann & Voss" zur√ºcksetzen?')) {
                    const defaultName = 'Hoffmann & Voss';
                    localStorage.setItem('qhse_company_name', defaultName);
                    settingsCompanyName.value = defaultName;
                    
                    // Update sidebar company name
                    const companyNameElement = document.getElementById('companyName');
                    if (companyNameElement) {
                        companyNameElement.textContent = defaultName;
                    }
                    
                    alert('Firmenname wurde zur√ºckgesetzt!');
                }
            });
        }
        
        // Initialize Dashboard Name Settings
        if (saveDashboardNameBtn && resetDashboardNameBtn && settingsDashboardName) {
            // Load current dashboard name
            const savedDashboardName = localStorage.getItem('qhse_dashboard_name') || 'Dashboard';
            settingsDashboardName.value = savedDashboardName;
            
            // Save dashboard name
            saveDashboardNameBtn.addEventListener('click', () => {
                const currentUser = this.getCurrentUser();
                if (!currentUser || currentUser.role !== 'root-admin') {
                    alert('Nur der System Administrator kann Einstellungen √§ndern.');
                    return;
                }
                
                const newName = settingsDashboardName.value.trim();
                if (newName) {
                    localStorage.setItem('qhse_dashboard_name', newName);
                    
                    // Update sidebar dashboard name
                    const dashboardMenuItem = document.querySelector('[data-section="dashboard"] span');
                    if (dashboardMenuItem) {
                        dashboardMenuItem.textContent = newName;
                    }
                    
                    // Update page title if currently on dashboard
                    if (this.currentSection === 'dashboard') {
                        const pageTitle = document.getElementById('pageTitle');
                        if (pageTitle) {
                            pageTitle.textContent = newName;
                        }
                    }
                    
                    alert('Dashboard-Bezeichnung erfolgreich gespeichert!');
                } else {
                    alert('Bitte geben Sie eine g√ºltige Dashboard-Bezeichnung ein.');
                }
            });
            
            // Reset dashboard name
            resetDashboardNameBtn.addEventListener('click', () => {
                const currentUser = this.getCurrentUser();
                if (!currentUser || currentUser.role !== 'root-admin') {
                    alert('Nur der System Administrator kann Einstellungen √§ndern.');
                    return;
                }
                
                if (confirm('M√∂chten Sie die Dashboard-Bezeichnung auf "Dashboard" zur√ºcksetzen?')) {
                    const defaultName = 'Dashboard';
                    localStorage.setItem('qhse_dashboard_name', defaultName);
                    settingsDashboardName.value = defaultName;
                    
                    // Update sidebar dashboard name
                    const dashboardMenuItem = document.querySelector('[data-section="dashboard"] span');
                    if (dashboardMenuItem) {
                        dashboardMenuItem.textContent = defaultName;
                    }
                    
                    // Update page title if currently on dashboard
                    if (this.currentSection === 'dashboard') {
                        const pageTitle = document.getElementById('pageTitle');
                        if (pageTitle) {
                            pageTitle.textContent = defaultName;
                        }
                    }
                    
                    alert('Dashboard-Bezeichnung wurde zur√ºckgesetzt!');
                }
            });
        }
        
        // Color Theme Settings
        if (saveColorThemeBtn && resetColorThemeBtn) {
            this.setupColorThemeManagement();
        }
        
        // Module Management Settings
        this.setupModuleManagement();
        
        // User Module Permissions Management
        try {
            this.setupUserModulePermissions();
        } catch (error) {
            console.error('Error setting up user module permissions:', error);
        }
    }

    setupColorThemeManagement() {
        const saveColorThemeBtn = document.getElementById('saveColorThemeBtn');
        const resetColorThemeBtn = document.getElementById('resetColorThemeBtn');
        const themeOptions = document.querySelectorAll('.theme-option');
        const modeTabs = document.querySelectorAll('.mode-tab');
        const colorModeContents = document.querySelectorAll('.color-mode-content');
        const sectionColorSelects = document.querySelectorAll('.section-color-select');
        
        // Load current theme from localStorage
        const savedTheme = localStorage.getItem('qhse_color_theme') || 'default';
        const savedSectionColors = JSON.parse(localStorage.getItem('qhse_section_colors') || '{}');
        
        this.applyColorTheme(savedTheme);
        this.applySectionColors(savedSectionColors);
        
        // Setup mode tabs (Global vs Individual)
        modeTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const mode = tab.dataset.mode;
                
                // Update active tab
                modeTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Show/hide content
                colorModeContents.forEach(content => {
                    if (content.id === mode + 'ColorMode') {
                        content.style.display = 'block';
                    } else {
                        content.style.display = 'none';
                    }
                });
            });
        });
        
        // Load saved section colors
        sectionColorSelects.forEach(select => {
            const section = select.dataset.section;
            if (savedSectionColors[section]) {
                select.value = savedSectionColors[section];
            }
        });
        
        // Set active theme option
        themeOptions.forEach(option => {
            const theme = option.dataset.theme;
            if (theme === savedTheme) {
                option.classList.add('active');
            }
            
            // Add click event listener
            option.addEventListener('click', () => {
                // Remove active class from all options
                themeOptions.forEach(opt => opt.classList.remove('active'));
                // Add active class to clicked option
                option.classList.add('active');
            });
        });
        
        // Save color theme
        saveColorThemeBtn.addEventListener('click', () => {
            const currentUser = this.getCurrentUser();
            if (!currentUser || currentUser.role !== 'root-admin') {
                alert('Nur der System Administrator kann Einstellungen √§ndern.');
                return;
            }
            
            // Check which mode is active
            const activeMode = document.querySelector('.mode-tab.active').dataset.mode;
            
            if (activeMode === 'global') {
                // Save global theme
                const activeOption = document.querySelector('.theme-option.active');
                if (activeOption) {
                    const selectedTheme = activeOption.dataset.theme;
                    localStorage.setItem('qhse_color_theme', selectedTheme);
                    this.applyColorTheme(selectedTheme);
                    alert('Globales Farbschema wurde erfolgreich gespeichert!');
                } else {
                    alert('Bitte w√§hlen Sie ein Farbschema aus.');
                }
            } else {
                // Save individual section colors
                const sectionColors = {};
                sectionColorSelects.forEach(select => {
                    const section = select.dataset.section;
                    const color = select.value;
                    sectionColors[section] = color;
                });
                
                localStorage.setItem('qhse_section_colors', JSON.stringify(sectionColors));
                this.applySectionColors(sectionColors);
                alert('Individuelle Bereichsfarben wurden erfolgreich gespeichert!');
            }
        });
        
        // Reset color theme
        resetColorThemeBtn.addEventListener('click', () => {
            const currentUser = this.getCurrentUser();
            if (!currentUser || currentUser.role !== 'root-admin') {
                alert('Nur der System Administrator kann Einstellungen √§ndern.');
                return;
            }
            
            const activeMode = document.querySelector('.mode-tab.active').dataset.mode;
            
            if (activeMode === 'global') {
                if (confirm('M√∂chten Sie das globale Farbschema auf Standard zur√ºcksetzen?')) {
                    localStorage.setItem('qhse_color_theme', 'default');
                    this.applyColorTheme('default');
                    
                    // Reset active option
                    themeOptions.forEach(opt => opt.classList.remove('active'));
                    const defaultOption = document.querySelector('.theme-option[data-theme="default"]');
                    if (defaultOption) {
                        defaultOption.classList.add('active');
                    }
                    
                    alert('Globales Farbschema wurde auf Standard zur√ºckgesetzt!');
                }
            } else {
                if (confirm('M√∂chten Sie alle individuellen Bereichsfarben zur√ºcksetzen?')) {
                    localStorage.removeItem('qhse_section_colors');
                    this.applySectionColors({});
                    
                    // Reset all selects to default
                    sectionColorSelects.forEach(select => {
                        select.value = 'default';
                    });
                    
                    alert('Individuelle Bereichsfarben wurden zur√ºckgesetzt!');
                }
            }
        });
    }

    loadAndApplyColorTheme() {
        const savedTheme = localStorage.getItem('qhse_color_theme') || 'default';
        const savedSectionColors = JSON.parse(localStorage.getItem('qhse_section_colors') || '{}');
        this.applyColorTheme(savedTheme);
        this.applySectionColors(savedSectionColors);
    }

    applyColorTheme(theme) {
        // Apply theme to document body
        document.body.setAttribute('data-theme', theme);
        
        // Also apply to html element for better coverage
        document.documentElement.setAttribute('data-theme', theme);
        
        console.log('Color theme applied:', theme);
    }

    applySectionColors(sectionColors) {
        // Remove all existing color classes from menu items
        const menuItems = document.querySelectorAll('.menu-item');
        menuItems.forEach(item => {
            item.classList.remove('color-blue', 'color-green', 'color-purple', 'color-orange', 'color-red', 'color-cyan', 'color-pink');
        });
        
        // Apply individual section colors
        Object.keys(sectionColors).forEach(section => {
            const color = sectionColors[section];
            if (color && color !== 'default') {
                const menuItem = document.querySelector(`.menu-item[data-section="${section}"]`);
                if (menuItem) {
                    menuItem.classList.add(`color-${color}`);
                }
            }
        });
        
        console.log('Section colors applied:', sectionColors);
    }
    
    setupModuleManagement() {
        const enableGefahrstoffeModule = document.getElementById('enableGefahrstoffeModule');
        const saveModuleSettingsBtn = document.getElementById('saveModuleSettings');
        const resetModuleSettingsBtn = document.getElementById('resetModuleSettings');
        
        if (enableGefahrstoffeModule) {
            // Load current module settings
            const moduleSettings = this.loadModuleSettingsFromStorage();
            enableGefahrstoffeModule.checked = moduleSettings.gefahrstoffe;
            
            // Update module status and user statistics
            this.updateModuleDisplay();
            
            // Event listener for module toggle
            enableGefahrstoffeModule.addEventListener('change', () => {
                const currentUser = this.getCurrentUser();
                if (!currentUser || currentUser.role !== 'root-admin') {
                    alert('Nur der System Administrator kann Module verwalten.');
                    enableGefahrstoffeModule.checked = !enableGefahrstoffeModule.checked; // Revert change
                    return;
                }
                
                this.saveModuleSettings({
                    gefahrstoffe: enableGefahrstoffeModule.checked
                });
                
                // Update navigation visibility
                this.updateMenuVisibility();
                
                // Update module display
                this.updateModuleDisplay();
                
                const status = enableGefahrstoffeModule.checked ? 'aktiviert' : 'deaktiviert';
                alert(`Gefahrstoffverzeichnis wurde ${status}!`);
            });
        }
        
        // Save module settings button
        if (saveModuleSettingsBtn) {
            saveModuleSettingsBtn.addEventListener('click', () => {
                const currentUser = this.getCurrentUser();
                if (!currentUser || currentUser.role !== 'root-admin') {
                    alert('Nur der System Administrator kann Module verwalten.');
                    return;
                }
                
                alert('Module-Einstellungen wurden gespeichert!');
            });
        }
        
        // Reset module settings button
        if (resetModuleSettingsBtn) {
            resetModuleSettingsBtn.addEventListener('click', () => {
                const currentUser = this.getCurrentUser();
                if (!currentUser || currentUser.role !== 'root-admin') {
                    alert('Nur der System Administrator kann Module verwalten.');
                    return;
                }
                
                if (confirm('M√∂chten Sie alle Module-Einstellungen auf die Standardwerte zur√ºcksetzen?')) {
                    // Reset to default settings
                    this.saveModuleSettings({ gefahrstoffe: true });
                    
                    // Update UI
                    if (enableGefahrstoffeModule) {
                        enableGefahrstoffeModule.checked = true;
                    }
                    this.updateMenuVisibility();
                    this.updateModuleDisplay();
                    
                    alert('Module-Einstellungen wurden zur√ºckgesetzt!');
                }
            });
        }
    }
    
    loadModuleSettingsFromStorage() {
        const stored = localStorage.getItem('qhse_module_settings');
        return stored ? JSON.parse(stored) : { gefahrstoffe: true }; // Default enabled
    }
    
    saveModuleSettings(settings) {
        localStorage.setItem('qhse_module_settings', JSON.stringify(settings));
    }
    
    updateModuleDisplay() {
        const moduleSettings = this.loadModuleSettingsFromStorage();
        
        // Update Gefahrstoffe module status and user count
        const gefahrstoffeModuleStatus = document.getElementById('gefahrstoffeModuleStatus');
        const gefahrstoffeModuleUsers = document.getElementById('gefahrstoffeModuleUsers');
        
        if (gefahrstoffeModuleStatus) {
            gefahrstoffeModuleStatus.textContent = moduleSettings.gefahrstoffe ? 'Aktiv' : 'Inaktiv';
            gefahrstoffeModuleStatus.className = `module-status ${moduleSettings.gefahrstoffe ? 'active' : 'inactive'}`;
        }
        
        if (gefahrstoffeModuleUsers) {
            if (moduleSettings.gefahrstoffe) {
                const usersWithAccess = this.users.filter(user => 
                    this.userHasAccessToSection(user, 'gefahrstoffe', this.roleDefinitions[user.role]?.allowedSections || [])
                ).length;
                gefahrstoffeModuleUsers.textContent = `${usersWithAccess} Benutzer haben Zugriff`;
            } else {
                gefahrstoffeModuleUsers.textContent = 'Modul ist deaktiviert';
            }
        }
    }
    
    setupUserModulePermissions() {
        const permissionModuleFilter = document.getElementById('permissionModuleFilter');
        const permissionRoleFilter = document.getElementById('permissionRoleFilter');
        const permissionUserFilter = document.getElementById('permissionUserFilter');
        const selectAllUsersBtn = document.getElementById('selectAllUsersBtn');
        const deselectAllUsersBtn = document.getElementById('deselectAllUsersBtn');
        const saveUserPermissionsBtn = document.getElementById('saveUserPermissionsBtn');
        const resetUserPermissionsBtn = document.getElementById('resetUserPermissionsBtn');
        
        // Only setup if elements exist (they might not be present in all sections)
        if (!permissionModuleFilter || !permissionRoleFilter || !permissionUserFilter) {
            console.log('User module permission elements not found, skipping setup');
            return;
        }
        
        if (permissionModuleFilter && permissionRoleFilter && permissionUserFilter) {
            // Populate user dropdown
            this.populatePermissionUserDropdown();
            
            // Initial render with debug
            console.log('Initial render of user permissions list');
            this.renderUserPermissionsList();
            
            // Event listeners for filters
            permissionModuleFilter.addEventListener('change', () => {
                this.renderUserPermissionsList();
            });
            
            permissionRoleFilter.addEventListener('change', () => {
                this.renderUserPermissionsList();
            });
            
            permissionUserFilter.addEventListener('change', () => {
                this.renderUserPermissionsList();
            });
            
            // Bulk action event listeners
            if (selectAllUsersBtn) {
                selectAllUsersBtn.addEventListener('click', () => {
                    this.selectAllUserPermissions(true);
                });
            }
            
            if (deselectAllUsersBtn) {
                deselectAllUsersBtn.addEventListener('click', () => {
                    this.selectAllUserPermissions(false);
                });
            }
            
            
            // Save and reset event listeners
            if (saveUserPermissionsBtn) {
                saveUserPermissionsBtn.addEventListener('click', () => {
                    this.saveAllUserPermissions();
                });
            }
            
            if (resetUserPermissionsBtn) {
                resetUserPermissionsBtn.addEventListener('click', () => {
                    this.resetUserPermissions();
                });
            }
        }
    }
    
    populatePermissionUserDropdown() {
        const userSelect = document.getElementById('permissionUserFilter');
        if (!userSelect) {
            console.error('permissionUserFilter dropdown not found');
            return;
        }
        
        console.log('Total users in system:', this.users.length);
        console.log('All users:', this.users.map(u => `${u.displayName || u.name || 'Unknown'} (${u.role})`));
        
        // Clear existing options except the first one
        userSelect.innerHTML = '<option value="">Alle Benutzer anzeigen</option>';
        
        // Filter out admin users but include all others
        const nonAdminUsers = this.users.filter(user => {
            const isAdmin = user.role === 'admin' || user.role === 'root-admin';
            console.log(`User ${user.displayName || user.name}: isAdmin=${isAdmin}, include=${!isAdmin}`);
            return !isAdmin;
        });
        
        console.log(`Filtered to ${nonAdminUsers.length} non-admin users:`, nonAdminUsers.map(u => u.displayName || u.name));
        
        // Sort users by name
        nonAdminUsers.sort((a, b) => (a.name || a.displayName || 'Unknown').localeCompare(b.name || b.displayName || 'Unknown'));
        
        nonAdminUsers.forEach(user => {
            const option = document.createElement('option');
            option.value = user.id;
            const userName = user.displayName || user.name || 'Unbekannter Benutzer';
            const roleName = this.getRoleDisplayName(user.role);
            option.textContent = `${userName} (${roleName})`;
            userSelect.appendChild(option);
            console.log(`Added user option: ${option.textContent}`);
        });
        
        console.log(`Populated user dropdown with ${nonAdminUsers.length} users`);
        console.log('Dropdown HTML:', userSelect.innerHTML);
    }
    
    renderUserPermissionsList() {
        const container = document.getElementById('userPermissionsList');
        const moduleFilter = document.getElementById('permissionModuleFilter')?.value || 'gefahrstoffe';
        const roleFilter = document.getElementById('permissionRoleFilter')?.value || '';
        const userFilter = document.getElementById('permissionUserFilter')?.value || '';
        
        if (!container) return;
        
        // Start with all users
        let filteredUsers = [...this.users];
        
        // Exclude admin users from permission management (they have full access)
        filteredUsers = filteredUsers.filter(user => user.role !== 'admin' && user.role !== 'root-admin');
        
        // Filter by specific user if selected
        if (userFilter) {
            filteredUsers = filteredUsers.filter(user => user.id === userFilter);
        }
        // Otherwise filter by role if specified
        else if (roleFilter) {
            filteredUsers = filteredUsers.filter(user => user.role === roleFilter);
        }
        
        console.log(`Filtering users: userFilter='${userFilter}', roleFilter='${roleFilter}', found ${filteredUsers.length} users`);
        
        if (filteredUsers.length === 0) {
            container.innerHTML = `
                <div class="no-users-message">
                    <i class="fas fa-users"></i>
                    <p>Keine Benutzer gefunden f√ºr die ausgew√§hlten Filter.</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = filteredUsers.map(user => {
            const hasPermission = this.getUserModulePermission(user, moduleFilter);
            const hasRoleBasedAccess = this.hasRoleBasedModuleAccess(user, moduleFilter);
            const statusBadge = this.getUserPermissionStatusBadge(user, moduleFilter, hasPermission, hasRoleBasedAccess);
            const initials = this.getUserInitials(user);
            
            return `
                <div class="user-permission-item" data-user-id="${user.id}">
                    <div class="user-permission-info">
                        <div class="user-permission-avatar">${initials}</div>
                        <div class="user-permission-details">
                            <div class="user-permission-name">${user.name}</div>
                            <div class="user-permission-role">
                                <i class="fas fa-user"></i>
                                ${this.getRoleDisplayName(user.role)}
                            </div>
                        </div>
                    </div>
                    <div class="user-permission-status">
                        ${statusBadge}
                    </div>
                    <div class="user-permission-toggle">
                        <input type="checkbox" 
                               class="permission-checkbox" 
                               data-user-id="${user.id}" 
                               data-module="${moduleFilter}"
                               ${hasPermission ? 'checked' : ''}>
                        <label>${hasPermission ? 'Zugriff verweigern' : 'Zugriff erlauben'}</label>
                    </div>
                </div>
            `;
        }).join('');
        
        // Add event listeners to checkboxes
        container.querySelectorAll('.permission-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const userId = e.target.dataset.userId;
                const module = e.target.dataset.module;
                const checked = e.target.checked;
                
                console.log(`Permission change: User ${userId}, Module ${module}, Checked: ${checked}`);
                
                this.updateUserModulePermission(userId, module, checked);
                
                // Don't re-render immediately to avoid event listener conflicts
                // Instead, update only the status badge for this specific user
                this.updateUserPermissionStatusInUI(userId, module);
                
                // Update module display to reflect overall changes
                this.updateModuleDisplay();
            });
        });
    }
    
    getUserModulePermission(user, module) {
        // Now returns true if user has explicit denial (checkbox should be checked to deny)
        return user.permissions && user.permissions[module] === false;
    }
    
    hasRoleBasedModuleAccess(user, module) {
        const roleDefinition = this.roleDefinitions[user.role];
        return roleDefinition && roleDefinition.allowedSections && roleDefinition.allowedSections.includes(module);
    }
    
    getUserPermissionStatusBadge(user, module, hasPermission, hasRoleBasedAccess) {
        if (!hasRoleBasedAccess) {
            return '<span class="permission-status-badge denied">Rolle nicht berechtigt</span>';
        }
        
        if (hasPermission) {
            return '<span class="permission-status-badge denied">Zugriff verweigert</span>';
        } else {
            return '<span class="permission-status-badge granted">Zugriff erlaubt</span>';
        }
    }
    
    getUserInitials(user) {
        return user.name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
    }
    
    getRoleDisplayName(role) {
        const roleNames = {
            'geschaeftsfuehrung': 'Gesch√§ftsf√ºhrung',
            'betriebsleiter': 'Betriebsleiter',
            'abteilungsleiter': 'Abteilungsleiter',
            'qhse': 'QHSE',
            'mitarbeiter': 'Mitarbeiter',
            'techniker': 'Techniker',
            'admin': 'Administrator',
            'root-admin': 'System Administrator'
        };
        return roleNames[role] || role;
    }
    
    updateUserModulePermission(userId, module, isDenied) {
        const user = this.users.find(u => u.id === userId);
        if (user) {
            if (!user.permissions) {
                user.permissions = {};
            }
            // Store denial flag: false means access is denied, undefined means access is allowed (default)
            if (isDenied) {
                user.permissions[module] = false;
            } else {
                delete user.permissions[module];
                // Clean up empty permissions object
                if (Object.keys(user.permissions).length === 0) {
                    delete user.permissions;
                }
            }
            
            const userName = user.displayName || user.name || userId;
            console.log(`Updated permissions for user ${userName}:`, user.permissions);
            
            this.saveUsersToStorage();
            
            console.log('User permissions saved to localStorage');
            
            // Update menu visibility for all users in case current user was affected
            this.updateMenuVisibility();
            
            // Show feedback to user
            const status = hasPermission ? 'gew√§hrt' : 'entzogen';
            alert(`Berechtigung f√ºr ${userName} wurde ${status} und gespeichert.`);
        } else {
            console.error(`User with ID ${userId} not found`);
        }
    }
    
    updateUserPermissionStatusInUI(userId, module) {
        const user = this.users.find(u => u.id === userId);
        if (!user) return;
        
        const userItem = document.querySelector(`[data-user-id="${userId}"]`);
        if (!userItem) return;
        
        const hasPermission = this.getUserModulePermission(user, module);
        const hasRoleBasedAccess = this.hasRoleBasedModuleAccess(user, module);
        const statusBadge = this.getUserPermissionStatusBadge(user, module, hasPermission, hasRoleBasedAccess);
        
        // Update status badge
        const statusContainer = userItem.querySelector('.user-permission-status');
        if (statusContainer) {
            statusContainer.innerHTML = statusBadge;
        }
        
        // Update checkbox label
        const label = userItem.querySelector('.user-permission-toggle label');
        if (label) {
            label.textContent = hasPermission ? 'Zugriff verweigern' : 'Zugriff erlauben';
        }
        
        console.log(`Updated UI for user ${user.name}: hasPermission=${hasPermission}`);
    }
    
    selectAllUserPermissions(select) {
        const checkboxes = document.querySelectorAll('.permission-checkbox');
        console.log(`Bulk operation: ${select ? 'Select' : 'Deselect'} all - found ${checkboxes.length} checkboxes`);
        
        checkboxes.forEach(checkbox => {
            checkbox.checked = select;
            const userId = checkbox.dataset.userId;
            const module = checkbox.dataset.module;
            this.updateUserModulePermission(userId, module, select);
            this.updateUserPermissionStatusInUI(userId, module);
        });
        
        // Update module display to reflect changes
        this.updateModuleDisplay();
    }
    
    applyBulkUserPermissions() {
        const selectedCheckboxes = document.querySelectorAll('.permission-checkbox:checked');
        const unselectedCheckboxes = document.querySelectorAll('.permission-checkbox:not(:checked)');
        
        let changesCount = 0;
        
        console.log(`Applying bulk permissions: ${selectedCheckboxes.length} selected, ${unselectedCheckboxes.length} unselected`);
        
        selectedCheckboxes.forEach(checkbox => {
            const userId = checkbox.dataset.userId;
            const module = checkbox.dataset.module;
            const user = this.users.find(u => u.id === userId);
            if (user && (!user.permissions || user.permissions[module] !== false)) {
                this.updateUserModulePermission(userId, module, true); // true = deny access
                this.updateUserPermissionStatusInUI(userId, module);
                changesCount++;
            }
        });
        
        unselectedCheckboxes.forEach(checkbox => {
            const userId = checkbox.dataset.userId;
            const module = checkbox.dataset.module;
            const user = this.users.find(u => u.id === userId);
            if (user && user.permissions && user.permissions[module] === false) {
                this.updateUserModulePermission(userId, module, false); // false = allow access
                this.updateUserPermissionStatusInUI(userId, module);
                changesCount++;
            }
        });
        
        if (changesCount > 0) {
            alert(`${changesCount} Benutzerberechtigungen wurden aktualisiert.`);
            this.updateModuleDisplay();
        } else {
            alert('Keine √Ñnderungen vorgenommen.');
        }
    }
    
    saveAllUserPermissions() {
        const currentUser = this.getCurrentUser();
        if (!currentUser || currentUser.role !== 'root-admin') {
            alert('Nur der System Administrator kann Benutzerberechtigungen verwalten.');
            return;
        }
        
        this.saveUsersToStorage();
        alert('Alle Benutzerberechtigungen wurden gespeichert!');
    }
    
    resetUserPermissions() {
        const currentUser = this.getCurrentUser();
        if (!currentUser || currentUser.role !== 'root-admin') {
            alert('Nur der System Administrator kann Benutzerberechtigungen verwalten.');
            return;
        }
        
        if (confirm('M√∂chten Sie alle benutzerdefinierten Modulberechtigungen zur√ºcksetzen? Benutzer haben dann nur noch Zugriff basierend auf ihren Rollen.')) {
            this.users.forEach(user => {
                if (user.permissions) {
                    delete user.permissions.gefahrstoffe;
                    if (Object.keys(user.permissions).length === 0) {
                        delete user.permissions;
                    }
                }
            });
            
            this.saveUsersToStorage();
            this.renderUserPermissionsList();
            this.updateModuleDisplay();
            
            alert('Alle Modulberechtigungen wurden zur√ºckgesetzt!');
        }
    }
    
    // Debug helper method
    debugUserPermissions() {
        console.log('=== USER PERMISSIONS DEBUG ===');
        const moduleSettings = this.loadModuleSettingsFromStorage();
        console.log('Module Settings:', moduleSettings);
        console.log('---');
        
        this.users.forEach(user => {
            console.log(`User: ${user.name} (${user.id})`);
            console.log(`Role: ${user.role}`);
            console.log(`Custom Permissions:`, user.permissions || 'None');
            console.log(`Gefahrstoffe Access (OLD):`, this.userHasAccessToSection(user, 'gefahrstoffe', this.roleDefinitions[user.role]?.allowedSections || []));
            console.log(`Gefahrstoffe Access (NEW):`, this.userHasGefahrstoffeAccess(user, moduleSettings));
            console.log('---');
        });
        console.log('=== END DEBUG ===');
    }
    
    // Test user permissions for current user
    testCurrentUserPermissions() {
        const currentUser = this.getCurrentUser();
        const moduleSettings = this.loadModuleSettingsFromStorage();
        
        console.log('=== CURRENT USER TEST ===');
        console.log(`Current User: ${currentUser.name} (${currentUser.role})`);
        console.log(`Module Settings:`, moduleSettings);
        console.log(`User Permissions:`, currentUser.permissions);
        console.log(`Has Gefahrstoffe Access:`, this.userHasGefahrstoffeAccess(currentUser, moduleSettings));
        
        // Test menu visibility
        const gefahrstoffeMenuItem = document.querySelector('[data-section="gefahrstoffe"]');
        console.log(`Gefahrstoffe Menu Visible:`, gefahrstoffeMenuItem && !gefahrstoffeMenuItem.classList.contains('hidden'));
        console.log('=== END TEST ===');
    }

    // Load custom labels on startup
    loadCustomLabels() {
        // Load custom dashboard name
        const savedDashboardName = localStorage.getItem('qhse_dashboard_name');
        if (savedDashboardName) {
            const dashboardMenuItem = document.querySelector('[data-section="dashboard"] span');
            if (dashboardMenuItem) {
                dashboardMenuItem.textContent = savedDashboardName;
            }
        }
    }

    // Areas Management
    loadAreasFromStorage() {
        const stored = localStorage.getItem('qhse_areas');
        return stored ? JSON.parse(stored) : [];
    }

    saveAreasToStorage() {
        localStorage.setItem('qhse_areas', JSON.stringify(this.areas));
    }

    initializeDefaultAreas() {
        if (this.areas.length === 0) {
            const defaultAreas = [
                {
                    id: 'arbeitsschutz',
                    name: 'Arbeitsschutz',
                    icon: 'fas fa-hard-hat',
                    allowedRoles: ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'mitarbeiter', 'admin', 'root-admin'],
                    isDefault: true
                },
                {
                    id: 'qualitaet',
                    name: 'Qualit√§t',
                    icon: 'fas fa-medal',
                    allowedRoles: ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'admin', 'root-admin'],
                    isDefault: true
                },
                {
                    id: 'umwelt',
                    name: 'Umwelt',
                    icon: 'fas fa-leaf',
                    allowedRoles: ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'admin', 'root-admin'],
                    isDefault: true
                },
                {
                    id: 'datenschutz',
                    name: 'Datenschutz',
                    icon: 'fas fa-shield-alt',
                    allowedRoles: ['geschaeftsfuehrung', 'qhse', 'admin', 'root-admin'],
                    isDefault: true
                },
                {
                    id: 'gesundheit',
                    name: 'Gesundheit',
                    icon: 'fas fa-heartbeat',
                    allowedRoles: ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'mitarbeiter', 'admin', 'root-admin'],
                    isDefault: true
                }
            ];
            this.areas = defaultAreas;
            this.saveAreasToStorage();
        }
    }

    setupAreaManagement() {
        const addAreaBtn = document.getElementById('addAreaBtn');
        const saveAreaBtn = document.getElementById('saveAreaBtn');
        const cancelAreaBtn = document.getElementById('cancelAreaBtn');
        const closeAreaModal = document.getElementById('closeAreaModal');
        
        if (addAreaBtn) {
            addAreaBtn.addEventListener('click', () => {
                this.openAreaEditor();
            });
        }
        
        if (saveAreaBtn) {
            saveAreaBtn.addEventListener('click', () => {
                this.saveArea();
            });
        }
        
        [cancelAreaBtn, closeAreaModal].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    document.getElementById('areaManagementModal').style.display = 'none';
                });
            }
        });
    }

    renderAreasList() {
        const areasList = document.getElementById('areasList');
        if (!areasList) return;
        
        areasList.innerHTML = '';
        
        this.areas.forEach(area => {
            const areaElement = this.createAreaElement(area);
            areasList.appendChild(areaElement);
        });
    }

    createAreaElement(area) {
        const areaDiv = document.createElement('div');
        areaDiv.className = 'area-item';
        
        const roleChips = area.allowedRoles.map(role => 
            `<span class="role-chip">${this.roleDefinitions[role]?.name || role}</span>`
        ).join('');
        
        areaDiv.innerHTML = `
            <div class="area-icon">
                <i class="${area.icon}"></i>
            </div>
            <div class="area-info">
                <div class="area-name">${area.name}</div>
                <div class="area-roles">${roleChips}</div>
            </div>
            <div class="area-item-actions">
                <button class="edit-area-btn" onclick="window.qhseDashboard.editArea('${area.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
                ${!area.isDefault ? `
                    <button class="delete-area-btn" onclick="window.qhseDashboard.deleteArea('${area.id}')">
                        <i class="fas fa-trash"></i> L√∂schen
                    </button>
                ` : `
                    <button class="delete-area-btn" disabled title="Standard-Bereich kann nicht gel√∂scht werden">
                        <i class="fas fa-shield-alt"></i> Gesch√ºtzt
                    </button>
                `}
            </div>
        `;
        
        return areaDiv;
    }

    openAreaEditor(areaId = null) {
        const modal = document.getElementById('areaManagementModal');
        const titleElement = document.getElementById('areaModalTitle');
        
        if (areaId) {
            const area = this.areas.find(a => a.id === areaId);
            titleElement.textContent = 'Bereich bearbeiten';
            document.getElementById('newAreaName').value = area.name;
            document.getElementById('newAreaIcon').value = area.icon;
            
            // Set checkboxes
            const checkboxes = document.querySelectorAll('input[name="areaRoles"]');
            checkboxes.forEach(cb => {
                cb.checked = area.allowedRoles.includes(cb.value);
            });
            
            document.getElementById('editAreaId').value = area.id;
        } else {
            titleElement.textContent = 'Neuen Bereich hinzuf√ºgen';
            document.getElementById('areaForm').reset();
            document.getElementById('editAreaId').value = '';
        }
        
        modal.style.display = 'block';
    }

    saveArea() {
        const form = document.getElementById('areaForm');
        const formData = new FormData(form);
        const areaId = document.getElementById('editAreaId').value;
        
        const selectedRoles = Array.from(document.querySelectorAll('input[name="areaRoles"]:checked'))
            .map(cb => cb.value);
        
        const areaData = {
            name: formData.get('areaName'),
            icon: formData.get('areaIcon'),
            allowedRoles: selectedRoles
        };
        
        if (areaId) {
            const areaIndex = this.areas.findIndex(a => a.id === areaId);
            if (areaIndex !== -1) {
                this.areas[areaIndex] = { ...this.areas[areaIndex], ...areaData };
            }
        } else {
            const newArea = {
                id: 'area_' + Date.now(),
                ...areaData,
                isDefault: false
            };
            this.areas.push(newArea);
        }
        
        this.saveAreasToStorage();
        this.renderAreasList();
        this.renderDynamicAreas();
        this.updateMenuVisibility();
        this.populateDocumentCategories();
        document.getElementById('areaManagementModal').style.display = 'none';
        
        alert(areaId ? 'Bereich erfolgreich aktualisiert!' : 'Bereich erfolgreich hinzugef√ºgt!');
    }

    editArea(areaId) {
        this.openAreaEditor(areaId);
    }

    deleteArea(areaId) {
        const area = this.areas.find(a => a.id === areaId);
        if (!area || area.isDefault) {
            alert('Dieser Bereich kann nicht gel√∂scht werden.');
            return;
        }
        
        if (confirm(`M√∂chten Sie den Bereich "${area.name}" wirklich l√∂schen?`)) {
            this.areas = this.areas.filter(a => a.id !== areaId);
            this.saveAreasToStorage();
            this.renderAreasList();
            this.renderDynamicAreas();
            this.updateMenuVisibility();
            this.populateDocumentCategories();
            alert('Bereich erfolgreich gel√∂scht!');
        }
    }

    renderDynamicAreas() {
        const menuItems = document.querySelector('.menu-items');
        
        // Remove existing dynamic areas
        const existingDynamicAreas = menuItems.querySelectorAll('.dynamic-area');
        existingDynamicAreas.forEach(item => item.remove());
        
        // Add current dynamic areas after dashboard
        const dashboardItem = menuItems.querySelector('[data-section="dashboard"]');
        this.areas.forEach(area => {
            const menuItem = document.createElement('li');
            menuItem.className = 'menu-item dynamic-area';
            menuItem.setAttribute('data-section', area.id);
            menuItem.innerHTML = `
                <i class="${area.icon}"></i>
                <span>${area.name}</span>
            `;
            
            // Add event listener for navigation
            menuItem.addEventListener('click', () => {
                this.handleAreaNavigation(area.id);
            });
            
            dashboardItem.parentNode.insertBefore(menuItem, dashboardItem.nextSibling);
        });
    }

    // Departments Management
    loadDepartmentsFromStorage() {
        const stored = localStorage.getItem('qhse_departments');
        return stored ? JSON.parse(stored) : [];
    }

    saveDepartmentsToStorage() {
        localStorage.setItem('qhse_departments', JSON.stringify(this.departments));
    }

    initializeDefaultDepartments() {
        if (this.departments.length === 0) {
            const defaultDepartments = [
                {
                    id: 'geschaeftsfuehrung',
                    name: 'Gesch√§ftsf√ºhrung',
                    code: 'GF',
                    description: 'Gesch√§ftsf√ºhrung und strategische Leitung',
                    type: 'management',
                    hierarchyLevel: 1
                },
                {
                    id: 'betriebsleitung',
                    name: 'Betriebsleitung',
                    code: 'BL',
                    description: 'Operative Leitung der Produktionsbereiche',
                    type: 'management',
                    hierarchyLevel: 2
                },
                {
                    id: 'qhse',
                    name: 'QHSE Management',
                    code: 'QHSE',
                    description: 'Qualit√§t, Gesundheit, Sicherheit, Umwelt',
                    type: 'quality',
                    hierarchyLevel: 2,
                    isStaffPosition: true
                },
                {
                    id: 'produktion',
                    name: 'Produktion',
                    code: 'PROD',
                    description: 'Kunststoffproduktion und Fertigung',
                    type: 'production',
                    hierarchyLevel: 3
                },
                {
                    id: 'vertrieb',
                    name: 'Vertrieb',
                    code: 'VERT',
                    description: 'Verkauf und Kundenbetreuung',
                    type: 'administration',
                    hierarchyLevel: 3
                },
                {
                    id: 'personal',
                    name: 'Personalabteilung',
                    code: 'HR',
                    description: 'Personalwesen und -entwicklung',
                    type: 'administration',
                    hierarchyLevel: 3
                },
                {
                    id: 'labor',
                    name: 'Labor',
                    code: 'LAB',
                    description: 'Qualit√§tspr√ºfung und Materialanalyse',
                    type: 'quality',
                    hierarchyLevel: 3
                },
                {
                    id: 'administration',
                    name: 'Administration',
                    code: 'ADM',
                    description: 'IT und allgemeine Verwaltung',
                    type: 'administration',
                    hierarchyLevel: 3
                },
                {
                    id: 'facility',
                    name: 'Facility Management',
                    code: 'FM',
                    description: 'Geb√§ude- und Anlagenbetreuung',
                    type: 'support',
                    hierarchyLevel: 4
                },
                {
                    id: 'instandhaltung',
                    name: 'Instandhaltung',
                    code: 'IH',
                    description: 'Wartung und Instandhaltung von Maschinen und Anlagen',
                    type: 'technical',
                    hierarchyLevel: 3
                }
            ];
            this.departments = defaultDepartments;
            this.saveDepartmentsToStorage();
        }
    }

    initializeDefaultAuditExchanges() {
        // Nur initialisieren wenn noch keine Audit-Exchanges existieren
        if (this.auditExchanges.length === 0) {
            const defaultExchanges = [
                {
                    id: 'sample-1',
                    title: 'ISO 9001 Internes Audit - Qualit√§tsmanagement',
                    standard: 'ISO 9001',
                    type: 'Internes Audit',
                    location: 'Hamburg',
                    description: 'Erfahrenes Audit-Team bietet professionelle Durchf√ºhrung von internen ISO 9001 Audits. Schwerpunkt auf Prozessoptimierung und Compliance-Pr√ºfung.',
                    offeredBy: 'qhse-1',
                    offeredByName: 'Max Mustermann',
                    createdAt: new Date('2024-01-15').toISOString(),
                    status: 'available'
                },
                {
                    id: 'sample-2',
                    title: 'ISO 14001 Umweltmanagement Audit',
                    standard: 'ISO 14001',
                    type: 'Externes Audit',
                    location: 'Berlin',
                    description: 'Spezialisiert auf Umweltmanagementsysteme mit Fokus auf Nachhaltigkeitsbewertung und Umweltaspekte-Analyse.',
                    offeredBy: 'admin-1',
                    offeredByName: 'Sarah Schmidt',
                    createdAt: new Date('2024-01-20').toISOString(),
                    status: 'available'
                },
                {
                    id: 'sample-3',
                    title: 'ISO 45001 Arbeitsschutzmanagement',
                    standard: 'ISO 45001',
                    type: 'Zertifizierungsaudit',
                    location: 'M√ºnchen',
                    description: 'Comprehensive Arbeitsschutzaudit mit Expertise in Gef√§hrdungsbeurteilung und Sicherheitskultur-Entwicklung.',
                    offeredBy: 'qhse-2',
                    offeredByName: 'Dr. Thomas Weber',
                    createdAt: new Date('2024-01-25').toISOString(),
                    status: 'available'
                }
            ];
            
            this.auditExchanges = defaultExchanges;
            localStorage.setItem('qhse_audit_exchanges', JSON.stringify(this.auditExchanges));
        }
    }

    setupDepartmentManagement() {
        const addDepartmentBtn = document.getElementById('addDepartmentBtn');
        const saveDepartmentBtn = document.getElementById('saveDepartmentBtn');
        const cancelDepartmentBtn = document.getElementById('cancelDepartmentBtn');
        const closeDepartmentModal = document.getElementById('closeDepartmentModal');
        
        if (addDepartmentBtn) {
            addDepartmentBtn.addEventListener('click', () => {
                this.openDepartmentEditor();
            });
        }
        
        if (saveDepartmentBtn) {
            saveDepartmentBtn.addEventListener('click', () => {
                this.saveDepartment();
            });
        }
        
        [cancelDepartmentBtn, closeDepartmentModal].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    document.getElementById('departmentManagementModal').style.display = 'none';
                });
            }
        });
    }

    renderDepartmentsList() {
        const departmentsList = document.getElementById('departmentsList');
        if (!departmentsList) return;
        
        departmentsList.innerHTML = '';
        
        this.departments.forEach(department => {
            const departmentElement = this.createDepartmentElement(department);
            departmentsList.appendChild(departmentElement);
        });
    }

    createDepartmentElement(department) {
        const departmentDiv = document.createElement('div');
        departmentDiv.className = 'department-item';
        
        const typeNames = {
            production: 'Produktion',
            administration: 'Verwaltung',
            support: 'Support/Service',
            management: 'Management',
            quality: 'Qualit√§t/QHSE'
        };
        
        departmentDiv.innerHTML = `
            <div class="department-icon">
                <i class="fas fa-building"></i>
            </div>
            <div class="department-info">
                <div class="department-name">${department.name} (${department.code})</div>
                <div class="department-details">
                    <span class="department-chip">${typeNames[department.type]}</span>
                    <span class="department-chip">Level ${department.hierarchyLevel}</span>
                    ${department.isStaffPosition ? '<span class="department-chip">Stabsstelle</span>' : ''}
                </div>
                <div class="department-description">${department.description}</div>
            </div>
            <div class="department-item-actions">
                <button class="edit-department-btn" onclick="window.qhseDashboard.editDepartment('${department.id}')">
                    <i class="fas fa-edit"></i> Bearbeiten
                </button>
                <button class="delete-department-btn" onclick="window.qhseDashboard.deleteDepartment('${department.id}')">
                    <i class="fas fa-trash"></i> L√∂schen
                </button>
            </div>
        `;
        
        return departmentDiv;
    }

    openDepartmentEditor(departmentId = null) {
        const modal = document.getElementById('departmentManagementModal');
        const titleElement = document.getElementById('departmentModalTitle');
        
        if (departmentId) {
            const department = this.departments.find(d => d.id === departmentId);
            titleElement.textContent = 'Abteilung bearbeiten';
            document.getElementById('newDepartmentName').value = department.name;
            document.getElementById('newDepartmentCode').value = department.code;
            document.getElementById('newDepartmentDescription').value = department.description;
            document.getElementById('newDepartmentType').value = department.type;
            document.getElementById('editDepartmentId').value = department.id;
        } else {
            titleElement.textContent = 'Neue Abteilung hinzuf√ºgen';
            document.getElementById('departmentForm').reset();
            document.getElementById('editDepartmentId').value = '';
        }
        
        modal.style.display = 'block';
    }

    saveDepartment() {
        const form = document.getElementById('departmentForm');
        const formData = new FormData(form);
        const departmentId = document.getElementById('editDepartmentId').value;
        
        const departmentData = {
            name: formData.get('departmentName'),
            code: formData.get('departmentCode'),
            description: formData.get('departmentDescription'),
            type: formData.get('departmentType')
        };
        
        if (departmentId) {
            const departmentIndex = this.departments.findIndex(d => d.id === departmentId);
            if (departmentIndex !== -1) {
                this.departments[departmentIndex] = { ...this.departments[departmentIndex], ...departmentData };
            }
        } else {
            const newDepartment = {
                id: 'dept_' + Date.now(),
                ...departmentData,
                hierarchyLevel: 3 // Default level for new departments
            };
            this.departments.push(newDepartment);
        }
        
        this.saveDepartmentsToStorage();
        this.renderDepartmentsList();
        this.populateDepartmentDropdowns();
        document.getElementById('departmentManagementModal').style.display = 'none';
        
        alert(departmentId ? 'Abteilung erfolgreich aktualisiert!' : 'Abteilung erfolgreich hinzugef√ºgt!');
    }

    editDepartment(departmentId) {
        this.openDepartmentEditor(departmentId);
    }

    deleteDepartment(departmentId) {
        const department = this.departments.find(d => d.id === departmentId);
        if (!department) return;
        
        if (confirm(`M√∂chten Sie die Abteilung "${department.name}" wirklich l√∂schen?`)) {
            this.departments = this.departments.filter(d => d.id !== departmentId);
            this.saveDepartmentsToStorage();
            this.renderDepartmentsList();
            this.populateDepartmentDropdowns();
            alert('Abteilung erfolgreich gel√∂scht!');
        }
    }

    populateDepartmentDropdowns() {
        const departmentSelect = document.getElementById('newUserDepartment');
        if (!departmentSelect) return;
        
        departmentSelect.innerHTML = '<option value="">Abteilung w√§hlen</option>';
        
        this.departments.forEach(department => {
            const option = document.createElement('option');
            option.value = department.id;
            option.textContent = `${department.name} (${department.code})`;
            departmentSelect.appendChild(option);
        });
    }

    populateDocumentCategories() {
        const categorySelect = document.getElementById('documentCategory');
        if (!categorySelect) return;
        
        categorySelect.innerHTML = '<option value="">Kategorie w√§hlen</option>';
        
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;
        
        // Add only areas that the current user has access to
        this.areas.filter(area => 
            area.allowedRoles && area.allowedRoles.includes(currentUser.role)
        ).forEach(area => {
            const option = document.createElement('option');
            option.value = area.id;
            option.textContent = area.name;
            categorySelect.appendChild(option);
        });
    }

    handleAreaNavigation(areaId) {
        const area = this.areas.find(a => a.id === areaId);
        if (!area) return;
        
        // Check if user has access to this area
        const currentUser = this.getCurrentUser();
        if (!currentUser || !area.allowedRoles.includes(currentUser.role)) {
            this.showAccessDenied();
            return;
        }
        
        // Create or show area section
        let areaSection = document.getElementById(areaId + '-section');
        if (!areaSection) {
            areaSection = document.createElement('section');
            areaSection.id = areaId + '-section';
            areaSection.className = 'content-section';
            areaSection.innerHTML = `
                <div class="section-content">
                    <h2>${area.name}</h2>
                    <p>Dokumente und Informationen zum Bereich ${area.name}</p>
                </div>
            `;
            document.querySelector('.content-body').appendChild(areaSection);
        }
        
        // Handle section switching (same as existing navigation)
        const sections = document.querySelectorAll('.content-section');
        const menuItems = document.querySelectorAll('.menu-item');
        
        sections.forEach(section => section.classList.remove('active'));
        menuItems.forEach(item => item.classList.remove('active'));
        
        areaSection.classList.add('active');
        document.querySelector(`[data-section="${areaId}"]`).classList.add('active');
        
        document.getElementById('pageTitle').textContent = area.name;
        this.currentSection = areaId;
    }

    // Time Tracking Management
    loadTimeEntriesFromStorage() {
        const stored = localStorage.getItem('qhse_time_entries');
        return stored ? JSON.parse(stored) : [];
    }

    saveTimeEntriesToStorage() {
        localStorage.setItem('qhse_time_entries', JSON.stringify(this.timeEntries));
    }

    setupTimeTracking() {
        this.setupTimeForm();
        this.setupTimeModal();
        this.setupMonthNavigation();
        this.initializeTimeView();
    }

    setupTimeForm() {
        const timeForm = document.getElementById('timeTrackingForm');
        const clearFormBtn = document.getElementById('clearFormBtn');
        const startTimeInput = document.getElementById('startTime');
        const endTimeInput = document.getElementById('endTime');
        const breakTimeInput = document.getElementById('breakTime');
        const workHoursInput = document.getElementById('workHours');
        const workDateInput = document.getElementById('workDate');

        if (!timeForm) return;

        // Set default date to today
        if (workDateInput) {
            workDateInput.value = new Date().toISOString().split('T')[0];
        }

        // Auto-calculate work hours
        const calculateWorkHours = () => {
            if (startTimeInput.value && endTimeInput.value) {
                const start = new Date(`1970-01-01T${startTimeInput.value}`);
                const end = new Date(`1970-01-01T${endTimeInput.value}`);
                const breakMinutes = parseInt(breakTimeInput.value) || 0;
                
                const diffMs = end - start;
                const diffMinutes = Math.floor(diffMs / 60000) - breakMinutes;
                
                if (diffMinutes > 0) {
                    const hours = Math.floor(diffMinutes / 60);
                    const minutes = diffMinutes % 60;
                    workHoursInput.value = `${hours}:${minutes.toString().padStart(2, '0')} h`;
                } else {
                    workHoursInput.value = '0:00 h';
                }
            }
        };

        startTimeInput.addEventListener('change', calculateWorkHours);
        endTimeInput.addEventListener('change', calculateWorkHours);
        breakTimeInput.addEventListener('input', calculateWorkHours);

        // Form submission
        timeForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveTimeEntry();
        });

        // Clear form
        if (clearFormBtn) {
            clearFormBtn.addEventListener('click', () => {
                timeForm.reset();
                workDateInput.value = new Date().toISOString().split('T')[0];
                workHoursInput.value = '';
            });
        }
    }

    saveTimeEntry() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;

        const workDate = document.getElementById('workDate').value;
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;
        const breakTime = parseInt(document.getElementById('breakTime').value) || 0;
        const workDescription = document.getElementById('workDescription').value;

        if (!workDate || !startTime || !endTime) {
            alert('Bitte f√ºllen Sie alle Pflichtfelder aus.');
            return;
        }

        // Check if entry for this date already exists
        const existingEntry = this.timeEntries.find(entry => 
            entry.userId === currentUser.id && 
            entry.date === workDate
        );

        if (existingEntry) {
            if (!confirm('F√ºr dieses Datum existiert bereits ein Eintrag. M√∂chten Sie ihn √ºberschreiben?')) {
                return;
            }
            // Remove existing entry
            this.timeEntries = this.timeEntries.filter(entry => 
                !(entry.userId === currentUser.id && entry.date === workDate)
            );
        }

        const start = new Date(`1970-01-01T${startTime}`);
        const end = new Date(`1970-01-01T${endTime}`);
        const workMinutes = Math.floor((end - start) / 60000) - breakTime;

        const timeEntry = {
            id: Date.now().toString(),
            userId: currentUser.id,
            userName: currentUser.displayName,
            date: workDate,
            startTime: startTime,
            endTime: endTime,
            breakTime: breakTime,
            workMinutes: workMinutes,
            description: workDescription,
            createdAt: new Date().toISOString(),
            isEditable: true
        };

        this.timeEntries.push(timeEntry);
        this.saveTimeEntriesToStorage();
        this.refreshTimeView();
        
        // Clear form
        document.getElementById('timeTrackingForm').reset();
        document.getElementById('workDate').value = new Date().toISOString().split('T')[0];
        document.getElementById('workHours').value = '';

        alert('Zeiteintrag erfolgreich gespeichert!');
    }

    setupTimeModal() {
        const modal = document.getElementById('timeEntryModal');
        const closeBtn = document.getElementById('closeTimeEntryModal');
        const cancelBtn = document.getElementById('cancelTimeEntryBtn');
        const saveBtn = document.getElementById('saveTimeEntryBtn');
        const deleteBtn = document.getElementById('deleteTimeEntryBtn');

        if (!modal) return;

        [closeBtn, cancelBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => {
                    modal.style.display = 'none';
                });
            }
        });

        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.saveEditedTimeEntry();
            });
        }

        if (deleteBtn) {
            deleteBtn.addEventListener('click', () => {
                this.deleteTimeEntry();
            });
        }

        // Auto-calculate work hours in modal
        const editStartTime = document.getElementById('editStartTime');
        const editEndTime = document.getElementById('editEndTime');
        const editBreakTime = document.getElementById('editBreakTime');
        const editWorkHours = document.getElementById('editWorkHours');

        const calculateEditWorkHours = () => {
            if (editStartTime.value && editEndTime.value) {
                const start = new Date(`1970-01-01T${editStartTime.value}`);
                const end = new Date(`1970-01-01T${editEndTime.value}`);
                const breakMinutes = parseInt(editBreakTime.value) || 0;
                
                const diffMs = end - start;
                const diffMinutes = Math.floor(diffMs / 60000) - breakMinutes;
                
                if (diffMinutes > 0) {
                    const hours = Math.floor(diffMinutes / 60);
                    const minutes = diffMinutes % 60;
                    editWorkHours.value = `${hours}:${minutes.toString().padStart(2, '0')} h`;
                } else {
                    editWorkHours.value = '0:00 h';
                }
            }
        };

        if (editStartTime) editStartTime.addEventListener('change', calculateEditWorkHours);
        if (editEndTime) editEndTime.addEventListener('change', calculateEditWorkHours);
        if (editBreakTime) editBreakTime.addEventListener('input', calculateEditWorkHours);
    }

    setupMonthNavigation() {
        const prevBtn = document.getElementById('prevMonthBtn');
        const nextBtn = document.getElementById('nextMonthBtn');

        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                this.currentMonth--;
                if (this.currentMonth < 0) {
                    this.currentMonth = 11;
                    this.currentYear--;
                }
                this.updateMonthDisplay();
                this.refreshTimeView();
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                this.currentMonth++;
                if (this.currentMonth > 11) {
                    this.currentMonth = 0;
                    this.currentYear++;
                }
                this.updateMonthDisplay();
                this.refreshTimeView();
            });
        }
    }

    initializeTimeView() {
        this.updateMonthDisplay();
        this.refreshTimeView();
        this.setupEvaluationControls();
    }

    updateMonthDisplay() {
        const monthNames = [
            'Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni',
            'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'
        ];
        
        const currentMonthElement = document.getElementById('currentMonth');
        if (currentMonthElement) {
            currentMonthElement.textContent = `${monthNames[this.currentMonth]} ${this.currentYear}`;
        }
    }

    refreshTimeView() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;

        // Get entries for current user and month
        const userEntries = this.timeEntries.filter(entry => 
            entry.userId === currentUser.id &&
            new Date(entry.date).getMonth() === this.currentMonth &&
            new Date(entry.date).getFullYear() === this.currentYear
        );

        this.updateMonthlyStats(userEntries);
        this.renderTimeEntries(userEntries);
    }

    updateMonthlyStats(entries) {
        const totalMinutes = entries.reduce((sum, entry) => sum + entry.workMinutes, 0);
        const totalHours = Math.floor(totalMinutes / 60);
        const remainingMinutes = totalMinutes % 60;
        
        const workingDays = entries.length;
        const averageMinutes = workingDays > 0 ? totalMinutes / workingDays : 0;
        const avgHours = Math.floor(averageMinutes / 60);
        const avgMins = Math.floor(averageMinutes % 60);

        // Assuming 8 hours per day as standard
        const expectedMinutes = workingDays * 8 * 60;
        const overtimeMinutes = totalMinutes - expectedMinutes;
        const overtimeHours = Math.floor(Math.abs(overtimeMinutes) / 60);
        const overtimeMins = Math.abs(overtimeMinutes) % 60;

        document.getElementById('monthlyHours').textContent = `${totalHours}:${remainingMinutes.toString().padStart(2, '0')}`;
        document.getElementById('workingDays').textContent = workingDays;
        document.getElementById('averageHours').textContent = `${avgHours}:${avgMins.toString().padStart(2, '0')}`;
        
        const overtimeSign = overtimeMinutes >= 0 ? '+' : '-';
        document.getElementById('overtime').textContent = `${overtimeSign}${overtimeHours}:${overtimeMins.toString().padStart(2, '0')}`;
    }

    renderTimeEntries(entries) {
        const container = document.getElementById('timeEntriesList');
        if (!container) return;

        if (entries.length === 0) {
            container.innerHTML = '<p class="no-entries">Keine Zeiteintr√§ge f√ºr diesen Monat.</p>';
            return;
        }

        // Sort by date
        entries.sort((a, b) => new Date(b.date) - new Date(a.date));

        const entriesHtml = entries.map(entry => {
            const date = new Date(entry.date);
            const dayName = date.toLocaleDateString('de-DE', { weekday: 'short' });
            const dateStr = date.toLocaleDateString('de-DE');
            const hours = Math.floor(entry.workMinutes / 60);
            const minutes = entry.workMinutes % 60;

            return `
                <div class="time-entry-item" onclick="window.qhseDashboard.editTimeEntry('${entry.id}')">
                    <div class="entry-date">
                        <div class="day-name">${dayName}</div>
                        <div class="date">${dateStr}</div>
                    </div>
                    <div class="entry-times">
                        <div class="time-range">${entry.startTime} - ${entry.endTime}</div>
                        <div class="work-time">${hours}:${minutes.toString().padStart(2, '0')} h</div>
                    </div>
                    <div class="entry-description">${entry.description || 'Keine Beschreibung'}</div>
                    <div class="entry-actions">
                        <i class="fas fa-edit"></i>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = entriesHtml;
    }

    editTimeEntry(entryId) {
        const entry = this.timeEntries.find(e => e.id === entryId);
        if (!entry) return;

        const currentUser = this.getCurrentUser();
        if (!currentUser || entry.userId !== currentUser.id) {
            alert('Sie k√∂nnen nur Ihre eigenen Zeiteintr√§ge bearbeiten.');
            return;
        }

        // Populate modal
        document.getElementById('editWorkDate').value = entry.date;
        document.getElementById('editStartTime').value = entry.startTime;
        document.getElementById('editEndTime').value = entry.endTime;
        document.getElementById('editBreakTime').value = entry.breakTime;
        document.getElementById('editWorkDescription').value = entry.description || '';
        document.getElementById('editTimeEntryId').value = entry.id;

        // Calculate work hours
        const hours = Math.floor(entry.workMinutes / 60);
        const minutes = entry.workMinutes % 60;
        document.getElementById('editWorkHours').value = `${hours}:${minutes.toString().padStart(2, '0')} h`;

        // Show modal
        document.getElementById('timeEntryModal').style.display = 'block';
    }

    saveEditedTimeEntry() {
        const entryId = document.getElementById('editTimeEntryId').value;
        const entry = this.timeEntries.find(e => e.id === entryId);
        if (!entry) return;

        const workDate = document.getElementById('editWorkDate').value;
        const startTime = document.getElementById('editStartTime').value;
        const endTime = document.getElementById('editEndTime').value;
        const breakTime = parseInt(document.getElementById('editBreakTime').value) || 0;
        const workDescription = document.getElementById('editWorkDescription').value;

        if (!workDate || !startTime || !endTime) {
            alert('Bitte f√ºllen Sie alle Pflichtfelder aus.');
            return;
        }

        const start = new Date(`1970-01-01T${startTime}`);
        const end = new Date(`1970-01-01T${endTime}`);
        const workMinutes = Math.floor((end - start) / 60000) - breakTime;

        // Update entry
        entry.date = workDate;
        entry.startTime = startTime;
        entry.endTime = endTime;
        entry.breakTime = breakTime;
        entry.workMinutes = workMinutes;
        entry.description = workDescription;

        this.saveTimeEntriesToStorage();
        this.refreshTimeView();
        document.getElementById('timeEntryModal').style.display = 'none';
        
        alert('Zeiteintrag erfolgreich aktualisiert!');
    }

    deleteTimeEntry() {
        const entryId = document.getElementById('editTimeEntryId').value;
        
        if (confirm('M√∂chten Sie diesen Zeiteintrag wirklich l√∂schen?')) {
            this.timeEntries = this.timeEntries.filter(e => e.id !== entryId);
            this.saveTimeEntriesToStorage();
            this.refreshTimeView();
            document.getElementById('timeEntryModal').style.display = 'none';
            
            alert('Zeiteintrag wurde gel√∂scht!');
        }
    }

    setupEvaluationControls() {
        if (!this.hasPermission('canViewAllTimeEntries')) return;

        // Populate employee dropdown
        const evalEmployeeSelect = document.getElementById('evalEmployee');
        if (evalEmployeeSelect) {
            evalEmployeeSelect.innerHTML = '<option value="">Alle Mitarbeiter</option>';
            this.users.filter(user => user.isActive).forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = user.displayName;
                evalEmployeeSelect.appendChild(option);
            });
        }

        // Populate department dropdown
        const evalDepartmentSelect = document.getElementById('evalDepartment');
        if (evalDepartmentSelect) {
            evalDepartmentSelect.innerHTML = '<option value="">Alle Abteilungen</option>';
            this.departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                evalDepartmentSelect.appendChild(option);
            });
        }

        // Set current month
        const evalMonthInput = document.getElementById('evalMonth');
        if (evalMonthInput) {
            const currentDate = new Date();
            const monthStr = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}`;
            evalMonthInput.value = monthStr;
        }

        // Setup generate report button
        const generateReportBtn = document.getElementById('generateReportBtn');
        if (generateReportBtn) {
            generateReportBtn.addEventListener('click', () => {
                this.generateTimeReport();
            });
        }
    }

    generateTimeReport() {
        const employeeId = document.getElementById('evalEmployee').value;
        const monthInput = document.getElementById('evalMonth').value;
        const departmentId = document.getElementById('evalDepartment').value;

        if (!monthInput) {
            alert('Bitte w√§hlen Sie einen Monat aus.');
            return;
        }

        const [year, month] = monthInput.split('-');
        const reportMonth = parseInt(month) - 1; // JavaScript months are 0-based
        const reportYear = parseInt(year);

        let filteredEntries = this.timeEntries.filter(entry => {
            const entryDate = new Date(entry.date);
            return entryDate.getMonth() === reportMonth && entryDate.getFullYear() === reportYear;
        });

        if (employeeId) {
            filteredEntries = filteredEntries.filter(entry => entry.userId === employeeId);
        }

        if (departmentId) {
            const departmentUsers = this.users.filter(user => user.department === departmentId);
            const departmentUserIds = departmentUsers.map(user => user.id);
            filteredEntries = filteredEntries.filter(entry => departmentUserIds.includes(entry.userId));
        }

        this.renderEvaluationResults(filteredEntries, reportMonth, reportYear);
    }

    renderEvaluationResults(entries, month, year) {
        const resultsContainer = document.getElementById('evaluationResults');
        if (!resultsContainer) return;

        if (entries.length === 0) {
            resultsContainer.innerHTML = '<p class="no-results">Keine Daten f√ºr den ausgew√§hlten Zeitraum gefunden.</p>';
            return;
        }

        // Group by user
        const userGroups = {};
        entries.forEach(entry => {
            if (!userGroups[entry.userId]) {
                userGroups[entry.userId] = {
                    userName: entry.userName,
                    entries: [],
                    totalMinutes: 0
                };
            }
            userGroups[entry.userId].entries.push(entry);
            userGroups[entry.userId].totalMinutes += entry.workMinutes;
        });

        const monthNames = [
            'Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni',
            'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'
        ];

        let resultsHtml = `
            <div class="report-header">
                <h3>Zeiterfassungsauswertung f√ºr ${monthNames[month]} ${year}</h3>
                <div class="report-summary">
                    <div class="summary-item">
                        <span class="label">Mitarbeiter:</span>
                        <span class="value">${Object.keys(userGroups).length}</span>
                    </div>
                    <div class="summary-item">
                        <span class="label">Gesamt-Eintr√§ge:</span>
                        <span class="value">${entries.length}</span>
                    </div>
                </div>
            </div>
            <div class="evaluation-table">
                <table>
                    <thead>
                        <tr>
                            <th>Mitarbeiter</th>
                            <th>Arbeitstage</th>
                            <th>Gesamtstunden</th>
                            <th>√ò Stunden/Tag</th>
                            <th>√úber-/Unterstunden</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        Object.values(userGroups).forEach(group => {
            const totalHours = Math.floor(group.totalMinutes / 60);
            const totalMins = group.totalMinutes % 60;
            const workingDays = group.entries.length;
            const avgMinutes = workingDays > 0 ? group.totalMinutes / workingDays : 0;
            const avgHours = Math.floor(avgMinutes / 60);
            const avgMins = Math.floor(avgMinutes % 60);
            
            const expectedMinutes = workingDays * 8 * 60; // 8 hours per day
            const overtimeMinutes = group.totalMinutes - expectedMinutes;
            const overtimeHours = Math.floor(Math.abs(overtimeMinutes) / 60);
            const overtimeMins = Math.abs(overtimeMinutes) % 60;
            const overtimeSign = overtimeMinutes >= 0 ? '+' : '-';

            resultsHtml += `
                <tr>
                    <td>${group.userName}</td>
                    <td>${workingDays}</td>
                    <td>${totalHours}:${totalMins.toString().padStart(2, '0')}</td>
                    <td>${avgHours}:${avgMins.toString().padStart(2, '0')}</td>
                    <td class="${overtimeMinutes >= 0 ? 'overtime-positive' : 'overtime-negative'}">
                        ${overtimeSign}${overtimeHours}:${overtimeMins.toString().padStart(2, '0')}
                    </td>
                </tr>
            `;
        });

        resultsHtml += `
                    </tbody>
                </table>
            </div>
        `;

        resultsContainer.innerHTML = resultsHtml;
    }

    hasPermission(permission) {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return false;
        
        const roleDefinition = this.roleDefinitions[currentUser.role];
        return roleDefinition && roleDefinition[permission] === true;
    }

    // Maintenance Management Methods
    loadMachinesFromStorage() {
        const stored = localStorage.getItem('qhse_machines');
        return stored ? JSON.parse(stored) : [];
    }

    saveMachinesToStorage() {
        localStorage.setItem('qhse_machines', JSON.stringify(this.machines));
    }

    loadMaintenanceTasksFromStorage() {
        const stored = localStorage.getItem('qhse_maintenance_tasks');
        return stored ? JSON.parse(stored) : [];
    }

    saveMaintenanceTasksToStorage() {
        localStorage.setItem('qhse_maintenance_tasks', JSON.stringify(this.maintenanceTasks));
    }

    loadIssuesFromStorage() {
        const stored = localStorage.getItem('qhse_issues');
        return stored ? JSON.parse(stored) : [];
    }

    saveIssuesToStorage() {
        localStorage.setItem('qhse_issues', JSON.stringify(this.issues));
    }

    // Safety Corner Management
    loadSafetyAnnouncementsFromStorage() {
        const stored = localStorage.getItem('qhse_safety_announcements');
        return stored ? JSON.parse(stored) : [];
    }

    saveSafetyAnnouncementsToStorage() {
        localStorage.setItem('qhse_safety_announcements', JSON.stringify(this.safetyAnnouncements));
    }

    loadSafetyPdfsFromStorage() {
        const stored = localStorage.getItem('qhse_safety_pdfs');
        const pdfs = stored ? JSON.parse(stored) : [];
        console.log('Loaded safety PDFs from storage:', pdfs.length, 'PDFs');
        return pdfs;
    }

    saveSafetyPdfsToStorage() {
        localStorage.setItem('qhse_safety_pdfs', JSON.stringify(this.safetyPdfs));
    }

    setupSafetyCorner() {
        console.log('Setting up Safety Corner...');
        this.setupSafetyAnnouncementManagement();
        this.setupSafetyPdfManagement();
        this.setupPdfViewer();
        
        // Initial render
        console.log('Initial safety corner render...');
        this.renderSafetyAnnouncements();
        this.renderSafetyPdfs();
        
        console.log('Safety Corner setup complete');
    }

    setupSafetyAnnouncementManagement() {
        // Settings page management
        const saveAnnouncementBtn = document.getElementById('saveSafetyAnnouncementBtn');
        const clearFormBtn = document.getElementById('clearAnnouncementFormBtn');
        const selectAllBtn = document.getElementById('selectAllUsersBtn');
        const deselectAllBtn = document.getElementById('deselectAllUsersBtn');

        if (saveAnnouncementBtn) {
            saveAnnouncementBtn.addEventListener('click', () => this.saveSafetyAnnouncement());
        }
        
        if (clearFormBtn) {
            clearFormBtn.addEventListener('click', () => this.clearAnnouncementForm());
        }

        if (selectAllBtn) {
            selectAllBtn.addEventListener('click', () => this.selectAllUsers());
        }

        if (deselectAllBtn) {
            deselectAllBtn.addEventListener('click', () => this.deselectAllUsers());
        }

        const debugBtn = document.getElementById('debugSafetySystemBtn');
        if (debugBtn) {
            debugBtn.addEventListener('click', () => this.debugSafetySystem());
        }

        const testPdfBtn = document.getElementById('addTestPdfBtn');
        if (testPdfBtn) {
            testPdfBtn.addEventListener('click', () => this.addTestPdf());
        }

        // Ensure users are loaded before populating the grid
        setTimeout(() => {
            this.populateUserSelectionGrid();
            this.renderExistingAnnouncements();
        }, 200);
    }

    setupSafetyPdfManagement() {
        const uploadBtn = document.getElementById('uploadSafetyPdfBtn');
        const fileInput = document.getElementById('safetyPdfUpload');

        console.log('Setting up PDF management - Upload button:', !!uploadBtn, 'File input:', !!fileInput);

        if (uploadBtn) {
            uploadBtn.addEventListener('click', () => {
                console.log('PDF upload button clicked');
                if (fileInput) {
                    fileInput.click();
                } else {
                    console.error('File input not found!');
                }
            });
        } else {
            console.warn('Upload button not found - this is normal for non-admin users');
        }

        if (fileInput) {
            fileInput.addEventListener('change', (e) => {
                console.log('File input changed');
                this.handleSafetyPdfUpload(e);
            });
        } else {
            console.warn('File input not found - this is normal for non-admin users');
        }
    }

    setupPdfViewer() {
        const modal = document.getElementById('pdfViewerModal');
        const closeBtn = document.getElementById('closePdfViewer');
        const downloadBtn = document.getElementById('pdfDownloadBtn');
        const printBtn = document.getElementById('pdfPrintBtn');

        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closePdfViewer());
        }

        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) this.closePdfViewer();
            });
        }

        if (downloadBtn) {
            downloadBtn.addEventListener('click', () => this.downloadCurrentPdf());
        }

        if (printBtn) {
            printBtn.addEventListener('click', () => this.printCurrentPdf());
        }
    }

    populateUserSelectionGrid() {
        const container = document.getElementById('announcementUserSelection');
        if (!container) return;

        container.innerHTML = '';
        
        this.users.forEach(user => {
            const userDiv = document.createElement('div');
            userDiv.className = 'user-checkbox-item';
            userDiv.innerHTML = `
                <label>
                    <input type="checkbox" name="selectedUsers" value="${user.id}" checked>
                    <span class="user-label">${user.displayName} (${user.role})</span>
                </label>
            `;
            container.appendChild(userDiv);
        });
    }

    selectAllUsers() {
        const checkboxes = document.querySelectorAll('#announcementUserSelection input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = true);
    }

    deselectAllUsers() {
        const checkboxes = document.querySelectorAll('#announcementUserSelection input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = false);
    }

    renderExistingAnnouncements() {
        const container = document.getElementById('existingAnnouncementsList');
        if (!container) return;

        const activeAnnouncements = this.safetyAnnouncements.filter(a => a.active);

        if (activeAnnouncements.length === 0) {
            container.innerHTML = '<p class="no-announcements">Keine aktiven Mitteilungen vorhanden.</p>';
            return;
        }

        container.innerHTML = activeAnnouncements.map(announcement => {
            const author = this.users.find(u => u.id === announcement.createdBy);
            const createdDate = new Date(announcement.createdAt).toLocaleDateString('de-DE');
            const previewText = announcement.text.length > 100 ? 
                announcement.text.substring(0, 100) + '...' : announcement.text;

            return `
                <div class="announcement-item" data-announcement-id="${announcement.id}">
                    <div class="announcement-header">
                        <div class="announcement-meta">
                            <span>Erstellt von: ${author ? author.displayName : 'Unbekannt'}</span> ‚Ä¢ 
                            <span>${createdDate}</span>
                        </div>
                        <div class="announcement-actions">
                            <button class="btn-secondary btn-sm" onclick="window.qhseDashboard.editAnnouncement('${announcement.id}')">
                                <i class="fas fa-edit"></i> Bearbeiten
                            </button>
                            <button class="btn-danger btn-sm" onclick="window.qhseDashboard.deleteAnnouncement('${announcement.id}')">
                                <i class="fas fa-trash"></i> L√∂schen
                            </button>
                        </div>
                    </div>
                    <div class="announcement-visibility">
                        <i class="fas fa-users"></i>
                        <span class="user-count-badge">${announcement.visibleToUsers.length} Mitarbeiter</span>
                    </div>
                    <div class="announcement-text-preview" id="preview-${announcement.id}">
                        ${announcement.text.replace(/\n/g, '<br>')}
                    </div>
                    ${announcement.text.length > 100 ? 
                        `<button class="expand-btn" onclick="window.qhseDashboard.toggleAnnouncementPreview('${announcement.id}')">
                            Vollst√§ndig anzeigen
                        </button>` : ''
                    }
                </div>
            `;
        }).join('');
    }

    clearAnnouncementForm() {
        const textArea = document.getElementById('safetyAnnouncementText');
        if (textArea) textArea.value = '';
        
        // Reset all checkboxes to checked (default state)
        const checkboxes = document.querySelectorAll('#announcementUserSelection input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = true);
        
        // Reset editing state
        this.editingAnnouncementId = null;
        
        // Reset button text
        const saveBtn = document.getElementById('saveSafetyAnnouncementBtn');
        if (saveBtn) {
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Mitteilung hinzuf√ºgen';
        }
    }

    saveSafetyAnnouncement() {
        const textArea = document.getElementById('safetyAnnouncementText');
        const text = textArea ? textArea.value.trim() : '';
        
        if (!text) {
            alert('Bitte geben Sie eine Mitteilung ein.');
            return;
        }

        const selectedUsers = Array.from(document.querySelectorAll('#announcementUserSelection input[type="checkbox"]:checked'))
            .map(cb => cb.value);

        if (selectedUsers.length === 0) {
            alert('Bitte w√§hlen Sie mindestens einen Mitarbeiter aus.');
            return;
        }

        if (this.editingAnnouncementId) {
            // Update existing announcement
            this.safetyAnnouncements = this.safetyAnnouncements.map(a => 
                a.id === this.editingAnnouncementId ? {
                    ...a,
                    text: text,
                    visibleToUsers: selectedUsers,
                    updatedAt: new Date().toISOString(),
                    updatedBy: this.currentUserId
                } : a
            );
            
            this.editingAnnouncementId = null;
            
            // Reset button text
            const saveBtn = document.getElementById('saveSafetyAnnouncementBtn');
            if (saveBtn) {
                saveBtn.innerHTML = '<i class="fas fa-save"></i> Mitteilung hinzuf√ºgen';
            }
            
            alert('Mitteilung wurde erfolgreich aktualisiert.');
        } else {
            // Create new announcement
            const newAnnouncement = {
                id: Date.now().toString(),
                text: text,
                visibleToUsers: selectedUsers,
                createdBy: this.currentUserId,
                createdAt: new Date().toISOString(),
                active: true
            };

            this.safetyAnnouncements.push(newAnnouncement);
            alert('Mitteilung wurde erfolgreich hinzugef√ºgt.');
        }

        this.saveSafetyAnnouncementsToStorage();
        this.renderSafetyAnnouncements();
        this.renderExistingAnnouncements();
        
        // Clear form after successful save
        this.clearAnnouncementForm();
    }

    editAnnouncement(announcementId) {
        const announcement = this.safetyAnnouncements.find(a => a.id === announcementId);
        if (!announcement) {
            alert('Mitteilung nicht gefunden.');
            return;
        }

        const textArea = document.getElementById('safetyAnnouncementText');
        if (textArea) {
            textArea.value = announcement.text;
        }

        // Set checkboxes based on announcement visibility
        setTimeout(() => {
            const checkboxes = document.querySelectorAll('#announcementUserSelection input[type="checkbox"]');
            checkboxes.forEach(cb => {
                cb.checked = announcement.visibleToUsers.includes(cb.value);
            });
        }, 100);

        // Store editing ID for update instead of create
        this.editingAnnouncementId = announcementId;
        
        // Change button text to indicate editing mode
        const saveBtn = document.getElementById('saveSafetyAnnouncementBtn');
        if (saveBtn) {
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Mitteilung aktualisieren';
        }

        alert('Mitteilung wurde in das Formular geladen. Nehmen Sie Ihre √Ñnderungen vor und klicken Sie auf "Mitteilung aktualisieren".');
    }

    deleteAnnouncement(announcementId) {
        const announcement = this.safetyAnnouncements.find(a => a.id === announcementId);
        if (!announcement) {
            alert('Mitteilung nicht gefunden.');
            return;
        }

        if (!confirm(`M√∂chten Sie diese Mitteilung wirklich l√∂schen?\n\n"${announcement.text.substring(0, 100)}..."`)) {
            return;
        }

        // Mark as inactive instead of deleting
        this.safetyAnnouncements = this.safetyAnnouncements.map(a => 
            a.id === announcementId ? { ...a, active: false } : a
        );

        this.saveSafetyAnnouncementsToStorage();
        this.renderSafetyAnnouncements();
        this.renderExistingAnnouncements();
        
        alert('Mitteilung wurde erfolgreich gel√∂scht.');
    }

    toggleAnnouncementPreview(announcementId) {
        const preview = document.getElementById(`preview-${announcementId}`);
        const button = preview?.nextElementSibling;
        
        if (preview && button) {
            if (preview.classList.contains('expanded')) {
                preview.classList.remove('expanded');
                button.textContent = 'Vollst√§ndig anzeigen';
            } else {
                preview.classList.add('expanded');
                button.textContent = 'Weniger anzeigen';
            }
        }
    }

    renderSafetyAnnouncements() {
        const currentUser = this.getCurrentUser();
        const displayDiv = document.getElementById('safetyAnnouncementsDisplay');
        
        if (!displayDiv || !currentUser) return;

        const visibleAnnouncements = this.safetyAnnouncements.filter(a => {
            const isActive = a.active === true;
            const isVisibleToUser = a.visibleToUsers && a.visibleToUsers.includes(currentUser.id);
            
            return isActive && isVisibleToUser;
        });

        if (visibleAnnouncements.length > 0) {
            displayDiv.innerHTML = visibleAnnouncements.map(announcement => {
                const author = this.users.find(u => u.id === announcement.createdBy);
                const createdDate = new Date(announcement.createdAt).toLocaleDateString('de-DE');
                const updatedDate = announcement.updatedAt ? 
                    new Date(announcement.updatedAt).toLocaleDateString('de-DE') : null;
                
                return `
                    <div class="announcement-text">
                        ${announcement.text.replace(/\n/g, '<br>')}
                        <div class="announcement-meta" style="margin-top: 0.75rem; font-size: 0.875rem; color: #6b7280;">
                            <span>Von: ${author ? author.displayName : 'Unbekannt'}</span> ‚Ä¢ 
                            <span>Erstellt: ${createdDate}</span>
                            ${updatedDate ? ` ‚Ä¢ <span>Aktualisiert: ${updatedDate}</span>` : ''}
                        </div>
                    </div>
                `;
            }).join('');
        } else {
            displayDiv.innerHTML = '<p class="no-announcements">Derzeit keine wichtigen Mitteilungen vorhanden.</p>';
        }
    }

    handleSafetyPdfUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        if (file.type !== 'application/pdf') {
            alert('Bitte w√§hlen Sie nur PDF-Dateien aus.');
            return;
        }

        // Show loading indicator
        const uploadBtn = document.getElementById('uploadSafetyPdfBtn');
        const originalText = uploadBtn.innerHTML;
        uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Hochladen...';
        uploadBtn.disabled = true;

        const reader = new FileReader();
        reader.onload = (e) => {
            const pdfDoc = {
                id: Date.now().toString(),
                name: file.name,
                size: file.size,
                type: file.type,
                content: e.target.result,
                uploadedBy: this.currentUserId,
                uploadDate: new Date().toISOString()
            };

            this.safetyPdfs.push(pdfDoc);
            this.saveSafetyPdfsToStorage();
            this.renderSafetyPdfs();

            // Reset button
            uploadBtn.innerHTML = originalText;
            uploadBtn.disabled = false;

            alert(`PDF "${file.name}" wurde erfolgreich hochgeladen.`);
        };

        reader.onerror = () => {
            uploadBtn.innerHTML = originalText;
            uploadBtn.disabled = false;
            alert('Fehler beim Hochladen der PDF-Datei.');
        };

        reader.readAsDataURL(file);

        // Reset file input
        event.target.value = '';
    }

    renderSafetyPdfs() {
        const container = document.getElementById('safetyPdfList');
        if (!container) {
            console.log('PDF Container not found!');
            return;
        }

        console.log('Rendering PDFs:', this.safetyPdfs.length, 'PDFs found');

        if (this.safetyPdfs.length === 0) {
            container.innerHTML = '<p class="no-documents">Keine Sicherheitsdokumente vorhanden.</p>';
            return;
        }

        const currentUser = this.getCurrentUser();
        const isAdmin = currentUser && (currentUser.role === 'admin' || currentUser.role === 'root-admin');

        console.log('Current user for PDF rendering:', currentUser?.displayName, 'isAdmin:', isAdmin);

        const htmlContent = this.safetyPdfs.map(pdf => {
            const uploadDate = new Date(pdf.uploadDate).toLocaleDateString('de-DE');
            const fileSize = this.formatFileSize(pdf.size);
            const uploader = this.users.find(u => u.id === pdf.uploadedBy);
            
            return `
                <div class="safety-pdf-item" data-pdf-id="${pdf.id}">
                    <div class="pdf-icon">
                        <i class="fas fa-file-pdf"></i>
                    </div>
                    <div class="pdf-info">
                        <h4 class="pdf-title">${pdf.name}</h4>
                        <div class="pdf-meta">
                            <span><i class="fas fa-calendar"></i> ${uploadDate}</span>
                            <span><i class="fas fa-file-archive"></i> ${fileSize}</span>
                            <span><i class="fas fa-user"></i> ${uploader ? uploader.displayName : 'Unbekannt'}</span>
                        </div>
                    </div>
                    <div class="pdf-actions">
                        <button class="btn-primary btn-sm view-pdf-btn" onclick="window.qhseDashboard.viewSafetyPdf('${pdf.id}')" title="PDF anzeigen">
                            <i class="fas fa-eye"></i> Anzeigen
                        </button>
                        <button class="btn-secondary btn-sm download-pdf-btn" onclick="window.qhseDashboard.downloadSafetyPdf('${pdf.id}')" title="PDF herunterladen">
                            <i class="fas fa-download"></i> Download
                        </button>
                        ${isAdmin ? 
                            `<button class="btn-danger btn-sm delete-pdf-btn" onclick="window.qhseDashboard.deleteSafetyPdf('${pdf.id}')" title="PDF l√∂schen">
                                <i class="fas fa-trash"></i> L√∂schen
                            </button>` : ''
                        }
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = htmlContent;
        console.log('PDFs rendered successfully, HTML length:', htmlContent.length);
    }

    viewSafetyPdf(pdfId) {
        console.log('viewSafetyPdf called with ID:', pdfId);
        const pdf = this.safetyPdfs.find(p => p.id === pdfId);
        if (!pdf) {
            console.error('PDF not found with ID:', pdfId);
            alert('PDF nicht gefunden.');
            return;
        }

        console.log('Found PDF:', pdf.name);

        const modal = document.getElementById('pdfViewerModal');
        const title = document.getElementById('pdfViewerTitle');
        const fileName = document.getElementById('pdfFileName');
        const fileSize = document.getElementById('pdfFileSize');
        const iframe = document.getElementById('pdfFrame');

        console.log('Modal elements:', {
            modal: !!modal,
            title: !!title,
            fileName: !!fileName,
            fileSize: !!fileSize,
            iframe: !!iframe
        });

        if (title) title.textContent = pdf.name;
        if (fileName) fileName.textContent = pdf.name;
        if (fileSize) fileSize.textContent = this.formatFileSize(pdf.size);
        
        if (iframe) {
            console.log('Setting iframe src to:', pdf.content.substring(0, 50) + '...');
            
            // Try iframe first
            iframe.src = pdf.content;
            
            // Add load event listener to debug iframe loading
            iframe.onload = () => {
                console.log('PDF iframe loaded successfully');
            };
            
            iframe.onerror = (error) => {
                console.error('PDF iframe load error:', error);
                console.log('Iframe failed, trying alternative method...');
                
                // Alternative: Open in new window if iframe fails
                const newWindow = window.open();
                if (newWindow) {
                    newWindow.document.write(`
                        <html>
                            <head>
                                <title>${pdf.name}</title>
                                <style>
                                    body { margin: 0; padding: 0; }
                                    iframe { width: 100vw; height: 100vh; border: none; }
                                </style>
                            </head>
                            <body>
                                <iframe src="${pdf.content}"></iframe>
                            </body>
                        </html>
                    `);
                    newWindow.document.close();
                    
                    // Close the modal since we opened in new window
                    this.closePdfViewer();
                } else {
                    alert('PDF konnte nicht ge√∂ffnet werden. Bitte verwenden Sie den Download-Button.');
                }
            };
            
            // Fallback: If iframe doesn't load after 3 seconds, show alternative
            setTimeout(() => {
                if (iframe.src === pdf.content && !iframe.contentDocument?.body?.innerHTML) {
                    console.log('Iframe loading timeout, showing alternative options');
                    
                    // Replace iframe content with alternative display
                    const pdfContent = document.getElementById('pdfContent');
                    if (pdfContent) {
                        pdfContent.innerHTML = `
                            <div style="padding: 2rem; text-align: center;">
                                <h3>PDF-Vorschau nicht verf√ºgbar</h3>
                                <p>Die PDF-Datei "${pdf.name}" kann nicht im Browser angezeigt werden.</p>
                                <div style="margin-top: 1rem;">
                                    <button onclick="window.open('${pdf.content}')" class="btn-primary">
                                        <i class="fas fa-external-link-alt"></i> In neuem Fenster √∂ffnen
                                    </button>
                                    <button onclick="window.qhseDashboard.downloadSafetyPdf('${pdf.id}')" class="btn-secondary">
                                        <i class="fas fa-download"></i> Herunterladen
                                    </button>
                                </div>
                            </div>
                        `;
                    }
                }
            }, 3000);
        }

        this.currentPdf = pdf;
        
        if (modal) {
            console.log('Showing modal');
            modal.classList.add('active');
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        } else {
            console.error('Modal not found!');
            alert('PDF-Viewer konnte nicht ge√∂ffnet werden.');
        }
    }

    closePdfViewer() {
        console.log('Closing PDF viewer');
        const modal = document.getElementById('pdfViewerModal');
        const iframe = document.getElementById('pdfFrame');
        const pdfContent = document.getElementById('pdfContent');
        
        if (modal) {
            modal.classList.remove('active');
            modal.style.display = 'none';
            document.body.style.overflow = '';
        }
        
        // Reset content to original iframe
        if (pdfContent) {
            pdfContent.innerHTML = '<iframe id="pdfFrame" style="width: 100%; height: 70vh; border: none;"></iframe>';
        }
        
        // Clear any event listeners
        const newIframe = document.getElementById('pdfFrame');
        if (newIframe) {
            newIframe.src = '';
        }
        
        this.currentPdf = null;
    }

    downloadSafetyPdf(pdfId) {
        const pdf = this.safetyPdfs.find(p => p.id === pdfId);
        if (!pdf) return;

        const link = document.createElement('a');
        link.href = pdf.content;
        link.download = pdf.name;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    downloadCurrentPdf() {
        if (this.currentPdf) {
            this.downloadSafetyPdf(this.currentPdf.id);
        }
    }

    printCurrentPdf() {
        if (this.currentPdf) {
            const iframe = document.getElementById('pdfFrame');
            if (iframe && iframe.contentWindow) {
                iframe.contentWindow.print();
            }
        }
    }

    deleteSafetyPdf(pdfId) {
        const pdf = this.safetyPdfs.find(p => p.id === pdfId);
        if (!pdf) {
            alert('PDF nicht gefunden.');
            return;
        }

        if (!confirm(`M√∂chten Sie das PDF-Dokument "${pdf.name}" wirklich l√∂schen?`)) {
            return;
        }

        this.safetyPdfs = this.safetyPdfs.filter(p => p.id !== pdfId);
        this.saveSafetyPdfsToStorage();
        this.renderSafetyPdfs();
        
        alert(`PDF "${pdf.name}" wurde erfolgreich gel√∂scht.`);
    }

    debugSafetySystem() {
        const currentUser = this.getCurrentUser();
        
        console.log('=== SAFETY SYSTEM DEBUG ===');
        console.log('Current User:', currentUser);
        console.log('All Users:', this.users);
        console.log('Safety Announcements:', this.safetyAnnouncements);
        
        const activeAnnouncement = this.safetyAnnouncements.find(a => a.active);
        console.log('Active Announcement:', activeAnnouncement);
        
        if (activeAnnouncement) {
            console.log('Visible to users:', activeAnnouncement.visibleToUsers);
            console.log('Current user in visible list:', activeAnnouncement.visibleToUsers.includes(currentUser.id));
        }
        
        // Show checkboxes state
        const checkboxes = document.querySelectorAll('#announcementUserSelection input[type="checkbox"]');
        console.log('Checkbox states:');
        checkboxes.forEach(cb => {
            console.log(`- User ${cb.value}: ${cb.checked ? 'checked' : 'unchecked'}`);
        });
        
        // Create detailed alert
        let debugInfo = `Sicherheitssystem Debug:\n\n`;
        debugInfo += `Aktueller Benutzer: ${currentUser.displayName} (ID: ${currentUser.id})\n`;
        debugInfo += `Rolle: ${currentUser.role}\n`;
        debugInfo += `Anzahl Benutzer: ${this.users.length}\n`;
        debugInfo += `Anzahl Mitteilungen: ${this.safetyAnnouncements.length}\n`;
        debugInfo += `Anzahl PDFs: ${this.safetyPdfs.length}\n`;
        
        if (activeAnnouncement) {
            debugInfo += `\nAktive Mitteilung gefunden:\n`;
            debugInfo += `- Text: ${activeAnnouncement.text.substring(0, 50)}...\n`;
            debugInfo += `- Sichtbar f√ºr: ${activeAnnouncement.visibleToUsers.length} Benutzer\n`;
            debugInfo += `- Benutzer-IDs: ${activeAnnouncement.visibleToUsers.join(', ')}\n`;
            debugInfo += `- Aktueller Benutzer sichtbar: ${activeAnnouncement.visibleToUsers.includes(currentUser.id) ? 'JA' : 'NEIN'}\n`;
        } else {
            debugInfo += `\nKeine aktive Mitteilung gefunden.\n`;
        }

        if (this.safetyPdfs.length > 0) {
            debugInfo += `\nPDF Dokumente:\n`;
            this.safetyPdfs.forEach((pdf, index) => {
                debugInfo += `${index + 1}. ${pdf.name} (${this.formatFileSize(pdf.size)})\n`;
            });
        } else {
            debugInfo += `\nKeine PDF Dokumente vorhanden.\n`;
        }

        debugInfo += `\nContainer-Status:\n`;
        const pdfContainer = document.getElementById('safetyPdfList');
        debugInfo += `- PDF Container gefunden: ${pdfContainer ? 'JA' : 'NEIN'}\n`;
        if (pdfContainer) {
            debugInfo += `- Container HTML: ${pdfContainer.innerHTML.length > 0 ? 'Enth√§lt Content' : 'Leer'}\n`;
        }
        
        alert(debugInfo);
    }

    addTestPdf() {
        // Create a very simple PDF for testing (this is a valid minimal PDF)
        const testPdfContent = "data:application/pdf;base64,JVBERi0xLjQKMSAwIG9iago8PAovVGl0bGUgKFRlc3QgU2ljaGVyaGVpdHNkb2t1bWVudCkKL0NyZWF0b3IgKFFIU0UgU3lzdGVtKQovUHJvZHVjZXIgKFFIU0UgU3lzdGVtKQovQ3JlYXRpb25EYXRlIChEOjIwMjQwMTAxMTIwMDAwKQo+PgplbmRvYmoKMiAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMyAwIFIKPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFs0IDAgUl0KL0NvdW50IDEKL01lZGlhQm94IFswIDAgNjEyIDc5Ml0KPj4KZW5kb2JqCjQgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAzIDAgUgovUmVzb3VyY2VzIDw8Ci9Gb250IDw8Ci9GMSA8PAovVHlwZSAvRm9udAovU3VidHlwZSAvVHlwZTEKL0Jhc2VGb250IC9IZWx2ZXRpY2EKPj4KPj4KPj4KL0NvbnRlbnRzIDUgMCBSCj4+CmVuZG9iago1IDAgb2JqCjw8Ci9MZW5ndGggMTAwCj4+CnN0cmVhbQpCVApxCjcyIDcyMCBUZAovRjEgMTggVGYKKFNpY2hlcmhlaXRzZG9rdW1lbnQpIFRqCjAgLTMwIFRECi9GMSAxMiBUZgooRGllcyBpc3QgZWluIFRlc3QtUERGIGZ1ZXIgZGllIFNpY2hlcmhlaXRzZWNrZS4pIFRqCkVUClEKZW5kc3RyZWFtCmVuZG9iagp4cmVmCjAgNgowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDAwMDkgMDAwMDAgbiAKMDAwMDAwMDE1NyAwMDAwMCBuIAowMDAwMDAwMjE0IDAwMDAwIG4gCjAwMDAwMDAyOTggMDAwMDAgbiAKMDAwMDAwMDQ4OSAwMDAwMCBuIAp0cmFpbGVyCjw8Ci9TaXplIDYKL1Jvb3QgMiAwIFIKL0luZm8gMSAwIFIKPj4Kc3RhcnR4cmVmCjY0MAolJUVPRg==";
        
        const testPdf = {
            id: Date.now().toString(),
            name: 'Test-Sicherheitsdokument.pdf',
            size: 640, // approximate size of the PDF
            type: 'application/pdf',
            content: testPdfContent,
            uploadedBy: this.currentUserId,
            uploadDate: new Date().toISOString()
        };

        console.log('Adding test PDF:', testPdf.name);
        this.safetyPdfs.push(testPdf);
        this.saveSafetyPdfsToStorage();
        this.renderSafetyPdfs();
        
        alert('Test-PDF wurde hinzugef√ºgt.');
    }

    setupMaintenanceManagement() {
        this.setupMachineManagement();
        this.setupMaintenancePlanning();
        this.setupIssueReporting();
        this.setupMaintenanceAnalysis();
        this.updateMaintenanceStats();
    }

    setupMachineManagement() {
        const addMachineBtn = document.getElementById('addMachineBtn');
        if (addMachineBtn) {
            addMachineBtn.addEventListener('click', () => this.showAddMachineModal());
        }
        
        // Setup save button event listener for the existing modal
        const saveMachineBtn = document.getElementById('saveMachineBtn');
        if (saveMachineBtn) {
            saveMachineBtn.addEventListener('click', () => this.saveExistingMachineModal());
        }
        
        this.renderMachinesList();
        this.updateMachineStats();
    }

    showAddMachineModal() {
        console.log('üè≠ Professional Machine Management Modal wird erstellt...');
        
        try {
            // Ensure departments are loaded
            if (!this.departments || this.departments.length === 0) {
                console.log('Keine Abteilungen gefunden - initialisiere Standardabteilungen');
                this.initializeDefaultDepartments();
            }
            
            // Remove existing modals to prevent duplicate IDs
            const existingModal = document.getElementById('addMachineModal');
            if (existingModal) {
                console.log('Entferne vorhandenes Modal');
                existingModal.remove();
            }
            
            console.log('Erstelle Professional Machine Modal mit', this.departments.length, 'Abteilungen');
            
            // Create working machine modal (simplified version)
            const modal = this.createWorkingMachineModal();
            if (!modal) {
                throw new Error('Modal konnte nicht erstellt werden');
            }
            
            document.body.appendChild(modal);
            modal.style.display = 'block';
            
            console.log('üöÄ Professional Machine Modal erstellt und angezeigt');
            
            // Focus first field for better UX  
            setTimeout(() => {
                const firstField = modal.querySelector('#machineName');
                if (firstField) {
                    firstField.focus();
                    console.log('‚úÖ Focus auf erstes Feld gesetzt');
                } else {
                    console.warn('‚ö†Ô∏è Erstes Feld nicht gefunden');
                }
            }, 100);
            
        } catch (error) {
            console.error('‚ùå Fehler beim Erstellen des Machine Modals:', error);
            alert('Fehler beim √ñffnen des Maschinenformulars: ' + error.message);
        }
    }

    createAdvancedMachineModal() {
        console.log('üèóÔ∏è Erstelle erweiterte Maschinen-Modal mit 9 Tabs...');
        
        try {
            const modal = document.createElement('div');
            modal.id = 'addMachineModal';
            modal.className = 'modal new-machine-modal';
            
            console.log('‚úÖ Modal Element erstellt');
            
            // Teste erst ein einfaches Modal
            modal.innerHTML = `
                <div class="modal-content large-modal">
                    <div class="modal-header">
                        <h2><i class="fas fa-plus"></i> Neue Maschine anlegen - Professional</h2>
                        <span class="close new-machine-close">&times;</span>
                    </div>
                    <div class="modal-body">
                        <p>Modal wird geladen...</p>
                        <button onclick="this.closest('.modal').remove()">Schlie√üen</button>
                    </div>
                </div>
            `;
            
            console.log('‚úÖ Basis-HTML gesetzt');
            
            // Setup close button
            const closeBtn = modal.querySelector('.new-machine-close');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => modal.remove());
                console.log('‚úÖ Close-Button eingerichtet');
            }
            
            console.log('‚úÖ Modal erfolgreich erstellt');
            return modal;
            
        } catch (error) {
            console.error('‚ùå Fehler beim Modal-Aufbau:', error);
            throw error;
        }
    }

    // T√úV-konformes Professional Machine Management System
    createWorkingMachineModal() {
        console.log('üèóÔ∏è Erstelle T√úV-konformes Professional Machine Management System...');
        
        const modal = document.createElement('div');
        modal.id = 'addMachineModal';
        modal.className = 'modal professional-machine-modal';
        modal.style.display = 'block';
        
        modal.innerHTML = `
            <div class="modal-content professional-modal" style="max-width: 1400px; margin: 1% auto; max-height: 95vh; overflow-y: auto;">
                <div class="modal-header">
                    <div class="header-content">
                        <h2><i class="fas fa-industry"></i> Neue Maschine anlegen - T√úV Professional</h2>
                        <div class="compliance-indicators">
                            <span class="badge tuev-badge"><i class="fas fa-certificate"></i> T√úV-konform</span>
                            <span class="badge iso-badge"><i class="fas fa-award"></i> ISO 9001:2015</span>
                            <span class="badge ce-badge"><i class="fas fa-shield-check"></i> CE-Richtlinie</span>
                        </div>
                    </div>
                    <span class="close" id="closeMachineModal">&times;</span>
                </div>
                
                <div class="modal-body">
                    <!-- Progress Indicator -->
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: 11%"></div>
                        </div>
                        <div class="progress-text">Schritt 1 von 9 - Grunddaten</div>
                    </div>
                    
                    <!-- Tab Navigation -->
                    <div class="professional-tabs">
                        <button type="button" class="form-tab active" data-tab="grunddaten">
                            <i class="fas fa-info-circle"></i> Grunddaten
                        </button>
                        <button type="button" class="form-tab" data-tab="technisch">
                            <i class="fas fa-cogs"></i> Technische Daten
                        </button>
                        <button type="button" class="form-tab" data-tab="compliance">
                            <i class="fas fa-certificate"></i> Compliance
                        </button>
                        <button type="button" class="form-tab" data-tab="sicherheit">
                            <i class="fas fa-shield-alt"></i> Sicherheitstechnik
                        </button>
                        <button type="button" class="form-tab" data-tab="wartung">
                            <i class="fas fa-tools"></i> Wartung
                        </button>
                        <button type="button" class="form-tab" data-tab="risiko">
                            <i class="fas fa-exclamation-triangle"></i> Risikobewertung
                        </button>
                        <button type="button" class="form-tab" data-tab="dokumentation">
                            <i class="fas fa-file-alt"></i> Dokumentation
                        </button>
                        <button type="button" class="form-tab" data-tab="industrie40">
                            <i class="fas fa-wifi"></i> Industrie 4.0
                        </button>
                        <button type="button" class="form-tab" data-tab="wirtschaft">
                            <i class="fas fa-chart-line"></i> Betriebswirtschaft
                        </button>
                    </div>
                    
                    <form id="newMachineForm" class="professional-form">
                        <!-- Tab 1: Erweiterte Grunddaten -->
                        <div class="tab-content active" id="grunddatenContent">
                            <div class="tab-header">
                                <h3><i class="fas fa-info-circle"></i> Erweiterte Grunddaten & Identifikation</h3>
                                <p class="tab-description">Vollst√§ndige Erfassung aller maschinenspezifischen Grunddaten nach T√úV-Standards</p>
                            </div>
                            
                            <div class="form-section">
                                <h4>Maschinenidentifikation</h4>
                                <div class="form-grid professional-grid">
                                    <div class="form-group">
                                        <label for="machineName">Maschinenbezeichnung *</label>
                                        <input type="text" id="machineName" name="machineName" required 
                                               placeholder="z.B. Spritzgussmaschine SGM-001">
                                        <small>Eindeutige Bezeichnung nach Betriebsanweisung</small>
                                    </div>
                                    <div class="form-group">
                                        <label for="machineId">Maschinen-ID / Inventarnummer *</label>
                                        <input type="text" id="machineId" name="machineId" required
                                               placeholder="wird automatisch generiert" pattern="[A-Z]{3}-[0-9]{3}-[0-9]{4}">
                                        <small>Format: ABC-123-2024 (automatisch)</small>
                                    </div>
                                    <div class="form-group">
                                        <label for="manufacturer">Hersteller *</label>
                                        <input type="text" id="manufacturer" name="manufacturer" required 
                                               placeholder="z.B. Arburg GmbH + Co KG">
                                    </div>
                                    <div class="form-group">
                                        <label for="machineModel">Maschinentyp / Modell *</label>
                                        <input type="text" id="machineModel" name="machineModel" required 
                                               placeholder="z.B. Allrounder 520 C">
                                    </div>
                                    <div class="form-group">
                                        <label for="serialNumber">Seriennummer *</label>
                                        <input type="text" id="serialNumber" name="serialNumber" required 
                                               placeholder="Herstellerseriennummer">
                                    </div>
                                    <div class="form-group">
                                        <label for="yearBuilt">Baujahr *</label>
                                        <input type="number" id="yearBuilt" name="yearBuilt" required 
                                               min="1950" max="2030" placeholder="2024">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-section">
                                <h4>Klassifikation & Kategorisierung</h4>
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="machineType">Hauptkategorie *</label>
                                        <select id="machineType" name="machineType" required>
                                            <option value="">Kategorie w√§hlen...</option>
                                            <option value="injection-molding">Spritzgussmaschine</option>
                                            <option value="extrusion">Extrusionsanlage</option>
                                            <option value="blow-molding">Blasformmaschine</option>
                                            <option value="thermoforming">Thermoformmaschine</option>
                                            <option value="cnc-milling">CNC-Fr√§smaschine</option>
                                            <option value="cnc-turning">CNC-Drehmaschine</option>
                                            <option value="cnc-multi">CNC-Bearbeitungszentrum</option>
                                            <option value="press-hydraulic">Hydraulikpresse</option>
                                            <option value="press-pneumatic">Pneumatikpresse</option>
                                            <option value="robot-articulated">Gelenkarmroboter</option>
                                            <option value="robot-scara">SCARA-Roboter</option>
                                            <option value="robot-linear">Linearroboter</option>
                                            <option value="conveyor">F√∂rderanlage</option>
                                            <option value="packaging">Verpackungsmaschine</option>
                                            <option value="assembly">Montageautomat</option>
                                            <option value="testing">Pr√ºfautomat</option>
                                            <option value="other">Sonstige Maschine</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="applicationArea">Anwendungsbereich</label>
                                        <select id="applicationArea" name="applicationArea">
                                            <option value="">Bereich w√§hlen...</option>
                                            <option value="automotive">Automotive</option>
                                            <option value="medical">Medizintechnik</option>
                                            <option value="packaging">Verpackung</option>
                                            <option value="electronics">Elektronik</option>
                                            <option value="construction">Bauwesen</option>
                                            <option value="aerospace">Luft- und Raumfahrt</option>
                                            <option value="consumer">Konsumg√ºter</option>
                                            <option value="industrial">Industrieg√ºter</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="criticality">Kritikalit√§tsstufe *</label>
                                        <select id="criticality" name="criticality" required>
                                            <option value="">Stufe w√§hlen...</option>
                                            <option value="critical">Kritisch (Produktionsstopp bei Ausfall)</option>
                                            <option value="important">Wichtig (Teilst√∂rung m√∂glich)</option>
                                            <option value="standard">Standard (Ersetzbar)</option>
                                            <option value="backup">Reserve (Backup-System)</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-section">
                                <h4>Standort & Organisation</h4>
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="facility">Werk / Standort *</label>
                                        <input type="text" id="facility" name="facility" required 
                                               placeholder="z.B. Werk Hamburg">
                                    </div>
                                    <div class="form-group">
                                        <label for="building">Geb√§ude / Halle *</label>
                                        <input type="text" id="building" name="building" required 
                                               placeholder="z.B. Halle 1, Geb√§ude A">
                                    </div>
                                    <div class="form-group">
                                        <label for="floor">Etage / Ebene</label>
                                        <input type="text" id="floor" name="floor" 
                                               placeholder="z.B. Erdgeschoss, Ebene 2">
                                    </div>
                                    <div class="form-group">
                                        <label for="area">Bereich / Linie *</label>
                                        <input type="text" id="area" name="area" required 
                                               placeholder="z.B. Linie A, Montage 3">
                                    </div>
                                    <div class="form-group">
                                        <label for="coordinates">GPS-Koordinaten</label>
                                        <input type="text" id="coordinates" name="coordinates" 
                                               placeholder="z.B. 53.5511, 9.9937">
                                    </div>
                                    <div class="form-group">
                                        <label for="machineDepartment">Zust√§ndige Abteilung *</label>
                                        <select id="machineDepartment" name="machineDepartment" required>
                                            <option value="">Abteilung w√§hlen...</option>
                                            <option value="produktion">Produktion</option>
                                            <option value="instandhaltung">Instandhaltung</option>
                                            <option value="entwicklung">Entwicklung</option>
                                            <option value="qualitaet">Qualit√§tssicherung</option>
                                            <option value="qhse">QHSE Management</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Tab 2: Technische Daten -->
                        <div class="tab-content" id="technischContent">
                            <div class="tab-header">
                                <h3><i class="fas fa-cogs"></i> Detaillierte Technische Spezifikationen</h3>
                                <p class="tab-description">Vollst√§ndige technische Daten nach Maschinenrichtlinie 2006/42/EG</p>
                            </div>
                            
                            <div class="form-section">
                                <h4>Leistungsdaten & Energieversorgung</h4>
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="nominalPower">Nennleistung (kW) *</label>
                                        <input type="number" id="nominalPower" step="0.1" required 
                                               placeholder="z.B. 15.5">
                                    </div>
                                    <div class="form-group">
                                        <label for="maxPower">Maximale Leistung (kW)</label>
                                        <input type="number" id="maxPower" step="0.1" 
                                               placeholder="z.B. 18.0">
                                    </div>
                                    <div class="form-group">
                                        <label for="voltage">Spannung (V) *</label>
                                        <select id="voltage" required>
                                            <option value="">Spannung w√§hlen...</option>
                                            <option value="230">230V (1-phasig)</option>
                                            <option value="400">400V (3-phasig)</option>
                                            <option value="690">690V (3-phasig)</option>
                                            <option value="other">Sonstige</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="frequency">Frequenz (Hz)</label>
                                        <select id="frequency">
                                            <option value="50">50 Hz (Europa)</option>
                                            <option value="60">60 Hz (USA)</option>
                                            <option value="variable">Variable</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="current">Stromaufnahme (A)</label>
                                        <input type="number" id="current" step="0.1" 
                                               placeholder="z.B. 32.5">
                                    </div>
                                    <div class="form-group">
                                        <label for="protectionClass">Schutzart (IP-Code) *</label>
                                        <select id="protectionClass" required>
                                            <option value="">IP-Code w√§hlen...</option>
                                            <option value="IP20">IP20 (Standardumgebung)</option>
                                            <option value="IP54">IP54 (Staub- und Spritzwasserschutz)</option>
                                            <option value="IP65">IP65 (Vollst√§ndiger Schutz)</option>
                                            <option value="IP67">IP67 (Wasserdicht)</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-section">
                                <h4>Abmessungen & Gewicht</h4>
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="length">L√§nge (mm) *</label>
                                        <input type="number" id="length" required placeholder="z.B. 5000">
                                    </div>
                                    <div class="form-group">
                                        <label for="width">Breite (mm) *</label>
                                        <input type="number" id="width" required placeholder="z.B. 2000">
                                    </div>
                                    <div class="form-group">
                                        <label for="height">H√∂he (mm) *</label>
                                        <input type="number" id="height" required placeholder="z.B. 2500">
                                    </div>
                                    <div class="form-group">
                                        <label for="weight">Gewicht (kg) *</label>
                                        <input type="number" id="weight" required placeholder="z.B. 3500">
                                    </div>
                                    <div class="form-group">
                                        <label for="footprint">Grundfl√§che (m¬≤)</label>
                                        <input type="number" id="footprint" step="0.1" 
                                               placeholder="wird automatisch berechnet" readonly>
                                    </div>
                                    <div class="form-group">
                                        <label for="clearanceHeight">Freih√∂he erforderlich (mm)</label>
                                        <input type="number" id="clearanceHeight" 
                                               placeholder="z.B. 3000">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-section">
                                <h4>Betriebsmedien & Versorgung</h4>
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="compressedAir">Druckluft erforderlich</label>
                                        <div class="checkbox-group">
                                            <label><input type="checkbox" id="compressedAir"> Druckluftversorgung</label>
                                        </div>
                                        <input type="number" id="airPressure" step="0.1" 
                                               placeholder="Druck in bar (z.B. 6.0)">
                                    </div>
                                    <div class="form-group">
                                        <label for="cooling">K√ºhlsystem</label>
                                        <select id="cooling">
                                            <option value="none">Keine K√ºhlung</option>
                                            <option value="air">Luftk√ºhlung</option>
                                            <option value="water">Wasserk√ºhlung</option>
                                            <option value="oil">√ñlk√ºhlung</option>
                                            <option value="closed-loop">Geschlossener Kreislauf</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="hydraulics">Hydrauliksystem</label>
                                        <div class="checkbox-group">
                                            <label><input type="checkbox" id="hydraulics"> Hydraulikversorgung</label>
                                        </div>
                                        <input type="number" id="hydraulicPressure" step="1" 
                                               placeholder="Druck in bar (z.B. 200)">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Tab 3: Compliance & Zertifizierungen -->
                        <div class="tab-content" id="complianceContent">
                            <div class="tab-header">
                                <h3><i class="fas fa-certificate"></i> Compliance & Zertifizierungen</h3>
                                <p class="tab-description">Vollst√§ndige Erfassung aller Normen, Richtlinien und Zertifizierungen</p>
                            </div>
                            
                            <div class="form-section">
                                <h4>CE-Kennzeichnung & EU-Richtlinien</h4>
                                <div class="compliance-grid">
                                    <div class="form-group">
                                        <label for="ceMarking">CE-Kennzeichnung *</label>
                                        <div class="radio-group">
                                            <label><input type="radio" name="ceMarking" value="yes" required> Vorhanden</label>
                                            <label><input type="radio" name="ceMarking" value="no" required> Nicht vorhanden</label>
                                            <label><input type="radio" name="ceMarking" value="pending" required> In Bearbeitung</label>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="ceNumber">CE-Kennzeichnungsnummer</label>
                                        <input type="text" id="ceNumber" placeholder="z.B. CE-2024-001">
                                    </div>
                                    <div class="form-group">
                                        <label for="notifiedBody">Benannte Stelle</label>
                                        <input type="text" id="notifiedBody" 
                                               placeholder="z.B. T√úV S√úD (0123)">
                                    </div>
                                </div>
                                
                                <h5>Anwendbare EU-Richtlinien</h5>
                                <div class="checkbox-grid">
                                    <label><input type="checkbox" name="euDirectives" value="machinery"> Maschinenrichtlinie 2006/42/EG</label>
                                    <label><input type="checkbox" name="euDirectives" value="emc"> EMV-Richtlinie 2014/30/EU</label>
                                    <label><input type="checkbox" name="euDirectives" value="lvd"> Niederspannungsrichtlinie 2014/35/EU</label>
                                    <label><input type="checkbox" name="euDirectives" value="atex"> ATEX-Richtlinie 2014/34/EU</label>
                                    <label><input type="checkbox" name="euDirectives" value="pressure"> Druckger√§terichtlinie 2014/68/EU</label>
                                    <label><input type="checkbox" name="euDirectives" value="radio"> Funkanlagenrichtlinie 2014/53/EU</label>
                                </div>
                            </div>
                            
                            <div class="form-section">
                                <h4>Harmonisierte Normen & Standards</h4>
                                <div class="standards-section">
                                    <h5>Sicherheitsnormen</h5>
                                    <div class="checkbox-grid">
                                        <label><input type="checkbox" name="safetyStandards" value="en-iso-12100"> EN ISO 12100 (Grundlegende Sicherheitsnormen)</label>
                                        <label><input type="checkbox" name="safetyStandards" value="en-iso-13849"> EN ISO 13849 (Sicherheitsbezogene Teile)</label>
                                        <label><input type="checkbox" name="safetyStandards" value="en-62061"> EN 62061 (Funktionale Sicherheit)</label>
                                        <label><input type="checkbox" name="safetyStandards" value="en-iso-14119"> EN ISO 14119 (Verriegelungseinrichtungen)</label>
                                        <label><input type="checkbox" name="safetyStandards" value="en-iso-13857"> EN ISO 13857 (Sicherheitsabst√§nde)</label>
                                    </div>
                                    
                                    <h5>Qualit√§tsnormen</h5>
                                    <div class="checkbox-grid">
                                        <label><input type="checkbox" name="qualityStandards" value="iso-9001"> ISO 9001:2015 (Qualit√§tsmanagement)</label>
                                        <label><input type="checkbox" name="qualityStandards" value="iso-14001"> ISO 14001:2015 (Umweltmanagement)</label>
                                        <label><input type="checkbox" name="qualityStandards" value="iso-45001"> ISO 45001:2018 (Arbeitsschutzmanagement)</label>
                                        <label><input type="checkbox" name="qualityStandards" value="iso-27001"> ISO 27001:2013 (Informationssicherheit)</label>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-section">
                                <h4>T√úV-Pr√ºfungen & Zertifikate</h4>
                                <div class="form-grid">
                                    <div class="form-group">
                                        <label for="tuevInspection">T√úV-Pr√ºfung erforderlich *</label>
                                        <select id="tuevInspection" required>
                                            <option value="">Pr√ºfung w√§hlen...</option>
                                            <option value="none">Keine T√úV-Pr√ºfung erforderlich</option>
                                            <option value="initial">Erstpr√ºfung vor Inbetriebnahme</option>
                                            <option value="periodic">Wiederkehrende Pr√ºfung</option>
                                            <option value="special">Sonderpr√ºfung nach √Ñnderung</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="inspectionInterval">Pr√ºfintervall</label>
                                        <select id="inspectionInterval">
                                            <option value="">Intervall w√§hlen...</option>
                                            <option value="6months">6 Monate</option>
                                            <option value="12months">12 Monate</option>
                                            <option value="24months">24 Monate</option>
                                            <option value="60months">60 Monate</option>
                                            <option value="individual">Individuell festgelegt</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="lastInspection">Letzte Pr√ºfung</label>
                                        <input type="date" id="lastInspection">
                                    </div>
                                    <div class="form-group">
                                        <label for="nextInspection">N√§chste Pr√ºfung f√§llig</label>
                                        <input type="date" id="nextInspection">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Additional tabs will be added via addRemainingMachineTabs() -->
                        ${this.createRemainingMachineTabs()}
                        
                        <div class="modal-footer professional-footer">
                            <button type="button" id="cancelMachineBtn" class="btn-secondary">
                                <i class="fas fa-times"></i> Abbrechen
                            </button>
                            <button type="button" id="prevTabBtn" class="btn-outline" disabled>
                                <i class="fas fa-chevron-left"></i> Zur√ºck
                            </button>
                            <button type="button" id="nextTabBtn" class="btn-outline">
                                Weiter <i class="fas fa-chevron-right"></i>
                            </button>
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-save"></i> Maschine erstellen
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;
        
        // Setup event listeners
        const closeBtn = modal.querySelector('#closeMachineModal');
        const cancelBtn = modal.querySelector('#cancelMachineBtn');
        
        [closeBtn, cancelBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => modal.remove());
            }
        });
        
        // Auto-generate machine ID
        const nameInput = modal.querySelector('#machineName');
        const idInput = modal.querySelector('#machineId');
        
        if (nameInput && idInput) {
            nameInput.addEventListener('input', () => {
                if (!idInput.value) {
                    const name = nameInput.value.toUpperCase();
                    const year = new Date().getFullYear();
                    const prefix = name.substring(0, 3) || 'MAC';
                    const number = String((this.machines?.length || 0) + 1).padStart(3, '0');
                    idInput.value = `${prefix}-${number}-${year}`;
                }
            });
        }
        
        // Form submission
        const form = modal.querySelector('#newMachineForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveWorkingMachine(modal);
            });
        }
        
        // Setup tab navigation
        this.setupProfessionalMachineTabNavigation(modal);
        
        // Setup advanced features
        this.setupProfessionalMachineFeatures(modal);
        
        return modal;
    }

    createRemainingMachineTabs() {
        return `
            <!-- Tab 4: Sicherheitstechnik -->
            <div class="tab-content" id="sicherheitContent">
                <div class="tab-header">
                    <h3><i class="fas fa-shield-alt"></i> Sicherheitstechnik & Schutzeinrichtungen</h3>
                    <p class="tab-description">Vollst√§ndige Erfassung aller Sicherheitseinrichtungen nach EN ISO 12100</p>
                </div>
                
                <div class="form-section">
                    <h4>Schutzeinrichtungen & Sicherheitssysteme</h4>
                    <div class="safety-grid">
                        <div class="safety-category">
                            <h5>Mechanische Schutzeinrichtungen</h5>
                            <div class="checkbox-grid">
                                <label><input type="checkbox" name="mechanicalSafety" value="fixed-guards"> Fest angebrachte Schutzeinrichtungen</label>
                                <label><input type="checkbox" name="mechanicalSafety" value="movable-guards"> Bewegliche Schutzeinrichtungen</label>
                                <label><input type="checkbox" name="mechanicalSafety" value="adjustable-guards"> Verstellbare Schutzeinrichtungen</label>
                                <label><input type="checkbox" name="mechanicalSafety" value="self-adjusting-guards"> Selbstanpassende Schutzeinrichtungen</label>
                            </div>
                        </div>
                        
                        <div class="safety-category">
                            <h5>Verriegelungseinrichtungen</h5>
                            <div class="checkbox-grid">
                                <label><input type="checkbox" name="interlockSafety" value="mechanical-interlock"> Mechanische Verriegelung</label>
                                <label><input type="checkbox" name="interlockSafety" value="electrical-interlock"> Elektrische Verriegelung</label>
                                <label><input type="checkbox" name="interlockSafety" value="magnetic-interlock"> Magnetische Verriegelung</label>
                                <label><input type="checkbox" name="interlockSafety" value="coded-interlock"> Codierte Verriegelung</label>
                            </div>
                        </div>
                        
                        <div class="safety-category">
                            <h5>Schaltende Schutzeinrichtungen</h5>
                            <div class="checkbox-grid">
                                <label><input type="checkbox" name="switchingSafety" value="light-curtain"> Lichtvorhang</label>
                                <label><input type="checkbox" name="switchingSafety" value="light-barrier"> Lichtschranke</label>
                                <label><input type="checkbox" name="switchingSafety" value="laser-scanner"> Laserscanner</label>
                                <label><input type="checkbox" name="switchingSafety" value="pressure-mat"> Schaltmatte</label>
                                <label><input type="checkbox" name="switchingSafety" value="safety-edges"> Schaltleisten</label>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Not-Aus & Stillsetzeinrichtungen</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="emergencyStops">Anzahl Not-Aus-Schalter *</label>
                            <input type="number" id="emergencyStops" min="1" required placeholder="z.B. 2">
                        </div>
                        <div class="form-group">
                            <label for="emergencyStopType">Not-Aus-Typ</label>
                            <select id="emergencyStopType">
                                <option value="category-0">Kategorie 0 (Sofortiger Stopp)</option>
                                <option value="category-1">Kategorie 1 (Kontrollierter Stopp)</option>
                                <option value="category-2">Kategorie 2 (Kontrollierter Stopp mit Energieerhaltung)</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="safetyCategory">Sicherheitskategorie (EN ISO 13849) *</label>
                            <select id="safetyCategory" required>
                                <option value="">Kategorie w√§hlen...</option>
                                <option value="B">Kategorie B (Grundsicherheit)</option>
                                <option value="1">Kategorie 1 (Bew√§hrte Komponenten)</option>
                                <option value="2">Kategorie 2 (Testbare Sicherheit)</option>
                                <option value="3">Kategorie 3 (Einzelfehlertoleranz)</option>
                                <option value="4">Kategorie 4 (Einzelfehlertoleranz + Fehlererkennung)</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="performanceLevel">Performance Level (PLr) *</label>
                            <select id="performanceLevel" required>
                                <option value="">PL w√§hlen...</option>
                                <option value="a">PLr a (Sehr geringes Risiko)</option>
                                <option value="b">PLr b (Geringes Risiko)</option>
                                <option value="c">PLr c (Mittleres Risiko)</option>
                                <option value="d">PLr d (Hohes Risiko)</option>
                                <option value="e">PLr e (Sehr hohes Risiko)</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tab 5: Wartung & Instandhaltung -->
            <div class="tab-content" id="wartungContent">
                <div class="tab-header">
                    <h3><i class="fas fa-tools"></i> Wartung & Instandhaltung</h3>
                    <p class="tab-description">T√úV-konforme Wartungsplanung und Instandhaltungsstrategien nach DGUV</p>
                </div>
                
                <div class="form-section">
                    <h4>Wartungsintervalle & Pr√ºffristen</h4>
                    <div class="maintenance-grid">
                        <div class="maintenance-type">
                            <h5>Wiederkehrende Pr√ºfungen (T√úV)</h5>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="tuevInterval">T√úV-Pr√ºfintervall *</label>
                                    <select id="tuevInterval" required>
                                        <option value="">Intervall w√§hlen...</option>
                                        <option value="6">6 Monate</option>
                                        <option value="12">12 Monate</option>
                                        <option value="24">24 Monate</option>
                                        <option value="36">36 Monate</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="nextTuevDate">N√§chste T√úV-Pr√ºfung</label>
                                    <input type="date" id="nextTuevDate">
                                </div>
                                <div class="form-group">
                                    <label for="tuevOrganization">Pr√ºforganisation</label>
                                    <select id="tuevOrganization">
                                        <option value="tuev-sued">T√úV S√úD</option>
                                        <option value="tuev-nord">T√úV NORD</option>
                                        <option value="tuev-rheinland">T√úV Rheinland</option>
                                        <option value="dekra">DEKRA</option>
                                        <option value="other">Andere</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="maintenance-type">
                            <h5>Vorbeugende Wartung</h5>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="preventiveInterval">Wartungsintervall (Stunden)</label>
                                    <input type="number" id="preventiveInterval" placeholder="z.B. 500">
                                </div>
                                <div class="form-group">
                                    <label for="maintenanceResponsible">Verantwortlicher</label>
                                    <input type="text" id="maintenanceResponsible" placeholder="Name oder Abteilung">
                                </div>
                                <div class="form-group">
                                    <label for="lastMaintenance">Letzte Wartung</label>
                                    <input type="date" id="lastMaintenance">
                                </div>
                            </div>
                            
                            <div class="form-group full-width">
                                <label for="maintenanceTasks">Wartungsaufgaben</label>
                                <textarea id="maintenanceTasks" rows="3" placeholder="Beschreibung der regelm√§√üigen Wartungsarbeiten..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Ersatzteile & Service</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="sparePartsAvailable">Ersatzteilversorgung gesichert</label>
                            <select id="sparePartsAvailable">
                                <option value="yes">Ja, vollst√§ndig</option>
                                <option value="partial">Teilweise</option>
                                <option value="critical">Kritische Teile verf√ºgbar</option>
                                <option value="no">Nicht gesichert</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="serviceContract">Servicevertrag vorhanden</label>
                            <select id="serviceContract">
                                <option value="yes">Ja</option>
                                <option value="no">Nein</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="serviceProvider">Serviceanbieter</label>
                            <input type="text" id="serviceProvider" placeholder="Name des Serviceanbieters">
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tab 6: Risikobewertung -->
            <div class="tab-content" id="risikoContent">
                <div class="tab-header">
                    <h3><i class="fas fa-exclamation-triangle"></i> Risikobewertung & Gef√§hrdungsbeurteilung</h3>
                    <p class="tab-description">Systematische Gef√§hrdungsbeurteilung nach EN ISO 12100 und DGUV Vorschrift 1</p>
                </div>
                
                <div class="form-section">
                    <h4>Gef√§hrdungsarten</h4>
                    <div class="risk-categories">
                        <div class="risk-category">
                            <h5>Mechanische Gef√§hrdungen</h5>
                            <div class="checkbox-grid">
                                <label><input type="checkbox" name="mechanicalRisks" value="crushing"> Quetschen</label>
                                <label><input type="checkbox" name="mechanicalRisks" value="cutting"> Schneiden</label>
                                <label><input type="checkbox" name="mechanicalRisks" value="stabbing"> Stechen</label>
                                <label><input type="checkbox" name="mechanicalRisks" value="entanglement"> Erfassen/Einziehen</label>
                                <label><input type="checkbox" name="mechanicalRisks" value="impact"> Sto√üen</label>
                                <label><input type="checkbox" name="mechanicalRisks" value="abrasion"> Reiben/Scheuern</label>
                            </div>
                        </div>
                        
                        <div class="risk-category">
                            <h5>Elektrische Gef√§hrdungen</h5>
                            <div class="checkbox-grid">
                                <label><input type="checkbox" name="electricalRisks" value="shock"> Elektrischer Schlag</label>
                                <label><input type="checkbox" name="electricalRisks" value="burn"> Verbrennungen</label>
                                <label><input type="checkbox" name="electricalRisks" value="arc"> Lichtbogen</label>
                                <label><input type="checkbox" name="electricalRisks" value="static"> Elektrostatische Aufladung</label>
                            </div>
                        </div>
                        
                        <div class="risk-category">
                            <h5>Thermische Gef√§hrdungen</h5>
                            <div class="checkbox-grid">
                                <label><input type="checkbox" name="thermalRisks" value="heat"> Hitze/hei√üe Oberfl√§chen</label>
                                <label><input type="checkbox" name="thermalRisks" value="cold"> K√§lte</label>
                                <label><input type="checkbox" name="thermalRisks" value="fire"> Brandgefahr</label>
                                <label><input type="checkbox" name="thermalRisks" value="explosion"> Explosionsgefahr</label>
                            </div>
                        </div>
                        
                        <div class="risk-category">
                            <h5>L√§rm & Vibration</h5>
                            <div class="checkbox-grid">
                                <label><input type="checkbox" name="noiseRisks" value="hearing-damage"> Geh√∂rsch√§den</label>
                                <label><input type="checkbox" name="noiseRisks" value="hand-arm-vibration"> Hand-Arm-Vibration</label>
                                <label><input type="checkbox" name="noiseRisks" value="whole-body-vibration"> Ganzk√∂rper-Vibration</label>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Risikobewertung</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="riskAssessmentDate">Datum der Gef√§hrdungsbeurteilung</label>
                            <input type="date" id="riskAssessmentDate">
                        </div>
                        <div class="form-group">
                            <label for="riskAssessor">Durchgef√ºhrt von</label>
                            <input type="text" id="riskAssessor" placeholder="Name des Verantwortlichen">
                        </div>
                        <div class="form-group">
                            <label for="overallRiskLevel">Gesamtrisikobewertung</label>
                            <select id="overallRiskLevel">
                                <option value="low">Geringes Risiko</option>
                                <option value="medium">Mittleres Risiko</option>
                                <option value="high">Hohes Risiko</option>
                                <option value="very-high">Sehr hohes Risiko</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-group full-width">
                        <label for="riskMitigationMeasures">Schutzma√ünahmen</label>
                        <textarea id="riskMitigationMeasures" rows="4" placeholder="Beschreibung der implementierten Schutzma√ünahmen..."></textarea>
                    </div>
                </div>
            </div>
            
            <!-- Tab 7: Dokumentation -->
            <div class="tab-content" id="dokumentationContent">
                <div class="tab-header">
                    <h3><i class="fas fa-file-alt"></i> Dokumentation & Nachweise</h3>
                    <p class="tab-description">T√úV-Audit-ready Dokumentenverwaltung und Compliance-Nachweise</p>
                </div>
                
                <div class="form-section">
                    <h4>Pflichtdokumente</h4>
                    <div class="checkbox-grid">
                        <label><input type="checkbox" name="requiredDocs" value="ce-declaration"> EG-Konformit√§tserkl√§rung</label>
                        <label><input type="checkbox" name="requiredDocs" value="manual"> Betriebsanleitung (deutsch)</label>
                        <label><input type="checkbox" name="requiredDocs" value="risk-assessment"> Gef√§hrdungsbeurteilung</label>
                        <label><input type="checkbox" name="requiredDocs" value="installation-cert"> Aufstellungsbescheinigung</label>
                        <label><input type="checkbox" name="requiredDocs" value="acceptance-protocol"> Abnahmeprotokoll</label>
                        <label><input type="checkbox" name="requiredDocs" value="inspection-records"> Pr√ºfb√ºcher/-protokolle</label>
                        <label><input type="checkbox" name="requiredDocs" value="maintenance-log"> Wartungsnachweis</label>
                        <label><input type="checkbox" name="requiredDocs" value="training-records"> Einweisungsnachweise</label>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Dokumentenverwaltung</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="documentationComplete">Dokumentation vollst√§ndig</label>
                            <select id="documentationComplete">
                                <option value="complete">Vollst√§ndig</option>
                                <option value="mostly-complete">Gr√∂√ütenteils vollst√§ndig</option>
                                <option value="incomplete">Unvollst√§ndig</option>
                                <option value="missing">Fehlend</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="documentStorage">Dokumentenablage</label>
                            <select id="documentStorage">
                                <option value="digital">Digital</option>
                                <option value="physical">Papierform</option>
                                <option value="both">Digital + Papier</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="documentResponsible">Verantwortlich f√ºr Dokumentation</label>
                            <input type="text" id="documentResponsible" placeholder="Name/Abteilung">
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Dokumenten-Upload</h4>
                    <div class="document-upload-area">
                        <div class="upload-zone" id="documentUploadZone">
                            <div class="upload-content">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <h5>Dokumente hochladen</h5>
                                <p>PDF, Word, Excel, Bilder (max. 10MB pro Datei)</p>
                                <button type="button" class="btn-upload" onclick="document.getElementById('documentFileInput').click()">
                                    <i class="fas fa-plus"></i> Dateien ausw√§hlen
                                </button>
                                <input type="file" id="documentFileInput" multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif" style="display: none;">
                            </div>
                        </div>
                        
                        <div class="uploaded-documents" id="uploadedDocuments">
                            <h5>Hochgeladene Dokumente</h5>
                            <div class="document-list" id="documentList">
                                <!-- Uploaded documents will appear here -->
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>T√úV-Export & Auswertungen</h4>
                    <div class="export-actions">
                        <div class="export-grid">
                            <button type="button" class="btn-export" onclick="window.qhseDashboard.exportTuevCompleteReport()">
                                <i class="fas fa-file-pdf"></i>
                                <div>
                                    <strong>T√úV-Komplettbericht</strong>
                                    <small>Vollst√§ndiger Audit-Report als PDF</small>
                                </div>
                            </button>
                            
                            <button type="button" class="btn-export" onclick="window.qhseDashboard.exportComplianceChecklist()">
                                <i class="fas fa-list-check"></i>
                                <div>
                                    <strong>Compliance-Checkliste</strong>
                                    <small>Audit-Checkliste zum Abhaken</small>
                                </div>
                            </button>
                            
                            <button type="button" class="btn-export" onclick="window.qhseDashboard.exportDocumentIndex()">
                                <i class="fas fa-folder-open"></i>
                                <div>
                                    <strong>Dokumentenverzeichnis</strong>
                                    <small>√úbersicht aller Dokumente</small>
                                </div>
                            </button>
                            
                            <button type="button" class="btn-export" onclick="window.qhseDashboard.exportMaintenanceSchedule()">
                                <i class="fas fa-calendar-alt"></i>
                                <div>
                                    <strong>Wartungsplan</strong>
                                    <small>T√úV-Pr√ºfungen und Wartungen</small>
                                </div>
                            </button>
                            
                            <button type="button" class="btn-export" onclick="window.qhseDashboard.exportRiskAssessment()">
                                <i class="fas fa-exclamation-triangle"></i>
                                <div>
                                    <strong>Gef√§hrdungsbeurteilung</strong>
                                    <small>Risikobewertung und Schutzma√ünahmen</small>
                                </div>
                            </button>
                            
                            <button type="button" class="btn-export" onclick="window.qhseDashboard.exportTechnicalDataSheet()">
                                <i class="fas fa-cog"></i>
                                <div>
                                    <strong>Technisches Datenblatt</strong>
                                    <small>Alle technischen Spezifikationen</small>
                                </div>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Audit-Bereitschaft</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="auditReady">T√úV-Audit-bereit</label>
                            <select id="auditReady">
                                <option value="ready">Ja, vollst√§ndig</option>
                                <option value="mostly-ready">Gr√∂√ütenteils</option>
                                <option value="preparation-needed">Vorbereitung erforderlich</option>
                                <option value="not-ready">Nicht bereit</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="lastAudit">Letztes Audit</label>
                            <input type="date" id="lastAudit">
                        </div>
                        <div class="form-group">
                            <label for="nextAudit">N√§chstes geplantes Audit</label>
                            <input type="date" id="nextAudit">
                        </div>
                    </div>
                    
                    <div class="form-group full-width">
                        <label for="auditNotes">Audit-Hinweise</label>
                        <textarea id="auditNotes" rows="3" placeholder="Besonderheiten oder Hinweise f√ºr k√ºnftige Audits..."></textarea>
                    </div>
                </div>
            </div>
            
            <!-- Tab 8: Industrie 4.0 & IoT -->
            <div class="tab-content" id="industrie40Content">
                <div class="tab-header">
                    <h3><i class="fas fa-wifi"></i> Industrie 4.0 & IoT Integration</h3>
                    <p class="tab-description">Digitale Transformation und Internet of Things Anbindung</p>
                </div>
                
                <div class="form-section">
                    <h4>Digitalisierungsgrad</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="digitalizationLevel">Digitalisierungsgrad</label>
                            <select id="digitalizationLevel">
                                <option value="none">Keine Digitalisierung</option>
                                <option value="basic">Grundausstattung</option>
                                <option value="advanced">Erweiterte Digitalisierung</option>
                                <option value="smart">Smart Factory Ready</option>
                                <option value="fully-connected">Vollvernetzt</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="iotEnabled">IoT-f√§hig</label>
                            <select id="iotEnabled">
                                <option value="yes">Ja</option>
                                <option value="planned">Geplant</option>
                                <option value="no">Nein</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="connectivity">Konnektivit√§t</label>
                            <select id="connectivity">
                                <option value="ethernet">Ethernet</option>
                                <option value="wifi">WLAN</option>
                                <option value="cellular">Mobilfunk</option>
                                <option value="multiple">Mehrere Optionen</option>
                                <option value="none">Keine</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Sensoren & Monitoring</h4>
                    <div class="checkbox-grid">
                        <label><input type="checkbox" name="sensors" value="temperature"> Temperatursensoren</label>
                        <label><input type="checkbox" name="sensors" value="vibration"> Vibrationssensoren</label>
                        <label><input type="checkbox" name="sensors" value="pressure"> Drucksensoren</label>
                        <label><input type="checkbox" name="sensors" value="flow"> Durchflusssensoren</label>
                        <label><input type="checkbox" name="sensors" value="position"> Positionssensoren</label>
                        <label><input type="checkbox" name="sensors" value="energy"> Energiemonitoring</label>
                        <label><input type="checkbox" name="sensors" value="quality"> Qualit√§tssensoren</label>
                        <label><input type="checkbox" name="sensors" value="safety"> Sicherheitssensoren</label>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Digitaler Zwilling</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="digitalTwin">Digitaler Zwilling verf√ºgbar</label>
                            <select id="digitalTwin">
                                <option value="yes">Ja, vollst√§ndig</option>
                                <option value="partial">Teilweise</option>
                                <option value="planned">In Planung</option>
                                <option value="no">Nein</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="simulationSoftware">Simulationssoftware</label>
                            <input type="text" id="simulationSoftware" placeholder="z.B. Siemens NX, ANSYS, etc.">
                        </div>
                        <div class="form-group">
                            <label for="dataAnalytics">Datenanalytik</label>
                            <select id="dataAnalytics">
                                <option value="advanced">Erweiterte Analytik</option>
                                <option value="basic">Basis-Auswertung</option>
                                <option value="planned">Geplant</option>
                                <option value="none">Keine</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tab 9: Betriebswirtschaft -->
            <div class="tab-content" id="wirtschaftContent">
                <div class="tab-header">
                    <h3><i class="fas fa-chart-line"></i> Betriebswirtschaft & Lifecycle Management</h3>
                    <p class="tab-description">Wirtschaftliche Bewertung und Total Cost of Ownership (TCO)</p>
                </div>
                
                <div class="form-section">
                    <h4>Anschaffung & Investition</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="acquisitionCost">Anschaffungskosten (‚Ç¨)</label>
                            <input type="number" id="acquisitionCost" step="0.01" placeholder="0.00">
                        </div>
                        <div class="form-group">
                            <label for="installationCost">Installationskosten (‚Ç¨)</label>
                            <input type="number" id="installationCost" step="0.01" placeholder="0.00">
                        </div>
                        <div class="form-group">
                            <label for="commissioningDate">Inbetriebnahmedatum</label>
                            <input type="date" id="commissioningDate">
                        </div>
                        <div class="form-group">
                            <label for="depreciation">Abschreibungsdauer (Jahre)</label>
                            <input type="number" id="depreciation" min="1" max="50" placeholder="z.B. 10">
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Betriebskosten</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="energyCostYear">Energiekosten/Jahr (‚Ç¨)</label>
                            <input type="number" id="energyCostYear" step="0.01" placeholder="0.00">
                        </div>
                        <div class="form-group">
                            <label for="maintenanceCostYear">Wartungskosten/Jahr (‚Ç¨)</label>
                            <input type="number" id="maintenanceCostYear" step="0.01" placeholder="0.00">
                        </div>
                        <div class="form-group">
                            <label for="personalCostYear">Personalkosten/Jahr (‚Ç¨)</label>
                            <input type="number" id="personalCostYear" step="0.01" placeholder="0.00">
                        </div>
                        <div class="form-group">
                            <label for="consumablesCostYear">Verbrauchsmaterial/Jahr (‚Ç¨)</label>
                            <input type="number" id="consumablesCostYear" step="0.01" placeholder="0.00">
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>Produktivit√§t & Effizienz</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="capacityUtilization">Kapazit√§tsauslastung (%)</label>
                            <input type="number" id="capacityUtilization" min="0" max="100" placeholder="z.B. 85">
                        </div>
                        <div class="form-group">
                            <label for="oeeTarget">OEE-Zielwert (%)</label>
                            <input type="number" id="oeeTarget" min="0" max="100" placeholder="z.B. 75">
                        </div>
                        <div class="form-group">
                            <label for="plannedLifetime">Geplante Nutzungsdauer (Jahre)</label>
                            <input type="number" id="plannedLifetime" min="1" max="50" placeholder="z.B. 15">
                        </div>
                        <div class="form-group">
                            <label for="residualValue">Restwert (‚Ç¨)</label>
                            <input type="number" id="residualValue" step="0.01" placeholder="0.00">
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h4>ROI & Wirtschaftlichkeit</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="paybackPeriod">Amortisationsdauer (Jahre)</label>
                            <input type="number" id="paybackPeriod" step="0.1" placeholder="z.B. 3.5">
                        </div>
                        <div class="form-group">
                            <label for="roi">ROI (%)</label>
                            <input type="number" id="roi" step="0.1" placeholder="z.B. 15.5">
                        </div>
                        <div class="form-group">
                            <label for="costPerUnit">Kosten pro Einheit (‚Ç¨)</label>
                            <input type="number" id="costPerUnit" step="0.001" placeholder="0.000">
                        </div>
                    </div>
                    
                    <div class="form-group full-width">
                        <label for="economicNotes">Wirtschaftliche Bewertung</label>
                        <textarea id="economicNotes" rows="3" placeholder="Zus√§tzliche Hinweise zur wirtschaftlichen Bewertung..."></textarea>
                    </div>
                </div>
            </div>
        `;
    }

    setupProfessionalMachineTabNavigation(modal) {
        console.log('üîÑ Richte Professional Tab Navigation ein...');
        
        const tabs = modal.querySelectorAll('.form-tab');
        const contents = modal.querySelectorAll('.tab-content');
        const progressFill = modal.querySelector('.progress-fill');
        const progressText = modal.querySelector('.progress-text');
        
        const tabOrder = ['grunddaten', 'technisch', 'compliance', 'sicherheit', 'wartung', 'risiko', 'dokumentation', 'industrie40', 'wirtschaft'];
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.getAttribute('data-tab');
                this.switchProfessionalMachineTab(modal, targetTab, tabOrder);
            });
        });
        
        // Setup next/prev buttons
        const nextBtn = modal.querySelector('#nextTabBtn');
        const prevBtn = modal.querySelector('#prevTabBtn');
        
        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                const currentTab = modal.querySelector('.form-tab.active').getAttribute('data-tab');
                const currentIndex = tabOrder.indexOf(currentTab);
                if (currentIndex < tabOrder.length - 1) {
                    this.switchProfessionalMachineTab(modal, tabOrder[currentIndex + 1], tabOrder);
                }
            });
        }
        
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                const currentTab = modal.querySelector('.form-tab.active').getAttribute('data-tab');
                const currentIndex = tabOrder.indexOf(currentTab);
                if (currentIndex > 0) {
                    this.switchProfessionalMachineTab(modal, tabOrder[currentIndex - 1], tabOrder);
                }
            });
        }
    }

    switchProfessionalMachineTab(modal, targetTab, tabOrder) {
        console.log(`üîÑ Wechsle zu Professional Tab: ${targetTab}`);
        
        // Remove active class from all tabs and contents
        modal.querySelectorAll('.form-tab').forEach(tab => tab.classList.remove('active'));
        modal.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // Activate target tab and content
        const targetTabBtn = modal.querySelector(`[data-tab="${targetTab}"]`);
        const targetContent = modal.querySelector(`#${targetTab}Content`);
        
        if (targetTabBtn && targetContent) {
            targetTabBtn.classList.add('active');
            targetContent.classList.add('active');
            
            // Update progress
            const currentIndex = tabOrder.indexOf(targetTab);
            const progress = ((currentIndex + 1) / tabOrder.length) * 100;
            
            const progressFill = modal.querySelector('.progress-fill');
            const progressText = modal.querySelector('.progress-text');
            
            if (progressFill) progressFill.style.width = `${progress}%`;
            if (progressText) progressText.textContent = `Schritt ${currentIndex + 1} von ${tabOrder.length} - ${this.getTabDisplayName(targetTab)}`;
            
            // Update navigation buttons
            const prevBtn = modal.querySelector('#prevTabBtn');
            const nextBtn = modal.querySelector('#nextTabBtn');
            
            if (prevBtn) prevBtn.disabled = currentIndex === 0;
            if (nextBtn) nextBtn.disabled = currentIndex === tabOrder.length - 1;
            
            console.log(`‚úÖ Tab gewechselt zu: ${targetTab}`);
        }
    }

    getTabDisplayName(tabName) {
        const names = {
            'grunddaten': 'Grunddaten',
            'technisch': 'Technische Daten',
            'compliance': 'Compliance',
            'sicherheit': 'Sicherheitstechnik',
            'wartung': 'Wartung',
            'risiko': 'Risikobewertung',
            'dokumentation': 'Dokumentation',
            'industrie40': 'Industrie 4.0',
            'wirtschaft': 'Betriebswirtschaft'
        };
        return names[tabName] || tabName;
    }

    setupProfessionalMachineFeatures(modal) {
        console.log('üîß Richte Professional Machine Features ein...');
        
        // Auto-generate machine ID
        const nameInput = modal.querySelector('#machineName');
        const idInput = modal.querySelector('#machineId');
        
        if (nameInput && idInput) {
            nameInput.addEventListener('input', () => {
                if (!idInput.value) {
                    const name = nameInput.value.toUpperCase();
                    const year = new Date().getFullYear();
                    const prefix = name.substring(0, 3) || 'MAC';
                    const number = String((this.machines?.length || 0) + 1).padStart(3, '0');
                    idInput.value = `${prefix}-${number}-${year}`;
                }
            });
        }
        
        // Auto-calculate footprint
        const lengthInput = modal.querySelector('#length');
        const widthInput = modal.querySelector('#width');
        const footprintInput = modal.querySelector('#footprint');
        
        const calculateFootprint = () => {
            if (lengthInput && widthInput && footprintInput) {
                const length = parseFloat(lengthInput.value) || 0;
                const width = parseFloat(widthInput.value) || 0;
                const footprint = (length * width) / 1000000; // Convert mm¬≤ to m¬≤
                footprintInput.value = footprint.toFixed(2);
            }
        };
        
        if (lengthInput) lengthInput.addEventListener('input', calculateFootprint);
        if (widthInput) widthInput.addEventListener('input', calculateFootprint);
        
        // Setup document upload functionality
        setTimeout(() => {
            this.setupDocumentUpload();
            this.currentMachineDocuments = []; // Initialize document array for this machine
            this.renderDocumentList();
        }, 100);
        
        console.log('‚úÖ Professional Machine Features eingerichtet');
    }

    saveWorkingMachine(modal) {
        console.log('üíæ Speichere Professional Machine...');
        
        try {
            // Get comprehensive form data from all tabs
            const machineData = this.collectMachineFormData(modal);
            
            if (!machineData) {
                alert('Fehler beim Sammeln der Maschinendaten.');
                return;
            }
            
            // Get grunddaten specifically for validation
            const grunddaten = machineData.grunddaten || {};
            
            // Validate required fields from grunddaten tab
            if (!grunddaten.name || !grunddaten.type || !grunddaten.department) {
                alert('Bitte f√ºllen Sie alle Pflichtfelder in den Grunddaten aus: Name, Typ und Abteilung sind erforderlich.');
                return;
            }
            
            // Create comprehensive machine object with all professional data
            const machine = {
                id: grunddaten.id || `MACH-${Date.now()}`,
                name: grunddaten.name,
                type: grunddaten.type,
                location: machineData.standort?.location || grunddaten.location || '',
                department: grunddaten.department,
                status: grunddaten.status || 'In Betrieb',
                notes: grunddaten.notes || '',
                
                // Professional data from all tabs
                grunddaten: machineData.grunddaten,
                technischeDaten: machineData.technischeDaten,
                standort: machineData.standort,
                wartung: machineData.wartung,
                sicherheit: machineData.sicherheit,
                monitoring: machineData.monitoring,
                dokumentation: machineData.dokumentation,
                betriebswirtschaft: machineData.betriebswirtschaft,
                erweitert: machineData.erweitert,
                
                // Metadata
                createdAt: new Date().toISOString(),
                createdBy: this.getCurrentUser()?.id || 'unknown',
                updatedAt: new Date().toISOString(),
                updatedBy: this.getCurrentUser()?.id || 'unknown',
                
                // Professional flags
                isProfessional: true,
                tuevCompliant: true,
                version: '2.0'
            };
            
            // Initialize machines array if needed
            if (!Array.isArray(this.machines)) {
                this.machines = [];
            }
            
            // Add machine
            this.machines.push(machine);
            this.saveMachinesToStorage();
            
            // Update UI
            this.renderMachinesList();
            this.updateMachineStats();
            
            // Close modal
            modal.remove();
            
            // Success message
            alert(`‚úÖ T√úV-konforme Maschine "${machine.name}" erfolgreich erstellt!`);
            
            console.log('‚úÖ Professional Machine gespeichert:', machine);
            
        } catch (error) {
            console.error('‚ùå Fehler beim Speichern:', error);
            alert('Fehler beim Speichern der Maschine: ' + error.message);
        }
    }

    // Tempor√§rer Fix: Verwende die funktionierende Modal-Version
    showAddMachineModalFixed() {
        console.log('üîß Verwende reparierte Modal-Version...');
        
        try {
            // Remove existing modal
            const existing = document.getElementById('addMachineModal');
            if (existing) existing.remove();
            
            // Create working modal
            const modal = this.createWorkingMachineModal();
            document.body.appendChild(modal);
            
            // Focus first field
            setTimeout(() => {
                const firstField = modal.querySelector('#machineName');
                if (firstField) firstField.focus();
            }, 100);
            
            console.log('‚úÖ Reparierte Modal erfolgreich angezeigt');
            
        } catch (error) {
            console.error('‚ùå Fehler bei reparierter Modal:', error);
            alert('Fehler: ' + error.message);
        }

        // Add event listeners
        const closeBtn = modal.querySelector('.new-machine-close');
        const cancelBtn = modal.querySelector('#cancelNewMachine');
        [closeBtn, cancelBtn].forEach(btn => {
            btn.addEventListener('click', () => modal.remove());
        });

        // Tab navigation
        modal.querySelectorAll('.form-tab').forEach(btn => {
            btn.addEventListener('click', () => {
                const targetTab = btn.getAttribute('data-tab');
                this.switchMachineFormTab(modal, targetTab);
            });
        });

        // Auto-generate machine ID
        const titleInput = modal.querySelector('#machineName');
        const idInput = modal.querySelector('#machineID');
        if (titleInput && idInput) {
            titleInput.addEventListener('input', () => {
                if (!idInput.value) {
                    const name = titleInput.value.toUpperCase();
                    const year = new Date().getFullYear();
                    const prefix = name.substring(0, 3) || 'MAC';
                    const number = String(this.machines.length + 1).padStart(3, '0');
                    idInput.value = prefix + '-' + number + '-' + year;
                }
            });
        }

        // Form submission
        const form = modal.querySelector('#newMachineForm');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.createAdvancedMachine(modal);
        });

        // Enhanced Interactive Features
        this.setupAdvancedMachineFeatures(modal);

        return modal;
    }

    addMachine() {
        console.log('addMachine() aufgerufen');
        
        // Validierung der Pflichtfelder
        const requiredFields = ['machineName', 'machineType', 'machineLocation', 'machineDepartment', 'machineStatus'];
        const missingFields = requiredFields.filter(fieldId => {
            const field = document.getElementById(fieldId);
            const value = field ? field.value.trim() : '';
            console.log(`Field ${fieldId}: Element gefunden=${!!field}, Wert='${value}'`);
            return !field || !value;
        });

        console.log('Fehlende Felder:', missingFields);
        console.log('Verf√ºgbare Abteilungen:', this.departments);

        if (missingFields.length > 0) {
            alert(`Bitte f√ºllen Sie alle Pflichtfelder (*) aus.\nFehlende Felder: ${missingFields.join(', ')}`);
            return;
        }

        try {
            const machine = {
                id: Date.now().toString(),
                // Grunddaten
                name: document.getElementById('machineName').value.trim(),
                type: document.getElementById('machineType').value,
                manufacturer: document.getElementById('machineManufacturer')?.value.trim() || '',
                model: document.getElementById('machineModel')?.value.trim() || '',
                serialNumber: document.getElementById('machineSerialNumber')?.value.trim() || '',
                yearBuilt: document.getElementById('machineYearBuilt')?.value || null,
                
                // Standort & Organisation
                location: document.getElementById('machineLocation').value.trim(),
                department: document.getElementById('machineDepartment').value,
                responsible: document.getElementById('machineResponsible')?.value.trim() || '',
                status: document.getElementById('machineStatus').value,
                
                // Technische Daten
                power: document.getElementById('machinePower')?.value || null,
                weight: document.getElementById('machineWeight')?.value || null,
                
                // Wartung & Service
                lastMaintenance: document.getElementById('machineLastMaintenance')?.value || null,
                nextMaintenance: document.getElementById('machineNextMaintenance')?.value || null,
                maintenanceInterval: document.getElementById('machineMaintenanceInterval')?.value || 90,
                notes: document.getElementById('machineNotes')?.value.trim() || '',
                
                // Metadaten
                createdAt: new Date().toISOString(),
                createdBy: this.currentUserId || 'unknown',
                updatedAt: new Date().toISOString(),
                updatedBy: this.currentUserId || 'unknown'
            };

            console.log('Erstelle Maschine:', machine);

            // Initialize machines array if it doesn't exist
            if (!Array.isArray(this.machines)) {
                this.machines = [];
                console.log('Machines Array initialisiert');
            }

            this.machines.push(machine);
            console.log('Maschine zu Array hinzugef√ºgt. Anzahl Maschinen:', this.machines.length);
            
            this.saveMachinesToStorage();
            console.log('Maschinen in LocalStorage gespeichert');
            
            this.renderMachinesList();
            this.updateMachineStats();
            
            // Try to update analysis dropdown if it exists
            try {
                this.populateAnalysisMachineDropdown();
            } catch (e) {
                console.log('Warnung: Analysis Dropdown konnte nicht aktualisiert werden:', e.message);
            }
            
            // Close modal
            const modal = document.getElementById('addMachineModal');
            if (modal) {
                modal.remove();
            }
            
            alert('Maschine erfolgreich hinzugef√ºgt!');
            
        } catch (error) {
            console.error('Fehler beim Erstellen der Maschine:', error);
            alert('Fehler beim Erstellen der Maschine: ' + error.message);
        }
    }

    saveExistingMachineModal() {
        console.log('saveExistingMachineModal() aufgerufen');
        
        // Get form data from the existing modal
        const name = document.getElementById('machineName')?.value?.trim();
        const type = document.getElementById('machineType')?.value;
        const location = document.getElementById('machineLocation')?.value?.trim();
        const status = document.getElementById('machineStatus')?.value;
        const notes = document.getElementById('machineNotes')?.value?.trim();
        
        if (!name || !type || !location || !status) {
            alert('Bitte f√ºllen Sie alle Pflichtfelder aus.');
            return;
        }
        
        const machine = {
            id: Date.now().toString(),
            name: name,
            type: type,
            location: location,
            status: status,
            notes: notes,
            createdAt: new Date().toISOString(),
            createdBy: this.currentUserId || 'unknown',
            updatedAt: new Date().toISOString(),
            updatedBy: this.currentUserId || 'unknown'
        };
        
        // Initialize machines array if needed
        if (!Array.isArray(this.machines)) {
            this.machines = [];
        }
        
        this.machines.push(machine);
        this.saveMachinesToStorage();
        this.renderMachinesList();
        this.updateMachineStats();
        
        // Close modal and reset form
        const modal = document.getElementById('machineModal');
        if (modal) {
            modal.style.display = 'none';
        }
        const form = document.getElementById('machineForm');
        if (form) {
            form.reset();
        }
        
        alert('Maschine erfolgreich hinzugef√ºgt!');
    }

    // ===== ERWEITERTE MASCHINENMANAGEMENT FUNKTIONEN =====

    switchMachineFormTab(modal, targetTab) {
        console.log(`üîÑ Wechsle zu Machine Tab: ${targetTab}`);
        
        if (!modal) {
            console.error('‚ùå Modal nicht gefunden f√ºr Tab-Wechsel');
            return;
        }

        // Remove active class from all tabs and content
        const allTabs = modal.querySelectorAll('.form-tab');
        const allContent = modal.querySelectorAll('.tab-content');
        
        allTabs.forEach(tab => tab.classList.remove('active'));
        allContent.forEach(content => content.classList.remove('active'));

        // Activate target tab and content
        const targetTabElement = modal.querySelector(`[data-tab="${targetTab}"]`);
        const targetContentElement = modal.querySelector(`#${targetTab}Content`);
        
        if (targetTabElement && targetContentElement) {
            targetTabElement.classList.add('active');
            targetContentElement.classList.add('active');
            
            // Update progress indicator
            this.updateMachineFormProgress(modal, targetTab);
            
            // Auto-focus first input in new tab
            const firstInput = targetContentElement.querySelector('input, select, textarea');
            if (firstInput && !firstInput.disabled) {
                setTimeout(() => firstInput.focus(), 100);
            }
            
            console.log(`‚úÖ Tab gewechselt zu: ${targetTab}`);
        } else {
            console.error(`‚ùå Tab oder Content nicht gefunden: ${targetTab}`);
        }
    }

    updateMachineFormProgress(modal, currentTab) {
        const tabOrder = ['grunddaten', 'technisch', 'standort', 'wartung', 'sicherheit', 'monitoring', 'dokumentation', 'wirtschaft', 'erweitert'];
        const currentIndex = tabOrder.indexOf(currentTab);
        const progress = ((currentIndex + 1) / tabOrder.length) * 100;
        
        const progressBar = modal.querySelector('.progress-fill');
        const progressText = modal.querySelector('.progress-text');
        
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
        }
        
        if (progressText) {
            progressText.textContent = `Schritt ${currentIndex + 1} von ${tabOrder.length}`;
        }
    }

    setupAdvancedMachineFeatures(modal) {
        console.log('üîß Richte erweiterte Maschinenfeatures ein...');
        
        if (!modal) {
            console.error('‚ùå Modal nicht verfunden f√ºr Feature-Setup');
            return;
        }

        // Setup file upload areas
        this.setupMachineFileUploads(modal);
        
        // Setup interactive sliders and ranges
        this.setupMachineInteractiveElements(modal);
        
        // Setup dynamic dependencies
        this.setupMachineDependencies(modal);
        
        // Setup validation
        this.setupMachineValidation(modal);
        
        // Setup auto-calculations
        this.setupMachineCalculations(modal);
        
        console.log('‚úÖ Erweiterte Maschinenfeatures eingerichtet');
    }

    setupMachineFileUploads(modal) {
        const uploadAreas = modal.querySelectorAll('.file-upload-area');
        
        uploadAreas.forEach(area => {
            const input = area.querySelector('input[type="file"]');
            const preview = area.querySelector('.file-preview');
            
            if (input) {
                // Drag and drop
                area.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    area.classList.add('drag-over');
                });
                
                area.addEventListener('dragleave', () => {
                    area.classList.remove('drag-over');
                });
                
                area.addEventListener('drop', (e) => {
                    e.preventDefault();
                    area.classList.remove('drag-over');
                    
                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                        input.files = files;
                        this.handleMachineFilePreview(files[0], preview);
                    }
                });
                
                // Click to upload
                area.addEventListener('click', () => input.click());
                
                // File selection
                input.addEventListener('change', (e) => {
                    if (e.target.files.length > 0) {
                        this.handleMachineFilePreview(e.target.files[0], preview);
                    }
                });
            }
        });
    }

    handleMachineFilePreview(file, previewContainer) {
        if (!previewContainer) return;
        
        const isImage = file.type.startsWith('image/');
        const reader = new FileReader();
        
        reader.onload = (e) => {
            previewContainer.innerHTML = isImage 
                ? `<img src="${e.target.result}" style="max-width: 100%; max-height: 150px; border-radius: 4px;">
                   <p style="margin: 0.5rem 0 0 0; font-size: 0.875rem; color: #6b7280;">${file.name}</p>`
                : `<div style="padding: 1rem; background: #f3f4f6; border-radius: 4px; text-align: center;">
                     <i class="fas fa-file" style="font-size: 2rem; color: #6b7280; margin-bottom: 0.5rem;"></i>
                     <p style="margin: 0; font-size: 0.875rem; color: #374151;">${file.name}</p>
                     <p style="margin: 0; font-size: 0.75rem; color: #6b7280;">${(file.size / 1024).toFixed(1)} KB</p>
                   </div>`;
        };
        
        reader.readAsDataURL(file);
    }

    setupMachineInteractiveElements(modal) {
        // Setup automation level slider
        const automationSlider = modal.querySelector('#automationLevel');
        const automationValue = modal.querySelector('#automationValue');
        
        if (automationSlider && automationValue) {
            automationSlider.addEventListener('input', (e) => {
                const value = parseInt(e.target.value);
                const levels = ['Manuell', 'Teilautomatisiert', 'Vollautomatisiert', 'Autonom', 'KI-gesteuert'];
                automationValue.textContent = `Level ${value}: ${levels[value] || 'Unbekannt'}`;
            });
        }
        
        // Setup efficiency sliders
        const efficiencySliders = modal.querySelectorAll('.efficiency-slider');
        efficiencySliders.forEach(slider => {
            const valueDisplay = modal.querySelector(`#${slider.id}Value`);
            if (valueDisplay) {
                slider.addEventListener('input', (e) => {
                    valueDisplay.textContent = `${e.target.value}%`;
                });
            }
        });
        
        // Setup cost calculators
        this.setupCostCalculators(modal);
    }

    setupCostCalculators(modal) {
        const purchasePrice = modal.querySelector('#purchasePrice');
        const installationCost = modal.querySelector('#installationCost');
        const totalCostDisplay = modal.querySelector('#totalCostDisplay');
        
        const updateTotalCost = () => {
            if (purchasePrice && installationCost && totalCostDisplay) {
                const purchase = parseFloat(purchasePrice.value) || 0;
                const installation = parseFloat(installationCost.value) || 0;
                const total = purchase + installation;
                totalCostDisplay.textContent = `Gesamtkosten: ${total.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' })}`;
            }
        };
        
        if (purchasePrice) purchasePrice.addEventListener('input', updateTotalCost);
        if (installationCost) installationCost.addEventListener('input', updateTotalCost);
    }

    setupMachineDependencies(modal) {
        // Machine type dependencies
        const machineType = modal.querySelector('#machineType');
        const specificFields = modal.querySelector('#typeSpecificFields');
        
        if (machineType) {
            machineType.addEventListener('change', (e) => {
                this.updateMachineTypeFields(modal, e.target.value);
            });
        }
        
        // Monitoring dependencies
        const hasIoT = modal.querySelector('#hasIoT');
        const iotConfig = modal.querySelector('#iotConfiguration');
        
        if (hasIoT && iotConfig) {
            hasIoT.addEventListener('change', (e) => {
                iotConfig.style.display = e.target.checked ? 'block' : 'none';
            });
        }
    }

    updateMachineTypeFields(modal, machineType) {
        const specificFields = modal.querySelector('#typeSpecificFields');
        if (!specificFields) return;
        
        const typeConfigs = {
            'cnc': {
                label: 'CNC-spezifische Einstellungen',
                fields: ['Spindelleistung (kW)', 'Verfahrwege X/Y/Z (mm)', 'Werkzeugwechsler', 'Steuerung']
            },
            'press': {
                label: 'Pressen-spezifische Einstellungen', 
                fields: ['Presskraft (kN)', 'Hubbewegung (mm)', 'Sicherheitskategorie', 'Hydraulikdruck (bar)']
            },
            'robot': {
                label: 'Roboter-spezifische Einstellungen',
                fields: ['Traglast (kg)', 'Reichweite (mm)', 'Achsenanzahl', 'Wiederholgenauigkeit (mm)']
            }
        };
        
        const config = typeConfigs[machineType];
        if (config) {
            specificFields.innerHTML = `
                <h4>${config.label}</h4>
                ${config.fields.map(field => `
                    <div class="input-group">
                        <label>${field}:</label>
                        <input type="text" name="${field.toLowerCase().replace(/[^a-z0-9]/g, '')}" placeholder="${field}">
                    </div>
                `).join('')}
            `;
            specificFields.style.display = 'block';
        } else {
            specificFields.style.display = 'none';
        }
    }

    setupMachineValidation(modal) {
        const requiredFields = modal.querySelectorAll('[required]');
        
        requiredFields.forEach(field => {
            field.addEventListener('blur', () => {
                this.validateMachineField(field);
            });
            
            field.addEventListener('input', () => {
                // Clear error state on input
                field.classList.remove('error');
                const errorMsg = field.parentNode.querySelector('.error-message');
                if (errorMsg) errorMsg.remove();
            });
        });
    }

    validateMachineField(field) {
        const value = field.value.trim();
        const isValid = value.length > 0;
        
        field.classList.toggle('error', !isValid);
        
        // Remove existing error message
        const existingError = field.parentNode.querySelector('.error-message');
        if (existingError) existingError.remove();
        
        if (!isValid) {
            const errorMsg = document.createElement('div');
            errorMsg.className = 'error-message';
            errorMsg.textContent = 'Dieses Feld ist erforderlich';
            errorMsg.style.color = '#ef4444';
            errorMsg.style.fontSize = '0.875rem';
            errorMsg.style.marginTop = '0.25rem';
            field.parentNode.appendChild(errorMsg);
        }
        
        return isValid;
    }

    createAdvancedMachine(modal) {
        console.log('üè≠ Erstelle erweiterte Maschine...');
        
        if (!modal) {
            console.error('‚ùå Modal nicht gefunden f√ºr Maschinenerstellung');
            return;
        }

        // Validate all required fields
        const requiredFields = modal.querySelectorAll('[required]');
        let isValid = true;
        
        requiredFields.forEach(field => {
            if (!this.validateMachineField(field)) {
                isValid = false;
            }
        });
        
        if (!isValid) {
            alert('Bitte f√ºllen Sie alle Pflichtfelder aus.');
            return;
        }

        // Collect data from all tabs
        const machineData = this.collectMachineFormData(modal);
        
        if (!machineData) {
            alert('Fehler beim Sammeln der Maschinendaten.');
            return;
        }

        // Generate unique machine ID
        const machineId = this.generateMachineId();
        
        // Create comprehensive machine object
        const machine = {
            id: machineId,
            ...machineData,
            createdAt: new Date().toISOString(),
            createdBy: this.getCurrentUser().id,
            updatedAt: new Date().toISOString(),
            updatedBy: this.getCurrentUser().id,
            version: '1.0'
        };

        // Initialize machines array if needed
        if (!Array.isArray(this.machines)) {
            this.machines = [];
        }

        // Add machine to storage
        this.machines.push(machine);
        this.saveMachinesToStorage();
        
        // Update UI
        this.renderMachinesList();
        this.updateMachineStats();
        
        // Close modal
        modal.remove();
        
        // Success notification
        alert(`‚úÖ Maschine "${machine.grunddaten.name}" erfolgreich erstellt!\nMaschinen-ID: ${machineId}`);
        
        console.log('‚úÖ Erweiterte Maschine erstellt:', machine);
    }

    collectMachineFormData(modal) {
        console.log('üìä Sammle Daten aus allen Machine-Tabs...');
        
        try {
            const data = {
                // Tab 1: Grunddaten
                grunddaten: {
                    name: modal.querySelector('#machineName')?.value?.trim(),
                    machineId: modal.querySelector('#machineId')?.value?.trim(),
                    type: modal.querySelector('#machineType')?.value,
                    category: modal.querySelector('#machineCategory')?.value,
                    manufacturer: modal.querySelector('#manufacturer')?.value?.trim(),
                    model: modal.querySelector('#machineModel')?.value?.trim(),
                    serialNumber: modal.querySelector('#serialNumber')?.value?.trim(),
                    yearBuilt: modal.querySelector('#yearBuilt')?.value,
                    description: modal.querySelector('#machineDescription')?.value?.trim()
                },
                
                // Tab 2: Technische Daten
                technisch: {
                    power: modal.querySelector('#machinePower')?.value,
                    voltage: modal.querySelector('#machineVoltage')?.value,
                    weight: modal.querySelector('#machineWeight')?.value,
                    dimensions: {
                        length: modal.querySelector('#machineLength')?.value,
                        width: modal.querySelector('#machineWidth')?.value,
                        height: modal.querySelector('#machineHeight')?.value
                    },
                    capacity: modal.querySelector('#machineCapacity')?.value,
                    automationLevel: modal.querySelector('#automationLevel')?.value,
                    specifications: modal.querySelector('#technicalSpecs')?.value?.trim()
                },
                
                // Tab 3: Standort & Organisation
                standort: {
                    department: modal.querySelector('#machineDepartment')?.value,
                    location: modal.querySelector('#machineLocation')?.value?.trim(),
                    building: modal.querySelector('#machineBuilding')?.value?.trim(),
                    floor: modal.querySelector('#machineFloor')?.value?.trim(),
                    room: modal.querySelector('#machineRoom')?.value?.trim(),
                    responsiblePerson: modal.querySelector('#responsiblePerson')?.value,
                    backup: modal.querySelector('#backupPerson')?.value
                },
                
                // Tab 4: Wartung & Service
                wartung: {
                    maintenanceInterval: modal.querySelector('#maintenanceInterval')?.value,
                    lastMaintenance: modal.querySelector('#lastMaintenance')?.value,
                    nextMaintenance: modal.querySelector('#nextMaintenance')?.value,
                    serviceContract: modal.querySelector('#serviceContract')?.checked,
                    serviceProvider: modal.querySelector('#serviceProvider')?.value?.trim(),
                    warrantyEnd: modal.querySelector('#warrantyEnd')?.value,
                    spareParts: modal.querySelector('#spareParts')?.value?.trim()
                },
                
                // Tab 5: Sicherheit & Compliance
                sicherheit: {
                    status: modal.querySelector('#machineStatus')?.value,
                    ceMarking: modal.querySelector('#ceMarking')?.checked,
                    riskAssessment: modal.querySelector('#riskAssessment')?.checked,
                    safetyInstructions: modal.querySelector('#safetyInstructions')?.checked,
                    emergencyStop: modal.querySelector('#emergencyStop')?.checked,
                    lockout: modal.querySelector('#lockout')?.checked,
                    complianceNotes: modal.querySelector('#complianceNotes')?.value?.trim()
                },
                
                // Tab 6: Monitoring & IoT
                monitoring: {
                    hasIoT: modal.querySelector('#hasIoT')?.checked,
                    sensorTypes: this.getSelectedSensorTypes(modal),
                    dataInterval: modal.querySelector('#dataInterval')?.value,
                    alertThresholds: modal.querySelector('#alertThresholds')?.value?.trim(),
                    digitalTwin: modal.querySelector('#digitalTwin')?.checked,
                    predictiveMaintenance: modal.querySelector('#predictiveMaintenance')?.checked
                },
                
                // Tab 7: Dokumentation
                dokumentation: {
                    manualAvailable: modal.querySelector('#manualAvailable')?.checked,
                    drawingsAvailable: modal.querySelector('#drawingsAvailable')?.checked,
                    certificatesAvailable: modal.querySelector('#certificatesAvailable')?.checked,
                    trainingRequired: modal.querySelector('#trainingRequired')?.checked,
                    documentNotes: modal.querySelector('#documentNotes')?.value?.trim()
                },
                
                // Tab 8: Betriebswirtschaft
                wirtschaft: {
                    purchasePrice: modal.querySelector('#purchasePrice')?.value,
                    installationCost: modal.querySelector('#installationCost')?.value,
                    annualOperatingCost: modal.querySelector('#annualOperatingCost')?.value,
                    depreciation: modal.querySelector('#depreciation')?.value,
                    utilizationRate: modal.querySelector('#utilizationRate')?.value,
                    efficiency: modal.querySelector('#efficiency')?.value
                },
                
                // Tab 9: Erweiterte Features
                erweitert: {
                    industry40: modal.querySelector('#industry40')?.checked,
                    ai: modal.querySelector('#ai')?.checked,
                    cloudConnection: modal.querySelector('#cloudConnection')?.checked,
                    remoteAccess: modal.querySelector('#remoteAccess')?.checked,
                    energyMonitoring: modal.querySelector('#energyMonitoring')?.checked,
                    qualityControl: modal.querySelector('#qualityControl')?.checked,
                    notes: modal.querySelector('#advancedNotes')?.value?.trim()
                }
            };
            
            console.log('‚úÖ Maschinendaten gesammelt:', data);
            return data;
            
        } catch (error) {
            console.error('‚ùå Fehler beim Sammeln der Maschinendaten:', error);
            return null;
        }
    }

    getSelectedSensorTypes(modal) {
        const checkboxes = modal.querySelectorAll('input[name="sensorTypes"]:checked');
        return Array.from(checkboxes).map(cb => cb.value);
    }

    generateMachineId() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const time = String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0');
        
        return `MACH-${year}${month}${day}-${time}`;
    }

    // Debug-Funktion f√ºr direkten Test
    testMachineModal() {
        console.log('üß™ Teste Machine Modal direkt...');
        
        try {
            if (!window.qhseDashboard) {
                console.error('‚ùå QHSE Dashboard nicht gefunden');
                return;
            }
            
            console.log('‚úÖ Dashboard gefunden, rufe showAddMachineModal auf...');
            this.showAddMachineModal();
            
        } catch (error) {
            console.error('‚ùå Test-Fehler:', error);
            alert('Test-Fehler: ' + error.message);
        }
    }

    renderMachinesList() {
        const container = document.getElementById('machinesList');
        if (!container) return;

        if (this.machines.length === 0) {
            container.innerHTML = '<p class="no-data">Keine Maschinen registriert</p>';
            return;
        }

        const machinesHtml = this.machines.map(machine => {
            const department = this.departments.find(d => d.id === machine.department);
            const statusClass = {
                'running': 'status-success',
                'maintenance': 'status-warning',
                'issue': 'status-danger',
                'offline': 'status-inactive'
            }[machine.status] || 'status-inactive';

            const statusText = {
                'running': 'In Betrieb',
                'maintenance': 'Wartung',
                'issue': 'St√∂rung',
                'offline': 'Au√üer Betrieb'
            }[machine.status] || machine.status;

            // Wartungsinfo
            const nextMaintenance = machine.nextMaintenance ? 
                new Date(machine.nextMaintenance).toLocaleDateString('de-DE') : 'Nicht geplant';
            const isMaintenanceDue = machine.nextMaintenance && 
                new Date(machine.nextMaintenance) <= new Date();

            return `
                <div class="machine-card">
                    <div class="machine-header">
                        <div class="machine-title">
                            <h4>${machine.name}</h4>
                            <span class="machine-type">${machine.type}</span>
                        </div>
                        <span class="status-badge ${statusClass}">${statusText}</span>
                    </div>
                    
                    <div class="machine-details">
                        <div class="detail-grid">
                            <div class="detail-section">
                                <h5>Grunddaten</h5>
                                ${machine.manufacturer ? `<p><strong>Hersteller:</strong> ${machine.manufacturer}</p>` : ''}
                                ${machine.model ? `<p><strong>Modell:</strong> ${machine.model}</p>` : ''}
                                ${machine.serialNumber ? `<p><strong>S/N:</strong> ${machine.serialNumber}</p>` : ''}
                                ${machine.yearBuilt ? `<p><strong>Baujahr:</strong> ${machine.yearBuilt}</p>` : ''}
                            </div>
                            
                            <div class="detail-section">
                                <h5>Standort</h5>
                                <p><strong>Standort:</strong> ${machine.location}</p>
                                <p><strong>Abteilung:</strong> ${department ? department.name : 'Unbekannt'}</p>
                                ${machine.responsible ? `<p><strong>Verantwortlich:</strong> ${machine.responsible}</p>` : ''}
                            </div>
                            
                            <div class="detail-section">
                                <h5>Technische Daten</h5>
                                ${machine.power ? `<p><strong>Leistung:</strong> ${machine.power} kW</p>` : ''}
                                ${machine.weight ? `<p><strong>Gewicht:</strong> ${machine.weight} kg</p>` : ''}
                            </div>
                            
                            <div class="detail-section">
                                <h5>Wartung</h5>
                                <p class="${isMaintenanceDue ? 'maintenance-due' : ''}">
                                    <strong>N√§chste Wartung:</strong> ${nextMaintenance}
                                    ${isMaintenanceDue ? ' <i class="fas fa-exclamation-triangle" title="Wartung √ºberf√§llig"></i>' : ''}
                                </p>
                                <p><strong>Intervall:</strong> ${machine.maintenanceInterval || 90} Tage</p>
                            </div>
                        </div>
                        
                        ${machine.notes ? `
                            <div class="machine-notes">
                                <h5>Bemerkungen</h5>
                                <p>${machine.notes}</p>
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="machine-actions">
                        <button onclick="window.qhseDashboard.viewMachineDetails('${machine.id}')" class="btn-info">
                            <i class="fas fa-eye"></i> Details
                        </button>
                        <button onclick="window.qhseDashboard.showReportIssueModal('${machine.id}')" class="btn-warning">
                            <i class="fas fa-exclamation-triangle"></i> St√∂rung melden
                        </button>
                        <button onclick="window.qhseDashboard.editMachine('${machine.id}')" class="btn-secondary">
                            <i class="fas fa-edit"></i> Bearbeiten
                        </button>
                        <button onclick="window.qhseDashboard.deleteMachine('${machine.id}')" class="btn-danger">
                            <i class="fas fa-trash"></i> L√∂schen
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = machinesHtml;
    }

    deleteMachine(machineId) {
        const machine = this.machines.find(m => m.id === machineId);
        if (!machine) return;

        if (confirm(`M√∂chten Sie die Maschine "${machine.name}" wirklich l√∂schen?\n\nDadurch werden auch alle zugeh√∂rigen St√∂rungsmeldungen entfernt.`)) {
            // Remove machine
            this.machines = this.machines.filter(m => m.id !== machineId);
            
            // Remove related issues
            this.issues = this.issues.filter(i => i.machineId !== machineId);
            
            // Save changes
            this.saveMachinesToStorage();
            this.saveIssuesToStorage();
            
            // Update UI
            this.renderMachinesList();
            this.updateMachineStats();
            this.populateAnalysisMachineDropdown();
            
            alert('Maschine erfolgreich gel√∂scht!');
        }
    }

    viewMachineDetails(machineId) {
        const machine = this.machines.find(m => m.id === machineId);
        if (!machine) return;

        const department = this.departments.find(d => d.id === machine.department);
        const relatedIssues = this.issues.filter(i => i.machineId === machineId);
        
        const modalHtml = `
            <div id="machineDetailsModal" class="modal active">
                <div class="modal-content large-modal">
                    <div class="modal-header">
                        <h2><i class="fas fa-cogs"></i> Maschinendetails: ${machine.name}</h2>
                        <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="machine-details-grid">
                            <div class="details-section">
                                <h3>Grunddaten</h3>
                                <div class="detail-item">
                                    <strong>Name:</strong> ${machine.name}
                                </div>
                                <div class="detail-item">
                                    <strong>Typ:</strong> ${machine.type}
                                </div>
                                ${machine.manufacturer ? `<div class="detail-item"><strong>Hersteller:</strong> ${machine.manufacturer}</div>` : ''}
                                ${machine.model ? `<div class="detail-item"><strong>Modell:</strong> ${machine.model}</div>` : ''}
                                ${machine.serialNumber ? `<div class="detail-item"><strong>Seriennummer:</strong> ${machine.serialNumber}</div>` : ''}
                                ${machine.yearBuilt ? `<div class="detail-item"><strong>Baujahr:</strong> ${machine.yearBuilt}</div>` : ''}
                            </div>

                            <div class="details-section">
                                <h3>Standort & Organisation</h3>
                                <div class="detail-item">
                                    <strong>Standort:</strong> ${machine.location}
                                </div>
                                <div class="detail-item">
                                    <strong>Abteilung:</strong> ${department ? department.name : 'Unbekannt'}
                                </div>
                                ${machine.responsible ? `<div class="detail-item"><strong>Verantwortlicher:</strong> ${machine.responsible}</div>` : ''}
                                <div class="detail-item">
                                    <strong>Status:</strong> 
                                    <span class="status-badge ${machine.status === 'running' ? 'status-success' : machine.status === 'maintenance' ? 'status-warning' : machine.status === 'issue' ? 'status-danger' : 'status-inactive'}">
                                        ${machine.status === 'running' ? 'In Betrieb' : machine.status === 'maintenance' ? 'Wartung' : machine.status === 'issue' ? 'St√∂rung' : 'Au√üer Betrieb'}
                                    </span>
                                </div>
                            </div>

                            ${machine.power || machine.weight ? `
                                <div class="details-section">
                                    <h3>Technische Daten</h3>
                                    ${machine.power ? `<div class="detail-item"><strong>Leistung:</strong> ${machine.power} kW</div>` : ''}
                                    ${machine.weight ? `<div class="detail-item"><strong>Gewicht:</strong> ${machine.weight} kg</div>` : ''}
                                </div>
                            ` : ''}

                            <div class="details-section">
                                <h3>Wartung & Service</h3>
                                ${machine.lastMaintenance ? `<div class="detail-item"><strong>Letzte Wartung:</strong> ${new Date(machine.lastMaintenance).toLocaleDateString('de-DE')}</div>` : ''}
                                ${machine.nextMaintenance ? `<div class="detail-item"><strong>N√§chste Wartung:</strong> ${new Date(machine.nextMaintenance).toLocaleDateString('de-DE')}</div>` : ''}
                                <div class="detail-item">
                                    <strong>Wartungsintervall:</strong> ${machine.maintenanceInterval || 90} Tage
                                </div>
                            </div>

                            <div class="details-section">
                                <h3>St√∂rungshistorie</h3>
                                ${relatedIssues.length > 0 ? `
                                    <div class="issues-summary">
                                        <p><strong>Gesamte St√∂rungen:</strong> ${relatedIssues.length}</p>
                                        <p><strong>Offene St√∂rungen:</strong> ${relatedIssues.filter(i => i.status === 'open').length}</p>
                                        <p><strong>Behobene St√∂rungen:</strong> ${relatedIssues.filter(i => i.status === 'resolved').length}</p>
                                    </div>
                                ` : '<p>Keine St√∂rungen gemeldet</p>'}
                            </div>

                            ${machine.notes ? `
                                <div class="details-section full-width">
                                    <h3>Bemerkungen</h3>
                                    <div class="notes-content">
                                        ${machine.notes}
                                    </div>
                                </div>
                            ` : ''}

                            <div class="details-section full-width">
                                <h3>Metadaten</h3>
                                <div class="detail-item">
                                    <strong>Erstellt am:</strong> ${new Date(machine.createdAt).toLocaleDateString('de-DE')} um ${new Date(machine.createdAt).toLocaleTimeString('de-DE')}
                                </div>
                                <div class="detail-item">
                                    <strong>Erstellt von:</strong> ${machine.createdBy}
                                </div>
                                ${machine.updatedAt ? `
                                    <div class="detail-item">
                                        <strong>Zuletzt ge√§ndert:</strong> ${new Date(machine.updatedAt).toLocaleDateString('de-DE')} um ${new Date(machine.updatedAt).toLocaleTimeString('de-DE')}
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button onclick="window.qhseDashboard.editMachine('${machine.id}')" class="btn-secondary">
                            <i class="fas fa-edit"></i> Bearbeiten
                        </button>
                        <button onclick="this.closest('.modal').remove()" class="btn-primary">
                            <i class="fas fa-times"></i> Schlie√üen
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
    }

    // ===== MISSING CRITICAL FUNCTIONS =====

    editMachine(machineId) {
        console.log('‚úèÔ∏è Bearbeite Maschine:', machineId);
        
        const machine = this.machines.find(m => m.id === machineId);
        if (!machine) {
            alert('Maschine nicht gefunden!');
            return;
        }

        // Remove any existing edit modals
        const existingModal = document.getElementById('editMachineModal');
        if (existingModal) existingModal.remove();

        // Create edit modal based on machine type
        let modal;
        if (machine.isProfessional) {
            modal = this.createEditProfessionalMachineModal(machine);
        } else {
            modal = this.createEditBasicMachineModal(machine);
        }

        document.body.appendChild(modal);
        
        // Focus first field
        setTimeout(() => {
            const firstField = modal.querySelector('input[type="text"]');
            if (firstField) firstField.focus();
        }, 100);
    }

    createEditBasicMachineModal(machine) {
        const modal = document.createElement('div');
        modal.id = 'editMachineModal';
        modal.className = 'modal';
        
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-edit"></i> Maschine bearbeiten</h2>
                    <button class="close-modal" onclick="this.closest('.modal').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editMachineForm">
                        <div class="form-group">
                            <label for="editMachineName">Maschinenbezeichnung *</label>
                            <input type="text" id="editMachineName" value="${machine.name}" required>
                        </div>
                        <div class="form-group">
                            <label for="editMachineType">Maschinentyp *</label>
                            <input type="text" id="editMachineType" value="${machine.type}" required>
                        </div>
                        <div class="form-group">
                            <label for="editMachineLocation">Standort</label>
                            <input type="text" id="editMachineLocation" value="${machine.location || ''}">
                        </div>
                        <div class="form-group">
                            <label for="editMachineDepartment">Abteilung *</label>
                            <select id="editMachineDepartment" required>
                                ${this.departments.map(dept => 
                                    `<option value="${dept.id}" ${dept.id === machine.department ? 'selected' : ''}>${dept.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editMachineStatus">Status</label>
                            <select id="editMachineStatus">
                                <option value="In Betrieb" ${machine.status === 'In Betrieb' ? 'selected' : ''}>In Betrieb</option>
                                <option value="Wartung" ${machine.status === 'Wartung' ? 'selected' : ''}>Wartung</option>
                                <option value="St√∂rung" ${machine.status === 'St√∂rung' ? 'selected' : ''}>St√∂rung</option>
                                <option value="Au√üer Betrieb" ${machine.status === 'Au√üer Betrieb' ? 'selected' : ''}>Au√üer Betrieb</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editMachineNotes">Bemerkungen</label>
                            <textarea id="editMachineNotes" rows="3">${machine.notes || ''}</textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button onclick="this.closest('.modal').remove()" class="btn-secondary">
                        <i class="fas fa-times"></i> Abbrechen
                    </button>
                    <button onclick="window.qhseDashboard.saveEditedMachine('${machine.id}')" class="btn-primary">
                        <i class="fas fa-save"></i> Speichern
                    </button>
                </div>
            </div>
        `;
        
        return modal;
    }

    createEditProfessionalMachineModal(machine) {
        // Create professional edit modal similar to create modal but pre-filled
        const modal = this.createWorkingMachineModal();
        modal.id = 'editMachineModal';
        
        // Update modal title
        const title = modal.querySelector('h2');
        if (title) {
            title.innerHTML = '<i class="fas fa-edit"></i> T√úV-konforme Maschine bearbeiten';
        }
        
        // Pre-fill all form fields
        setTimeout(() => {
            this.populateEditFormFields(modal, machine);
        }, 100);
        
        // Update save button
        const saveButton = modal.querySelector('.btn-primary');
        if (saveButton) {
            saveButton.onclick = () => this.saveEditedProfessionalMachine(machine.id, modal);
        }
        
        return modal;
    }

    populateEditFormFields(modal, machine) {
        // Basic fields
        const fields = {
            'machineName': machine.name,
            'machineType': machine.type,
            'machineId': machine.id,
            'department': machine.department,
            'status': machine.status,
            'notes': machine.notes
        };
        
        // Populate basic fields
        Object.entries(fields).forEach(([fieldId, value]) => {
            const field = modal.querySelector(`#${fieldId}`);
            if (field && value) {
                field.value = value;
            }
        });
        
        // Populate professional data if available
        if (machine.isProfessional && machine.grunddaten) {
            this.populateProfessionalEditFields(modal, machine);
        }
    }

    populateProfessionalEditFields(modal, machine) {
        // Populate all professional tabs with existing data
        const tabs = ['grunddaten', 'technischeDaten', 'standort', 'wartung', 'sicherheit', 'monitoring', 'dokumentation', 'betriebswirtschaft', 'erweitert'];
        
        tabs.forEach(tabName => {
            if (machine[tabName]) {
                this.populateTabFields(modal, tabName, machine[tabName]);
            }
        });
    }

    populateTabFields(modal, tabName, data) {
        Object.entries(data).forEach(([fieldName, value]) => {
            const field = modal.querySelector(`[name="${fieldName}"]`) || modal.querySelector(`#${fieldName}`);
            if (field && value) {
                if (field.type === 'checkbox') {
                    field.checked = value === true || value === 'true';
                } else if (field.type === 'radio') {
                    if (field.value === value) {
                        field.checked = true;
                    }
                } else {
                    field.value = value;
                }
            }
        });
    }

    saveEditedMachine(machineId) {
        console.log('üíæ Speichere bearbeitete Maschine:', machineId);
        
        try {
            const modal = document.getElementById('editMachineModal');
            if (!modal) return;
            
            const form = modal.querySelector('#editMachineForm');
            if (!form) return;
            
            // Get form data
            const formData = new FormData(form);
            const name = modal.querySelector('#editMachineName').value;
            const type = modal.querySelector('#editMachineType').value;
            const location = modal.querySelector('#editMachineLocation').value;
            const department = modal.querySelector('#editMachineDepartment').value;
            const status = modal.querySelector('#editMachineStatus').value;
            const notes = modal.querySelector('#editMachineNotes').value;
            
            // Validate required fields
            if (!name || !type || !department) {
                alert('Bitte f√ºllen Sie alle Pflichtfelder (*) aus.');
                return;
            }
            
            // Find and update machine
            const machineIndex = this.machines.findIndex(m => m.id === machineId);
            if (machineIndex === -1) {
                alert('Maschine nicht gefunden!');
                return;
            }
            
            // Update machine data
            this.machines[machineIndex] = {
                ...this.machines[machineIndex],
                name: name,
                type: type,
                location: location,
                department: department,
                status: status,
                notes: notes,
                updatedAt: new Date().toISOString(),
                updatedBy: this.getCurrentUser()?.id || 'unknown'
            };
            
            // Save to storage
            this.saveMachinesToStorage();
            
            // Update UI
            this.renderMachinesList();
            this.updateMachineStats();
            
            // Close modal
            modal.remove();
            
            alert(`Maschine "${name}" wurde erfolgreich aktualisiert.`);
            
        } catch (error) {
            console.error('‚ùå Fehler beim Speichern:', error);
            alert('Fehler beim Speichern der √Ñnderungen: ' + error.message);
        }
    }

    saveEditedProfessionalMachine(machineId, modal) {
        console.log('üíæ Speichere bearbeitete Professional Machine:', machineId);
        
        try {
            // Get comprehensive form data
            const machineData = this.collectMachineFormData(modal);
            
            if (!machineData || !machineData.grunddaten) {
                alert('Fehler beim Sammeln der Maschinendaten.');
                return;
            }
            
            // Validate required fields
            const grunddaten = machineData.grunddaten;
            if (!grunddaten.name || !grunddaten.type || !grunddaten.department) {
                alert('Bitte f√ºllen Sie alle Pflichtfelder aus: Name, Typ und Abteilung sind erforderlich.');
                return;
            }
            
            // Find and update machine
            const machineIndex = this.machines.findIndex(m => m.id === machineId);
            if (machineIndex === -1) {
                alert('Maschine nicht gefunden!');
                return;
            }
            
            // Update machine with all professional data
            this.machines[machineIndex] = {
                ...this.machines[machineIndex],
                name: grunddaten.name,
                type: grunddaten.type,
                location: machineData.standort?.location || grunddaten.location || '',
                department: grunddaten.department,
                status: grunddaten.status || 'In Betrieb',
                notes: grunddaten.notes || '',
                
                // Update all professional tabs
                grunddaten: machineData.grunddaten,
                technischeDaten: machineData.technischeDaten,
                standort: machineData.standort,
                wartung: machineData.wartung,
                sicherheit: machineData.sicherheit,
                monitoring: machineData.monitoring,
                dokumentation: machineData.dokumentation,
                betriebswirtschaft: machineData.betriebswirtschaft,
                erweitert: machineData.erweitert,
                
                // Update metadata
                updatedAt: new Date().toISOString(),
                updatedBy: this.getCurrentUser()?.id || 'unknown'
            };
            
            // Save to storage
            this.saveMachinesToStorage();
            
            // Update UI
            this.renderMachinesList();
            this.updateMachineStats();
            
            // Close modal
            modal.remove();
            
            alert(`T√úV-konforme Maschine "${grunddaten.name}" wurde erfolgreich aktualisiert.`);
            
        } catch (error) {
            console.error('‚ùå Fehler beim Speichern:', error);
            alert('Fehler beim Speichern der √Ñnderungen: ' + error.message);
        }
    }

    changeMachineStatus(machineId, newStatus) {
        console.log('üîÑ √Ñndere Maschinenstatus:', machineId, 'zu', newStatus);
        
        const machine = this.machines.find(m => m.id === machineId);
        if (!machine) {
            alert('Maschine nicht gefunden!');
            return;
        }
        
        const oldStatus = machine.status;
        
        // Confirm status change
        if (!confirm(`Status von "${machine.name}" von "${oldStatus}" zu "${newStatus}" √§ndern?`)) {
            return;
        }
        
        // Update status
        machine.status = newStatus;
        machine.updatedAt = new Date().toISOString();
        machine.updatedBy = this.getCurrentUser()?.id || 'unknown';
        
        // Add status change to history if professional machine
        if (machine.isProfessional) {
            if (!machine.statusHistory) {
                machine.statusHistory = [];
            }
            machine.statusHistory.push({
                from: oldStatus,
                to: newStatus,
                timestamp: new Date().toISOString(),
                changedBy: this.getCurrentUser()?.id || 'unknown'
            });
        }
        
        // Save changes
        this.saveMachinesToStorage();
        
        // Update UI
        this.renderMachinesList();
        this.updateMachineStats();
        
        alert(`Status von "${machine.name}" wurde erfolgreich ge√§ndert.`);
    }

    searchMachines(query) {
        if (!query || query.trim() === '') {
            this.renderMachinesList();
            return;
        }
        
        const searchTerm = query.toLowerCase().trim();
        const filteredMachines = this.machines.filter(machine => {
            return (
                machine.name.toLowerCase().includes(searchTerm) ||
                machine.type.toLowerCase().includes(searchTerm) ||
                machine.location?.toLowerCase().includes(searchTerm) ||
                machine.status.toLowerCase().includes(searchTerm) ||
                machine.notes?.toLowerCase().includes(searchTerm) ||
                machine.id.toLowerCase().includes(searchTerm)
            );
        });
        
        this.renderFilteredMachinesList(filteredMachines);
    }

    filterMachines(criteria) {
        let filteredMachines = [...this.machines];
        
        // Filter by status
        if (criteria.status && criteria.status !== 'all') {
            filteredMachines = filteredMachines.filter(m => m.status === criteria.status);
        }
        
        // Filter by department
        if (criteria.department && criteria.department !== 'all') {
            filteredMachines = filteredMachines.filter(m => m.department === criteria.department);
        }
        
        // Filter by type
        if (criteria.type && criteria.type !== 'all') {
            filteredMachines = filteredMachines.filter(m => m.type === criteria.type);
        }
        
        this.renderFilteredMachinesList(filteredMachines);
    }

    renderFilteredMachinesList(machines) {
        const container = document.getElementById('machinesList');
        if (!container) return;
        
        if (machines.length === 0) {
            container.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <p>Keine Maschinen gefunden</p>
                </div>
            `;
            return;
        }
        
        // Use same rendering logic as renderMachinesList but with filtered data
        const machinesHtml = machines.map(machine => {
            const statusClass = this.getStatusClass(machine.status);
            const statusIcon = this.getStatusIcon(machine.status);
            
            return `
                <div class="machine-card ${statusClass}">
                    <div class="machine-header">
                        <h3>${machine.name}</h3>
                        <div class="machine-status">
                            <i class="${statusIcon}"></i>
                            ${machine.status}
                        </div>
                    </div>
                    <div class="machine-details">
                        <div class="machine-info">
                            <span><strong>Typ:</strong> ${machine.type}</span>
                            <span><strong>Standort:</strong> ${machine.location || 'Nicht angegeben'}</span>
                            <span><strong>Abteilung:</strong> ${this.getDepartmentName(machine.department)}</span>
                            ${machine.isProfessional ? '<span class="professional-badge"><i class="fas fa-certificate"></i> T√úV-konform</span>' : ''}
                        </div>
                        
                        ${machine.notes ? `
                            <div class="machine-notes">
                                <h5>Bemerkungen</h5>
                                <p>${machine.notes}</p>
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="machine-actions">
                        <button onclick="window.qhseDashboard.viewMachineDetails('${machine.id}')" class="btn-info">
                            <i class="fas fa-eye"></i> Details
                        </button>
                        <button onclick="window.qhseDashboard.editMachine('${machine.id}')" class="btn-secondary">
                            <i class="fas fa-edit"></i> Bearbeiten
                        </button>
                        <button onclick="window.qhseDashboard.deleteMachine('${machine.id}')" class="btn-danger">
                            <i class="fas fa-trash"></i> L√∂schen
                        </button>
                    </div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = machinesHtml;
    }

    // ===== HELPER FUNCTIONS =====

    getStatusClass(status) {
        const statusMap = {
            'In Betrieb': 'status-running',
            'running': 'status-running',
            'Wartung': 'status-maintenance', 
            'maintenance': 'status-maintenance',
            'St√∂rung': 'status-issue',
            'issue': 'status-issue',
            'Au√üer Betrieb': 'status-stopped',
            'stopped': 'status-stopped'
        };
        return statusMap[status] || 'status-unknown';
    }

    getStatusIcon(status) {
        const iconMap = {
            'In Betrieb': 'fas fa-play-circle',
            'running': 'fas fa-play-circle',
            'Wartung': 'fas fa-tools',
            'maintenance': 'fas fa-tools', 
            'St√∂rung': 'fas fa-exclamation-triangle',
            'issue': 'fas fa-exclamation-triangle',
            'Au√üer Betrieb': 'fas fa-stop-circle',
            'stopped': 'fas fa-stop-circle'
        };
        return iconMap[status] || 'fas fa-question-circle';
    }

    getDepartmentName(departmentId) {
        const department = this.departments.find(d => d.id === departmentId);
        return department ? department.name : 'Unbekannt';
    }

    updateMachineStats() {
        const totalMachines = this.machines.length;
        const runningMachines = this.machines.filter(m => 
            m.status === 'In Betrieb' || m.status === 'running'
        ).length;
        const maintenanceMachines = this.machines.filter(m => 
            m.status === 'Wartung' || m.status === 'maintenance'
        ).length;
        const issueMachines = this.machines.filter(m => 
            m.status === 'St√∂rung' || m.status === 'issue'
        ).length;
        const stoppedMachines = this.machines.filter(m => 
            m.status === 'Au√üer Betrieb' || m.status === 'stopped'
        ).length;

        // Update stats display
        const totalEl = document.getElementById('totalMachines');
        const runningEl = document.getElementById('runningMachines');
        const maintenanceEl = document.getElementById('maintenanceMachines');
        const issueEl = document.getElementById('issueMachines');
        const stoppedEl = document.getElementById('stoppedMachines');

        if (totalEl) totalEl.textContent = totalMachines;
        if (runningEl) runningEl.textContent = runningMachines;
        if (maintenanceEl) maintenanceEl.textContent = maintenanceMachines;
        if (issueEl) issueEl.textContent = issueMachines;
        if (stoppedEl) stoppedEl.textContent = stoppedMachines;

        // Update any machine status overview charts
        this.updateMachineStatusChart();
    }

    updateMachineStatusChart() {
        // This function can be called to update visual charts/dashboards
        // For now, just log the status distribution
        console.log('üìä Machine Status Distribution:', {
            total: this.machines.length,
            running: this.machines.filter(m => m.status === 'In Betrieb' || m.status === 'running').length,
            maintenance: this.machines.filter(m => m.status === 'Wartung' || m.status === 'maintenance').length,
            issues: this.machines.filter(m => m.status === 'St√∂rung' || m.status === 'issue').length,
            stopped: this.machines.filter(m => m.status === 'Au√üer Betrieb' || m.status === 'stopped').length
        });
    }

    // ===== ADVANCED MACHINE FEATURES =====

    exportMachineData() {
        console.log('üì§ Exportiere Maschinendaten...');
        
        try {
            const csvData = this.generateMachineCSV();
            const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            
            link.setAttribute('href', url);
            link.setAttribute('download', `Maschinen_Export_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            alert('Maschinendaten erfolgreich exportiert!');
            
        } catch (error) {
            console.error('‚ùå Export-Fehler:', error);
            alert('Fehler beim Exportieren der Daten: ' + error.message);
        }
    }

    generateMachineCSV() {
        const headers = [
            'ID', 'Name', 'Typ', 'Standort', 'Abteilung', 'Status', 
            'Bemerkungen', 'T√úV-konform', 'Erstellt am', 'Ge√§ndert am'
        ];
        
        const rows = this.machines.map(machine => [
            machine.id,
            machine.name,
            machine.type,
            machine.location || '',
            this.getDepartmentName(machine.department),
            machine.status,
            machine.notes || '',
            machine.isProfessional ? 'Ja' : 'Nein',
            machine.createdAt ? new Date(machine.createdAt).toLocaleDateString('de-DE') : '',
            machine.updatedAt ? new Date(machine.updatedAt).toLocaleDateString('de-DE') : ''
        ]);
        
        const csvContent = [headers, ...rows]
            .map(row => row.map(field => `"${field}"`).join(','))
            .join('\n');
            
        return csvContent;
    }

    validateMachineData(machineData) {
        const errors = [];
        
        // Required field validation
        if (!machineData.name || machineData.name.trim() === '') {
            errors.push('Maschinenbezeichnung ist erforderlich');
        }
        
        if (!machineData.type || machineData.type.trim() === '') {
            errors.push('Maschinentyp ist erforderlich');
        }
        
        if (!machineData.department) {
            errors.push('Abteilung ist erforderlich');
        }
        
        // Check for duplicate machine names
        const existingMachine = this.machines.find(m => 
            m.name.toLowerCase() === machineData.name.toLowerCase() && 
            m.id !== machineData.id
        );
        
        if (existingMachine) {
            errors.push('Eine Maschine mit diesem Namen existiert bereits');
        }
        
        // Validate department exists
        if (machineData.department) {
            const departmentExists = this.departments.find(d => d.id === machineData.department);
            if (!departmentExists) {
                errors.push('Gew√§hlte Abteilung existiert nicht');
            }
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }

    generateMachineReport() {
        console.log('üìä Generiere Maschinenbericht...');
        
        const report = {
            generatedAt: new Date().toISOString(),
            totalMachines: this.machines.length,
            statusDistribution: this.getStatusDistribution(),
            departmentDistribution: this.getDepartmentDistribution(),
            professionalMachines: this.machines.filter(m => m.isProfessional).length,
            averageAge: this.calculateAverageMachineAge(),
            summary: this.generateMachineSummary()
        };
        
        this.displayMachineReport(report);
        return report;
    }

    getStatusDistribution() {
        const distribution = {};
        this.machines.forEach(machine => {
            const status = machine.status;
            distribution[status] = (distribution[status] || 0) + 1;
        });
        return distribution;
    }

    getDepartmentDistribution() {
        const distribution = {};
        this.machines.forEach(machine => {
            const deptName = this.getDepartmentName(machine.department);
            distribution[deptName] = (distribution[deptName] || 0) + 1;
        });
        return distribution;
    }

    calculateAverageMachineAge() {
        if (this.machines.length === 0) return 0;
        
        const now = new Date();
        const totalAge = this.machines.reduce((sum, machine) => {
            if (machine.createdAt) {
                const createdDate = new Date(machine.createdAt);
                const ageInDays = Math.floor((now - createdDate) / (1000 * 60 * 60 * 24));
                return sum + ageInDays;
            }
            return sum;
        }, 0);
        
        return Math.floor(totalAge / this.machines.length);
    }

    generateMachineSummary() {
        const total = this.machines.length;
        const professional = this.machines.filter(m => m.isProfessional).length;
        const running = this.machines.filter(m => m.status === 'In Betrieb' || m.status === 'running').length;
        const issues = this.machines.filter(m => m.status === 'St√∂rung' || m.status === 'issue').length;
        
        return {
            total,
            professional,
            professionalPercentage: total > 0 ? Math.round((professional / total) * 100) : 0,
            running,
            runningPercentage: total > 0 ? Math.round((running / total) * 100) : 0,
            issues,
            issuePercentage: total > 0 ? Math.round((issues / total) * 100) : 0
        };
    }

    displayMachineReport(report) {
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 800px;">
                <div class="modal-header">
                    <h2><i class="fas fa-chart-bar"></i> Maschinenbericht</h2>
                    <button class="close-modal" onclick="this.closest('.modal').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="report-section">
                        <h3>√úbersicht</h3>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <h4>${report.totalMachines}</h4>
                                <p>Maschinen gesamt</p>
                            </div>
                            <div class="stat-card">
                                <h4>${report.professionalMachines}</h4>
                                <p>T√úV-konforme Maschinen</p>
                            </div>
                            <div class="stat-card">
                                <h4>${report.averageAge}</h4>
                                <p>Durchschn. Alter (Tage)</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="report-section">
                        <h3>Status-Verteilung</h3>
                        <div class="distribution-list">
                            ${Object.entries(report.statusDistribution)
                                .map(([status, count]) => `
                                    <div class="distribution-item">
                                        <span>${status}</span>
                                        <span>${count} Maschinen</span>
                                    </div>
                                `).join('')}
                        </div>
                    </div>
                    
                    <div class="report-section">
                        <h3>Abteilungs-Verteilung</h3>
                        <div class="distribution-list">
                            ${Object.entries(report.departmentDistribution)
                                .map(([dept, count]) => `
                                    <div class="distribution-item">
                                        <span>${dept}</span>
                                        <span>${count} Maschinen</span>
                                    </div>
                                `).join('')}
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button onclick="window.qhseDashboard.exportMachineReport()" class="btn-secondary">
                        <i class="fas fa-download"></i> Report exportieren
                    </button>
                    <button onclick="this.closest('.modal').remove()" class="btn-primary">
                        <i class="fas fa-times"></i> Schlie√üen
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }

    exportMachineReport() {
        console.log('üì§ Exportiere Maschinenbericht...');
        
        try {
            const report = {
                generatedAt: new Date().toISOString(),
                totalMachines: this.machines.length,
                statusDistribution: this.getStatusDistribution(),
                departmentDistribution: this.getDepartmentDistribution(),
                professionalMachines: this.machines.filter(m => m.isProfessional).length,
                averageAge: this.calculateAverageMachineAge(),
                machines: this.machines
            };
            
            const jsonData = JSON.stringify(report, null, 2);
            const blob = new Blob([jsonData], { type: 'application/json;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            
            link.setAttribute('href', url);
            link.setAttribute('download', `Maschinenbericht_${new Date().toISOString().split('T')[0]}.json`);
            link.style.visibility = 'hidden';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            alert('Maschinenbericht erfolgreich exportiert!');
            
        } catch (error) {
            console.error('‚ùå Export-Fehler:', error);
            alert('Fehler beim Exportieren des Berichts: ' + error.message);
        }
    }

    // ===== DOCUMENT MANAGEMENT & T√úV EXPORT FUNCTIONS =====

    setupDocumentUpload() {
        console.log('üìÅ Setup Document Upload System...');
        
        const fileInput = document.getElementById('documentFileInput');
        const uploadZone = document.getElementById('documentUploadZone');
        
        if (!fileInput || !uploadZone) return;
        
        // File input change handler
        fileInput.addEventListener('change', (e) => {
            this.handleDocumentUpload(e.target.files);
        });
        
        // Drag and drop functionality
        uploadZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadZone.classList.add('drag-over');
        });
        
        uploadZone.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('drag-over');
        });
        
        uploadZone.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('drag-over');
            this.handleDocumentUpload(e.dataTransfer.files);
        });
    }

    handleDocumentUpload(files) {
        console.log('üì§ Upload Dokumente:', files.length);
        
        const maxSize = 10 * 1024 * 1024; // 10MB
        const allowedTypes = [
            'application/pdf',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'image/jpeg',
            'image/jpg',
            'image/png',
            'image/gif'
        ];
        
        Array.from(files).forEach(file => {
            // Validate file size
            if (file.size > maxSize) {
                alert(`Datei "${file.name}" ist zu gro√ü. Maximum: 10MB`);
                return;
            }
            
            // Validate file type
            if (!allowedTypes.includes(file.type)) {
                alert(`Dateityp von "${file.name}" wird nicht unterst√ºtzt.`);
                return;
            }
            
            // Read file and store
            const reader = new FileReader();
            reader.onload = (e) => {
                const document = {
                    id: `DOC-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    content: e.target.result,
                    uploadedAt: new Date().toISOString(),
                    uploadedBy: this.getCurrentUser()?.id || 'unknown'
                };
                
                this.addDocumentToMachine(document);
            };
            
            reader.readAsDataURL(file);
        });
    }

    addDocumentToMachine(document) {
        // Initialize machine documents if not exist
        if (!this.currentMachineDocuments) {
            this.currentMachineDocuments = [];
        }
        
        this.currentMachineDocuments.push(document);
        this.renderDocumentList();
        
        console.log('‚úÖ Dokument hinzugef√ºgt:', document.name);
    }

    renderDocumentList() {
        const documentList = document.getElementById('documentList');
        if (!documentList || !this.currentMachineDocuments) return;
        
        if (this.currentMachineDocuments.length === 0) {
            documentList.innerHTML = '<p class="no-documents">Noch keine Dokumente hochgeladen</p>';
            return;
        }
        
        const documentsHtml = this.currentMachineDocuments.map(doc => `
            <div class="document-item" data-doc-id="${doc.id}">
                <div class="document-info">
                    <i class="fas ${this.getDocumentIcon(doc.type)}"></i>
                    <div class="document-details">
                        <h6>${doc.name}</h6>
                        <small>${this.formatFileSize(doc.size)} ‚Ä¢ ${new Date(doc.uploadedAt).toLocaleDateString('de-DE')}</small>
                    </div>
                </div>
                <div class="document-actions">
                    <button type="button" class="btn-view" onclick="window.qhseDashboard.viewDocument('${doc.id}')">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button type="button" class="btn-download" onclick="window.qhseDashboard.downloadDocument('${doc.id}')">
                        <i class="fas fa-download"></i>
                    </button>
                    <button type="button" class="btn-delete" onclick="window.qhseDashboard.deleteDocument('${doc.id}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `).join('');
        
        documentList.innerHTML = documentsHtml;
    }

    getDocumentIcon(mimeType) {
        const iconMap = {
            'application/pdf': 'fa-file-pdf',
            'application/msword': 'fa-file-word',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'fa-file-word',
            'application/vnd.ms-excel': 'fa-file-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'fa-file-excel',
            'image/jpeg': 'fa-file-image',
            'image/jpg': 'fa-file-image',
            'image/png': 'fa-file-image',
            'image/gif': 'fa-file-image'
        };
        
        return iconMap[mimeType] || 'fa-file';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    viewDocument(documentId) {
        const document = this.currentMachineDocuments?.find(d => d.id === documentId);
        if (!document) return;
        
        // Open document in new window/tab
        const newWindow = window.open('', '_blank');
        if (document.type.startsWith('image/')) {
            newWindow.document.write(`
                <html>
                    <head><title>${document.name}</title></head>
                    <body style="margin:0; display:flex; justify-content:center; align-items:center; min-height:100vh; background:#f0f0f0;">
                        <img src="${document.content}" style="max-width:100%; max-height:100%;" alt="${document.name}">
                    </body>
                </html>
            `);
        } else {
            newWindow.location.href = document.content;
        }
    }

    downloadDocument(documentId) {
        const document = this.currentMachineDocuments?.find(d => d.id === documentId);
        if (!document) return;
        
        const link = document.createElement('a');
        link.href = document.content;
        link.download = document.name;
        link.click();
    }

    deleteDocument(documentId) {
        if (!confirm('Dokument wirklich l√∂schen?')) return;
        
        this.currentMachineDocuments = this.currentMachineDocuments?.filter(d => d.id !== documentId) || [];
        this.renderDocumentList();
    }

    // ===== T√úV EXPORT FUNCTIONS =====

    exportTuevCompleteReport() {
        console.log('üìã Exportiere T√úV-Komplettbericht...');
        
        const currentMachine = this.getCurrentEditingMachine();
        if (!currentMachine) {
            alert('Keine Maschine f√ºr Export ausgew√§hlt');
            return;
        }
        
        const report = this.generateTuevCompleteReport(currentMachine);
        this.downloadTextAsFile(report, `TUeV_Komplettbericht_${currentMachine.name}_${new Date().toISOString().split('T')[0]}.txt`);
    }

    generateTuevCompleteReport(machine) {
        const currentDate = new Date().toLocaleDateString('de-DE');
        
        return `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    T√úV-KONFORMER MASCHINENBERICHT
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Erstellt am: ${currentDate}
Erstellt von: ${this.getCurrentUser()?.name || 'Unbekannt'}
System: QHSE Management System v2.0

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                        GRUNDDATEN
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Maschinenbezeichnung: ${machine.name || 'N/A'}
Maschinentyp: ${machine.type || 'N/A'}
Maschinen-ID: ${machine.id || 'N/A'}
Hersteller: ${machine.grunddaten?.manufacturer || 'N/A'}
Baujahr: ${machine.grunddaten?.yearBuilt || 'N/A'}
CE-Kennzeichnung: ${machine.grunddaten?.ceMarking === 'yes' ? 'Ja ‚úì' : 'Nein ‚úó'}
Seriennummer: ${machine.grunddaten?.serialNumber || 'N/A'}

Standort: ${machine.location || 'N/A'}
Abteilung: ${this.getDepartmentName(machine.department)}
Status: ${machine.status || 'N/A'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    TECHNISCHE SPEZIFIKATIONEN
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Leistung: ${machine.technischeDaten?.power || 'N/A'} kW
Spannung: ${machine.technischeDaten?.voltage || 'N/A'} V
Frequenz: ${machine.technischeDaten?.frequency || 'N/A'} Hz
Schutzart: ${machine.technischeDaten?.protectionClass || 'N/A'}

Abmessungen:
  L√§nge: ${machine.technischeDaten?.length || 'N/A'} mm
  Breite: ${machine.technischeDaten?.width || 'N/A'} mm
  H√∂he: ${machine.technischeDaten?.height || 'N/A'} mm
  Gewicht: ${machine.technischeDaten?.weight || 'N/A'} kg

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    SICHERHEITSTECHNIK
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Not-Aus-Schalter: ${machine.sicherheit?.emergencyStops || 'N/A'}
Sicherheitskategorie: ${machine.sicherheit?.safetyCategory || 'N/A'}
Performance Level: ${machine.sicherheit?.performanceLevel || 'N/A'}

Schutzeinrichtungen:
${this.formatSafetyEquipment(machine.sicherheit)}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    WARTUNG & INSTANDHALTUNG
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

T√úV-Pr√ºfintervall: ${machine.wartung?.tuevInterval || 'N/A'} Monate
N√§chste T√úV-Pr√ºfung: ${machine.wartung?.nextTuevDate || 'N/A'}
Pr√ºforganisation: ${machine.wartung?.tuevOrganization || 'N/A'}

Wartungsintervall: ${machine.wartung?.preventiveInterval || 'N/A'} Stunden
Letzte Wartung: ${machine.wartung?.lastMaintenance || 'N/A'}
Verantwortlicher: ${machine.wartung?.maintenanceResponsible || 'N/A'}

Servicevertrag: ${machine.wartung?.serviceContract === 'yes' ? 'Ja ‚úì' : 'Nein ‚úó'}
Serviceanbieter: ${machine.wartung?.serviceProvider || 'N/A'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    RISIKOBEWERTUNG
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Gef√§hrdungsbeurteilung vom: ${machine.risiko?.riskAssessmentDate || 'N/A'}
Durchgef√ºhrt von: ${machine.risiko?.riskAssessor || 'N/A'}
Gesamtrisikobewertung: ${machine.risiko?.overallRiskLevel || 'N/A'}

Identifizierte Gef√§hrdungen:
${this.formatRiskFactors(machine.risiko)}

Schutzma√ünahmen:
${machine.risiko?.riskMitigationMeasures || 'Nicht dokumentiert'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    DOKUMENTATION
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Dokumentation vollst√§ndig: ${machine.dokumentation?.documentationComplete || 'N/A'}
Dokumentenablage: ${machine.dokumentation?.documentStorage || 'N/A'}
Verantwortlicher: ${machine.dokumentation?.documentResponsible || 'N/A'}

T√úV-Audit-bereit: ${machine.dokumentation?.auditReady || 'N/A'}
Letztes Audit: ${machine.dokumentation?.lastAudit || 'N/A'}
N√§chstes Audit: ${machine.dokumentation?.nextAudit || 'N/A'}

Hochgeladene Dokumente: ${this.currentMachineDocuments?.length || 0}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    COMPLIANCE-STATUS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚úì T√úV-konform: ${machine.isProfessional ? 'Ja' : 'Nein'}
‚úì Version: ${machine.version || '1.0'}
‚úì Erstellt: ${machine.createdAt ? new Date(machine.createdAt).toLocaleDateString('de-DE') : 'N/A'}
‚úì Letzte √Ñnderung: ${machine.updatedAt ? new Date(machine.updatedAt).toLocaleDateString('de-DE') : 'N/A'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Dieser Bericht wurde automatisch generiert durch das
QHSE Management System f√ºr Hoffmann & Voss GmbH.

Bericht-ID: ${Date.now()}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        `;
    }

    formatSafetyEquipment(sicherheit) {
        if (!sicherheit) return '  Keine Daten verf√ºgbar';
        
        let equipment = [];
        if (sicherheit.mechanicalSafety) equipment.push('  ‚Ä¢ Mechanische Schutzeinrichtungen');
        if (sicherheit.interlockSafety) equipment.push('  ‚Ä¢ Verriegelungseinrichtungen');
        if (sicherheit.switchingSafety) equipment.push('  ‚Ä¢ Schaltende Schutzeinrichtungen');
        
        return equipment.length > 0 ? equipment.join('\n') : '  Keine Schutzeinrichtungen dokumentiert';
    }

    formatRiskFactors(risiko) {
        if (!risiko) return '  Keine Risikobewertung verf√ºgbar';
        
        let risks = [];
        if (risiko.mechanicalRisks) risks.push('  ‚Ä¢ Mechanische Gef√§hrdungen');
        if (risiko.electricalRisks) risks.push('  ‚Ä¢ Elektrische Gef√§hrdungen');
        if (risiko.thermalRisks) risks.push('  ‚Ä¢ Thermische Gef√§hrdungen');
        if (risiko.noiseRisks) risks.push('  ‚Ä¢ L√§rm & Vibration');
        
        return risks.length > 0 ? risks.join('\n') : '  Keine Gef√§hrdungen identifiziert';
    }

    getCurrentEditingMachine() {
        // Get machine data from currently open modal
        const modal = document.getElementById('addMachineModal') || document.getElementById('editMachineModal');
        if (!modal) return null;
        
        const machineData = this.collectMachineFormData(modal);
        return machineData ? {
            name: machineData.grunddaten?.name || 'Unbekannte Maschine',
            type: machineData.grunddaten?.type || 'Unbekannter Typ',
            id: machineData.grunddaten?.id || 'TEMP-ID',
            ...machineData,
            isProfessional: true,
            version: '2.0'
        } : null;
    }

    exportComplianceChecklist() {
        console.log('üìã Exportiere Compliance-Checkliste...');
        
        const checklist = this.generateComplianceChecklist();
        this.downloadTextAsFile(checklist, `Compliance_Checkliste_${new Date().toISOString().split('T')[0]}.txt`);
    }

    generateComplianceChecklist() {
        return `
T√úV-COMPLIANCE CHECKLISTE f√ºr Maschinenaudit
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Datum: ${new Date().toLocaleDateString('de-DE')}
Pr√ºfer: ________________________
Maschine: ______________________

GRUNDANFORDERUNGEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚òê CE-Kennzeichnung vorhanden und lesbar
‚òê EG-Konformit√§tserkl√§rung verf√ºgbar
‚òê Betriebsanleitung in deutscher Sprache vorhanden
‚òê Typenschild mit allen erforderlichen Angaben
‚òê Seriennummer eindeutig und dauerhaft angebracht

DOKUMENTATION:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚òê Gef√§hrdungsbeurteilung durchgef√ºhrt und dokumentiert
‚òê Aufstellungsbescheinigung vorhanden
‚òê Abnahmeprotokoll verf√ºgbar
‚òê Pr√ºfb√ºcher/Pr√ºfprotokolle vollst√§ndig
‚òê Wartungsnachweis gef√ºhrt
‚òê Einweisungsnachweise f√ºr Bedienpersonal

SICHERHEITSTECHNIK:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚òê Not-Aus-Einrichtungen funktionsf√§hig und erreichbar
‚òê Schutzeinrichtungen vollst√§ndig und wirksam
‚òê Verriegelungseinrichtungen funktionsf√§hig
‚òê Sicherheitskategorie entspricht Risikobewertung
‚òê Performance Level erreicht erforderlichen PLr-Wert
‚òê Schaltende Schutzeinrichtungen (Lichtvorhang, etc.) funktionst√ºchtig

ELEKTRISCHE SICHERHEIT:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚òê Elektrische Ausr√ºstung entspricht VDE-Bestimmungen
‚òê Schutzleiter ordnungsgem√§√ü angeschlossen
‚òê FI/RCD-Schutz vorhanden und funktionsf√§hig
‚òê Isolationswiderstand ausreichend
‚òê Schutzart IP-Rating entspricht Umgebungsbedingungen

WARTUNG & PR√úFUNGEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚òê Wiederkehrende Pr√ºfungen termingerecht durchgef√ºhrt
‚òê Pr√ºffristen eingehalten
‚òê M√§ngel umgehend behoben
‚òê Wartungsintervalle eingehalten
‚òê Ersatzteilversorgung gesichert

BETRIEB:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚òê Bestimmungsgem√§√üe Verwendung sichergestellt
‚òê Qualifiziertes Personal eingesetzt
‚òê Arbeitsplatzgrenzwerte eingehalten
‚òê Pers√∂nliche Schutzausr√ºstung verf√ºgbar
‚òê Betriebsanweisung am Arbeitsplatz verf√ºgbar

FESTGESTELLTE M√ÑNGEL:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

_________________________________________________________________

_________________________________________________________________

_________________________________________________________________

_________________________________________________________________

GESAMTBEWERTUNG:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚òê Ohne M√§ngel
‚òê Geringf√ºgige M√§ngel
‚òê Erhebliche M√§ngel
‚òê Gef√§hrliche M√§ngel - Sofortma√ünahmen erforderlich

Unterschrift Pr√ºfer: _________________________ Datum: __________

Unterschrift Betreiber: _______________________ Datum: __________
        `;
    }

    exportDocumentIndex() {
        console.log('üìÇ Exportiere Dokumentenverzeichnis...');
        
        const index = this.generateDocumentIndex();
        this.downloadTextAsFile(index, `Dokumentenverzeichnis_${new Date().toISOString().split('T')[0]}.txt`);
    }

    generateDocumentIndex() {
        const documents = this.currentMachineDocuments || [];
        
        let index = `
DOKUMENTENVERZEICHNIS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Maschine: ${this.getCurrentEditingMachine()?.name || 'Unbekannt'}
Erstellt: ${new Date().toLocaleDateString('de-DE')}
Anzahl Dokumente: ${documents.length}

√úBERSICHT ALLER DOKUMENTE:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

`;

        if (documents.length === 0) {
            index += "Keine Dokumente hochgeladen.\n";
        } else {
            documents.forEach((doc, index_num) => {
                index += `${index_num + 1}. ${doc.name}
   Typ: ${this.getFileTypeDescription(doc.type)}
   Gr√∂√üe: ${this.formatFileSize(doc.size)}
   Hochgeladen: ${new Date(doc.uploadedAt).toLocaleDateString('de-DE')}
   Von: ${doc.uploadedBy}

`;
            });
        }

        index += `
PFLICHTDOKUMENTE-STATUS:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚òê EG-Konformit√§tserkl√§rung
‚òê Betriebsanleitung (deutsch)
‚òê Gef√§hrdungsbeurteilung
‚òê Aufstellungsbescheinigung
‚òê Abnahmeprotokoll
‚òê Pr√ºfb√ºcher/-protokolle
‚òê Wartungsnachweis
‚òê Einweisungsnachweise

Hinweis: Bitte markieren Sie vorhandene Dokumente mit ‚úì
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        `;

        return index;
    }

    getFileTypeDescription(mimeType) {
        const typeMap = {
            'application/pdf': 'PDF-Dokument',
            'application/msword': 'Word-Dokument',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word-Dokument',
            'application/vnd.ms-excel': 'Excel-Tabelle',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Excel-Tabelle',
            'image/jpeg': 'JPEG-Bild',
            'image/jpg': 'JPEG-Bild',
            'image/png': 'PNG-Bild',
            'image/gif': 'GIF-Bild'
        };
        
        return typeMap[mimeType] || 'Unbekannter Dateityp';
    }

    exportMaintenanceSchedule() {
        console.log('üìÖ Exportiere Wartungsplan...');
        
        const schedule = this.generateMaintenanceSchedule();
        this.downloadTextAsFile(schedule, `Wartungsplan_${new Date().toISOString().split('T')[0]}.txt`);
    }

    generateMaintenanceSchedule() {
        const machine = this.getCurrentEditingMachine();
        const currentDate = new Date();
        
        return `
WARTUNGSPLAN
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Maschine: ${machine?.name || 'Unbekannt'}
Erstellt: ${currentDate.toLocaleDateString('de-DE')}

T√úV-PR√úFUNGEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Pr√ºfintervall: ${machine?.wartung?.tuevInterval || 'N/A'} Monate
N√§chste Pr√ºfung: ${machine?.wartung?.nextTuevDate || 'N/A'}
Pr√ºforganisation: ${machine?.wartung?.tuevOrganization || 'N/A'}

VORBEUGENDE WARTUNG:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Wartungsintervall: ${machine?.wartung?.preventiveInterval || 'N/A'} Betriebsstunden
Letzte Wartung: ${machine?.wartung?.lastMaintenance || 'N/A'}
Verantwortlicher: ${machine?.wartung?.maintenanceResponsible || 'N/A'}

WARTUNGSAUFGABEN:
${machine?.wartung?.maintenanceTasks || 'Keine Aufgaben definiert'}

SERVICE:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Servicevertrag: ${machine?.wartung?.serviceContract === 'yes' ? 'Ja' : 'Nein'}
Serviceanbieter: ${machine?.wartung?.serviceProvider || 'N/A'}
Ersatzteilversorgung: ${machine?.wartung?.sparePartsAvailable || 'N/A'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        `;
    }

    exportRiskAssessment() {
        console.log('‚ö†Ô∏è Exportiere Gef√§hrdungsbeurteilung...');
        
        const assessment = this.generateRiskAssessment();
        this.downloadTextAsFile(assessment, `Gefaehrdungsbeurteilung_${new Date().toISOString().split('T')[0]}.txt`);
    }

    generateRiskAssessment() {
        const machine = this.getCurrentEditingMachine();
        
        return `
GEF√ÑHRDUNGSBEURTEILUNG
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Maschine: ${machine?.name || 'Unbekannt'}
Datum: ${machine?.risiko?.riskAssessmentDate || new Date().toLocaleDateString('de-DE')}
Durchgef√ºhrt von: ${machine?.risiko?.riskAssessor || 'N/A'}

IDENTIFIZIERTE GEF√ÑHRDUNGEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

${this.formatRiskFactors(machine?.risiko)}

RISIKOBEWERTUNG:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Gesamtrisikobewertung: ${machine?.risiko?.overallRiskLevel || 'N/A'}

SCHUTZMASSNAHMEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
${machine?.risiko?.riskMitigationMeasures || 'Keine Schutzma√ünahmen dokumentiert'}

TECHNISCHE SCHUTZMASSNAHMEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
${this.formatSafetyEquipment(machine?.sicherheit)}

Performance Level: ${machine?.sicherheit?.performanceLevel || 'N/A'}
Sicherheitskategorie: ${machine?.sicherheit?.safetyCategory || 'N/A'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        `;
    }

    exportTechnicalDataSheet() {
        console.log('‚öôÔ∏è Exportiere Technisches Datenblatt...');
        
        const dataSheet = this.generateTechnicalDataSheet();
        this.downloadTextAsFile(dataSheet, `Technisches_Datenblatt_${new Date().toISOString().split('T')[0]}.txt`);
    }

    generateTechnicalDataSheet() {
        const machine = this.getCurrentEditingMachine();
        
        return `
TECHNISCHES DATENBLATT
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Maschinenbezeichnung: ${machine?.name || 'N/A'}
Maschinentyp: ${machine?.type || 'N/A'}
Hersteller: ${machine?.grunddaten?.manufacturer || 'N/A'}
Baujahr: ${machine?.grunddaten?.yearBuilt || 'N/A'}
Seriennummer: ${machine?.grunddaten?.serialNumber || 'N/A'}

ELEKTRISCHE DATEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Nennleistung: ${machine?.technischeDaten?.power || 'N/A'} kW
Nennspannung: ${machine?.technischeDaten?.voltage || 'N/A'} V
Frequenz: ${machine?.technischeDaten?.frequency || 'N/A'} Hz
Nennstrom: ${machine?.technischeDaten?.current || 'N/A'} A
Schutzart: ${machine?.technischeDaten?.protectionClass || 'N/A'}

MECHANISCHE DATEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
L√§nge: ${machine?.technischeDaten?.length || 'N/A'} mm
Breite: ${machine?.technischeDaten?.width || 'N/A'} mm
H√∂he: ${machine?.technischeDaten?.height || 'N/A'} mm
Gewicht: ${machine?.technischeDaten?.weight || 'N/A'} kg

BETRIEBSDATEN:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Max. Arbeitstemperatur: ${machine?.technischeDaten?.maxTemp || 'N/A'} ¬∞C
Min. Arbeitstemperatur: ${machine?.technischeDaten?.minTemp || 'N/A'} ¬∞C
Betriebsdruck: ${machine?.technischeDaten?.operatingPressure || 'N/A'} bar
Durchsatz: ${machine?.technischeDaten?.throughput || 'N/A'}

NORMEN & STANDARDS:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
CE-Kennzeichnung: ${machine?.grunddaten?.ceMarking === 'yes' ? 'Ja ‚úì' : 'Nein ‚úó'}
Angewandte Normen: ${machine?.compliance?.appliedStandards || 'N/A'}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        `;
    }

    downloadTextAsFile(content, filename) {
        const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        URL.revokeObjectURL(url);
        
        alert(`${filename} wurde erfolgreich heruntergeladen!`);
    }

    setupMaintenancePlanning() {
        this.renderMaintenanceCalendar();
        this.updateMaintenanceOverview();
    }

    renderMaintenanceCalendar() {
        const calendar = document.getElementById('maintenanceCalendar');
        if (!calendar) return;

        const today = new Date();
        const year = today.getFullYear();
        const month = today.getMonth();
        
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay());

        let calendarHtml = '<div class="calendar-weekheader">';
        const weekdays = ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'];
        weekdays.forEach(day => {
            calendarHtml += `<div class="weekday">${day}</div>`;
        });
        calendarHtml += '</div><div class="calendar-days">';

        for (let i = 0; i < 42; i++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + i);
            
            const isCurrentMonth = currentDate.getMonth() === month;
            const isToday = currentDate.toDateString() === today.toDateString();
            
            const dayClass = [
                'calendar-day',
                isCurrentMonth ? 'current-month' : 'other-month',
                isToday ? 'today' : ''
            ].filter(Boolean).join(' ');

            calendarHtml += `
                <div class="${dayClass}" data-date="${currentDate.toISOString().split('T')[0]}">
                    <span class="day-number">${currentDate.getDate()}</span>
                </div>
            `;
        }

        calendarHtml += '</div>';
        calendar.innerHTML = calendarHtml;
    }

    updateMaintenanceOverview() {
        const overdueEl = document.getElementById('overdueCount');
        const weekEl = document.getElementById('weekCount');
        const monthEl = document.getElementById('monthCount');

        if (overdueEl) overdueEl.textContent = '0';
        if (weekEl) weekEl.textContent = '0';
        if (monthEl) monthEl.textContent = '0';
    }

    setupIssueReporting() {
        const reportIssueBtn = document.getElementById('reportIssueBtn');
        if (reportIssueBtn) {
            reportIssueBtn.addEventListener('click', () => this.showReportIssueModal());
        }

        // Setup filter listeners
        const statusFilter = document.getElementById('issueStatusFilter');
        const priorityFilter = document.getElementById('issuePriorityFilter');
        
        if (statusFilter) {
            statusFilter.addEventListener('change', () => this.renderIssuesList());
        }
        
        if (priorityFilter) {
            priorityFilter.addEventListener('change', () => this.renderIssuesList());
        }

        this.renderIssuesList();
        this.updateIssueStats();
    }

    showReportIssueModal(machineId = null) {
        console.log('üö® showReportIssueModal() aufgerufen mit Maschinen-ID:', machineId);
        console.log('üö® Verf√ºgbare Maschinen:', this.machines);
        console.log('üö® Maschinen Anzahl:', this.machines ? this.machines.length : 'undefined');
        
        // Remove existing modals to prevent duplicate IDs
        const existingModal = document.getElementById('reportIssueModal');
        if (existingModal) existingModal.remove();
        
        // Check if machines exist
        const machineOptions = this.machines && this.machines.length > 0 
            ? this.machines.map(machine => `<option value="${machine.id}">${machine.name} (${machine.type || 'Unbekannt'})</option>`).join('')
            : '<option value="no-machine">Keine Maschinen verf√ºgbar - Bitte erst Maschinen anlegen</option>';

        const modalHtml = `
            <div id="reportIssueModal" class="modal active">
                <div class="modal-content enterprise-issue-modal ultra-professional">
                    <div class="modal-header enterprise-header">
                        <div class="header-content">
                            <div class="header-title-section">
                                <div class="title-with-animation">
                                    <i class="fas fa-exclamation-triangle pulse-animation"></i>
                                    <h2>Enterprise St√∂rungsmeldesystem</h2>
                                    <div class="live-status-indicator"></div>
                                </div>
                                <div class="system-info">
                                    <span class="timestamp" id="systemTimestamp">${new Date().toLocaleString('de-DE')}</span>
                                    <span class="user-info">Benutzer: ${this.getCurrentUser()?.displayName || 'Unbekannt'}</span>
                                </div>
                            </div>
                            <div class="header-badges advanced-badges">
                                <span class="version-badge premium">v4.0 Enterprise Max</span>
                                <span class="priority-indicator" id="priorityIndicator">üü¢ Standard</span>
                                <span class="machine-indicator" id="machineIndicator">${machineId ? 'Maschine vorausgew√§hlt' : 'Maschine w√§hlen'}</span>
                                <span class="ai-status-badge" id="aiStatusBadge">ü§ñ AI Ready</span>
                            </div>
                        </div>
                        <div class="header-actions">
                            <button class="minimize-btn" onclick="window.qhseDashboard.minimizeModal()" title="Minimieren">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button class="fullscreen-btn" onclick="window.qhseDashboard.toggleFullscreen()" title="Vollbild">
                                <i class="fas fa-expand"></i>
                            </button>
                            <span class="close" onclick="this.closest('.modal').remove()" title="Schlie√üen">&times;</span>
                        </div>
                    </div>
                    <div class="modal-body">
                        ${this.machines && this.machines.length === 0 ? `
                            <div class="alert alert-warning" style="background: #fef3c7; border: 1px solid #f59e0b; border-radius: 0.5rem; padding: 1rem; margin-bottom: 1rem;">
                                <h4 style="color: #d97706; margin-bottom: 0.5rem;"><i class="fas fa-exclamation-triangle"></i> Keine Maschinen verf√ºgbar</h4>
                                <p style="color: #92400e; margin-bottom: 0;">Sie m√ºssen zuerst Maschinen im Bereich "Maschinen" anlegen, bevor Sie St√∂rungen melden k√∂nnen.</p>
                            </div>
                        ` : ''}
                        
                        <!-- Advanced Action Dashboard -->
                        <div class="advanced-action-dashboard">
                            <div class="dashboard-section quick-templates">
                                <h4><i class="fas fa-magic"></i> Smart Templates</h4>
                                <div class="template-grid">
                                    <button type="button" class="template-btn hydraulic" onclick="window.qhseDashboard.fillQuickTemplate('hydraulic')">
                                        <div class="template-icon"><i class="fas fa-tint"></i></div>
                                        <div class="template-info">
                                            <span class="template-name">Hydraulik</span>
                                            <span class="template-desc">Pumpen, Ventile, Leckage</span>
                                        </div>
                                        <div class="template-indicator">üîß</div>
                                    </button>
                                    <button type="button" class="template-btn electrical" onclick="window.qhseDashboard.fillQuickTemplate('electrical')">
                                        <div class="template-icon"><i class="fas fa-bolt"></i></div>
                                        <div class="template-info">
                                            <span class="template-name">Elektrik</span>
                                            <span class="template-desc">Stromausfall, Kurzschluss</span>
                                        </div>
                                        <div class="template-indicator">‚ö°</div>
                                    </button>
                                    <button type="button" class="template-btn mechanical" onclick="window.qhseDashboard.fillQuickTemplate('mechanical')">
                                        <div class="template-icon"><i class="fas fa-cog"></i></div>
                                        <div class="template-info">
                                            <span class="template-name">Mechanik</span>
                                            <span class="template-desc">Verschlei√ü, Vibration</span>
                                        </div>
                                        <div class="template-indicator">üî©</div>
                                    </button>
                                    <button type="button" class="template-btn software" onclick="window.qhseDashboard.fillQuickTemplate('software')">
                                        <div class="template-icon"><i class="fas fa-laptop-code"></i></div>
                                        <div class="template-info">
                                            <span class="template-name">Software</span>
                                            <span class="template-desc">Systemfehler, Absturz</span>
                                        </div>
                                        <div class="template-indicator">üíª</div>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="dashboard-section ai-tools">
                                <h4><i class="fas fa-robot"></i> AI-Assistenten</h4>
                                <div class="ai-tools-grid">
                                    <button type="button" class="ai-btn voice" onclick="window.qhseDashboard.enableAdvancedVoiceInput()">
                                        <i class="fas fa-microphone"></i>
                                        <span>Sprach-AI</span>
                                        <div class="ai-status">üü¢ Bereit</div>
                                    </button>
                                    <button type="button" class="ai-btn camera" onclick="window.qhseDashboard.enableSmartCamera()">
                                        <i class="fas fa-camera-retro"></i>
                                        <span>Foto-AI</span>
                                        <div class="ai-status">üü¢ Bereit</div>
                                    </button>
                                    <button type="button" class="ai-btn analyzer" onclick="window.qhseDashboard.startRealTimeAnalysis()">
                                        <i class="fas fa-chart-line"></i>
                                        <span>Live-Analyse</span>
                                        <div class="ai-status">üü° Standby</div>
                                    </button>
                                    <button type="button" class="ai-btn predictor" onclick="window.qhseDashboard.enablePredictiveAnalysis()">
                                        <i class="fas fa-crystal-ball"></i>
                                        <span>Prognose</span>
                                        <div class="ai-status">üü† Learning</div>
                                    </button>
                                </div>
                            </div>
                            
                            <div class="dashboard-section quick-actions">
                                <h4><i class="fas fa-lightning-bolt"></i> Express Actions</h4>
                                <div class="express-actions">
                                    <button type="button" class="express-btn emergency" onclick="window.qhseDashboard.triggerEmergencyMode()">
                                        <i class="fas fa-exclamation-circle"></i>
                                        <span>Notfall</span>
                                    </button>
                                    <button type="button" class="express-btn priority" onclick="window.qhseDashboard.setPriorityMode()">
                                        <i class="fas fa-clock"></i>
                                        <span>Eilig</span>
                                    </button>
                                    <button type="button" class="express-btn duplicate" onclick="window.qhseDashboard.duplicateLastIssue()">
                                        <i class="fas fa-copy"></i>
                                        <span>Wiederholen</span>
                                    </button>
                                    <button type="button" class="express-btn save-draft" onclick="window.qhseDashboard.saveDraft()">
                                        <i class="fas fa-save"></i>
                                        <span>Entwurf</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <form id="reportIssueForm">
                            <!-- Tab Navigation -->
                            <div class="form-tabs">
                                <button type="button" class="tab-btn active" onclick="window.qhseDashboard.switchIssueTab(event, 'basic')">
                                    <i class="fas fa-info-circle"></i> Grunddaten
                                </button>
                                <button type="button" class="tab-btn" onclick="window.qhseDashboard.switchIssueTab(event, 'details')">
                                    <i class="fas fa-list-ul"></i> Details
                                </button>
                                <button type="button" class="tab-btn" onclick="window.qhseDashboard.switchIssueTab(event, 'media')">
                                    <i class="fas fa-camera"></i> Medien
                                </button>
                                <button type="button" class="tab-btn" onclick="window.qhseDashboard.switchIssueTab(event, 'analysis')">
                                    <i class="fas fa-chart-line"></i> Analyse
                                </button>
                                <button type="button" class="tab-btn" onclick="window.qhseDashboard.switchIssueTab(event, 'workflow')">
                                    <i class="fas fa-route"></i> Workflow
                                </button>
                            </div>

                            <!-- Tab Content: Basic Info -->
                            <div id="tab-basic" class="tab-content active">
                                <div class="enterprise-grid">
                                    <div class="grid-section">
                                        <h3><i class="fas fa-cogs"></i> Maschinenauswahl</h3>
                                        <div class="form-group">
                                            <label for="issueMachine">Betroffene Maschine: *</label>
                                            <select id="issueMachine" required ${this.machines && this.machines.length === 0 ? 'disabled' : ''} onchange="window.qhseDashboard.updateMachineInfo(this.value)">
                                                <option value="">Maschine ausw√§hlen</option>
                                                ${machineOptions}
                                            </select>
                                        </div>
                                        <div id="machineInfo" class="machine-info-card" style="display: none;">
                                            <h4>Maschinendetails</h4>
                                            <div class="machine-details-grid">
                                                <div><strong>Typ:</strong> <span id="machineType">-</span></div>
                                                <div><strong>Standort:</strong> <span id="machineLocation">-</span></div>
                                                <div><strong>Status:</strong> <span id="machineStatus">-</span></div>
                                                <div><strong>Letzte Wartung:</strong> <span id="lastMaintenance">-</span></div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="grid-section">
                                        <h3><i class="fas fa-exclamation-triangle"></i> St√∂rungskategorisierung</h3>
                                        <div class="form-group">
                                            <label for="issuePriority">Priorit√§t: *</label>
                                            <select id="issuePriority" required onchange="window.qhseDashboard.updatePriorityIndicator(this.value)">
                                                <option value="">Priorit√§t ausw√§hlen</option>
                                                <option value="low">üü¢ Niedrig - Routine-Wartung ausreichend</option>
                                                <option value="medium">üü° Mittel - Bearbeitung binnen 24h</option>
                                                <option value="high">üü† Hoch - Schnelle Reaktion erforderlich</option>
                                                <option value="critical">üî¥ Kritisch - Sofortiger Produktionsstopp</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="issueCategory">St√∂rungsart: *</label>
                                            <select id="issueCategory" required>
                                                <option value="">Kategorie ausw√§hlen</option>
                                                <option value="mechanical">üîß Mechanische St√∂rung</option>
                                                <option value="electrical">‚ö° Elektrische St√∂rung</option>
                                                <option value="hydraulic">üíß Hydraulische St√∂rung</option>
                                                <option value="pneumatic">üí® Pneumatische St√∂rung</option>
                                                <option value="software">üíª Software-Problem</option>
                                                <option value="safety">üõ°Ô∏è Sicherheitsproblem</option>
                                                <option value="quality">üìè Qualit√§tsproblem</option>
                                                <option value="other">‚ùì Sonstiges</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="issueTitle">Kurzbeschreibung: *</label>
                                            <input type="text" id="issueTitle" required placeholder="z.B. Hydraulikpumpe l√§uft unregelm√§√üig" maxlength="100">
                                            <div class="character-counter"><span id="titleCounter">0</span>/100 Zeichen</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Tab Content: Details -->
                            <div id="tab-details" class="tab-content">
                                <div class="enterprise-grid">
                                    <div class="grid-section">
                                        <h3><i class="fas fa-file-alt"></i> Detaillierte Beschreibung</h3>
                                        <div class="form-group">
                                            <label for="issueDescription">St√∂rungsbeschreibung: *</label>
                                            <textarea id="issueDescription" rows="8" required placeholder="Detaillierte Beschreibung der St√∂rung:

üîç Was ist passiert?
‚è∞ Wann ist es aufgetreten?
üîÑ Unter welchen Umst√§nden?
üìä Welche Auswirkungen hat es?
üîß Wurden bereits Ma√ünahmen ergriffen?
‚ö†Ô∏è Besondere Gefahren oder Risiken?"></textarea>
                                            <div class="character-counter"><span id="descCounter">0</span>/2000 Zeichen empfohlen</div>
                                        </div>
                                        <div class="form-group">
                                            <label for="reproductionSteps">Reproduktionsschritte:</label>
                                            <textarea id="reproductionSteps" rows="4" placeholder="Schritte zur Reproduktion der St√∂rung:
1. 
2. 
3. "></textarea>
                                        </div>
                                    </div>
                                    
                                    <div class="grid-section">
                                        <h3><i class="fas fa-tools"></i> Zus√§tzliche Informationen</h3>
                                        <div class="form-group">
                                            <label for="affectedComponents">Betroffene Komponenten:</label>
                                            <input type="text" id="affectedComponents" placeholder="z.B. Hydraulikzylinder, Steuerventil">
                                        </div>
                                        <div class="form-group">
                                            <label for="errorCodes">Fehlercodes/Alarme:</label>
                                            <input type="text" id="errorCodes" placeholder="z.B. E001, ALARM_TEMP_HIGH">
                                        </div>
                                        <div class="form-group">
                                            <label for="reportedBy">St√∂rung gemeldet von:</label>
                                            <input type="text" id="reportedBy" value="${this.getCurrentUser()?.displayName || ''}" readonly>
                                        </div>
                                        <div class="form-group">
                                            <label for="contactInfo">Kontakt f√ºr R√ºckfragen:</label>
                                            <input type="text" id="contactInfo" placeholder="Telefon/E-Mail f√ºr R√ºckfragen">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Tab Content: Media -->
                            <div id="tab-media" class="tab-content">
                                <div class="media-upload-section">
                                    <h3><i class="fas fa-camera"></i> Dokumentation & Medien</h3>
                                    <div class="upload-grid">
                                        <div class="upload-area" onclick="document.getElementById('issuePhoto').click()">
                                            <i class="fas fa-camera fa-3x"></i>
                                            <p>Foto hochladen/aufnehmen</p>
                                            <small>JPG, PNG bis 10MB</small>
                                        </div>
                                        <div class="upload-area" onclick="document.getElementById('issueVideo').click()">
                                            <i class="fas fa-video fa-3x"></i>
                                            <p>Video aufnehmen</p>
                                            <small>MP4, MOV bis 50MB</small>
                                        </div>
                                        <div class="upload-area" onclick="document.getElementById('issueAudio').click()">
                                            <i class="fas fa-microphone fa-3x"></i>
                                            <p>Audionotiz</p>
                                            <small>MP3, WAV bis 10MB</small>
                                        </div>
                                        <div class="upload-area" onclick="document.getElementById('issueDocument').click()">
                                            <i class="fas fa-file-alt fa-3x"></i>
                                            <p>Dokument</p>
                                            <small>PDF, DOCX bis 20MB</small>
                                        </div>
                                    </div>
                                    <input type="file" id="issuePhoto" accept="image/*" style="display: none;" onchange="window.qhseDashboard.handleFileUpload(this, 'photo')">
                                    <input type="file" id="issueVideo" accept="video/*" style="display: none;" onchange="window.qhseDashboard.handleFileUpload(this, 'video')">
                                    <input type="file" id="issueAudio" accept="audio/*" style="display: none;" onchange="window.qhseDashboard.handleFileUpload(this, 'audio')">
                                    <input type="file" id="issueDocument" accept=".pdf,.doc,.docx" style="display: none;" onchange="window.qhseDashboard.handleFileUpload(this, 'document')">
                                    
                                    <div id="uploadedFiles" class="uploaded-files-section">
                                        <h4>Hochgeladene Dateien:</h4>
                                        <div id="filesList" class="files-list"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Tab Content: Analysis -->
                            <div id="tab-analysis" class="tab-content">
                                <div class="analysis-section">
                                    <h3><i class="fas fa-chart-line"></i> AI-Gest√ºtzte St√∂rungsanalyse</h3>
                                    <div class="analysis-grid">
                                        <div class="analysis-card">
                                            <h4><i class="fas fa-history"></i> Historische Daten</h4>
                                            <div id="historicalAnalysis">
                                                <p>Analysiere √§hnliche St√∂rungen...</p>
                                                <button type="button" onclick="window.qhseDashboard.analyzeHistoricalData()" class="btn-info">
                                                    <i class="fas fa-search"></i> √Ñhnliche F√§lle suchen
                                                </button>
                                            </div>
                                        </div>
                                        <div class="analysis-card">
                                            <h4><i class="fas fa-clock"></i> Ausfallzeit-Prognose</h4>
                                            <div id="downtimeAnalysis">
                                                <p>Gesch√§tzte Reparaturdauer: <span id="estimatedDowntime">Wird berechnet...</span></p>
                                                <p>Produktionsausfall: <span id="productionLoss">Wird berechnet...</span></p>
                                            </div>
                                        </div>
                                        <div class="analysis-card">
                                            <h4><i class="fas fa-tools"></i> Empfohlene Ma√ünahmen</h4>
                                            <div id="recommendedActions">
                                                <ul id="actionsList">
                                                    <li>Analysiere St√∂rungstyp...</li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="analysis-card">
                                            <h4><i class="fas fa-users"></i> Expertenwissen</h4>
                                            <div id="expertAdvice">
                                                <p>Empfohlene Kontakte:</p>
                                                <div id="expertContacts"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Tab Content: Workflow -->
                            <div id="tab-workflow" class="tab-content">
                                <div class="workflow-section">
                                    <h3><i class="fas fa-route"></i> Automatisierter Workflow</h3>
                                    <div class="workflow-options">
                                        <div class="workflow-card">
                                            <h4><i class="fas fa-bell"></i> Benachrichtigungen</h4>
                                            <div class="checkbox-group">
                                                <label><input type="checkbox" id="notifyMaintenance" checked> Instandhaltung benachrichtigen</label>
                                                <label><input type="checkbox" id="notifyProduction" checked> Produktionsleitung informieren</label>
                                                <label><input type="checkbox" id="notifySafety"> Arbeitssicherheit bei kritischen St√∂rungen</label>
                                                <label><input type="checkbox" id="notifyManagement"> Management bei l√§ngeren Ausf√§llen</label>
                                            </div>
                                        </div>
                                        <div class="workflow-card">
                                            <h4><i class="fas fa-calendar-alt"></i> Automatische Terminplanung</h4>
                                            <div class="checkbox-group">
                                                <label><input type="checkbox" id="scheduleRepair" checked> Reparaturtermin vorschlagen</label>
                                                <label><input type="checkbox" id="orderParts"> Ersatzteile automatisch bestellen</label>
                                                <label><input type="checkbox" id="blockMachine"> Maschine sperren bei kritischen St√∂rungen</label>
                                            </div>
                                        </div>
                                        <div class="workflow-card">
                                            <h4><i class="fas fa-file-contract"></i> Dokumentation</h4>
                                            <div class="checkbox-group">
                                                <label><input type="checkbox" id="createWorkOrder" checked> Arbeitsauftrag erstellen</label>
                                                <label><input type="checkbox" id="updateMaintLog" checked> Wartungslog aktualisieren</label>
                                                <label><input type="checkbox" id="generateReport"> St√∂rungsbericht generieren</label>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="workflow-timeline">
                                        <h4><i class="fas fa-timeline"></i> Geplanter Workflow</h4>
                                        <div id="workflowPreview" class="timeline-preview">
                                            <div class="timeline-item">
                                                <span class="timeline-time">Sofort</span>
                                                <span class="timeline-action">St√∂rungsmeldung erstellen</span>
                                            </div>
                                            <div class="timeline-item">
                                                <span class="timeline-time">+5 Min</span>
                                                <span class="timeline-action">Benachrichtigungen versenden</span>
                                            </div>
                                            <div class="timeline-item">
                                                <span class="timeline-time">+15 Min</span>
                                                <span class="timeline-action">Erste Bewertung durch Techniker</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button onclick="window.qhseDashboard.reportIssue()" class="btn-primary" ${this.machines && this.machines.length === 0 ? 'disabled' : ''}>
                            <i class="fas fa-paper-plane"></i> St√∂rung melden
                        </button>
                        <button onclick="this.closest('.modal').remove()" class="btn-secondary">
                            <i class="fas fa-times"></i> Abbrechen
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        console.log('üö® Modal HTML wird eingef√ºgt...');
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        console.log('üö® Modal wurde zur DOM hinzugef√ºgt');
        
        // Check if modal exists in DOM
        setTimeout(() => {
            const insertedModal = document.getElementById('reportIssueModal');
            console.log('üö® Modal im DOM gefunden:', !!insertedModal);
            if (insertedModal) {
                console.log('üö® Modal Klassen:', insertedModal.className);
            }
        }, 50);
        
        // Pre-select machine if provided
        if (machineId) {
            setTimeout(() => {
                const machineSelect = document.getElementById('issueMachine');
                if (machineSelect) {
                    machineSelect.value = machineId;
                    console.log('üö® Maschine vorausgew√§hlt:', machineId);
                }
            }, 100);
        }
        
        // Initialize Enterprise features
        this.initializeEnterpriseIssueFeatures();
    }

    // Enterprise Issue Features
    initializeEnterpriseIssueFeatures() {
        // Character counters
        setTimeout(() => {
            const titleInput = document.getElementById('issueTitle');
            const descInput = document.getElementById('issueDescription');
            
            if (titleInput) {
                titleInput.addEventListener('input', () => {
                    const counter = document.getElementById('titleCounter');
                    if (counter) counter.textContent = titleInput.value.length;
                });
            }
            
            if (descInput) {
                descInput.addEventListener('input', () => {
                    const counter = document.getElementById('descCounter');
                    if (counter) counter.textContent = descInput.value.length;
                });
            }
        }, 200);
    }

    switchIssueTab(event, tabName) {
        // Remove active from all tabs
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        // Add active to selected tab
        event.target.classList.add('active');
        document.getElementById(`tab-${tabName}`).classList.add('active');
    }

    updateMachineInfo(machineId) {
        const machine = this.machines.find(m => m.id === machineId);
        const machineInfo = document.getElementById('machineInfo');
        
        if (machine && machineInfo) {
            machineInfo.style.display = 'block';
            document.getElementById('machineType').textContent = machine.type || 'Unbekannt';
            document.getElementById('machineLocation').textContent = machine.location || 'Unbekannt';
            document.getElementById('machineStatus').textContent = machine.status || 'Unbekannt';
            document.getElementById('lastMaintenance').textContent = machine.lastMaintenance ? 
                new Date(machine.lastMaintenance).toLocaleDateString('de-DE') : 'Unbekannt';
        } else if (machineInfo) {
            machineInfo.style.display = 'none';
        }
        
        // Update machine indicator
        const indicator = document.getElementById('machineIndicator');
        if (indicator) {
            indicator.textContent = machine ? `${machine.name} ausgew√§hlt` : 'Maschine w√§hlen';
        }
    }

    updatePriorityIndicator(priority) {
        const indicator = document.getElementById('priorityIndicator');
        if (indicator) {
            const priorityMap = {
                'low': 'üü¢ Niedrig',
                'medium': 'üü° Mittel', 
                'high': 'üü† Hoch',
                'critical': 'üî¥ Kritisch'
            };
            indicator.textContent = priorityMap[priority] || 'üü¢ Standard';
        }
    }

    fillQuickTemplate(type) {
        const templates = {
            hydraulic: {
                title: 'Hydraulikst√∂rung',
                description: 'üîß Hydraulische St√∂rung festgestellt:\n\nüîç Symptome:\n- Unregelm√§√üige Bewegungen\n- Druckverlust\n- Leckage\n\n‚è∞ Aufgetreten: Gerade eben\nüîÑ Umst√§nde: W√§hrend normalem Betrieb\nüìä Auswirkungen: Produktionsunterbrechung',
                category: 'hydraulic',
                priority: 'medium'
            },
            electrical: {
                title: 'Elektrische St√∂rung',
                description: '‚ö° Elektrische St√∂rung aufgetreten:\n\nüîç Symptome:\n- Stromausfall\n- Kurzschluss\n- √úberhitzung\n\n‚è∞ Aufgetreten: Gerade eben\nüîÑ Umst√§nde: W√§hrend des Betriebs\nüìä Auswirkungen: Maschine nicht betriebsbereit',
                category: 'electrical',
                priority: 'high'
            },
            mechanical: {
                title: 'Mechanische St√∂rung',
                description: 'üîß Mechanische St√∂rung festgestellt:\n\nüîç Symptome:\n- Ungew√∂hnliche Ger√§usche\n- Vibration\n- Blockierung\n\n‚è∞ Aufgetreten: Gerade eben\nüîÑ Umst√§nde: W√§hrend der Produktion\nüìä Auswirkungen: Qualit√§tsprobleme',
                category: 'mechanical',
                priority: 'medium'
            },
            software: {
                title: 'Software-Problem',
                description: 'üíª Software-Problem aufgetreten:\n\nüîç Symptome:\n- Systemfehler\n- Falsche Anzeigen\n- Programmabsturz\n\n‚è∞ Aufgetreten: Gerade eben\nüîÑ Umst√§nde: Bei Programmstart\nüìä Auswirkungen: Bedienung nicht m√∂glich',
                category: 'software',
                priority: 'medium'
            }
        };
        
        const template = templates[type];
        if (template) {
            document.getElementById('issueTitle').value = template.title;
            document.getElementById('issueDescription').value = template.description;
            document.getElementById('issueCategory').value = template.category;
            document.getElementById('issuePriority').value = template.priority;
            
            // Update indicators
            this.updatePriorityIndicator(template.priority);
            
            alert(`üìã Vorlage "${template.title}" geladen!\nSie k√∂nnen die Felder nach Bedarf anpassen.`);
        }
    }

    enableVoiceInput() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            const recognition = new SpeechRecognition();
            
            recognition.lang = 'de-DE';
            recognition.continuous = false;
            recognition.interimResults = false;
            
            recognition.onstart = function() {
                alert('üé§ Sprachaufnahme gestartet. Sprechen Sie jetzt...');
            };
            
            recognition.onresult = function(event) {
                const speechResult = event.results[0][0].transcript;
                const descField = document.getElementById('issueDescription');
                if (descField) {
                    descField.value += (descField.value ? '\n\n' : '') + 'üé§ Sprachnotiz: ' + speechResult;
                }
                alert('‚úÖ Sprachaufnahme beendet und eingef√ºgt!');
            };
            
            recognition.onerror = function(event) {
                alert('‚ùå Sprachaufnahme fehlgeschlagen: ' + event.error);
            };
            
            recognition.start();
        } else {
            alert('‚ùå Sprachaufnahme wird von diesem Browser nicht unterst√ºtzt.');
        }
    }

    openCameraCapture() {
        // Try to access camera for live capture
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            alert('üì∏ Kamera-Funktion aktiviert!\nVerwenden Sie den "Foto hochladen" Button im Medien-Tab um ein Bild aufzunehmen.');
            // Switch to media tab
            this.switchIssueTab({target: document.querySelector('[onclick*="media"]')}, 'media');
        } else {
            alert('‚ùå Kamera-Zugriff wird von diesem Browser nicht unterst√ºtzt.');
        }
    }

    handleFileUpload(input, type) {
        const file = input.files[0];
        if (!file) return;
        
        const maxSizes = {
            photo: 10 * 1024 * 1024,    // 10MB
            video: 50 * 1024 * 1024,    // 50MB  
            audio: 10 * 1024 * 1024,    // 10MB
            document: 20 * 1024 * 1024  // 20MB
        };
        
        if (file.size > maxSizes[type]) {
            alert(`‚ùå Datei zu gro√ü! Maximum f√ºr ${type}: ${maxSizes[type] / (1024*1024)}MB`);
            input.value = '';
            return;
        }
        
        const filesList = document.getElementById('filesList');
        if (filesList) {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-${this.getFileIcon(type)}"></i>
                    <span class="file-name">${file.name}</span>
                    <span class="file-size">(${(file.size / 1024).toFixed(1)} KB)</span>
                </div>
                <button type="button" onclick="this.parentNode.remove()" class="remove-file-btn">
                    <i class="fas fa-times"></i>
                </button>
            `;
            filesList.appendChild(fileItem);
        }
        
        alert(`‚úÖ Datei "${file.name}" erfolgreich hochgeladen!`);
    }

    getFileIcon(type) {
        const icons = {
            photo: 'image',
            video: 'video', 
            audio: 'volume-up',
            document: 'file-alt'
        };
        return icons[type] || 'file';
    }

    analyzeHistoricalData() {
        const machineId = document.getElementById('issueMachine').value;
        const category = document.getElementById('issueCategory').value;
        
        if (!machineId || !category) {
            alert('‚ö†Ô∏è Bitte w√§hlen Sie zuerst eine Maschine und Kategorie aus.');
            return;
        }
        
        // Simulate analysis
        setTimeout(() => {
            const analysisDiv = document.getElementById('historicalAnalysis');
            if (analysisDiv) {
                analysisDiv.innerHTML = `
                    <div class="analysis-result">
                        <h5>üìä Analyse-Ergebnisse:</h5>
                        <ul>
                            <li>üîç 3 √§hnliche St√∂rungen in den letzten 6 Monaten gefunden</li>
                            <li>‚è±Ô∏è Durchschnittliche Reparaturzeit: 2,5 Stunden</li>
                            <li>üí∞ Durchschnittliche Kosten: ‚Ç¨850</li>
                            <li>üîß H√§ufigste Ursache: Verschlei√ü der Dichtungen</li>
                        </ul>
                        <button type="button" onclick="alert('üìã Detailbericht wird generiert...')" class="btn-info">
                            <i class="fas fa-download"></i> Detailbericht
                        </button>
                    </div>
                `;
            }
            
            // Update other analysis sections
            document.getElementById('estimatedDowntime').textContent = '2-4 Stunden';
            document.getElementById('productionLoss').textContent = '‚Ç¨1.200-2.400';
            
            const actionsList = document.getElementById('actionsList');
            if (actionsList) {
                actionsList.innerHTML = `
                    <li>üîß Hydraulikdichtungen pr√ºfen und ersetzen</li>
                    <li>üß™ Hydraulikfl√ºssigkeit analysieren</li>
                    <li>üìã Wartungsintervall anpassen</li>
                `;
            }
        }, 1500);
        
        alert('üîÑ Historische Datenanalyse gestartet...');
    }

    // Advanced Enterprise Functions
    minimizeModal() {
        const modal = document.getElementById('reportIssueModal');
        if (modal) {
            modal.classList.toggle('minimized');
            if (modal.classList.contains('minimized')) {
                modal.style.transform = 'scale(0.3) translateY(70vh) translateX(70vw)';
                modal.style.opacity = '0.8';
            } else {
                modal.style.transform = 'scale(1) translateY(0) translateX(0)';
                modal.style.opacity = '1';
            }
        }
    }

    toggleFullscreen() {
        const modal = document.getElementById('reportIssueModal');
        if (modal) {
            modal.classList.toggle('fullscreen');
            const icon = modal.querySelector('.fullscreen-btn i');
            if (modal.classList.contains('fullscreen')) {
                icon.className = 'fas fa-compress';
                modal.style.width = '100vw';
                modal.style.height = '100vh';
                modal.style.margin = '0';
                modal.style.borderRadius = '0';
            } else {
                icon.className = 'fas fa-expand';
                modal.style.width = '';
                modal.style.height = '';
                modal.style.margin = '';
                modal.style.borderRadius = '';
            }
        }
    }

    enableAdvancedVoiceInput() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            const recognition = new SpeechRecognition();
            
            recognition.lang = 'de-DE';
            recognition.continuous = true;
            recognition.interimResults = true;
            
            // Update AI status
            const aiStatusBadge = document.getElementById('aiStatusBadge');
            if (aiStatusBadge) aiStatusBadge.textContent = 'üé§ H√∂rt zu...';
            
            recognition.onstart = function() {
                const voiceBtn = document.querySelector('.ai-btn.voice .ai-status');
                if (voiceBtn) voiceBtn.textContent = 'üî¥ Aktiv';
                
                // Create voice visualization
                const modal = document.getElementById('reportIssueModal');
                const voiceViz = document.createElement('div');
                voiceViz.className = 'voice-visualization';
                voiceViz.innerHTML = `
                    <div class="voice-waves">
                        <div class="wave"></div>
                        <div class="wave"></div>
                        <div class="wave"></div>
                        <div class="wave"></div>
                    </div>
                    <p>üé§ Sprechen Sie jetzt... (kontinuierliche Aufnahme)</p>
                `;
                modal.appendChild(voiceViz);
            };
            
            recognition.onresult = function(event) {
                const results = Array.from(event.results);
                const transcript = results.map(result => result[0].transcript).join('');
                
                const descField = document.getElementById('issueDescription');
                if (descField) {
                    descField.value = 'üé§ Sprachaufnahme: ' + transcript;
                    
                    // Auto-analyze speech for keywords
                    window.qhseDashboard.analyzeVoiceInput(transcript);
                }
            };
            
            recognition.onend = function() {
                const voiceBtn = document.querySelector('.ai-btn.voice .ai-status');
                if (voiceBtn) voiceBtn.textContent = 'üü¢ Bereit';
                
                const voiceViz = document.querySelector('.voice-visualization');
                if (voiceViz) voiceViz.remove();
                
                if (aiStatusBadge) aiStatusBadge.textContent = 'ü§ñ AI Ready';
            };
            
            recognition.start();
        } else {
            alert('‚ùå Erweiterte Sprachaufnahme wird von diesem Browser nicht unterst√ºtzt.');
        }
    }

    analyzeVoiceInput(transcript) {
        const keywords = {
            'hydraulik': { category: 'hydraulic', priority: 'medium' },
            'elektrik': { category: 'electrical', priority: 'high' },
            'mechanik': { category: 'mechanical', priority: 'medium' },
            'software': { category: 'software', priority: 'medium' },
            'notfall': { priority: 'critical' },
            'dringend': { priority: 'high' },
            'eilig': { priority: 'high' }
        };

        const lowerTranscript = transcript.toLowerCase();
        
        for (const [keyword, settings] of Object.entries(keywords)) {
            if (lowerTranscript.includes(keyword)) {
                if (settings.category) {
                    const categorySelect = document.getElementById('issueCategory');
                    if (categorySelect) categorySelect.value = settings.category;
                }
                if (settings.priority) {
                    const prioritySelect = document.getElementById('issuePriority');
                    if (prioritySelect) {
                        prioritySelect.value = settings.priority;
                        this.updatePriorityIndicator(settings.priority);
                    }
                }
                break;
            }
        }
    }

    enableSmartCamera() {
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            const aiStatusBadge = document.getElementById('aiStatusBadge');
            if (aiStatusBadge) aiStatusBadge.textContent = 'üì∏ Kamera aktiv';

            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    // Create camera preview modal
                    const cameraModal = document.createElement('div');
                    cameraModal.className = 'camera-preview-modal';
                    cameraModal.innerHTML = `
                        <div class="camera-content">
                            <div class="camera-header">
                                <h3>üì∏ Smart Camera - AI-Analyse</h3>
                                <button onclick="this.closest('.camera-preview-modal').remove(); window.qhseDashboard.stopCamera();">‚úï</button>
                            </div>
                            <div class="camera-preview">
                                <video id="cameraVideo" autoplay playsinline></video>
                                <canvas id="captureCanvas" style="display: none;"></canvas>
                            </div>
                            <div class="camera-controls">
                                <button onclick="window.qhseDashboard.capturePhoto()" class="capture-btn">
                                    <i class="fas fa-camera"></i> Foto aufnehmen
                                </button>
                                <button onclick="window.qhseDashboard.analyzeImage()" class="analyze-btn">
                                    <i class="fas fa-search"></i> AI-Analyse
                                </button>
                            </div>
                            <div class="ai-analysis-result" id="imageAnalysisResult"></div>
                        </div>
                    `;
                    
                    document.body.appendChild(cameraModal);
                    
                    const video = document.getElementById('cameraVideo');
                    video.srcObject = stream;
                    this.currentCameraStream = stream;
                })
                .catch(err => {
                    console.error('Kamera-Zugriff fehlgeschlagen:', err);
                    alert('‚ùå Kamera-Zugriff fehlgeschlagen: ' + err.message);
                });
        } else {
            alert('‚ùå Kamera-API wird von diesem Browser nicht unterst√ºtzt.');
        }
    }

    capturePhoto() {
        const video = document.getElementById('cameraVideo');
        const canvas = document.getElementById('captureCanvas');
        const context = canvas.getContext('2d');
        
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0);
        
        canvas.toBlob(blob => {
            const file = new File([blob], `st√∂rung_foto_${Date.now()}.jpg`, { type: 'image/jpeg' });
            this.handleCapturedPhoto(file);
        }, 'image/jpeg', 0.8);
    }

    handleCapturedPhoto(file) {
        const filesList = document.getElementById('filesList');
        if (filesList) {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item captured-photo';
            fileItem.innerHTML = `
                <div class="file-info">
                    <i class="fas fa-camera text-green-500"></i>
                    <span class="file-name">${file.name}</span>
                    <span class="file-size">(${(file.size / 1024).toFixed(1)} KB)</span>
                    <span class="capture-badge">üì∏ Live-Aufnahme</span>
                </div>
                <button type="button" onclick="this.parentNode.remove()" class="remove-file-btn">
                    <i class="fas fa-times"></i>
                </button>
            `;
            filesList.appendChild(fileItem);
        }
        
        alert('‚úÖ Foto erfolgreich aufgenommen und zur St√∂rungsmeldung hinzugef√ºgt!');
    }

    analyzeImage() {
        const analysisResult = document.getElementById('imageAnalysisResult');
        if (analysisResult) {
            analysisResult.innerHTML = `
                <div class="analysis-progress">
                    <div class="progress-spinner"></div>
                    <p>ü§ñ AI analysiert Bild...</p>
                </div>
            `;
            
            // Simulate AI analysis
            setTimeout(() => {
                analysisResult.innerHTML = `
                    <div class="analysis-complete">
                        <h4>üîç AI-Bildanalyse Ergebnisse:</h4>
                        <ul class="analysis-findings">
                            <li>üîß Hydraulikkomponente erkannt</li>
                            <li>‚ö†Ô∏è √ñlleckage festgestellt</li>
                            <li>üìä Empfohlene Priorit√§t: Hoch</li>
                            <li>üõ†Ô∏è Vorgeschlagene Kategorie: Hydraulisch</li>
                        </ul>
                        <button onclick="window.qhseDashboard.applyAIRecommendations()" class="apply-recommendations-btn">
                            <i class="fas fa-magic"></i> Empfehlungen √ºbernehmen
                        </button>
                    </div>
                `;
            }, 2000);
        }
    }

    applyAIRecommendations() {
        document.getElementById('issueCategory').value = 'hydraulic';
        document.getElementById('issuePriority').value = 'high';
        document.getElementById('issueTitle').value = 'Hydraulik-Leckage erkannt (AI-analysiert)';
        document.getElementById('issueDescription').value = 'ü§ñ AI-Analyse-Ergebnis:\n\nüì∏ Automatische Bilderkennung hat eine Hydraulik-Leckage identifiziert.\nüîç Erkannte Komponenten: Hydraulikzylinder, Leitungen\n‚ö†Ô∏è Schweregrad: Hoch (aktive Leckage)\nüõ†Ô∏è Empfohlene Sofortma√ünahmen: Maschine stoppen, Bereich absichern';
        
        this.updatePriorityIndicator('high');
        
        alert('‚úÖ AI-Empfehlungen wurden automatisch √ºbernommen!');
    }

    stopCamera() {
        if (this.currentCameraStream) {
            this.currentCameraStream.getTracks().forEach(track => track.stop());
            this.currentCameraStream = null;
        }
        
        const aiStatusBadge = document.getElementById('aiStatusBadge');
        if (aiStatusBadge) aiStatusBadge.textContent = 'ü§ñ AI Ready';
    }

    startRealTimeAnalysis() {
        const analyzerBtn = document.querySelector('.ai-btn.analyzer .ai-status');
        if (analyzerBtn) analyzerBtn.textContent = 'üî¥ Aktiv';
        
        const aiStatusBadge = document.getElementById('aiStatusBadge');
        if (aiStatusBadge) aiStatusBadge.textContent = 'üìä Analysiert...';
        
        // Create real-time analysis dashboard
        const analysisPanel = document.createElement('div');
        analysisPanel.className = 'realtime-analysis-panel';
        analysisPanel.innerHTML = `
            <div class="analysis-header">
                <h4>üìä Live-Analyse Dashboard</h4>
                <button onclick="this.closest('.realtime-analysis-panel').remove(); window.qhseDashboard.stopRealTimeAnalysis();">‚úï</button>
            </div>
            <div class="analysis-metrics">
                <div class="metric">
                    <span class="metric-label">Form-Vollst√§ndigkeit:</span>
                    <div class="metric-bar">
                        <div class="metric-fill" id="completionMetric" style="width: 20%"></div>
                    </div>
                    <span class="metric-value" id="completionValue">20%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Datenqualit√§t:</span>
                    <div class="metric-bar">
                        <div class="metric-fill quality" id="qualityMetric" style="width: 85%"></div>
                    </div>
                    <span class="metric-value" id="qualityValue">85%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Automatisierung:</span>
                    <div class="metric-bar">
                        <div class="metric-fill automation" id="automationMetric" style="width: 60%"></div>
                    </div>
                    <span class="metric-value" id="automationValue">60%</span>
                </div>
            </div>
            <div class="live-suggestions" id="liveSuggestions">
                <h5>üí° Live-Empfehlungen:</h5>
                <ul>
                    <li>üìù Beschreibung zu kurz - mehr Details hinzuf√ºgen</li>
                    <li>üì∏ Foto empfohlen f√ºr bessere Dokumentation</li>
                    <li>üîß √Ñhnliche St√∂rung vor 2 Wochen - Vorlage verf√ºgbar</li>
                </ul>
            </div>
        `;
        
        const modal = document.getElementById('reportIssueModal');
        modal.appendChild(analysisPanel);
        
        // Start monitoring form changes
        this.startFormMonitoring();
    }

    startFormMonitoring() {
        const formFields = ['issueMachine', 'issuePriority', 'issueCategory', 'issueTitle', 'issueDescription'];
        
        formFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                field.addEventListener('input', () => this.updateAnalysisMetrics());
                field.addEventListener('change', () => this.updateAnalysisMetrics());
            }
        });
        
        // Update metrics every 2 seconds
        this.analysisInterval = setInterval(() => {
            this.updateAnalysisMetrics();
        }, 2000);
    }

    updateAnalysisMetrics() {
        const machineSelected = document.getElementById('issueMachine')?.value;
        const prioritySelected = document.getElementById('issuePriority')?.value;
        const categorySelected = document.getElementById('issueCategory')?.value;
        const titleLength = document.getElementById('issueTitle')?.value?.length || 0;
        const descLength = document.getElementById('issueDescription')?.value?.length || 0;
        
        let completion = 0;
        if (machineSelected) completion += 20;
        if (prioritySelected) completion += 20;
        if (categorySelected) completion += 20;
        if (titleLength > 5) completion += 20;
        if (descLength > 50) completion += 20;
        
        const quality = Math.min(100, 50 + (titleLength * 0.5) + (descLength * 0.1));
        const automation = Math.min(100, 40 + completion * 0.6);
        
        // Update UI
        const completionMetric = document.getElementById('completionMetric');
        const qualityMetric = document.getElementById('qualityMetric');
        const automationMetric = document.getElementById('automationMetric');
        const completionValue = document.getElementById('completionValue');
        const qualityValue = document.getElementById('qualityValue');
        const automationValue = document.getElementById('automationValue');
        
        if (completionMetric) completionMetric.style.width = completion + '%';
        if (qualityMetric) qualityMetric.style.width = quality + '%';
        if (automationMetric) automationMetric.style.width = automation + '%';
        if (completionValue) completionValue.textContent = completion + '%';
        if (qualityValue) qualityValue.textContent = Math.round(quality) + '%';
        if (automationValue) automationValue.textContent = Math.round(automation) + '%';
    }

    stopRealTimeAnalysis() {
        if (this.analysisInterval) {
            clearInterval(this.analysisInterval);
            this.analysisInterval = null;
        }
        
        const analyzerBtn = document.querySelector('.ai-btn.analyzer .ai-status');
        if (analyzerBtn) analyzerBtn.textContent = 'üü° Standby';
        
        const aiStatusBadge = document.getElementById('aiStatusBadge');
        if (aiStatusBadge) aiStatusBadge.textContent = 'ü§ñ AI Ready';
    }

    enablePredictiveAnalysis() {
        const predictorBtn = document.querySelector('.ai-btn.predictor .ai-status');
        if (predictorBtn) predictorBtn.textContent = 'üîÆ Aktiv';
        
        alert('üîÆ Predictive Analysis aktiviert!\n\nDas System lernt aus Ihren Eingaben und wird:\n‚Ä¢ Automatische Vervollst√§ndigung anbieten\n‚Ä¢ Wartungsintervalle optimieren\n‚Ä¢ Ausfallwahrscheinlichkeiten berechnen\n‚Ä¢ Pr√§ventive Ma√ünahmen vorschlagen');
        
        // Start predictive analysis
        setTimeout(() => {
            const modal = document.getElementById('reportIssueModal');
            const predictionPanel = document.createElement('div');
            predictionPanel.className = 'prediction-panel';
            predictionPanel.innerHTML = `
                <div class="prediction-header">
                    <h4>üîÆ Predictive Analytics</h4>
                    <button onclick="this.closest('.prediction-panel').remove();">‚úï</button>
                </div>
                <div class="predictions">
                    <div class="prediction-item">
                        <span class="prediction-icon">‚è∞</span>
                        <div class="prediction-content">
                            <strong>N√§chste Wartung:</strong>
                            <p>In 12 Tagen f√§llig (basierend auf aktueller St√∂rung)</p>
                        </div>
                    </div>
                    <div class="prediction-item">
                        <span class="prediction-icon">üí∞</span>
                        <div class="prediction-content">
                            <strong>Kostensch√§tzung:</strong>
                            <p>‚Ç¨850-1.200 (√§hnliche St√∂rungen)</p>
                        </div>
                    </div>
                    <div class="prediction-item">
                        <span class="prediction-icon">üéØ</span>
                        <div class="prediction-content">
                            <strong>Erfolgswahrscheinlichkeit:</strong>
                            <p>92% bei sofortiger Bearbeitung</p>
                        </div>
                    </div>
                </div>
            `;
            modal.appendChild(predictionPanel);
        }, 1500);
    }

    triggerEmergencyMode() {
        document.getElementById('issuePriority').value = 'critical';
        this.updatePriorityIndicator('critical');
        
        // Switch to workflow tab automatically
        this.switchIssueTab({target: document.querySelector('[onclick*="workflow"]')}, 'workflow');
        
        // Auto-select emergency options
        document.getElementById('notifySafety').checked = true;
        document.getElementById('notifyManagement').checked = true;
        document.getElementById('blockMachine').checked = true;
        
        alert('üö® NOTFALL-MODUS AKTIVIERT!\n\n‚Ä¢ Priorit√§t auf KRITISCH gesetzt\n‚Ä¢ Sicherheitsbeauftragte werden benachrichtigt\n‚Ä¢ Management wird informiert\n‚Ä¢ Maschine wird automatisch gesperrt');
    }

    setPriorityMode() {
        document.getElementById('issuePriority').value = 'high';
        this.updatePriorityIndicator('high');
        
        document.getElementById('notifyMaintenance').checked = true;
        document.getElementById('scheduleRepair').checked = true;
        
        alert('‚ö° EILIG-MODUS AKTIVIERT!\n\n‚Ä¢ Priorit√§t auf HOCH gesetzt\n‚Ä¢ Instandhaltung wird sofort benachrichtigt\n‚Ä¢ Reparaturtermin wird priorisiert');
    }

    duplicateLastIssue() {
        const lastIssue = this.issues && this.issues.length > 0 ? this.issues[this.issues.length - 1] : null;
        
        if (lastIssue) {
            document.getElementById('issueMachine').value = lastIssue.machineId || '';
            document.getElementById('issuePriority').value = lastIssue.priority || '';
            document.getElementById('issueCategory').value = lastIssue.category || '';
            document.getElementById('issueTitle').value = '[KOPIE] ' + (lastIssue.title || '');
            document.getElementById('issueDescription').value = lastIssue.description || '';
            
            this.updatePriorityIndicator(lastIssue.priority);
            this.updateMachineInfo(lastIssue.machineId);
            
            alert('üìã Letzte St√∂rungsmeldung wurde als Vorlage geladen!\nPassen Sie die Details entsprechend an.');
        } else {
            alert('‚ÑπÔ∏è Keine vorherige St√∂rungsmeldung zum Kopieren verf√ºgbar.');
        }
    }

    saveDraft() {
        const draftData = {
            machineId: document.getElementById('issueMachine')?.value,
            priority: document.getElementById('issuePriority')?.value,
            category: document.getElementById('issueCategory')?.value,
            title: document.getElementById('issueTitle')?.value,
            description: document.getElementById('issueDescription')?.value,
            timestamp: new Date().toISOString(),
            userId: this.getCurrentUser()?.id
        };
        
        localStorage.setItem('qhse_issue_draft', JSON.stringify(draftData));
        
        alert('üíæ Entwurf erfolgreich gespeichert!\n\nSie k√∂nnen sp√§ter zur Bearbeitung zur√ºckkehren.');
    }

    reportIssue() {
        console.log('reportIssue() aufgerufen');
        
        try {
            // Validierung der Pflichtfelder
            const machineId = document.getElementById('issueMachine')?.value;
            const priority = document.getElementById('issuePriority')?.value;
            const title = document.getElementById('issueTitle')?.value?.trim();
            const description = document.getElementById('issueDescription')?.value?.trim();

            console.log('Formular-Daten:', { machineId, priority, title, description });

            // Check if machines are available
            if (!this.machines || this.machines.length === 0) {
                alert('Es sind keine Maschinen verf√ºgbar. Bitte legen Sie zuerst Maschinen im Bereich "Maschinen" an.');
                return;
            }

            if (!machineId || machineId === 'no-machine') {
                alert('Bitte w√§hlen Sie eine g√ºltige Maschine aus.');
                return;
            }

            if (!priority) {
                alert('Bitte w√§hlen Sie eine Priorit√§t aus.');
                return;
            }

            if (!title) {
                alert('Bitte geben Sie einen Titel f√ºr die St√∂rung ein.');
                return;
            }

            if (!description) {
                alert('Bitte geben Sie eine Beschreibung der St√∂rung ein.');
                return;
            }

            // Handle photo upload if present
            const photoInput = document.getElementById('issuePhoto');
            
            if (photoInput && photoInput.files.length > 0) {
                const file = photoInput.files[0];
                
                // Check file size (max 10MB)
                if (file.size > 10 * 1024 * 1024) {
                    alert('Das Foto ist zu gro√ü. Maximale Dateigr√∂√üe: 10MB');
                    return;
                }
                
                // Check file type
                if (!file.type.startsWith('image/')) {
                    alert('Bitte w√§hlen Sie eine g√ºltige Bilddatei aus.');
                    return;
                }
                
                console.log('Lade Foto:', file.name, file.size, 'bytes');
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    console.log('Foto geladen, erstelle St√∂rung mit Foto');
                    this.createIssueWithPhoto(machineId, priority, title, description, e.target.result);
                };
                reader.onerror = (e) => {
                    console.error('Fehler beim Laden des Fotos:', e);
                    alert('Fehler beim Laden des Fotos. St√∂rung wird ohne Foto erstellt.');
                    this.createIssueWithPhoto(machineId, priority, title, description, null);
                };
                reader.readAsDataURL(file);
            } else {
                console.log('Erstelle St√∂rung ohne Foto');
                this.createIssueWithPhoto(machineId, priority, title, description, null);
            }
            
        } catch (error) {
            console.error('Fehler in reportIssue():', error);
            alert('Fehler beim Melden der St√∂rung: ' + error.message);
        }
    }

    createIssueWithPhoto(machineId, priority, title, description, photoData) {
        try {
            console.log('createIssueWithPhoto() aufgerufen mit:', { machineId, priority, title, description, hasPhoto: !!photoData });
            
            const issue = {
                id: Date.now().toString(),
                machineId: machineId,
                priority: priority,
                title: title,
                description: description,
                photo: photoData,
                status: 'open',
                reportedAt: new Date().toISOString(),
                reportedBy: this.currentUserId || 'unknown',
                updatedAt: new Date().toISOString(),
                updatedBy: this.currentUserId || 'unknown'
            };

            console.log('Erstelle Issue:', issue);

            // Initialize issues array if it doesn't exist
            if (!Array.isArray(this.issues)) {
                this.issues = [];
                console.log('Issues Array initialisiert');
            }

            this.issues.push(issue);
            console.log('Issue zu Array hinzugef√ºgt. Anzahl Issues:', this.issues.length);
            
            this.saveIssuesToStorage();
            console.log('Issues in LocalStorage gespeichert');
            
            this.renderIssuesList();
            this.updateIssueStats();
            
            // Close modal
            const modal = document.getElementById('reportIssueModal');
            if (modal) {
                modal.remove();
            }
            
            alert('St√∂rung erfolgreich gemeldet!');
            
        } catch (error) {
            console.error('Fehler beim Erstellen der St√∂rung:', error);
            alert('Fehler beim Erstellen der St√∂rung: ' + error.message);
        }
    }

    renderIssuesList() {
        const container = document.getElementById('issuesList');
        if (!container) return;

        if (this.issues.length === 0) {
            container.innerHTML = '<p class="no-data">Keine St√∂rungen gemeldet</p>';
            return;
        }

        // Apply filters
        const statusFilter = document.getElementById('issueStatusFilter')?.value || '';
        const priorityFilter = document.getElementById('issuePriorityFilter')?.value || '';

        let filteredIssues = this.issues;
        if (statusFilter) {
            filteredIssues = filteredIssues.filter(issue => issue.status === statusFilter);
        }
        if (priorityFilter) {
            filteredIssues = filteredIssues.filter(issue => issue.priority === priorityFilter);
        }

        // Sort by priority and date (critical first, then by date)
        filteredIssues.sort((a, b) => {
            const priorityOrder = { 'critical': 0, 'high': 1, 'medium': 2, 'low': 3 };
            const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];
            if (priorityDiff !== 0) return priorityDiff;
            return new Date(b.reportedAt) - new Date(a.reportedAt);
        });

        const issuesHtml = filteredIssues.map(issue => {
            const machine = this.machines.find(m => m.id === issue.machineId);
            const reporter = this.users.find(u => u.id === issue.reportedBy);
            
            const priorityClass = {
                'low': 'priority-low',
                'medium': 'priority-medium',
                'high': 'priority-high',
                'critical': 'priority-critical'
            }[issue.priority] || 'priority-medium';

            const statusClass = {
                'open': 'status-danger',
                'in-progress': 'status-warning',
                'resolved': 'status-success'
            }[issue.status] || 'status-danger';

            const priorityText = {
                'low': 'Niedrig',
                'medium': 'Mittel',
                'high': 'Hoch',
                'critical': 'Kritisch'
            }[issue.priority] || issue.priority;

            const statusText = {
                'open': 'Offen',
                'in-progress': 'In Bearbeitung',
                'resolved': 'Behoben'
            }[issue.status] || issue.status;

            // Calculate duration
            const reportedDate = new Date(issue.reportedAt);
            const now = new Date();
            const diffDays = Math.floor((now - reportedDate) / (1000 * 60 * 60 * 24));
            const durationText = diffDays === 0 ? 'Heute' : 
                                diffDays === 1 ? 'Gestern' : 
                                `vor ${diffDays} Tagen`;

            return `
                <div class="issue-card">
                    <div class="issue-header">
                        <div class="issue-title-section">
                            <h4>${issue.title}</h4>
                            <span class="issue-duration">${durationText}</span>
                        </div>
                        <div class="issue-badges">
                            <span class="priority-badge ${priorityClass}">${priorityText}</span>
                            <span class="status-badge ${statusClass}">${statusText}</span>
                        </div>
                    </div>
                    
                    <div class="issue-content">
                        <div class="issue-details">
                            <div class="detail-row">
                                <span class="detail-label">Maschine:</span>
                                <span class="detail-value">${machine ? `${machine.name} (${machine.type})` : 'Unbekannt'}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Standort:</span>
                                <span class="detail-value">${machine ? machine.location : 'Unbekannt'}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Gemeldet von:</span>
                                <span class="detail-value">${reporter ? reporter.displayName : issue.reportedBy}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Gemeldet am:</span>
                                <span class="detail-value">${reportedDate.toLocaleDateString('de-DE')} um ${reportedDate.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}</span>
                            </div>
                        </div>
                        
                        ${issue.photo ? `
                            <div class="issue-photo">
                                <img src="${issue.photo}" alt="St√∂rungsfoto" onclick="window.qhseDashboard.showImageModal('${issue.photo}', '${issue.title}')">
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="issue-description">
                        <h5>Beschreibung:</h5>
                        <p>${issue.description}</p>
                    </div>
                    
                    <div class="issue-actions">
                        <button onclick="window.qhseDashboard.viewIssueDetails('${issue.id}')" class="btn-info">
                            <i class="fas fa-eye"></i> Details
                        </button>
                        ${issue.status === 'open' ? `
                            <button onclick="window.qhseDashboard.updateIssueStatus('${issue.id}', 'in-progress')" class="btn-warning">
                                <i class="fas fa-wrench"></i> In Bearbeitung
                            </button>
                        ` : ''}
                        ${issue.status === 'in-progress' ? `
                            <button onclick="window.qhseDashboard.updateIssueStatus('${issue.id}', 'resolved')" class="btn-success">
                                <i class="fas fa-check"></i> Behoben
                            </button>
                        ` : ''}
                        ${issue.status === 'resolved' ? `
                            <button onclick="window.qhseDashboard.updateIssueStatus('${issue.id}', 'open')" class="btn-secondary">
                                <i class="fas fa-undo"></i> Wieder √∂ffnen
                            </button>
                        ` : ''}
                        <button onclick="window.qhseDashboard.deleteIssue('${issue.id}')" class="btn-danger">
                            <i class="fas fa-trash"></i> L√∂schen
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = issuesHtml;
    }

    updateIssueStatus(issueId, newStatus) {
        const issue = this.issues.find(i => i.id === issueId);
        if (issue) {
            issue.status = newStatus;
            issue.updatedAt = new Date().toISOString();
            issue.updatedBy = this.currentUserId;
            
            this.saveIssuesToStorage();
            this.renderIssuesList();
            this.updateIssueStats();
            alert('St√∂rungsstatus aktualisiert!');
        }
    }

    updateIssueStats() {
        const openIssues = this.issues.filter(i => i.status === 'open').length;
        const progressIssues = this.issues.filter(i => i.status === 'in-progress').length;
        const resolvedIssues = this.issues.filter(i => i.status === 'resolved').length;

        const openEl = document.getElementById('openIssues');
        const progressEl = document.getElementById('progressIssues');
        const resolvedEl = document.getElementById('resolvedIssues');

        if (openEl) openEl.textContent = openIssues;
        if (progressEl) progressEl.textContent = progressIssues;
        if (resolvedEl) resolvedEl.textContent = resolvedIssues;
    }

    deleteIssue(issueId) {
        const issue = this.issues.find(i => i.id === issueId);
        if (!issue) return;

        if (confirm(`M√∂chten Sie die St√∂rung "${issue.title}" wirklich l√∂schen?`)) {
            this.issues = this.issues.filter(i => i.id !== issueId);
            this.saveIssuesToStorage();
            this.renderIssuesList();
            this.updateIssueStats();
            alert('St√∂rung erfolgreich gel√∂scht!');
        }
    }

    viewIssueDetails(issueId) {
        const issue = this.issues.find(i => i.id === issueId);
        if (!issue) return;

        const machine = this.machines.find(m => m.id === issue.machineId);
        const reporter = this.users.find(u => u.id === issue.reportedBy);
        const updater = issue.updatedBy ? this.users.find(u => u.id === issue.updatedBy) : null;

        const statusText = {
            'open': 'Offen',
            'in-progress': 'In Bearbeitung',
            'resolved': 'Behoben'
        }[issue.status] || issue.status;

        const priorityText = {
            'low': 'Niedrig',
            'medium': 'Mittel',
            'high': 'Hoch',
            'critical': 'Kritisch'
        }[issue.priority] || issue.priority;

        const modalHtml = `
            <div id="issueDetailsModal" class="modal active">
                <div class="modal-content large-modal">
                    <div class="modal-header">
                        <h2><i class="fas fa-exclamation-triangle"></i> St√∂rungsdetails: ${issue.title}</h2>
                        <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="issue-details-grid">
                            <div class="details-section">
                                <h3>Grundinformationen</h3>
                                <div class="detail-item">
                                    <strong>Titel:</strong> ${issue.title}
                                </div>
                                <div class="detail-item">
                                    <strong>Status:</strong> 
                                    <span class="status-badge ${issue.status === 'open' ? 'status-danger' : issue.status === 'in-progress' ? 'status-warning' : 'status-success'}">
                                        ${statusText}
                                    </span>
                                </div>
                                <div class="detail-item">
                                    <strong>Priorit√§t:</strong> 
                                    <span class="priority-badge priority-${issue.priority}">${priorityText}</span>
                                </div>
                            </div>

                            <div class="details-section">
                                <h3>Maschineninformationen</h3>
                                <div class="detail-item">
                                    <strong>Maschine:</strong> ${machine ? machine.name : 'Unbekannt'}
                                </div>
                                ${machine ? `
                                    <div class="detail-item">
                                        <strong>Typ:</strong> ${machine.type}
                                    </div>
                                    <div class="detail-item">
                                        <strong>Standort:</strong> ${machine.location}
                                    </div>
                                ` : ''}
                            </div>

                            <div class="details-section">
                                <h3>Zeitinformationen</h3>
                                <div class="detail-item">
                                    <strong>Gemeldet am:</strong> ${new Date(issue.reportedAt).toLocaleDateString('de-DE')} um ${new Date(issue.reportedAt).toLocaleTimeString('de-DE')}
                                </div>
                                <div class="detail-item">
                                    <strong>Gemeldet von:</strong> ${reporter ? reporter.displayName : issue.reportedBy}
                                </div>
                                ${issue.updatedAt && issue.updatedAt !== issue.reportedAt ? `
                                    <div class="detail-item">
                                        <strong>Zuletzt ge√§ndert:</strong> ${new Date(issue.updatedAt).toLocaleDateString('de-DE')} um ${new Date(issue.updatedAt).toLocaleTimeString('de-DE')}
                                    </div>
                                    <div class="detail-item">
                                        <strong>Ge√§ndert von:</strong> ${updater ? updater.displayName : issue.updatedBy}
                                    </div>
                                ` : ''}
                            </div>

                            <div class="details-section full-width">
                                <h3>Beschreibung</h3>
                                <div class="description-content">
                                    ${issue.description}
                                </div>
                            </div>

                            ${issue.photo ? `
                                <div class="details-section full-width">
                                    <h3>Foto</h3>
                                    <div class="issue-photo-large">
                                        <img src="${issue.photo}" alt="St√∂rungsfoto" onclick="window.qhseDashboard.showImageModal('${issue.photo}', '${issue.title}')">
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                    <div class="modal-footer">
                        ${issue.status === 'open' ? `
                            <button onclick="window.qhseDashboard.updateIssueStatus('${issue.id}', 'in-progress'); this.closest('.modal').remove();" class="btn-warning">
                                <i class="fas fa-wrench"></i> In Bearbeitung setzen
                            </button>
                        ` : ''}
                        ${issue.status === 'in-progress' ? `
                            <button onclick="window.qhseDashboard.updateIssueStatus('${issue.id}', 'resolved'); this.closest('.modal').remove();" class="btn-success">
                                <i class="fas fa-check"></i> Als behoben markieren
                            </button>
                        ` : ''}
                        <button onclick="this.closest('.modal').remove()" class="btn-primary">
                            <i class="fas fa-times"></i> Schlie√üen
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
    }

    showImageModal(imageSrc, title) {
        const modalHtml = `
            <div id="imageModal" class="modal active">
                <div class="modal-content image-modal">
                    <div class="modal-header">
                        <h2><i class="fas fa-image"></i> ${title}</h2>
                        <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="image-container">
                            <img src="${imageSrc}" alt="${title}" style="max-width: 100%; height: auto;">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button onclick="this.closest('.modal').remove()" class="btn-primary">
                            <i class="fas fa-times"></i> Schlie√üen
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
    }

    setupMaintenanceAnalysis() {
        const generateAnalysisBtn = document.getElementById('generateAnalysisBtn');
        if (generateAnalysisBtn) {
            generateAnalysisBtn.addEventListener('click', () => this.generateMaintenanceAnalysis());
        }
        this.populateAnalysisMachineDropdown();
    }

    populateAnalysisMachineDropdown() {
        const machineSelect = document.getElementById('analysisMachine');
        if (!machineSelect) return;

        // Clear existing options except "Alle Maschinen"
        machineSelect.innerHTML = '<option value="">Alle Maschinen</option>';

        // Add all registered machines
        this.machines.forEach(machine => {
            const option = document.createElement('option');
            option.value = machine.id;
            option.textContent = `${machine.name} (${machine.type})`;
            machineSelect.appendChild(option);
        });
    }

    generateMaintenanceAnalysis() {
        const machineId = document.getElementById('analysisMachine').value;
        const timeframe = document.getElementById('analysisTimeframe').value;

        // Filter data based on selection
        let selectedMachines = machineId ? [this.machines.find(m => m.id === machineId)] : this.machines;
        let filteredIssues = this.issues;
        
        if (machineId) {
            filteredIssues = this.issues.filter(issue => issue.machineId === machineId);
        }

        // Calculate time range
        const now = new Date();
        let startDate;
        switch (timeframe) {
            case 'month':
                startDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
                break;
            case 'quarter':
                startDate = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
                break;
            case 'year':
                startDate = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
                break;
            default:
                startDate = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
        }

        // Filter issues by date
        filteredIssues = filteredIssues.filter(issue => 
            new Date(issue.reportedAt) >= startDate
        );

        // Calculate KPIs
        this.calculateAndDisplayKPIs(selectedMachines, filteredIssues, startDate, now);
        
        alert('Analyse erfolgreich erstellt!');
    }

    calculateAndDisplayKPIs(machines, issues, startDate, endDate) {
        const totalMachines = machines.length;
        const totalIssues = issues.length;
        const resolvedIssues = issues.filter(i => i.status === 'resolved').length;
        
        // Calculate MTBF (Mean Time Between Failures) in hours
        // Simplified calculation: assume 24/7 operation for demo
        const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
        const totalOperatingHours = totalMachines * daysDiff * 24;
        const mtbf = totalIssues > 0 ? Math.round(totalOperatingHours / totalIssues) : 0;

        // Calculate MTTR (Mean Time To Repair) in hours
        // Simplified: assume 4-48 hours repair time based on priority
        let totalRepairTime = 0;
        resolvedIssues.forEach(issue => {
            const repairTime = {
                'low': 4,
                'medium': 8,
                'high': 16,
                'critical': 2
            }[issue.priority] || 8;
            totalRepairTime += repairTime;
        });
        const mttr = resolvedIssues > 0 ? Math.round(totalRepairTime / resolvedIssues) : 0;

        // Calculate Availability (simplified)
        const downtime = totalRepairTime;
        const availability = totalOperatingHours > 0 ? 
            Math.round(((totalOperatingHours - downtime) / totalOperatingHours) * 100) : 100;

        // Calculate estimated costs (simplified)
        const costs = totalIssues * 1500 + resolvedIssues * 500; // Simplified cost calculation

        // Update KPI display
        const mtbfEl = document.getElementById('mtbfValue');
        const mttrEl = document.getElementById('mttrValue');
        const availabilityEl = document.getElementById('availabilityValue');
        const costsEl = document.getElementById('costsValue');

        if (mtbfEl) mtbfEl.textContent = mtbf;
        if (mttrEl) mttrEl.textContent = mttr;
        if (availabilityEl) availabilityEl.textContent = availability;
        if (costsEl) costsEl.textContent = costs.toLocaleString('de-DE');

        // Update chart placeholders with some data info
        const issueChart = document.getElementById('issueFrequencyChart');
        const trendChart = document.getElementById('maintenanceTrendChart');

        if (issueChart) {
            issueChart.innerHTML = `
                <div style="padding: 20px; text-align: center;">
                    <h4>St√∂rungsstatistik</h4>
                    <p><strong>Gesamte St√∂rungen:</strong> ${totalIssues}</p>
                    <p><strong>Behobene St√∂rungen:</strong> ${resolvedIssues}</p>
                    <p><strong>Offene St√∂rungen:</strong> ${totalIssues - resolvedIssues}</p>
                    <small>Detaillierte Diagramme werden in einer zuk√ºnftigen Version verf√ºgbar sein</small>
                </div>
            `;
        }

        if (trendChart) {
            trendChart.innerHTML = `
                <div style="padding: 20px; text-align: center;">
                    <h4>Wartungstrend</h4>
                    <p><strong>Analysezeitraum:</strong> ${daysDiff} Tage</p>
                    <p><strong>Durchschnittliche MTBF:</strong> ${mtbf} Stunden</p>
                    <p><strong>Durchschnittliche MTTR:</strong> ${mttr} Stunden</p>
                    <small>Detaillierte Diagramme werden in einer zuk√ºnftigen Version verf√ºgbar sein</small>
                </div>
            `;
        }
    }

    updateMaintenanceStats() {
        this.updateMachineStats();
        this.updateIssueStats();
        this.updateMaintenanceOverview();
        this.populateAnalysisMachineDropdown();
    }

    // Initialize dashboard with sample data
    initializeSampleData() {
        // Update KPIs every 30 seconds
        setInterval(() => {
            this.updateKPIs();
        }, 30000);

        // Setup notifications
        this.setupNotifications();
    }

    // Setup expandable info sections (like Arbeitsschutz)
    setupExpandableInfo() {
        // Arbeitsschutz expandable section
        const expandBtn = document.getElementById('expandSafetyInfoBtn');
        const safetySection = document.getElementById('safetyInfoSection');
        const editBtn = document.getElementById('editSafetyInfoBtn');
        const saveBtn = document.getElementById('saveSafetyInfoBtn');
        const cancelBtn = document.getElementById('cancelSafetyInfoBtn');
        const display = document.getElementById('safetyInfoDisplay');
        const editor = document.getElementById('safetyInfoEditor');
        const textarea = document.getElementById('safetyInfoText');

        if (expandBtn && safetySection) {
            expandBtn.addEventListener('click', () => {
                const isVisible = safetySection.style.display !== 'none';
                if (isVisible) {
                    safetySection.style.display = 'none';
                    expandBtn.classList.remove('rotated');
                    expandBtn.closest('.kpi-card').classList.remove('expanded');
                } else {
                    safetySection.style.display = 'block';
                    expandBtn.classList.add('rotated');
                    expandBtn.closest('.kpi-card').classList.add('expanded');
                    this.loadSafetyInfo();
                }
            });
        }

        if (editBtn && display && editor) {
            editBtn.addEventListener('click', () => {
                display.style.display = 'none';
                editor.style.display = 'block';
                textarea.focus();
            });
        }

        if (saveBtn && display && editor && textarea) {
            saveBtn.addEventListener('click', () => {
                const content = textarea.value.trim();
                this.saveSafetyInfo(content);
                this.displaySafetyInfo(content);
                editor.style.display = 'none';
                display.style.display = 'block';
            });
        }

        if (cancelBtn && display && editor) {
            cancelBtn.addEventListener('click', () => {
                editor.style.display = 'none';
                display.style.display = 'block';
                this.loadSafetyInfo();
            });
        }
    }

    loadSafetyInfo() {
        const saved = localStorage.getItem('qhse_safety_info');
        const textarea = document.getElementById('safetyInfoText');
        if (textarea && saved) {
            textarea.value = saved;
        }
        this.displaySafetyInfo(saved);
    }

    displaySafetyInfo(content) {
        const display = document.getElementById('safetyInfoDisplay');
        if (display) {
            if (content && content.trim()) {
                display.innerHTML = `<div style="white-space: pre-wrap; color: #374151;">${content.trim()}</div>`;
            } else {
                display.innerHTML = '<p>Klicken Sie auf "Bearbeiten", um weitere Informationen zum Arbeitsschutz hinzuzuf√ºgen.</p>';
            }
        }
    }

    saveSafetyInfo(content) {
        localStorage.setItem('qhse_safety_info', content);
    }

    // Setup customer feedback section
    setupCustomerFeedback() {
        const editBtn = document.getElementById('editCustomerFeedbackBtn');
        const saveBtn = document.getElementById('saveCustomerFeedbackBtn');
        const cancelBtn = document.getElementById('cancelCustomerFeedbackBtn');
        const display = document.getElementById('customerFeedbackDisplay');
        const editor = document.getElementById('customerFeedbackEditor');
        const textarea = document.getElementById('customerFeedbackText');

        // Load existing feedback on startup
        this.loadCustomerFeedback();

        if (editBtn && display && editor) {
            editBtn.addEventListener('click', () => {
                display.style.display = 'none';
                editor.style.display = 'block';
                textarea.focus();
            });
        }

        if (saveBtn && display && editor && textarea) {
            saveBtn.addEventListener('click', () => {
                const content = textarea.value.trim();
                this.saveCustomerFeedback(content);
                this.displayCustomerFeedback(content);
                editor.style.display = 'none';
                display.style.display = 'block';
            });
        }

        if (cancelBtn && display && editor) {
            cancelBtn.addEventListener('click', () => {
                editor.style.display = 'none';
                display.style.display = 'block';
                this.loadCustomerFeedback();
            });
        }
    }

    loadCustomerFeedback() {
        const saved = localStorage.getItem('qhse_customer_feedback');
        const textarea = document.getElementById('customerFeedbackText');
        if (textarea && saved) {
            textarea.value = saved;
        }
        this.displayCustomerFeedback(saved);
    }

    displayCustomerFeedback(content) {
        const display = document.getElementById('customerFeedbackDisplay');
        if (display) {
            if (content && content.trim()) {
                display.innerHTML = `<div style="white-space: pre-wrap; color: #374151;">${content.trim()}</div>`;
            } else {
                display.innerHTML = '<p>Klicken Sie auf "Bearbeiten", um Kundenfeedback und Bemerkungen hinzuzuf√ºgen.</p>';
            }
        }
    }

    saveCustomerFeedback(content) {
        localStorage.setItem('qhse_customer_feedback', content);
    }

    // Setup QHSE notes areas for all categories
    setupQHSENotesAreas() {
        const categories = ['arbeitsschutz', 'qualitaet', 'umwelt', 'datenschutz', 'gesundheit', 'arbeitsanweisungen', 'verfahrensanweisungen'];
        
        categories.forEach(category => {
            this.setupQHSENotesArea(category);
        });
    }

    setupQHSENotesArea(category) {
        const editBtn = document.getElementById(`edit${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
        const saveBtn = document.getElementById(`save${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
        const cancelBtn = document.getElementById(`cancel${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
        const shareBtn = document.getElementById(`share${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
        const display = document.getElementById(`${category}NotesDisplay`);
        const editor = document.getElementById(`${category}NotesEditor`);
        const textarea = document.getElementById(`${category}NotesText`);

        // Load existing notes on startup
        this.loadQHSENotes(category);

        if (editBtn && display && editor && textarea) {
            editBtn.addEventListener('click', () => {
                console.log(`Edit ${category} notes clicked`);
                display.style.display = 'none';
                editor.style.display = 'block';
                textarea.focus();
            });
        }

        if (saveBtn && display && editor && textarea) {
            saveBtn.addEventListener('click', () => {
                console.log(`Save ${category} notes clicked`);
                const content = textarea.value.trim();
                this.saveQHSENotes(category, content);
                this.displayQHSENotes(category, content);
                editor.style.display = 'none';
                display.style.display = 'block';
            });
        }

        if (cancelBtn && display && editor) {
            cancelBtn.addEventListener('click', () => {
                console.log(`Cancel ${category} notes clicked`);
                editor.style.display = 'none';
                display.style.display = 'block';
                this.loadQHSENotes(category);
            });
        }

        if (shareBtn) {
            shareBtn.addEventListener('click', () => {
                console.log(`Share ${category} notes clicked`);
                this.openShareModal(category);
            });
        }
    }

    loadQHSENotes(category) {
        const saved = localStorage.getItem(`qhse_notes_${category}`);
        const textarea = document.getElementById(`${category}NotesText`);
        if (textarea && saved) {
            textarea.value = saved;
        }
        this.displayQHSENotes(category, saved);
    }

    displayQHSENotes(category, content) {
        const display = document.getElementById(`${category}NotesDisplay`);
        if (display) {
            if (content && content.trim()) {
                display.innerHTML = `<div style="white-space: pre-wrap; color: #374151;">${content.trim()}</div>`;
            } else {
                const categoryNames = {
                    'arbeitsschutz': 'Arbeitsschutz',
                    'qualitaet': 'Qualit√§ts',
                    'umwelt': 'Umwelt',
                    'datenschutz': 'Datenschutz',
                    'gesundheit': 'Gesundheits',
                    'arbeitsanweisungen': 'Arbeitsanweisungen',
                    'verfahrensanweisungen': 'Verfahrensanweisungen'
                };
                const categoryName = categoryNames[category] || category;
                display.innerHTML = `<p>Klicken Sie auf "Bearbeiten", um QHSE-spezifische Informationen f√ºr den ${categoryName}-Bereich hinzuzuf√ºgen.</p>`;
            }
        }
    }

    saveQHSENotes(category, content) {
        localStorage.setItem(`qhse_notes_${category}`, content);
        console.log(`Saved notes for ${category}:`, content);
    }

    updateQHSENotesVisibility() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;

        const categories = ['arbeitsschutz', 'qualitaet', 'umwelt', 'datenschutz', 'gesundheit', 'arbeitsanweisungen', 'verfahrensanweisungen'];
        const isQHSERole = ['qhse', 'admin', 'root-admin'].includes(currentUser.role);

        categories.forEach(category => {
            const section = document.querySelector(`.qhse-notes-section[data-category="${category}"]`);
            if (!section) return;

            if (isQHSERole) {
                // QHSE can see and edit all notes
                section.style.display = 'block';
                this.showQHSEEditView(category);
            } else {
                // Check if user has read access to this category
                const sharedUsers = this.getSharedUsers(category);
                if (sharedUsers.includes(currentUser.id)) {
                    section.style.display = 'block';
                    this.showReadOnlyView(category);
                } else {
                    section.style.display = 'none';
                }
            }
        });
    }

    showQHSEEditView(category) {
        const section = document.querySelector(`#${category}NotesDisplay`).closest('.qhse-notes-section');
        if (section) {
            // Show edit and share buttons
            const editBtn = section.querySelector(`#edit${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
            const shareBtn = section.querySelector(`#share${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
            
            if (editBtn) editBtn.style.display = 'inline-block';
            if (shareBtn) shareBtn.style.display = 'inline-block';
            
            // Remove read-only view if present
            const readOnlyView = section.querySelector('.read-only-view');
            if (readOnlyView) readOnlyView.remove();
        }
    }

    showReadOnlyView(category) {
        const notesContent = document.querySelector(`#${category}NotesDisplay`).closest('.notes-content');
        if (!notesContent) return;

        const section = notesContent.closest('.qhse-notes-section');
        
        // Hide edit and share buttons
        const editBtn = section.querySelector(`#edit${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
        const shareBtn = section.querySelector(`#share${category.charAt(0).toUpperCase() + category.slice(1)}NotesBtn`);
        
        if (editBtn) editBtn.style.display = 'none';
        if (shareBtn) shareBtn.style.display = 'none';
        
        // Show read-only indicator
        const existingReadOnly = notesContent.querySelector('.read-only-view');
        if (!existingReadOnly) {
            const content = localStorage.getItem(`qhse_notes_${category}`) || '';
            const readOnlyHtml = `
                <div class="read-only-view">
                    <div class="read-only-header">
                        Nur-Lese-Zugriff (von QHSE freigegeben)
                    </div>
                    <div class="read-only-content">${content || 'Keine Notizen vorhanden'}</div>
                </div>
            `;
            notesContent.insertAdjacentHTML('beforeend', readOnlyHtml);
        }
    }

    openShareModal(category) {
        const existingModal = document.querySelector('.share-modal');
        if (existingModal) existingModal.remove();

        const categoryNames = {
            'arbeitsschutz': 'Arbeitsschutz',
            'qualitaet': 'Qualit√§t',
            'umwelt': 'Umwelt',
            'datenschutz': 'Datenschutz',
            'gesundheit': 'Gesundheit',
            'arbeitsanweisungen': 'Arbeitsanweisungen',
            'verfahrensanweisungen': 'Verfahrensanweisungen'
        };

        const modalHtml = `
            <div class="share-modal">
                <div class="share-modal-content">
                    <div class="share-modal-header">
                        <h3>Freigabe: ${categoryNames[category]} Notizen</h3>
                        <button class="close-modal-btn" onclick="this.closest('.share-modal').remove()">&times;</button>
                    </div>
                    
                    <div class="user-selection">
                        <h4>Mitarbeiter ausw√§hlen:</h4>
                        <div class="users-grid" id="usersGrid">
                            ${this.renderUserCheckboxes(category)}
                        </div>
                    </div>
                    
                    <div class="current-shares">
                        <h4>Aktuell freigegebene Mitarbeiter:</h4>
                        <div id="currentShares">
                            ${this.renderCurrentShares(category)}
                        </div>
                    </div>
                    
                    <div class="share-modal-actions">
                        <button onclick="window.qhseDashboard.saveSharing('${category}')" class="btn-primary">
                            <i class="fas fa-save"></i> Freigaben speichern
                        </button>
                        <button onclick="this.closest('.share-modal').remove()" class="btn-secondary">
                            <i class="fas fa-times"></i> Abbrechen
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHtml);
    }

    renderUserCheckboxes(category) {
        const allUsers = this.users.filter(user => user.id !== 'root-admin' && !['qhse', 'admin', 'root-admin'].includes(user.role));
        const sharedUsers = this.getSharedUsers(category);

        return allUsers.map(user => `
            <div class="user-checkbox">
                <input type="checkbox" id="user_${user.id}" value="${user.id}" ${sharedUsers.includes(user.id) ? 'checked' : ''}>
                <label for="user_${user.id}">${user.displayName}</label>
            </div>
        `).join('');
    }

    renderCurrentShares(category) {
        const sharedUsers = this.getSharedUsers(category);
        
        if (sharedUsers.length === 0) {
            return '<p style="color: #9ca3af; font-style: italic;">Noch keine Freigaben erstellt</p>';
        }

        return `
            <div class="shared-users-list">
                ${sharedUsers.map(userId => {
                    const user = this.users.find(u => u.id === userId);
                    return user ? `
                        <div class="shared-user-tag">
                            ${user.displayName}
                            <button class="remove-share-btn" onclick="window.qhseDashboard.removeShare('${category}', '${userId}')" title="Freigabe entfernen">
                                &times;
                            </button>
                        </div>
                    ` : '';
                }).join('')}
            </div>
        `;
    }

    saveSharing(category) {
        const checkboxes = document.querySelectorAll('#usersGrid input[type="checkbox"]:checked');
        const selectedUsers = Array.from(checkboxes).map(cb => cb.value);
        
        this.setSharedUsers(category, selectedUsers);
        
        // Update display
        const currentSharesDiv = document.getElementById('currentShares');
        if (currentSharesDiv) {
            currentSharesDiv.innerHTML = this.renderCurrentShares(category);
        }

        // Update main UI
        this.updateQHSENotesVisibility();
        this.updateSharingInfo(category);
        
        alert('Freigaben erfolgreich gespeichert!');
        document.querySelector('.share-modal').remove();
    }

    removeShare(category, userId) {
        const sharedUsers = this.getSharedUsers(category);
        const updatedUsers = sharedUsers.filter(id => id !== userId);
        this.setSharedUsers(category, updatedUsers);
        
        // Update modal if open
        const currentSharesDiv = document.getElementById('currentShares');
        if (currentSharesDiv) {
            currentSharesDiv.innerHTML = this.renderCurrentShares(category);
        }
        
        // Update main UI
        this.updateQHSENotesVisibility();
        this.updateSharingInfo(category);
    }

    getSharedUsers(category) {
        const sharing = localStorage.getItem(`qhse_sharing_${category}`);
        return sharing ? JSON.parse(sharing) : [];
    }

    setSharedUsers(category, userIds) {
        localStorage.setItem(`qhse_sharing_${category}`, JSON.stringify(userIds));
    }

    updateSharingInfo(category) {
        const sharedUsers = this.getSharedUsers(category);
        const notesContent = document.querySelector(`#${category}NotesDisplay`).closest('.notes-content');
        
        if (!notesContent) return;

        // Remove existing sharing info
        const existingInfo = notesContent.querySelector('.sharing-info');
        if (existingInfo) existingInfo.remove();

        // Add sharing info if there are shared users
        if (sharedUsers.length > 0) {
            const userNames = sharedUsers.map(userId => {
                const user = this.users.find(u => u.id === userId);
                return user ? user.displayName : 'Unbekannter Nutzer';
            });

            const sharingInfoHtml = `
                <div class="sharing-info">
                    <h4>Freigegeben f√ºr:</h4>
                    <div class="shared-users-list">
                        ${userNames.map(name => `<span class="shared-user-tag">${name}</span>`).join('')}
                    </div>
                </div>
            `;

            notesContent.insertAdjacentHTML('beforeend', sharingInfoHtml);
        }
    }

    ensureMachineManagementWorks() {
        console.log('Ensuring machine management works...');
        
        // 1. Ensure departments exist
        if (this.departments.length === 0) {
            console.log('No departments found, initializing...');
            this.initializeDefaultDepartments();
        }
        
        // 2. Check if button exists and has event listener
        const addMachineBtn = document.getElementById('addMachineBtn');
        if (addMachineBtn) {
            console.log('Machine button found');
            
            // Remove existing listeners and add fresh one
            const newBtn = addMachineBtn.cloneNode(true);
            addMachineBtn.parentNode.replaceChild(newBtn, addMachineBtn);
            
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Machine button clicked!');
                this.showAddMachineModal();
            });
            
            console.log('Machine button event listener attached');
        } else {
            console.log('Machine button not found!');
        }
        
        // 3. Ensure machines array exists
        if (!Array.isArray(this.machines)) {
            this.machines = [];
            console.log('Machines array initialized');
        }
        
        // 4. Update UI
        this.renderMachinesList();
        this.updateMachineStats();
        
        console.log('Machine management verification complete');
    }

    // Audit Content Management System
    setupAuditManagement() {
        // Setup audit content management in settings
        this.setupAuditContentManagement();
    }

    setupAuditContentManagement() {
        const saveBtn = document.getElementById('saveAuditContentBtn');
        const clearBtn = document.getElementById('clearAuditContentBtn');
        const textInput = document.getElementById('auditFreeTextInput');
        const docUpload = document.getElementById('auditDocumentUpload');
        const imgUpload = document.getElementById('auditImageUpload');
        const docUploadArea = document.getElementById('auditDocumentUploadArea');
        const imgUploadArea = document.getElementById('auditImageUploadArea');

        if (!saveBtn || !clearBtn || !textInput || !docUpload || !imgUpload) {
            console.log('Audit management elements not found');
            return;
        }

        // Load existing content
        this.loadAuditContentToSettings();

        // Save button handler
        saveBtn.addEventListener('click', () => {
            this.saveAuditContent();
        });

        // Clear button handler
        clearBtn.addEventListener('click', () => {
            if (confirm('M√∂chten Sie wirklich alle Audit-Inhalte l√∂schen? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.')) {
                this.clearAuditContent();
            }
        });

        // Document upload handler
        docUpload.addEventListener('change', (e) => {
            this.handleAuditFileUpload(e.target.files, 'documents');
        });

        // Image upload handler
        imgUpload.addEventListener('change', (e) => {
            this.handleAuditFileUpload(e.target.files, 'images');
        });

        // Drag and drop for documents
        this.setupDragAndDrop(docUploadArea, docUpload, 'documents');
        this.setupDragAndDrop(imgUploadArea, imgUpload, 'images');
    }

    setupDragAndDrop(area, input, type) {
        area.addEventListener('dragover', (e) => {
            e.preventDefault();
            area.classList.add('drag-over');
        });

        area.addEventListener('dragleave', () => {
            area.classList.remove('drag-over');
        });

        area.addEventListener('drop', (e) => {
            e.preventDefault();
            area.classList.remove('drag-over');
            const files = e.dataTransfer.files;
            this.handleAuditFileUpload(files, type);
        });

        area.addEventListener('click', () => {
            input.click();
        });
    }

    handleAuditFileUpload(files, type) {
        if (!files || files.length === 0) return;

        Array.from(files).forEach(file => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const fileData = {
                    id: Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    data: e.target.result,
                    uploadDate: new Date().toISOString()
                };

                if (type === 'documents') {
                    if (!this.auditContent.documents) this.auditContent.documents = [];
                    this.auditContent.documents.push(fileData);
                } else if (type === 'images') {
                    if (!this.auditContent.images) this.auditContent.images = [];
                    this.auditContent.images.push(fileData);
                }

                this.saveAuditContentToStorage();
                this.loadAuditContentToSettings();
                this.renderAuditContent();
                
                alert(`${file.name} wurde erfolgreich hochgeladen.`);
            };
            reader.readAsDataURL(file);
        });
    }

    loadAuditContentFromStorage() {
        const stored = localStorage.getItem('qhse_audit_content');
        if (stored) {
            try {
                return JSON.parse(stored);
            } catch (e) {
                console.error('Fehler beim Laden der Audit-Inhalte:', e);
            }
        }
        return {
            freeText: '',
            documents: [],
            images: []
        };
    }

    saveAuditContentToStorage() {
        try {
            localStorage.setItem('qhse_audit_content', JSON.stringify(this.auditContent));
        } catch (e) {
            console.error('Fehler beim Speichern der Audit-Inhalte:', e);
            alert('Fehler beim Speichern. M√∂glicherweise ist der Speicher voll.');
        }
    }

    loadAuditContentToSettings() {
        const textInput = document.getElementById('auditFreeTextInput');
        if (textInput && this.auditContent && this.auditContent.freeText) {
            textInput.value = this.auditContent.freeText;
        }
    }

    saveAuditContent() {
        const textInput = document.getElementById('auditFreeTextInput');
        if (textInput) {
            this.auditContent.freeText = textInput.value;
        }

        this.saveAuditContentToStorage();
        this.renderAuditContent();
        
        alert('Audit-Inhalte wurden erfolgreich gespeichert.');
    }

    clearAuditContent() {
        this.auditContent = {
            freeText: '',
            documents: [],
            images: []
        };
        
        this.saveAuditContentToStorage();
        this.loadAuditContentToSettings();
        this.renderAuditContent();
        
        alert('Alle Audit-Inhalte wurden gel√∂scht.');
    }

    renderAuditContent() {
        console.log('Rendering audit content:', this.auditContent);
        this.renderAuditFreeText();
        this.renderAuditDocuments();
        this.renderAuditImages();
    }

    renderAuditFreeText() {
        const display = document.getElementById('auditFreeTextDisplay');
        if (!display) return;

        if (this.auditContent && this.auditContent.freeText && this.auditContent.freeText.trim()) {
            const formattedText = this.auditContent.freeText.replace(/\n/g, '<br>');
            display.innerHTML = `<div class="audit-text-content">${formattedText}</div>`;
            display.style.display = 'block';
        } else {
            display.style.display = 'none';
        }
    }

    renderAuditDocuments() {
        const container = document.getElementById('auditDocumentsList');
        if (!container) return;

        if (!this.auditContent || !this.auditContent.documents || this.auditContent.documents.length === 0) {
            container.innerHTML = '<p class="no-content">Keine Dokumente vorhanden.</p>';
            return;
        }

        const currentUser = this.getCurrentUser();
        const isRootAdmin = currentUser && currentUser.role === 'root-admin';

        const documentsHtml = this.auditContent.documents.map(doc => `
            <div class="document-item">
                <div class="document-info">
                    <i class="fas fa-file-alt"></i>
                    <div class="document-details">
                        <h4>${doc.name}</h4>
                        <p>Gr√∂√üe: ${this.formatFileSize(doc.size)} | Hochgeladen: ${new Date(doc.uploadDate).toLocaleDateString('de-DE')}</p>
                    </div>
                </div>
                <div class="document-actions">
                    <button onclick="window.qhseDashboard.viewAuditDocument('${doc.id}')" class="btn-primary btn-sm">
                        <i class="fas fa-eye"></i> Anzeigen
                    </button>
                    ${isRootAdmin ? `<button onclick="window.qhseDashboard.deleteAuditFile('${doc.id}', 'documents')" class="btn-danger btn-sm">
                        <i class="fas fa-trash"></i> L√∂schen
                    </button>` : ''}
                </div>
            </div>
        `).join('');

        container.innerHTML = documentsHtml;
    }

    renderAuditImages() {
        const container = document.getElementById('auditImagesList');
        if (!container) return;

        if (!this.auditContent || !this.auditContent.images || this.auditContent.images.length === 0) {
            container.innerHTML = '<p class="no-content">Keine Bilder vorhanden.</p>';
            return;
        }

        const currentUser = this.getCurrentUser();
        const isRootAdmin = currentUser && currentUser.role === 'root-admin';

        const imagesHtml = this.auditContent.images.map(img => `
            <div class="image-item">
                <div class="image-preview">
                    <img src="${img.data}" alt="${img.name}" onclick="window.qhseDashboard.viewAuditImage('${img.id}')">
                </div>
                <div class="image-info">
                    <h4>${img.name}</h4>
                    <p>Gr√∂√üe: ${this.formatFileSize(img.size)}</p>
                    <div class="image-actions">
                        <button onclick="window.qhseDashboard.viewAuditImage('${img.id}')" class="btn-primary btn-sm">
                            <i class="fas fa-eye"></i> Anzeigen
                        </button>
                        ${isRootAdmin ? `<button onclick="window.qhseDashboard.deleteAuditFile('${img.id}', 'images')" class="btn-danger btn-sm">
                            <i class="fas fa-trash"></i> L√∂schen
                        </button>` : ''}
                    </div>
                </div>
            </div>
        `).join('');

        container.innerHTML = imagesHtml;
    }

    viewAuditDocument(docId) {
        console.log('Attempting to view document:', docId);
        if (!this.auditContent || !this.auditContent.documents) {
            console.error('No audit content or documents available');
            alert('Keine Dokumente verf√ºgbar.');
            return;
        }
        const doc = this.auditContent.documents.find(d => d.id === docId);
        if (!doc) {
            console.error('Document not found:', docId);
            alert('Dokument nicht gefunden.');
            return;
        }

        console.log('Document found:', doc.name, 'Type:', doc.type);

        if (doc.type === 'application/pdf') {
            console.log('Opening PDF document');
            this.showPdfModal(doc.data, doc.name);
        } else {
            console.log('Opening non-PDF document in new window');
            // For other document types, try to open in new window
            const newWindow = window.open();
            newWindow.document.write(`
                <html>
                    <head><title>${doc.name}</title></head>
                    <body style="margin:0; padding:20px; font-family:Arial;">
                        <h2>${doc.name}</h2>
                        <p>Dokument-Typ: ${doc.type}</p>
                        <p>Gr√∂√üe: ${this.formatFileSize(doc.size)}</p>
                        <a href="${doc.data}" download="${doc.name}" class="btn">Download</a>
                        <br><br>
                        ${doc.type.startsWith('image/') ? `<img src="${doc.data}" style="max-width:100%;">` : '<p>Dieses Dokument kann nicht direkt angezeigt werden. Bitte laden Sie es herunter.</p>'}
                    </body>
                </html>
            `);
        }
    }

    viewAuditImage(imgId) {
        if (!this.auditContent || !this.auditContent.images) return;
        const img = this.auditContent.images.find(i => i.id === imgId);
        if (!img) return;

        // Create image modal
        const modal = document.createElement('div');
        modal.className = 'image-modal';
        modal.innerHTML = `
            <div class="image-modal-content">
                <span class="image-modal-close">&times;</span>
                <img src="${img.data}" alt="${img.name}">
                <div class="image-modal-info">
                    <h3>${img.name}</h3>
                    <p>Gr√∂√üe: ${this.formatFileSize(img.size)} | Hochgeladen: ${new Date(img.uploadDate).toLocaleDateString('de-DE')}</p>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // Close modal handlers
        const closeBtn = modal.querySelector('.image-modal-close');
        closeBtn.onclick = () => document.body.removeChild(modal);
        modal.onclick = (e) => {
            if (e.target === modal) document.body.removeChild(modal);
        };
    }

    deleteAuditFile(fileId, type) {
        // Check if user is root-admin
        const currentUser = this.getCurrentUser();
        if (!currentUser || currentUser.role !== 'root-admin') {
            alert('Sie haben keine Berechtigung zum L√∂schen von Dateien. Nur der System-Administrator kann Dateien l√∂schen.');
            return;
        }

        if (!confirm('M√∂chten Sie diese Datei wirklich l√∂schen?')) return;

        if (type === 'documents') {
            this.auditContent.documents = this.auditContent.documents.filter(d => d.id !== fileId);
        } else if (type === 'images') {
            this.auditContent.images = this.auditContent.images.filter(i => i.id !== fileId);
        }

        this.saveAuditContentToStorage();
        this.renderAuditContent();
        this.loadAuditContentToSettings();
        
        alert('Datei wurde erfolgreich gel√∂scht.');
    }

    showPdfModal(pdfData, fileName) {
        console.log('Attempting to show PDF modal for:', fileName);
        // Reuse existing PDF modal functionality
        const modal = document.getElementById('pdfViewerModal');
        if (!modal) {
            console.error('PDF Viewer Modal not found');
            alert('PDF-Viewer nicht verf√ºgbar. Das Dokument wird in einem neuen Fenster ge√∂ffnet.');
            window.open(pdfData, '_blank');
            return;
        }

        const iframe = document.getElementById('pdfFrame');
        const title = document.getElementById('pdfViewerTitle');
        
        console.log('Modal found:', modal);
        console.log('Iframe found:', iframe);
        console.log('Title found:', title);
        
        if (title) title.textContent = fileName;
        if (iframe) {
            iframe.src = pdfData;
            console.log('PDF data set to iframe:', pdfData.substring(0, 50) + '...');
        } else {
            console.error('PDF iframe not found');
            alert('PDF-Anzeige nicht verf√ºgbar. Das Dokument wird in einem neuen Fenster ge√∂ffnet.');
            window.open(pdfData, '_blank');
            return;
        }
        
        modal.style.display = 'block';
        console.log('Modal should now be visible');
        
        // Setup close functionality
        const closeBtn = document.getElementById('closePdfViewer');
        if (closeBtn) {
            closeBtn.onclick = () => {
                modal.style.display = 'none';
                if (iframe) iframe.src = '';
            };
        }
        
        // Close on background click
        modal.onclick = (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
                if (iframe) iframe.src = '';
            }
        };
        
        // Setup download functionality
        const downloadBtn = document.getElementById('pdfDownloadBtn');
        if (downloadBtn) {
            downloadBtn.onclick = () => {
                const link = document.createElement('a');
                link.href = pdfData;
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            };
        }
        
        // Setup print functionality
        const printBtn = document.getElementById('pdfPrintBtn');
        if (printBtn) {
            printBtn.onclick = () => {
                if (iframe && iframe.contentWindow) {
                    iframe.contentWindow.print();
                } else {
                    // Fallback: open in new window and print
                    const printWindow = window.open(pdfData);
                    printWindow.onload = () => {
                        printWindow.print();
                    };
                }
            };
        }
        
        // Update PDF info
        const fileNameSpan = document.getElementById('pdfFileName');
        const fileSizeSpan = document.getElementById('pdfFileSize');
        if (fileNameSpan) fileNameSpan.textContent = fileName;
        if (fileSizeSpan) {
            // Calculate file size from base64 data
            const sizeInBytes = Math.round((pdfData.length - 'data:application/pdf;base64,'.length) * 3/4);
            fileSizeSpan.textContent = this.formatFileSize(sizeInBytes);
        }
    }

    // Audit Certifications Management System
    setupAuditCertificationsManagement() {
        const addCertBtn = document.getElementById('addCertificationBtn');
        const addInternalAuditBtn = document.getElementById('addInternalAuditBtn');
        const addExternalAuditBtn = document.getElementById('addExternalAuditBtn');
        const saveBtn = document.getElementById('saveAuditCertificationsBtn');
        const resetBtn = document.getElementById('resetAuditCertificationsBtn');

        if (!addCertBtn || !addInternalAuditBtn || !addExternalAuditBtn || !saveBtn || !resetBtn) {
            console.log('Audit certifications management elements not found');
            return;
        }

        // Load existing data
        this.loadAuditCertificationsToSettings();
        this.setupAuditResultsModal();

        // Add certification handler
        addCertBtn.addEventListener('click', () => {
            this.addCertification();
        });

        // Add internal audit handler
        addInternalAuditBtn.addEventListener('click', () => {
            this.addInternalAudit();
        });

        // Debug button for testing
        const debugBtn = document.createElement('button');
        debugBtn.textContent = 'Debug Form';
        debugBtn.className = 'btn-info btn-sm';
        debugBtn.onclick = () => this.debugAuditForms();
        addInternalAuditBtn.parentNode.appendChild(debugBtn);

        // Add external audit handler
        addExternalAuditBtn.addEventListener('click', () => {
            this.addExternalAudit();
        });

        // Save handler
        saveBtn.addEventListener('click', () => {
            this.saveAuditCertifications();
        });

        // Reset handler
        resetBtn.addEventListener('click', () => {
            if (confirm('M√∂chten Sie wirklich alle Zertifizierungen auf die Standardwerte zur√ºcksetzen?')) {
                this.resetAuditCertifications();
            }
        });
    }

    setupDashboardAudits() {
        const editBtn = document.getElementById('editDashboardAuditsBtn');
        
        if (editBtn) {
            editBtn.addEventListener('click', () => {
                // Navigate to settings page for audit management
                this.showSection('einstellungen');
                
                // Scroll to audit certifications section
                setTimeout(() => {
                    const auditSettings = document.querySelector('.audit-certifications-management');
                    if (auditSettings) {
                        auditSettings.scrollIntoView({ behavior: 'smooth' });
                    }
                }, 300);
            });
        }
    }

    showSection(sectionId) {
        // Find the menu item for this section
        const menuItem = document.querySelector(`.menu-item[data-section="${sectionId}"]`);
        if (menuItem) {
            // Trigger the click event to use existing navigation logic
            menuItem.click();
        }
    }

    renderDashboardAudits() {
        this.renderDashboardCertifications();
        this.renderDashboardInternalAudits();
        this.renderDashboardExternalAudits();
    }

    renderDashboardCertifications() {
        const container = document.getElementById('dashboardCertificationsList');
        if (!container) return;

        if (!this.auditCertifications.certifications || this.auditCertifications.certifications.length === 0) {
            container.innerHTML = '<p class="no-content">Keine T√úV-Zertifizierungen vorhanden.</p>';
            return;
        }

        const certsHtml = this.auditCertifications.certifications.map(cert => `
            <div class="cert-item">
                <span class="cert-name">${cert.name}</span>
                <span class="cert-validity">${cert.validity}</span>
            </div>
        `).join('');

        container.innerHTML = certsHtml;
    }

    renderDashboardInternalAudits() {
        const container = document.getElementById('dashboardInternalAuditsList');
        if (!container) return;

        if (!this.auditCertifications.internalAudits || this.auditCertifications.internalAudits.length === 0) {
            container.innerHTML = '<p class="no-content">Keine internen Audits vorhanden.</p>';
            return;
        }

        // Show only the 3 most recent audits
        const recentAudits = this.auditCertifications.internalAudits
            .sort((a, b) => new Date(b.date) - new Date(a.date))
            .slice(0, 3);

        const auditsHtml = recentAudits.map(audit => {
            const statusClass = audit.status === 'abgeschlossen' ? 'passed' : 
                               audit.status === 'durchgef√ºhrt' ? 'in-progress' : 'pending';
            const statusText = audit.status === 'abgeschlossen' ? 'Abgeschlossen' :
                              audit.status === 'durchgef√ºhrt' ? 'Durchgef√ºhrt' : 'Geplant';
            
            return `
                <div class="audit-item ${statusClass}">
                    <span class="audit-type">${audit.title}</span>
                    <span class="audit-date">${new Date(audit.date).toLocaleDateString('de-DE')}</span>
                    <span class="audit-result">${statusText}</span>
                </div>
            `;
        }).join('');

        container.innerHTML = auditsHtml;
    }

    renderDashboardExternalAudits() {
        const container = document.getElementById('dashboardExternalAuditsList');
        if (!container) return;

        if (!this.auditCertifications.externalAudits || this.auditCertifications.externalAudits.length === 0) {
            container.innerHTML = '<p class="no-content">Keine externen Audits vorhanden.</p>';
            return;
        }

        // Show only the 3 most recent audits
        const recentAudits = this.auditCertifications.externalAudits
            .sort((a, b) => new Date(b.date) - new Date(a.date))
            .slice(0, 3);

        const auditsHtml = recentAudits.map(audit => {
            const statusClass = audit.status === 'abgeschlossen' ? 'passed' : 
                               audit.status === 'durchgef√ºhrt' ? 'in-progress' : 'pending';
            const statusText = audit.status === 'abgeschlossen' ? 'Abgeschlossen' :
                              audit.status === 'durchgef√ºhrt' ? 'Durchgef√ºhrt' : 'Geplant';
            
            return `
                <div class="audit-item ${statusClass}">
                    <span class="audit-type">${audit.title}</span>
                    <span class="audit-date">${new Date(audit.date).toLocaleDateString('de-DE')}</span>
                    <span class="audit-result">${statusText}</span>
                </div>
            `;
        }).join('');

        container.innerHTML = auditsHtml;
    }

    setupDashboardKpiManagement() {
        const saveBtn = document.getElementById('saveDashboardKpisBtn');
        const resetBtn = document.getElementById('resetDashboardKpisBtn');
        const previewBtn = document.getElementById('previewDashboardBtn');

        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.saveDashboardKpis();
            });
        }

        if (resetBtn) {
            resetBtn.addEventListener('click', () => {
                if (confirm('M√∂chten Sie wirklich alle Dashboard-Inhalte auf die Standardwerte zur√ºcksetzen?')) {
                    this.resetDashboardKpis();
                }
            });
        }

        if (previewBtn) {
            previewBtn.addEventListener('click', () => {
                this.showSection('dashboard');
            });
        }

        // Setup edit KPI button in dashboard
        const editKpiBtn = document.getElementById('editKpiBtn');
        if (editKpiBtn) {
            editKpiBtn.addEventListener('click', () => {
                this.showSection('einstellungen');
                
                // Scroll to dashboard KPI management section
                setTimeout(() => {
                    const settingsCards = document.querySelectorAll('.settings-card h3');
                    for (const h3 of settingsCards) {
                        if (h3.textContent.includes('Dashboard Inhalte verwalten')) {
                            h3.closest('.settings-card').scrollIntoView({ behavior: 'smooth' });
                            break;
                        }
                    }
                }, 300);
            });
        }

        // Setup custom KPI management
        const addCustomKpiBtn = document.getElementById('addCustomKpiBtn');
        if (addCustomKpiBtn) {
            addCustomKpiBtn.addEventListener('click', () => {
                this.addCustomKpi();
            });
        }

        // Load current values into form
        this.loadDashboardKpisToForm();
        this.renderExistingCustomKpis();
    }

    loadDashboardKpisFromStorage() {
        try {
            const stored = localStorage.getItem('qhse_dashboard_kpis');
            if (stored) {
                return JSON.parse(stored);
            }
        } catch (e) {
            console.error('Fehler beim Laden der Dashboard-KPIs:', e);
        }

        // Default KPI values
        return {
            safety: { value: '98.5', unit: '%', label: 'Compliance Rate' },
            quality: { value: '99.2', unit: '%', label: 'Qualit√§tsrate' },
            environment: { value: '12', unit: 't', label: 'CO‚ÇÇ Einsparung' },
            health: { value: '2.1', unit: 'Tage', label: 'Krankentage (√ò)' },
            customerSatisfaction: { value: '4.7', max: '5', label: 'von 5 Sternen' }
        };
    }

    saveDashboardKpisToStorage() {
        try {
            localStorage.setItem('qhse_dashboard_kpis', JSON.stringify(this.dashboardKpis));
        } catch (e) {
            console.error('Fehler beim Speichern der Dashboard-KPIs:', e);
            alert('Fehler beim Speichern. M√∂glicherweise ist der Speicher voll.');
        }
    }

    loadDashboardKpisToForm() {
        // Safety KPI
        this.setInputValue('safetyKpiValue', this.dashboardKpis.safety.value);
        this.setInputValue('safetyKpiUnit', this.dashboardKpis.safety.unit);
        this.setInputValue('safetyKpiLabel', this.dashboardKpis.safety.label);

        // Quality KPI
        this.setInputValue('qualityKpiValue', this.dashboardKpis.quality.value);
        this.setInputValue('qualityKpiUnit', this.dashboardKpis.quality.unit);
        this.setInputValue('qualityKpiLabel', this.dashboardKpis.quality.label);

        // Environment KPI
        this.setInputValue('environmentKpiValue', this.dashboardKpis.environment.value);
        this.setInputValue('environmentKpiUnit', this.dashboardKpis.environment.unit);
        this.setInputValue('environmentKpiLabel', this.dashboardKpis.environment.label);

        // Health KPI
        this.setInputValue('healthKpiValue', this.dashboardKpis.health.value);
        this.setInputValue('healthKpiUnit', this.dashboardKpis.health.unit);
        this.setInputValue('healthKpiLabel', this.dashboardKpis.health.label);

        // Customer Satisfaction
        this.setInputValue('customerSatisfactionValue', this.dashboardKpis.customerSatisfaction.value);
        this.setInputValue('customerSatisfactionMax', this.dashboardKpis.customerSatisfaction.max);
        this.setInputValue('customerSatisfactionLabel', this.dashboardKpis.customerSatisfaction.label);
    }

    setInputValue(id, value) {
        const element = document.getElementById(id);
        if (element && value !== undefined) {
            element.value = value;
        }
    }

    saveDashboardKpis() {
        // Get values from form
        this.dashboardKpis.safety.value = this.getInputValue('safetyKpiValue') || '98.5';
        this.dashboardKpis.safety.unit = this.getInputValue('safetyKpiUnit') || '%';
        this.dashboardKpis.safety.label = this.getInputValue('safetyKpiLabel') || 'Compliance Rate';

        this.dashboardKpis.quality.value = this.getInputValue('qualityKpiValue') || '99.2';
        this.dashboardKpis.quality.unit = this.getInputValue('qualityKpiUnit') || '%';
        this.dashboardKpis.quality.label = this.getInputValue('qualityKpiLabel') || 'Qualit√§tsrate';

        this.dashboardKpis.environment.value = this.getInputValue('environmentKpiValue') || '12';
        this.dashboardKpis.environment.unit = this.getInputValue('environmentKpiUnit') || 't';
        this.dashboardKpis.environment.label = this.getInputValue('environmentKpiLabel') || 'CO‚ÇÇ Einsparung';

        this.dashboardKpis.health.value = this.getInputValue('healthKpiValue') || '2.1';
        this.dashboardKpis.health.unit = this.getInputValue('healthKpiUnit') || 'Tage';
        this.dashboardKpis.health.label = this.getInputValue('healthKpiLabel') || 'Krankentage (√ò)';

        this.dashboardKpis.customerSatisfaction.value = this.getInputValue('customerSatisfactionValue') || '4.7';
        this.dashboardKpis.customerSatisfaction.max = this.getInputValue('customerSatisfactionMax') || '5';
        this.dashboardKpis.customerSatisfaction.label = this.getInputValue('customerSatisfactionLabel') || 'von 5 Sternen';

        // Save to storage
        this.saveDashboardKpisToStorage();

        // Update dashboard display
        this.updateDashboardKpiDisplay();

        alert('Dashboard-Inhalte wurden erfolgreich gespeichert!');
    }

    getInputValue(id) {
        const element = document.getElementById(id);
        return element ? element.value.trim() : '';
    }

    resetDashboardKpis() {
        // Reset to default values
        this.dashboardKpis = {
            safety: { value: '98.5', unit: '%', label: 'Compliance Rate' },
            quality: { value: '99.2', unit: '%', label: 'Qualit√§tsrate' },
            environment: { value: '12', unit: 't', label: 'CO‚ÇÇ Einsparung' },
            health: { value: '2.1', unit: 'Tage', label: 'Krankentage (√ò)' },
            customerSatisfaction: { value: '4.7', max: '5', label: 'von 5 Sternen' }
        };

        this.saveDashboardKpisToStorage();
        this.loadDashboardKpisToForm();
        this.updateDashboardKpiDisplay();

        alert('Dashboard-Inhalte wurden auf Standardwerte zur√ºckgesetzt!');
    }

    updateDashboardKpiDisplay() {
        // Update Safety KPI
        const safetyValue = document.querySelector('.kpi-card.safety .kpi-value');
        const safetyLabel = document.querySelector('.kpi-card.safety p');
        if (safetyValue) safetyValue.textContent = `${this.dashboardKpis.safety.value}${this.dashboardKpis.safety.unit}`;
        if (safetyLabel) safetyLabel.textContent = this.dashboardKpis.safety.label;

        // Update Quality KPI
        const qualityValue = document.querySelector('.kpi-card.quality .kpi-value');
        const qualityLabel = document.querySelector('.kpi-card.quality p');
        if (qualityValue) qualityValue.textContent = `${this.dashboardKpis.quality.value}${this.dashboardKpis.quality.unit}`;
        if (qualityLabel) qualityLabel.textContent = this.dashboardKpis.quality.label;

        // Update Environment KPI
        const environmentValue = document.querySelector('.kpi-card.environment .kpi-value');
        const environmentLabel = document.querySelector('.kpi-card.environment p');
        if (environmentValue) environmentValue.textContent = `${this.dashboardKpis.environment.value}`;
        if (environmentLabel) environmentLabel.textContent = `${this.dashboardKpis.environment.label} (${this.dashboardKpis.environment.unit})`;

        // Update Health KPI
        const healthValue = document.querySelector('.kpi-card.health .kpi-value');
        const healthLabel = document.querySelector('.kpi-card.health p');
        if (healthValue) healthValue.textContent = this.dashboardKpis.health.value;
        if (healthLabel) healthLabel.textContent = `${this.dashboardKpis.health.label} (${this.dashboardKpis.health.unit})`;

        // Update Customer Satisfaction
        const satisfactionValue = document.querySelector('.score');
        const satisfactionLabel = document.querySelector('.widget.customer-satisfaction p');
        if (satisfactionValue) satisfactionValue.textContent = this.dashboardKpis.customerSatisfaction.value;
        if (satisfactionLabel) satisfactionLabel.textContent = this.dashboardKpis.customerSatisfaction.label;
    }

    updateElementVisibilityByRole() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return;

        // Find all elements with data-roles attribute
        const elementsWithRoles = document.querySelectorAll('[data-roles]');
        
        elementsWithRoles.forEach(element => {
            const allowedRoles = element.getAttribute('data-roles').split(',').map(role => role.trim());
            
            if (allowedRoles.includes(currentUser.role)) {
                element.style.display = '';
                element.classList.remove('hidden');
            } else {
                element.style.display = 'none';
                element.classList.add('hidden');
            }
        });
    }

    loadCustomKpisFromStorage() {
        try {
            const stored = localStorage.getItem('qhse_custom_kpis');
            if (stored) {
                return JSON.parse(stored);
            }
        } catch (e) {
            console.error('Fehler beim Laden der benutzerdefinierten KPIs:', e);
        }
        return [];
    }

    saveCustomKpisToStorage() {
        try {
            localStorage.setItem('qhse_custom_kpis', JSON.stringify(this.customKpis));
        } catch (e) {
            console.error('Fehler beim Speichern der benutzerdefinierten KPIs:', e);
            alert('Fehler beim Speichern. M√∂glicherweise ist der Speicher voll.');
        }
    }

    addCustomKpi() {
        const titleInput = document.getElementById('customKpiTitle');
        const valueInput = document.getElementById('customKpiValue');
        const unitInput = document.getElementById('customKpiUnit');
        const labelInput = document.getElementById('customKpiLabel');
        const iconSelect = document.getElementById('customKpiIcon');
        const colorSelect = document.getElementById('customKpiColor');

        // Validate required fields
        if (!titleInput.value.trim()) {
            alert('Bitte geben Sie einen Titel f√ºr das KPI ein.');
            titleInput.focus();
            return;
        }

        if (!valueInput.value.trim()) {
            alert('Bitte geben Sie einen Wert f√ºr das KPI ein.');
            valueInput.focus();
            return;
        }

        if (!iconSelect.value) {
            alert('Bitte w√§hlen Sie ein Icon f√ºr das KPI aus.');
            iconSelect.focus();
            return;
        }

        if (!colorSelect.value) {
            alert('Bitte w√§hlen Sie eine Farbe f√ºr das KPI aus.');
            colorSelect.focus();
            return;
        }

        // Create new custom KPI
        const newKpi = {
            id: Date.now(),
            title: titleInput.value.trim(),
            value: valueInput.value.trim(),
            unit: unitInput.value.trim() || '',
            label: labelInput.value.trim() || '',
            icon: iconSelect.value,
            color: colorSelect.value,
            createdAt: new Date().toISOString()
        };

        // Add to custom KPIs array
        this.customKpis.push(newKpi);
        
        // Save to storage
        this.saveCustomKpisToStorage();

        // Clear form
        titleInput.value = '';
        valueInput.value = '';
        unitInput.value = '';
        labelInput.value = '';
        iconSelect.value = '';
        colorSelect.value = '';

        // Update UI
        this.renderExistingCustomKpis();
        this.renderCustomKpisOnDashboard();

        alert('Benutzerdefiniertes KPI wurde erfolgreich hinzugef√ºgt!');
    }

    renderExistingCustomKpis() {
        const container = document.getElementById('existingCustomKpis');
        if (!container) return;

        if (this.customKpis.length === 0) {
            container.innerHTML = '<p class="no-content">Keine benutzerdefinierten KPIs vorhanden.</p>';
            return;
        }

        const kpisHtml = this.customKpis.map(kpi => `
            <div class="custom-kpi-item" data-id="${kpi.id}">
                <div class="kpi-preview">
                    <div class="kpi-icon-preview kpi-color-${kpi.color}">
                        <i class="${kpi.icon}"></i>
                    </div>
                    <div class="kpi-info">
                        <h5>${kpi.title}</h5>
                        <div class="kpi-value-preview">${kpi.value}${kpi.unit}</div>
                        <p>${kpi.label}</p>
                    </div>
                </div>
                <div class="kpi-actions">
                    <button onclick="window.qhseDashboard.editCustomKpi(${kpi.id})" class="btn-secondary btn-sm">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                    <button onclick="window.qhseDashboard.deleteCustomKpi(${kpi.id})" class="btn-danger btn-sm">
                        <i class="fas fa-trash"></i> L√∂schen
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = kpisHtml;
    }

    editCustomKpi(kpiId) {
        const kpi = this.customKpis.find(k => k.id === kpiId);
        if (!kpi) return;

        // Fill form with existing values
        document.getElementById('customKpiTitle').value = kpi.title;
        document.getElementById('customKpiValue').value = kpi.value;
        document.getElementById('customKpiUnit').value = kpi.unit;
        document.getElementById('customKpiLabel').value = kpi.label;
        document.getElementById('customKpiIcon').value = kpi.icon;
        document.getElementById('customKpiColor').value = kpi.color;

        // Change button text and function
        const addBtn = document.getElementById('addCustomKpiBtn');
        addBtn.innerHTML = '<i class="fas fa-save"></i> KPI aktualisieren';
        addBtn.onclick = () => this.updateCustomKpi(kpiId);
    }

    updateCustomKpi(kpiId) {
        const kpiIndex = this.customKpis.findIndex(k => k.id === kpiId);
        if (kpiIndex === -1) return;

        const titleInput = document.getElementById('customKpiTitle');
        const valueInput = document.getElementById('customKpiValue');
        const unitInput = document.getElementById('customKpiUnit');
        const labelInput = document.getElementById('customKpiLabel');
        const iconSelect = document.getElementById('customKpiIcon');
        const colorSelect = document.getElementById('customKpiColor');

        // Validate required fields
        if (!titleInput.value.trim() || !valueInput.value.trim() || !iconSelect.value || !colorSelect.value) {
            alert('Bitte f√ºllen Sie alle Pflichtfelder aus.');
            return;
        }

        // Update KPI
        this.customKpis[kpiIndex] = {
            ...this.customKpis[kpiIndex],
            title: titleInput.value.trim(),
            value: valueInput.value.trim(),
            unit: unitInput.value.trim() || '',
            label: labelInput.value.trim() || '',
            icon: iconSelect.value,
            color: colorSelect.value,
            updatedAt: new Date().toISOString()
        };

        // Save to storage
        this.saveCustomKpisToStorage();

        // Reset form and button
        this.resetCustomKpiForm();

        // Update UI
        this.renderExistingCustomKpis();
        this.renderCustomKpisOnDashboard();

        alert('Benutzerdefiniertes KPI wurde erfolgreich aktualisiert!');
    }

    deleteCustomKpi(kpiId) {
        const kpi = this.customKpis.find(k => k.id === kpiId);
        if (!kpi) return;

        if (confirm(`M√∂chten Sie das KPI "${kpi.title}" wirklich l√∂schen?`)) {
            // Remove from array
            this.customKpis = this.customKpis.filter(k => k.id !== kpiId);
            
            // Save to storage
            this.saveCustomKpisToStorage();

            // Update UI
            this.renderExistingCustomKpis();
            this.renderCustomKpisOnDashboard();

            alert('Benutzerdefiniertes KPI wurde erfolgreich gel√∂scht!');
        }
    }

    resetCustomKpiForm() {
        document.getElementById('customKpiTitle').value = '';
        document.getElementById('customKpiValue').value = '';
        document.getElementById('customKpiUnit').value = '';
        document.getElementById('customKpiLabel').value = '';
        document.getElementById('customKpiIcon').value = '';
        document.getElementById('customKpiColor').value = '';

        const addBtn = document.getElementById('addCustomKpiBtn');
        addBtn.innerHTML = '<i class="fas fa-plus"></i> KPI hinzuf√ºgen';
        addBtn.onclick = () => this.addCustomKpi();
    }

    renderCustomKpisOnDashboard() {
        const kpiCardsContainer = document.querySelector('.kpi-cards');
        if (!kpiCardsContainer) return;

        // Remove existing custom KPI cards
        const existingCustomCards = kpiCardsContainer.querySelectorAll('.kpi-card.custom');
        existingCustomCards.forEach(card => card.remove());

        // Add new custom KPI cards
        this.customKpis.forEach(kpi => {
            const kpiCard = document.createElement('div');
            kpiCard.className = `kpi-card custom kpi-color-${kpi.color}`;
            kpiCard.innerHTML = `
                <div class="kpi-icon">
                    <i class="${kpi.icon}"></i>
                </div>
                <div class="kpi-content">
                    <h3>${kpi.title}</h3>
                    <div class="kpi-value">${kpi.value}${kpi.unit}</div>
                    <p>${kpi.label}</p>
                </div>
            `;
            
            kpiCardsContainer.appendChild(kpiCard);
        });
    }

    setupAuditResultsModal() {
        const modal = document.getElementById('auditResultsModal');
        const closeBtn = document.getElementById('closeAuditResults');
        const saveBtn = document.getElementById('saveAuditResultsBtn');
        const cancelBtn = document.getElementById('cancelAuditResultsBtn');

        if (!modal || !closeBtn || !saveBtn || !cancelBtn) {
            console.log('Audit results modal elements not found');
            return;
        }

        // Close handlers
        closeBtn.onclick = () => {
            modal.style.display = 'none';
            this.currentEditingAudit = null;
        };
        
        cancelBtn.onclick = () => {
            modal.style.display = 'none';
            this.currentEditingAudit = null;
        };
        
        modal.onclick = (e) => {
            if (e.target === modal) {
                modal.style.display = 'none';
                this.currentEditingAudit = null;
            }
        };

        // Save handler
        saveBtn.onclick = () => this.saveAuditResults();

        console.log('Audit results modal setup complete');
    }

    loadAuditCertificationsFromStorage() {
        const stored = localStorage.getItem('qhse_audit_certifications');
        if (stored) {
            try {
                return JSON.parse(stored);
            } catch (e) {
                console.error('Fehler beim Laden der Audit-Zertifizierungen:', e);
            }
        }
        return {
            certifications: [
                { id: 1, name: 'ISO 9001:2015', validity: 'G√ºltig bis 12/2025' },
                { id: 2, name: 'ISO 14001:2015', validity: 'G√ºltig bis 03/2026' },
                { id: 3, name: 'OHSAS 18001', validity: 'Erneuerung 04/2024' }
            ],
            internalAudits: [
                { id: 1, type: 'Qualit√§tsaudit', title: 'Qualit√§tsaudit Q2 2024', date: '2024-06-15', status: 'abgeschlossen', 
                  results: { findings: 'Verbesserungen in der Dokumentation erforderlich', actions: '√úberarbeitung der Arbeitsanweisungen', score: 'Gut', notes: 'N√§chstes Audit in 6 Monaten' } },
                { id: 2, type: 'Umweltaudit', title: 'Umweltaudit Q3 2024', date: '2024-08-20', status: 'geplant' }
            ],
            externalAudits: [
                { id: 1, type: 'ISO 9001 Zertifizierung', title: 'ISO 9001 Zertifizierung √úberwachungsaudit', auditor: 'T√úV Rheinland', date: '2024-05-10', status: 'bestanden',
                  results: { findings: 'Alle Anforderungen erf√ºllt', actions: 'Kontinuierliche Verbesserung empfohlen', score: 'Bestanden', notes: 'Zertifikat g√ºltig bis 2027' } },
                { id: 2, type: 'ISO 14001 Zertifizierung', title: 'ISO 14001 Zertifizierung Rezertifizierung', auditor: 'T√úV Nord', date: '2024-09-15', status: 'geplant' }
            ]
        };
    }

    saveAuditCertificationsToStorage() {
        try {
            localStorage.setItem('qhse_audit_certifications', JSON.stringify(this.auditCertifications));
        } catch (e) {
            console.error('Fehler beim Speichern der Audit-Zertifizierungen:', e);
            alert('Fehler beim Speichern. M√∂glicherweise ist der Speicher voll.');
        }
    }

    loadAuditCertificationsToSettings() {
        this.renderExistingCertifications();
        this.renderExistingInternalAudits();
        this.renderExistingExternalAudits();
    }

    addCertification() {
        const nameInput = document.getElementById('certificationName');
        const validityInput = document.getElementById('certificationValidity');

        if (!nameInput.value.trim() || !validityInput.value.trim()) {
            alert('Bitte f√ºllen Sie alle Felder aus.');
            return;
        }

        const newCert = {
            id: Date.now(),
            name: nameInput.value.trim(),
            validity: validityInput.value.trim()
        };

        this.auditCertifications.certifications.push(newCert);
        
        nameInput.value = '';
        validityInput.value = '';
        
        this.renderExistingCertifications();
        this.renderAuditCertifications();
        this.renderDashboardAudits();
    }

    addInternalAudit() {
        // First ensure we're in the right section
        const settingsSection = document.getElementById('einstellungen-section');
        if (!settingsSection || settingsSection.style.display === 'none') {
            alert('Fehler: Bitte navigieren Sie erst zu Einstellungen ‚Üí Audit-Zertifizierungen verwalten');
            return;
        }

        // Wait a moment for elements to be ready
        setTimeout(() => {
            const typeSelect = document.getElementById('internalAuditType');
            const titleInput = document.getElementById('internalAuditTitle');
            const dateInput = document.getElementById('internalAuditDate');
            const statusSelect = document.getElementById('internalAuditStatus');

            console.log('Adding internal audit - Field values:', {
                type: typeSelect?.value,
                title: titleInput?.value,
                titleTrimmed: titleInput?.value?.trim(),
                date: dateInput?.value,
                status: statusSelect?.value
            });

            console.log('Form elements found:', {
                typeSelect: !!typeSelect,
                titleInput: !!titleInput,
                dateInput: !!dateInput,
                statusSelect: !!statusSelect
            });

            // Check if elements exist
            if (!typeSelect || !titleInput || !dateInput || !statusSelect) {
                console.error('Missing form elements - detailed check:', {
                    typeSelectExists: !!typeSelect,
                    titleInputExists: !!titleInput, 
                    dateInputExists: !!dateInput,
                    statusSelectExists: !!statusSelect,
                    settingsVisible: settingsSection.style.display !== 'none'
                });
                alert('Fehler: Formularfelder nicht gefunden. Bitte stellen Sie sicher, dass Sie in den Einstellungen sind.');
                return;
            }

            // Validate required fields with better error messages
            if (!typeSelect.value || typeSelect.value.trim() === '') {
                alert('Bitte w√§hlen Sie einen Audit-Typ aus der Dropdown-Liste aus.');
                typeSelect.focus();
                return;
            }

            const titleValue = titleInput.value ? titleInput.value.trim() : '';
            if (!titleValue || titleValue === '') {
                alert('Bitte geben Sie einen Titel/Bezeichnung f√ºr das Audit ein (z.B. "2024 Q2").');
                titleInput.focus();
                return;
            }

            if (!dateInput.value || dateInput.value.trim() === '') {
                alert('Bitte w√§hlen Sie ein Datum f√ºr das Audit aus.');
                dateInput.focus();
                return;
            }

            this.performAddInternalAudit(typeSelect, titleInput, dateInput, statusSelect);
        }, 100);
    }

    performAddInternalAudit(typeSelect, titleInput, dateInput, statusSelect) {
        const fullTitle = `${typeSelect.value} ${titleInput.value.trim()}`;

        const newAudit = {
            id: Date.now(),
            type: typeSelect.value,
            title: fullTitle,
            date: dateInput.value,
            status: statusSelect.value || 'geplant'
        };

        console.log('Creating new internal audit:', newAudit);

        if (!this.auditCertifications.internalAudits) {
            this.auditCertifications.internalAudits = [];
        }

        this.auditCertifications.internalAudits.push(newAudit);
        this.saveAuditCertificationsToStorage();
        
        // Clear form
        typeSelect.value = '';
        titleInput.value = '';
        dateInput.value = '';
        statusSelect.value = 'geplant';
        
        this.renderExistingInternalAudits();
        this.renderAuditCertifications();
        this.renderDashboardAudits();
        
        alert('Internes Audit wurde erfolgreich hinzugef√ºgt.');
    }

    addExternalAudit() {
        // First ensure we're in the right section
        const settingsSection = document.getElementById('einstellungen-section');
        if (!settingsSection || settingsSection.style.display === 'none') {
            alert('Fehler: Bitte navigieren Sie erst zu Einstellungen ‚Üí Audit-Zertifizierungen verwalten');
            return;
        }

        // Wait a moment for elements to be ready
        setTimeout(() => {
            const typeSelect = document.getElementById('externalAuditType');
            const titleInput = document.getElementById('externalAuditTitle');
            const auditorInput = document.getElementById('externalAuditor');
            const dateInput = document.getElementById('externalAuditDate');
            const statusSelect = document.getElementById('externalAuditStatus');

            console.log('Adding external audit - Field values:', {
                type: typeSelect?.value,
                title: titleInput?.value,
                auditor: auditorInput?.value,
                date: dateInput?.value,
                status: statusSelect?.value
            });

            // Check if elements exist
            if (!typeSelect || !titleInput || !auditorInput || !dateInput || !statusSelect) {
                console.error('Missing form elements:', { typeSelect, titleInput, auditorInput, dateInput, statusSelect });
                alert('Fehler: Formularfelder nicht gefunden. Bitte stellen Sie sicher, dass Sie in den Einstellungen sind.');
                return;
            }

            // Validate required fields with better error messages
            if (!typeSelect.value || typeSelect.value.trim() === '') {
                alert('Bitte w√§hlen Sie einen externen Audit-Typ aus der Dropdown-Liste aus.');
                typeSelect.focus();
                return;
            }

            const titleValue = titleInput.value ? titleInput.value.trim() : '';
            if (!titleValue || titleValue === '') {
                alert('Bitte geben Sie einen Titel/Bezeichnung f√ºr das externe Audit ein.');
                titleInput.focus();
                return;
            }

            const auditorValue = auditorInput.value ? auditorInput.value.trim() : '';
            if (!auditorValue || auditorValue === '') {
                alert('Bitte geben Sie den Namen des externen Auditors/der Zertifizierungsstelle ein.');
                auditorInput.focus();
                return;
            }

            if (!dateInput.value || dateInput.value.trim() === '') {
                alert('Bitte w√§hlen Sie ein Datum f√ºr das externe Audit aus.');
                dateInput.focus();
                return;
            }

            this.performAddExternalAudit(typeSelect, titleInput, auditorInput, dateInput, statusSelect);
        }, 100);
    }

    performAddExternalAudit(typeSelect, titleInput, auditorInput, dateInput, statusSelect) {
        const fullTitle = `${typeSelect.value} ${titleInput.value.trim()}`;

        const newAudit = {
            id: Date.now(),
            type: typeSelect.value,
            title: fullTitle,
            auditor: auditorInput.value.trim(),
            date: dateInput.value,
            status: statusSelect.value || 'geplant'
        };

        console.log('Creating new external audit:', newAudit);

        if (!this.auditCertifications.externalAudits) {
            this.auditCertifications.externalAudits = [];
        }
        this.auditCertifications.externalAudits.push(newAudit);
        this.saveAuditCertificationsToStorage();
        
        // Clear form
        typeSelect.value = '';
        titleInput.value = '';
        auditorInput.value = '';
        dateInput.value = '';
        statusSelect.value = 'geplant';
        
        this.renderExistingExternalAudits();
        this.renderAuditCertifications();
        this.renderDashboardAudits();
        
        alert('Externes Audit wurde erfolgreich hinzugef√ºgt.');
    }

    renderExistingCertifications() {
        const container = document.getElementById('existingCertifications');
        if (!container) return;

        if (!this.auditCertifications.certifications || this.auditCertifications.certifications.length === 0) {
            container.innerHTML = '<p class="no-content">Keine Zertifizierungen vorhanden.</p>';
            return;
        }

        const certsHtml = this.auditCertifications.certifications.map(cert => `
            <div class="certification-item" data-id="${cert.id}">
                <div class="certification-info">
                    <strong>${cert.name}</strong> - ${cert.validity}
                </div>
                <div class="certification-actions">
                    <button onclick="window.qhseDashboard.editCertification(${cert.id})" class="btn-secondary btn-sm">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                    <button onclick="window.qhseDashboard.deleteCertification(${cert.id})" class="btn-danger btn-sm">
                        <i class="fas fa-trash"></i> L√∂schen
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = certsHtml;
    }

    renderExistingInternalAudits() {
        const container = document.getElementById('existingInternalAudits');
        if (!container) return;

        if (!this.auditCertifications.internalAudits || this.auditCertifications.internalAudits.length === 0) {
            container.innerHTML = '<p class="no-content">Keine internen Audits vorhanden.</p>';
            return;
        }

        const auditsHtml = this.auditCertifications.internalAudits.map(audit => `
            <div class="audit-item" data-id="${audit.id}">
                <div class="audit-info">
                    <strong>${audit.title}</strong><br>
                    <small>Datum: ${new Date(audit.date).toLocaleDateString('de-DE')} | Status: ${audit.status}</small>
                </div>
                <div class="audit-actions">
                    <button onclick="window.qhseDashboard.editAuditResults(${audit.id}, 'internal')" class="btn-secondary btn-sm">
                        <i class="fas fa-clipboard-list"></i> Ergebnisse
                    </button>
                    <button onclick="window.qhseDashboard.editInternalAudit(${audit.id})" class="btn-secondary btn-sm">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                    <button onclick="window.qhseDashboard.deleteInternalAudit(${audit.id})" class="btn-danger btn-sm">
                        <i class="fas fa-trash"></i> L√∂schen
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = auditsHtml;
    }

    renderAuditCertifications() {
        this.renderCertificationsList();
        this.renderInternalAuditsList();
        this.renderExternalAuditsList();
    }

    renderCertificationsList() {
        const container = document.getElementById('certificationsList');
        if (!container) return;

        if (!this.auditCertifications.certifications || this.auditCertifications.certifications.length === 0) {
            container.innerHTML = '<div class="cert-item">Keine Zertifizierungen vorhanden.</div>';
            return;
        }

        const certsHtml = this.auditCertifications.certifications.map(cert => 
            `<div class="cert-item">${cert.name} - ${cert.validity}</div>`
        ).join('');

        container.innerHTML = certsHtml;
    }

    renderInternalAuditsList() {
        const container = document.getElementById('internalAuditsList');
        if (!container) return;

        if (!this.auditCertifications.internalAudits || this.auditCertifications.internalAudits.length === 0) {
            container.innerHTML = '<div class="audit-item">Keine internen Audits vorhanden.</div>';
            return;
        }

        const auditsHtml = this.auditCertifications.internalAudits.map(audit => `
            <div class="audit-item" onclick="window.qhseDashboard.viewAuditDetails(${audit.id}, 'internal')">
                <span class="audit-type">${audit.title}</span>
                <span class="audit-date">${new Date(audit.date).toLocaleDateString('de-DE')}</span>
                <span class="audit-result audit-${audit.status}">${audit.status}</span>
                ${audit.results ? '<i class="fas fa-file-alt audit-has-results" title="Ergebnisse verf√ºgbar"></i>' : ''}
            </div>
        `).join('');

        container.innerHTML = auditsHtml;
    }

    renderExternalAuditsList() {
        const container = document.getElementById('externalAuditsList');
        if (!container) return;

        if (!this.auditCertifications.externalAudits || this.auditCertifications.externalAudits.length === 0) {
            container.innerHTML = '<div class="audit-item">Keine externen Audits vorhanden.</div>';
            return;
        }

        const auditsHtml = this.auditCertifications.externalAudits.map(audit => `
            <div class="audit-item" onclick="window.qhseDashboard.viewAuditDetails(${audit.id}, 'external')">
                <span class="audit-type">${audit.title} (${audit.auditor})</span>
                <span class="audit-date">${new Date(audit.date).toLocaleDateString('de-DE')}</span>
                <span class="audit-result audit-${audit.status}">${audit.status}</span>
                ${audit.results ? '<i class="fas fa-file-alt audit-has-results" title="Ergebnisse verf√ºgbar"></i>' : ''}
            </div>
        `).join('');

        container.innerHTML = auditsHtml;
    }

    renderExistingExternalAudits() {
        const container = document.getElementById('existingExternalAudits');
        if (!container) return;

        if (!this.auditCertifications.externalAudits || this.auditCertifications.externalAudits.length === 0) {
            container.innerHTML = '<p class="no-content">Keine externen Audits vorhanden.</p>';
            return;
        }

        const auditsHtml = this.auditCertifications.externalAudits.map(audit => `
            <div class="audit-item" data-id="${audit.id}">
                <div class="audit-info">
                    <strong>${audit.title}</strong> (${audit.auditor})<br>
                    <small>Datum: ${new Date(audit.date).toLocaleDateString('de-DE')} | Status: ${audit.status}</small>
                </div>
                <div class="audit-actions">
                    <button onclick="window.qhseDashboard.editAuditResults(${audit.id}, 'external')" class="btn-secondary btn-sm">
                        <i class="fas fa-clipboard-list"></i> Ergebnisse
                    </button>
                    <button onclick="window.qhseDashboard.editExternalAudit(${audit.id})" class="btn-secondary btn-sm">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                    <button onclick="window.qhseDashboard.deleteExternalAudit(${audit.id})" class="btn-danger btn-sm">
                        <i class="fas fa-trash"></i> L√∂schen
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = auditsHtml;
    }

    editCertification(certId) {
        const cert = this.auditCertifications.certifications.find(c => c.id === certId);
        if (!cert) return;

        const newName = prompt('Zertifizierung bearbeiten:', cert.name);
        if (newName === null) return;

        const newValidity = prompt('G√ºltigkeit bearbeiten:', cert.validity);
        if (newValidity === null) return;

        cert.name = newName.trim();
        cert.validity = newValidity.trim();

        this.renderExistingCertifications();
        this.renderAuditCertifications();
        this.renderDashboardAudits();
    }

    editInternalAudit(auditId) {
        const audit = this.auditCertifications.internalAudits.find(a => a.id === auditId);
        if (!audit) return;

        const newTitle = prompt('Audit-Titel bearbeiten:', audit.title);
        if (newTitle === null) return;

        const newDate = prompt('Datum bearbeiten (YYYY-MM-DD):', audit.date);
        if (newDate === null) return;

        const newStatus = prompt('Status bearbeiten (geplant/durchgef√ºhrt/abgeschlossen):', audit.status);
        if (newStatus === null) return;

        audit.title = newTitle.trim();
        audit.date = newDate;
        audit.status = newStatus;

        this.renderExistingInternalAudits();
        this.renderAuditCertifications();
    }

    deleteCertification(certId) {
        if (!confirm('M√∂chten Sie diese Zertifizierung wirklich l√∂schen?')) return;

        this.auditCertifications.certifications = this.auditCertifications.certifications.filter(c => c.id !== certId);
        this.renderExistingCertifications();
        this.renderAuditCertifications();
        this.renderDashboardAudits();
    }

    deleteInternalAudit(auditId) {
        if (!confirm('M√∂chten Sie dieses interne Audit wirklich l√∂schen?')) return;

        this.auditCertifications.internalAudits = this.auditCertifications.internalAudits.filter(a => a.id !== auditId);
        this.renderExistingInternalAudits();
        this.renderAuditCertifications();
    }

    saveAuditCertifications() {
        this.saveAuditCertificationsToStorage();
        alert('Audit-Zertifizierungen wurden erfolgreich gespeichert.');
    }

    resetAuditCertifications() {
        this.auditCertifications = {
            certifications: [
                { id: 1, name: 'ISO 9001:2015', validity: 'G√ºltig bis 12/2025' },
                { id: 2, name: 'ISO 14001:2015', validity: 'G√ºltig bis 03/2026' },
                { id: 3, name: 'OHSAS 18001', validity: 'Erneuerung 04/2024' }
            ],
            internalAudits: [
                { id: 1, type: 'Qualit√§tsaudit', title: 'Qualit√§tsaudit Q2 2024', date: '2024-06-15', status: 'abgeschlossen', 
                  results: { findings: 'Verbesserungen in der Dokumentation erforderlich', actions: '√úberarbeitung der Arbeitsanweisungen', score: 'Gut', notes: 'N√§chstes Audit in 6 Monaten' } },
                { id: 2, type: 'Umweltaudit', title: 'Umweltaudit Q3 2024', date: '2024-08-20', status: 'geplant' }
            ],
            externalAudits: [
                { id: 1, type: 'ISO 9001 Zertifizierung', title: 'ISO 9001 Zertifizierung √úberwachungsaudit', auditor: 'T√úV Rheinland', date: '2024-05-10', status: 'bestanden',
                  results: { findings: 'Alle Anforderungen erf√ºllt', actions: 'Kontinuierliche Verbesserung empfohlen', score: 'Bestanden', notes: 'Zertifikat g√ºltig bis 2027' } },
                { id: 2, type: 'ISO 14001 Zertifizierung', title: 'ISO 14001 Zertifizierung Rezertifizierung', auditor: 'T√úV Nord', date: '2024-09-15', status: 'geplant' }
            ]
        };
        
        this.saveAuditCertificationsToStorage();
        this.loadAuditCertificationsToSettings();
        this.renderAuditCertifications();
        
        alert('Audit-Zertifizierungen wurden auf Standardwerte zur√ºckgesetzt.');
    }

    // Audit Results Management
    editAuditResults(auditId, type) {
        const currentUser = this.getCurrentUser();
        if (!currentUser || currentUser.role !== 'root-admin') {
            alert('Sie haben keine Berechtigung zum Bearbeiten von Audit-Ergebnissen. Nur der System-Administrator kann Ergebnisse bearbeiten.');
            return;
        }

        const audits = type === 'internal' ? this.auditCertifications.internalAudits : this.auditCertifications.externalAudits;
        const audit = audits.find(a => a.id === auditId);
        if (!audit) return;

        this.currentEditingAudit = { audit, type };
        this.showAuditResultsModal(audit);
    }

    showAuditResultsModal(audit) {
        console.log('Opening audit results modal for:', audit.title);
        
        const modal = document.getElementById('auditResultsModal');
        const title = document.getElementById('auditResultsTitle');
        const findingsInput = document.getElementById('auditResultsFindings');
        const actionsInput = document.getElementById('auditResultsActions');
        const scoreInput = document.getElementById('auditResultsScore');
        const notesInput = document.getElementById('auditResultsNotes');

        console.log('Modal elements:', { modal, title, findingsInput, actionsInput, scoreInput, notesInput });

        if (!modal) {
            console.error('Modal not found!');
            alert('Fehler: Modal konnte nicht gefunden werden.');
            return;
        }

        if (!title) {
            console.error('Title element not found!');
            return;
        }

        title.textContent = `Audit Ergebnisse - ${audit.title}`;

        // Load existing results if available
        if (audit.results) {
            console.log('Loading existing results:', audit.results);
            if (findingsInput) findingsInput.value = audit.results.findings || '';
            if (actionsInput) actionsInput.value = audit.results.actions || '';
            if (scoreInput) scoreInput.value = audit.results.score || '';
            if (notesInput) notesInput.value = audit.results.notes || '';
        } else {
            console.log('No existing results, clearing fields');
            if (findingsInput) findingsInput.value = '';
            if (actionsInput) actionsInput.value = '';
            if (scoreInput) scoreInput.value = '';
            if (notesInput) notesInput.value = '';
        }

        modal.style.display = 'block';
        console.log('Modal should now be visible');

        // Focus on first input field
        if (findingsInput) {
            setTimeout(() => findingsInput.focus(), 100);
        }
    }

    saveAuditResults() {
        if (!this.currentEditingAudit) return;

        const findingsInput = document.getElementById('auditResultsFindings');
        const actionsInput = document.getElementById('auditResultsActions');
        const scoreInput = document.getElementById('auditResultsScore');
        const notesInput = document.getElementById('auditResultsNotes');

        const results = {
            findings: findingsInput?.value || '',
            actions: actionsInput?.value || '',
            score: scoreInput?.value || '',
            notes: notesInput?.value || ''
        };

        this.currentEditingAudit.audit.results = results;
        this.saveAuditCertificationsToStorage();
        
        // Re-render displays
        this.renderAuditCertifications();
        if (this.currentEditingAudit.type === 'internal') {
            this.renderExistingInternalAudits();
        } else {
            this.renderExistingExternalAudits();
        }

        // Close modal
        document.getElementById('auditResultsModal').style.display = 'none';
        this.currentEditingAudit = null;

        alert('Audit-Ergebnisse wurden erfolgreich gespeichert.');
    }

    viewAuditDetails(auditId, type) {
        const audits = type === 'internal' ? this.auditCertifications.internalAudits : this.auditCertifications.externalAudits;
        const audit = audits.find(a => a.id === auditId);
        if (!audit || !audit.results) {
            alert('Keine Ergebnisse f√ºr dieses Audit verf√ºgbar.');
            return;
        }

        let details = `Audit: ${audit.title}\n`;
        details += `Datum: ${new Date(audit.date).toLocaleDateString('de-DE')}\n`;
        details += `Status: ${audit.status}\n\n`;
        
        if (audit.results.findings) details += `Befunde: ${audit.results.findings}\n\n`;
        if (audit.results.actions) details += `Ma√ünahmen: ${audit.results.actions}\n\n`;
        if (audit.results.score) details += `Bewertung: ${audit.results.score}\n\n`;
        if (audit.results.notes) details += `Notizen: ${audit.results.notes}`;

        alert(details);
    }

    editExternalAudit(auditId) {
        const audit = this.auditCertifications.externalAudits.find(a => a.id === auditId);
        if (!audit) return;

        const newTitle = prompt('Audit-Titel bearbeiten:', audit.title);
        if (newTitle === null) return;

        const newAuditor = prompt('Auditor bearbeiten:', audit.auditor);
        if (newAuditor === null) return;

        const newDate = prompt('Datum bearbeiten (YYYY-MM-DD):', audit.date);
        if (newDate === null) return;

        const newStatus = prompt('Status bearbeiten (geplant/durchgef√ºhrt/bestanden/nachbesserung):', audit.status);
        if (newStatus === null) return;

        audit.title = newTitle.trim();
        audit.auditor = newAuditor.trim();
        audit.date = newDate;
        audit.status = newStatus;

        this.renderExistingExternalAudits();
        this.renderAuditCertifications();
    }

    deleteExternalAudit(auditId) {
        if (!confirm('M√∂chten Sie dieses externe Audit wirklich l√∂schen?')) return;

        this.auditCertifications.externalAudits = this.auditCertifications.externalAudits.filter(a => a.id !== auditId);
        this.renderExistingExternalAudits();
        this.renderAuditCertifications();
    }

    debugAuditForms() {
        console.log('=== AUDIT FORMS DEBUG ===');
        
        // Check all form fields
        const fields = [
            'internalAuditType',
            'internalAuditTitle', 
            'internalAuditDate',
            'internalAuditStatus',
            'externalAuditType',
            'externalAuditTitle',
            'externalAuditor',
            'externalAuditDate',
            'externalAuditStatus'
        ];

        fields.forEach(fieldId => {
            const element = document.getElementById(fieldId);
            console.log(`${fieldId}:`, {
                exists: !!element,
                element: element,
                value: element?.value,
                type: element?.type,
                tagName: element?.tagName
            });
        });

        // List all inputs in the settings section
        const settingsSection = document.getElementById('einstellungen-section');
        if (settingsSection) {
            const allInputs = settingsSection.querySelectorAll('input, select, textarea');
            console.log('All inputs in settings section:', Array.from(allInputs).map(input => ({
                id: input.id,
                name: input.name,
                type: input.type,
                tagName: input.tagName,
                value: input.value
            })));
        }

        alert('Debug-Informationen wurden in die Konsole ausgegeben. √ñffnen Sie die Entwicklertools (F12).');
    }

    // ====================================================================
    // HAZARDOUS SUBSTANCES MODULE METHODS
    // ====================================================================

    loadHazardousSubstancesFromStorage() {
        try {
            const stored = localStorage.getItem('qhse_hazardous_substances');
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('Error loading hazardous substances:', error);
            return [];
        }
    }

    saveHazardousSubstancesToStorage() {
        try {
            const dataToSave = JSON.stringify(this.hazardousSubstances);
            const sizeInMB = (new Blob([dataToSave]).size / 1024 / 1024).toFixed(2);
            
            console.log(`Attempting to save ${sizeInMB}MB of hazardous substances data`);
            
            localStorage.setItem('qhse_hazardous_substances', dataToSave);
            console.log('Hazardous substances saved successfully');
        } catch (error) {
            console.error('Error saving hazardous substances:', error);
            
            if (error.name === 'QuotaExceededError') {
                alert(`Speicher-Limit erreicht! Die Daten sind zu gro√ü f√ºr den lokalen Speicher.\n\nTipps:\n‚Ä¢ Verwenden Sie kleinere PDF-Dateien (max. 5MB)\n‚Ä¢ Entfernen Sie nicht ben√∂tigte Dokumente\n‚Ä¢ Komprimieren Sie PDFs vor dem Upload`);
                
                // Try to show storage usage
                this.showStorageUsage();
            } else {
                alert('Fehler beim Speichern der Gefahrstoff-Daten: ' + error.message);
            }
            
            throw error; // Re-throw to handle in calling code
        }
    }
    
    showStorageUsage() {
        try {
            let totalSize = 0;
            let details = [];
            
            for (let key in localStorage) {
                if (localStorage.hasOwnProperty(key)) {
                    const value = localStorage[key];
                    const size = new Blob([value]).size;
                    totalSize += size;
                    
                    if (key.startsWith('qhse_')) {
                        details.push(`${key}: ${(size / 1024).toFixed(1)} KB`);
                    }
                }
            }
            
            const totalMB = (totalSize / 1024 / 1024).toFixed(2);
            
            console.log('localStorage Usage:');
            console.log(`Total: ${totalMB} MB`);
            details.forEach(detail => console.log(detail));
            
            // Show approximate limits (varies by browser, typically 5-10MB)
            if (totalSize > 8 * 1024 * 1024) { // 8MB warning
                console.warn('Approaching localStorage limit!');
            }
            
            // Optional: Show storage manager button in console
            if (totalSize > 5 * 1024 * 1024) { // 5MB
                console.log('Run window.qhseDashboard.showStorageManager() to clean up storage');
            }
        } catch (error) {
            console.error('Error calculating storage usage:', error);
        }
    }
    
    showStorageManager() {
        const modal = window.document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-database"></i> Speicher-Verwaltung</h2>
                    <span class="close-modal">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="storage-info">
                        <h3>Aktuelle Speichernutzung</h3>
                        <div id="storageBreakdown"></div>
                    </div>
                    <div class="storage-actions">
                        <h3>Speicher freigeben</h3>
                        <button id="clearOldDocuments" class="btn-secondary">
                            <i class="fas fa-trash"></i> Alte Dokumente entfernen (>30 Tage)
                        </button>
                        <button id="compressData" class="btn-secondary">
                            <i class="fas fa-compress"></i> Daten komprimieren
                        </button>
                        <button id="exportData" class="btn-primary">
                            <i class="fas fa-download"></i> Daten exportieren & l√∂schen
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        window.document.body.appendChild(modal);
        
        // Populate storage breakdown
        this.updateStorageBreakdown();
        
        // Event listeners
        const closeBtn = modal.querySelector('.close-modal');
        closeBtn.addEventListener('click', () => {
            window.document.body.removeChild(modal);
        });
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                window.document.body.removeChild(modal);
            }
        });
        
        modal.style.display = 'block';
    }
    
    updateStorageBreakdown() {
        const container = window.document.getElementById('storageBreakdown');
        if (!container) return;
        
        let html = '<div class="storage-items">';
        let totalSize = 0;
        
        for (let key in localStorage) {
            if (localStorage.hasOwnProperty(key) && key.startsWith('qhse_')) {
                const value = localStorage[key];
                const size = new Blob([value]).size;
                const sizeMB = (size / 1024 / 1024).toFixed(2);
                totalSize += size;
                
                html += `
                    <div class="storage-item">
                        <div class="storage-item-name">${key.replace('qhse_', '')}</div>
                        <div class="storage-item-size">${sizeMB} MB</div>
                    </div>
                `;
            }
        }
        
        html += '</div>';
        html += `<div class="storage-total">Gesamt: ${(totalSize / 1024 / 1024).toFixed(2)} MB</div>`;
        
        container.innerHTML = html;
    }

    setupHazardousSubstances() {
        console.log('üß™ Setting up Hazardous Substances module...');
        
        // Delay setup to ensure DOM is ready and avoid conflicts
        setTimeout(() => {
            // Setup event listeners
            this.setupSubstanceEventListeners();
            
            // Initialize UI
            this.populateSubstanceDepartmentDropdowns();
            this.renderSubstancesList();
            this.updateSubstanceStatistics();
            
            // Setup form tabs
            this.setupSubstanceFormTabs();
            
            // Setup file uploads
            this.setupSubstanceFileUploads();
            
            console.log('üß™ Hazardous Substances module setup complete');
        }, 100);
    }

    setupSubstanceEventListeners() {
        console.log('üß™ Setting up substance event listeners...');
        
        // Main action buttons
        const addSubstanceBtn = document.getElementById('addSubstanceBtn');
        const substanceReportsBtn = document.getElementById('substanceReportsBtn');
        
        console.log('üß™ Found addSubstanceBtn:', !!addSubstanceBtn);
        console.log('üß™ Found substanceReportsBtn:', !!substanceReportsBtn);
        
        if (addSubstanceBtn) {
            // Remove existing listeners to avoid duplicates
            addSubstanceBtn.removeEventListener('click', this.openSubstanceModal);
            addSubstanceBtn.addEventListener('click', () => {
                console.log('üß™ Add substance button clicked!');
                this.openSubstanceModal();
            });
        } else {
            console.error('üß™ addSubstanceBtn not found in DOM!');
        }
        
        if (substanceReportsBtn) {
            console.log('üß™ DEBUGGING: Setting up reports button listener');
            substanceReportsBtn.removeEventListener('click', this.openSubstanceReports);
            substanceReportsBtn.addEventListener('click', () => {
                console.log('üß™ DEBUGGING: Reports button clicked!');
                this.openSubstanceReports();
            });
        } else {
            console.error('üß™ DEBUGGING: substanceReportsBtn not found in DOM!');
        }

        // Search and filter controls
        const substanceSearch = document.getElementById('substanceSearch');
        const hazardClassFilter = document.getElementById('hazardClassFilter');
        const departmentFilter = document.getElementById('departmentFilter');
        const storageLocationFilter = document.getElementById('storageLocationFilter');
        const clearSearchBtn = document.getElementById('clearSearchBtn');

        if (substanceSearch) {
            substanceSearch.addEventListener('input', () => this.filterSubstances());
        }

        if (hazardClassFilter) {
            hazardClassFilter.addEventListener('change', () => this.filterSubstances());
        }

        if (departmentFilter) {
            departmentFilter.addEventListener('change', () => this.filterSubstances());
        }

        if (storageLocationFilter) {
            storageLocationFilter.addEventListener('change', () => this.filterSubstances());
        }

        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', () => this.clearSubstanceFilters());
        }

        // Modal event listeners
        this.setupSubstanceModalListeners();
    }

    setupSubstanceModalListeners() {
        // Substance Modal
        const substanceModal = document.getElementById('substanceModal');
        const closeSubstanceModal = document.getElementById('closeSubstanceModal');
        const saveSubstanceBtn = document.getElementById('saveSubstanceBtn');
        const cancelSubstanceBtn = document.getElementById('cancelSubstanceBtn');

        if (closeSubstanceModal) {
            closeSubstanceModal.addEventListener('click', () => this.closeSubstanceModal());
        }

        if (saveSubstanceBtn) {
            saveSubstanceBtn.addEventListener('click', () => this.saveSubstance());
        }

        if (cancelSubstanceBtn) {
            cancelSubstanceBtn.addEventListener('click', () => this.closeSubstanceModal());
        }

        // Details Modal
        const substanceDetailsModal = document.getElementById('substanceDetailsModal');
        const closeSubstanceDetailsModal = document.getElementById('closeSubstanceDetailsModal');
        const editSubstanceBtn = document.getElementById('editSubstanceBtn');
        const closeSubstanceDetailsBtn = document.getElementById('closeSubstanceDetailsBtn');

        if (closeSubstanceDetailsModal) {
            closeSubstanceDetailsModal.addEventListener('click', () => this.closeSubstanceDetailsModal());
        }

        if (editSubstanceBtn) {
            editSubstanceBtn.addEventListener('click', () => this.editCurrentSubstance());
        }

        if (closeSubstanceDetailsBtn) {
            closeSubstanceDetailsBtn.addEventListener('click', () => this.closeSubstanceDetailsModal());
        }

        // Close modals on outside click
        if (substanceModal) {
            substanceModal.addEventListener('click', (e) => {
                if (e.target === substanceModal) {
                    this.closeSubstanceModal();
                }
            });
        }

        if (substanceDetailsModal) {
            substanceDetailsModal.addEventListener('click', (e) => {
                if (e.target === substanceDetailsModal) {
                    this.closeSubstanceDetailsModal();
                }
            });
        }

        // Comments functionality
        const addCommentBtn = document.getElementById('addCommentBtn');
        if (addCommentBtn) {
            addCommentBtn.addEventListener('click', () => this.addSubstanceComment());
        }
    }

    setupSubstanceFormTabs() {
        const substanceModal = document.getElementById('substanceModal');
        if (!substanceModal) return;

        const tabButtons = substanceModal.querySelectorAll('.tab-btn');
        const tabContents = substanceModal.querySelectorAll('.tab-content');

        tabButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetTab = btn.getAttribute('data-tab');
                
                // Update active tab button
                tabButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // Update active tab content
                tabContents.forEach(content => {
                    content.classList.toggle('active', content.getAttribute('data-tab') === targetTab);
                });
            });
        });
    }

    setupSubstanceFileUploads() {
        // SDS File Upload
        const sdsFile = document.getElementById('sdsFile');
        if (sdsFile) {
            sdsFile.addEventListener('change', (e) => this.handleFileUpload(e, 'sds'));
        }

        // Operating Instruction File Upload
        const operatingInstructionFile = document.getElementById('operatingInstructionFile');
        if (operatingInstructionFile) {
            operatingInstructionFile.addEventListener('change', (e) => this.handleFileUpload(e, 'operatingInstruction'));
        }

        // Additional Documents File Upload
        const additionalDocsFile = document.getElementById('additionalDocsFile');
        if (additionalDocsFile) {
            additionalDocsFile.addEventListener('change', (e) => this.handleFileUpload(e, 'additional'));
        }

        // Setup drag and drop for file upload areas
        this.setupDragAndDrop();
    }

    setupDragAndDrop() {
        const uploadAreas = document.querySelectorAll('.file-upload-area');
        
        uploadAreas.forEach(area => {
            area.addEventListener('dragover', (e) => {
                e.preventDefault();
                area.classList.add('drag-over');
            });

            area.addEventListener('dragleave', () => {
                area.classList.remove('drag-over');
            });

            area.addEventListener('drop', (e) => {
                e.preventDefault();
                area.classList.remove('drag-over');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    const uploadType = area.id.includes('sds') ? 'sds' : 
                                     area.id.includes('operatingInstruction') ? 'operatingInstruction' : 'additional';
                    this.handleDroppedFiles(files, uploadType);
                }
            });
        });
    }

    populateSubstanceDepartmentDropdowns() {
        const departmentSelect = document.getElementById('substanceDepartment');
        const departmentFilter = document.getElementById('departmentFilter');
        
        if (departmentSelect) {
            departmentSelect.innerHTML = '<option value="">Abteilung w√§hlen</option>';
            this.departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                departmentSelect.appendChild(option);
            });
        }

        if (departmentFilter) {
            // Keep existing "Alle Abteilungen" option and add departments
            const existingOptions = departmentFilter.innerHTML;
            if (!existingOptions.includes('option')) {
                departmentFilter.innerHTML = '<option value="">Alle Abteilungen</option>';
            }
            
            this.departments.forEach(dept => {
                if (!departmentFilter.querySelector(`option[value="${dept.id}"]`)) {
                    const option = document.createElement('option');
                    option.value = dept.id;
                    option.textContent = dept.name;
                    departmentFilter.appendChild(option);
                }
            });
        }
    }

    renderSubstancesList() {
        console.log('üß™ Rendering substances list...');
        const tableBody = document.getElementById('substanceTableBody');
        const noSubstancesMessage = document.getElementById('noSubstancesMessage');
        
        console.log('üß™ Found elements:', {
            tableBody: !!tableBody,
            noSubstancesMessage: !!noSubstancesMessage
        });
        
        if (!tableBody) {
            console.error('üß™ substanceTableBody not found!');
            return;
        }

        // Apply current filters
        const filteredSubstances = this.getFilteredSubstances();
        console.log('üß™ Filtered substances count:', filteredSubstances.length);

        if (filteredSubstances.length === 0) {
            tableBody.innerHTML = '';
            if (noSubstancesMessage) {
                noSubstancesMessage.style.display = 'block';
            }
            return;
        }

        if (noSubstancesMessage) {
            noSubstancesMessage.style.display = 'none';
        }

        tableBody.innerHTML = filteredSubstances.map(substance => `
            <tr data-substance-id="${substance.id}">
                <td>
                    <strong>${substance.name || 'Unbekannt'}</strong>
                    ${substance.casNumber ? `<br><small>CAS: ${substance.casNumber}</small>` : ''}
                </td>
                <td>${substance.casNumber || '-'}</td>
                <td>${substance.supplier || '-'}</td>
                <td>${this.getDepartmentName(substance.department) || '-'}</td>
                <td>${substance.storageLocation || '-'}</td>
                <td>
                    <div class="hazard-symbols">
                        ${this.renderHazardSymbols(substance.ghsSymbols)}
                    </div>
                </td>
                <td>${substance.lastUpdated ? new Date(substance.lastUpdated).toLocaleDateString('de-DE') : '-'}</td>
                <td>
                    <div class="action-buttons">
                        <button class="btn-icon" onclick="window.qhseDashboard.viewSubstanceDetails('${substance.id}')" title="Details anzeigen">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn-icon" onclick="window.qhseDashboard.editSubstance('${substance.id}')" title="Bearbeiten">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-icon danger" onclick="window.qhseDashboard.deleteSubstance('${substance.id}')" title="L√∂schen">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');

        // Update storage locations filter
        this.updateStorageLocationFilter();
    }

    renderHazardSymbols(symbols) {
        if (!symbols || symbols.length === 0) return '-';
        
        const symbolInfo = {
            'GHS01': { name: 'Explodierende Bombe', description: 'Explosive Stoffe' },
            'GHS02': { name: 'Flamme', description: 'Entz√ºndbare Stoffe' },
            'GHS03': { name: 'Flamme √ºber Kreis', description: 'Brandf√∂rdernde Stoffe' },
            'GHS04': { name: 'Gasflasche', description: 'Gase unter Druck' },
            'GHS05': { name: '√Ñtzwirkung', description: '√Ñtzende Stoffe' },
            'GHS06': { name: 'Totenkopf', description: 'Akut toxische Stoffe' },
            'GHS07': { name: 'Ausrufezeichen', description: 'Reizende/sch√§dliche Stoffe' },
            'GHS08': { name: 'Gesundheitsgefahr', description: 'Schwere Gesundheitsgefahr' },
            'GHS09': { name: 'Umwelt', description: 'Umweltgef√§hrliche Stoffe' }
        };

        return symbols.map(symbol => {
            const info = symbolInfo[symbol];
            if (!info) return `<span class="hazard-symbol" title="${symbol}">${symbol}</span>`;
            
            return `<span class="hazard-symbol ghs-pictogram ${symbol.toLowerCase()}" 
                          title="${info.name}: ${info.description}" 
                          data-symbol="${symbol}"></span>`;
        }).join('');
    }

    getFilteredSubstances() {
        let filtered = [...this.hazardousSubstances];

        // Apply search filter
        const searchTerm = document.getElementById('substanceSearch')?.value.toLowerCase();
        if (searchTerm) {
            filtered = filtered.filter(substance => 
                (substance.name && substance.name.toLowerCase().includes(searchTerm)) ||
                (substance.casNumber && substance.casNumber.toLowerCase().includes(searchTerm)) ||
                (substance.supplier && substance.supplier.toLowerCase().includes(searchTerm)) ||
                (substance.purpose && substance.purpose.toLowerCase().includes(searchTerm))
            );
        }

        // Apply hazard class filter
        const hazardClass = document.getElementById('hazardClassFilter')?.value;
        if (hazardClass) {
            filtered = filtered.filter(substance => {
                const symbols = substance.ghsSymbols || [];
                switch (hazardClass) {
                    case 'explosive': return symbols.includes('GHS01');
                    case 'flammable': return symbols.includes('GHS02') || symbols.includes('GHS03');
                    case 'toxic': return symbols.includes('GHS06');
                    case 'corrosive': return symbols.includes('GHS05');
                    case 'environmental': return symbols.includes('GHS09');
                    case 'health': return symbols.includes('GHS08') || symbols.includes('GHS07');
                    default: return true;
                }
            });
        }

        // Apply department filter
        const department = document.getElementById('departmentFilter')?.value;
        if (department) {
            filtered = filtered.filter(substance => substance.department === department);
        }

        // Apply storage location filter
        const storageLocation = document.getElementById('storageLocationFilter')?.value;
        if (storageLocation) {
            filtered = filtered.filter(substance => 
                substance.storageLocation && substance.storageLocation.includes(storageLocation)
            );
        }

        return filtered;
    }

    updateStorageLocationFilter() {
        const filter = document.getElementById('storageLocationFilter');
        if (!filter) return;

        // Get unique storage locations
        const locations = [...new Set(this.hazardousSubstances
            .map(s => s.storageLocation)
            .filter(location => location && location.trim())
        )].sort();

        // Keep the "Alle Lagerorte" option
        const currentValue = filter.value;
        filter.innerHTML = '<option value="">Alle Lagerorte</option>';
        
        locations.forEach(location => {
            const option = document.createElement('option');
            option.value = location;
            option.textContent = location;
            filter.appendChild(option);
        });

        // Restore selected value if it still exists
        if (currentValue && locations.includes(currentValue)) {
            filter.value = currentValue;
        }
    }

    updateSubstanceStatistics() {
        console.log('üß™ Updating substance statistics...');
        console.log('üß™ Total substances:', this.hazardousSubstances.length);
        
        const totalSubstances = document.getElementById('totalSubstances');
        const highRiskSubstances = document.getElementById('highRiskSubstances');
        const expiredSDS = document.getElementById('expiredSDS');
        const storageLocations = document.getElementById('storageLocations');

        console.log('üß™ Found stat elements:', {
            totalSubstances: !!totalSubstances,
            highRiskSubstances: !!highRiskSubstances,
            expiredSDS: !!expiredSDS,
            storageLocations: !!storageLocations
        });

        if (totalSubstances) {
            totalSubstances.textContent = this.hazardousSubstances.length;
            console.log('üß™ Set total substances to:', this.hazardousSubstances.length);
        }

        if (highRiskSubstances) {
            const highRisk = this.hazardousSubstances.filter(substance => {
                const symbols = substance.ghsSymbols || [];
                return symbols.includes('GHS06') || symbols.includes('GHS08') || symbols.includes('GHS01');
            }).length;
            highRiskSubstances.textContent = highRisk;
        }

        if (expiredSDS) {
            const threeYearsAgo = new Date();
            threeYearsAgo.setFullYear(threeYearsAgo.getFullYear() - 3);
            
            const expired = this.hazardousSubstances.filter(substance => {
                if (!substance.sdsUploadDate) return true; // No SDS date = consider expired
                return new Date(substance.sdsUploadDate) < threeYearsAgo;
            }).length;
            expiredSDS.textContent = expired;
        }

        if (storageLocations) {
            const uniqueLocations = new Set(this.hazardousSubstances
                .map(s => s.storageLocation)
                .filter(location => location && location.trim())
            );
            storageLocations.textContent = uniqueLocations.size;
        }
    }

    filterSubstances() {
        this.renderSubstancesList();
    }

    clearSubstanceFilters() {
        document.getElementById('substanceSearch').value = '';
        document.getElementById('hazardClassFilter').value = '';
        document.getElementById('departmentFilter').value = '';
        document.getElementById('storageLocationFilter').value = '';
        this.renderSubstancesList();
    }

    openSubstanceModal(substanceId = null) {
        const modal = document.getElementById('substanceModal');
        const modalTitle = document.getElementById('substanceModalTitle');
        
        if (!modal) return;

        // Reset form
        this.resetSubstanceForm();
        
        if (substanceId) {
            // Edit mode
            const substance = this.hazardousSubstances.find(s => s.id === substanceId);
            if (substance) {
                this.populateSubstanceForm(substance);
                modalTitle.innerHTML = '<i class="fas fa-flask"></i> Gefahrstoff bearbeiten';
                this.currentEditingSubstanceId = substanceId;
            }
        } else {
            // Create mode
            modalTitle.innerHTML = '<i class="fas fa-flask"></i> Neuer Gefahrstoff';
            this.currentEditingSubstanceId = null;
        }

        modal.style.display = 'block';
        
        // Focus on first input
        setTimeout(() => {
            document.getElementById('substanceName')?.focus();
        }, 100);
    }

    closeSubstanceModal() {
        const modal = document.getElementById('substanceModal');
        if (modal) {
            modal.style.display = 'none';
        }
        this.currentEditingSubstanceId = null;
    }

    resetSubstanceForm() {
        const form = document.getElementById('substanceForm');
        if (form) {
            form.reset();
        }

        // Reset checkboxes
        const checkboxes = form.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = false);

        // Reset uploaded documents display
        const uploadedDocs = document.getElementById('uploadedDocuments');
        if (uploadedDocs) {
            uploadedDocs.innerHTML = '';
        }

        // Reset comments
        const commentsList = document.getElementById('commentsList');
        if (commentsList) {
            commentsList.innerHTML = '';
        }

        // Reset to first tab
        const firstTabBtn = document.querySelector('.tab-btn[data-tab="basic"]');
        const firstTabContent = document.querySelector('.tab-content[data-tab="basic"]');
        
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        if (firstTabBtn) firstTabBtn.classList.add('active');
        if (firstTabContent) firstTabContent.classList.add('active');
    }

    populateSubstanceForm(substance) {
        // Tab 1: Stammdaten (Basic Information)
        this.setFormValue('substanceName', substance.name);
        this.setFormValue('tradeName', substance.tradeName);
        this.setFormValue('casNumber', substance.casNumber);
        this.setFormValue('ecNumber', substance.ecNumber);
        this.setFormValue('indexNumber', substance.indexNumber);
        this.setFormValue('reachNumber', substance.reachNumber);
        this.setFormValue('chemicalFormula', substance.chemicalFormula);
        this.setFormValue('molecularWeight', substance.molecularWeight);
        this.setFormValue('supplier', substance.supplier);
        this.setFormValue('supplierAddress', substance.supplierAddress);
        this.setFormValue('emergencyPhone', substance.emergencyPhone);
        this.setFormValue('purpose', substance.purpose);
        this.setFormValue('substanceDepartment', substance.department);

        // Tab 2: Physik/Chemie (Physical/Chemical Properties)
        this.setFormValue('physicalState', substance.physicalState);
        this.setFormValue('color', substance.color);
        this.setFormValue('odor', substance.odor);
        this.setFormValue('odorThreshold', substance.odorThreshold);
        this.setFormValue('meltingPoint', substance.meltingPoint);
        this.setFormValue('boilingPoint', substance.boilingPoint);
        this.setFormValue('flashPoint', substance.flashPoint);
        this.setFormValue('autoIgnitionTemp', substance.autoIgnitionTemp);
        this.setFormValue('explosionLimits', substance.explosionLimits);
        this.setFormValue('vaporPressure', substance.vaporPressure);
        this.setFormValue('density', substance.density);
        this.setFormValue('solubility', substance.solubility);
        this.setFormValue('phValue', substance.phValue);
        this.setFormValue('viscosity', substance.viscosity);

        // Tab 3: Klassifizierung (Classification)
        if (substance.ghsSymbols) {
            substance.ghsSymbols.forEach(symbol => {
                const checkbox = document.querySelector(`input[name="ghsSymbols"][value="${symbol}"]`);
                if (checkbox) checkbox.checked = true;
            });
        }
        this.setFormValue('signalWord', substance.signalWord);
        this.setFormValue('hPhrases', substance.hPhrases);
        this.setFormValue('pPhrases', substance.pPhrases);
        this.setFormValue('wgkClass', substance.wgkClass);
        this.setFormValue('transportClass', substance.transportClass);
        this.setFormValue('unNumber', substance.unNumber);
        this.setFormValue('packingGroup', substance.packingGroup);

        // Tab 4: Toxikologie (Toxicology)
        this.setFormValue('acuteToxicityOral', substance.acuteToxicityOral);
        this.setFormValue('acuteToxicityDermal', substance.acuteToxicityDermal);
        this.setFormValue('acuteToxicityInhalation', substance.acuteToxicityInhalation);
        this.setFormValue('skinCorrosion', substance.skinCorrosion);
        this.setFormValue('eyeDamage', substance.eyeDamage);
        this.setFormValue('respiratorySensitization', substance.respiratorySensitization);
        this.setFormValue('skinSensitization', substance.skinSensitization);
        this.setFormValue('mutagenicity', substance.mutagenicity);
        this.setFormValue('carcinogenicity', substance.carcinogenicity);
        this.setFormValue('reproductiveToxicity', substance.reproductiveToxicity);
        this.setFormValue('organToxicity', substance.organToxicity);
        this.setFormValue('aspirationHazard', substance.aspirationHazard);

        // Tab 5: Grenzwerte (Exposure Limits)
        this.setFormValue('workplaceLimit', substance.workplaceLimit);
        this.setFormValue('biologicalLimit', substance.biologicalLimit);
        this.setFormValue('dnelWorker', substance.dnelWorker);
        this.setFormValue('dnelConsumer', substance.dnelConsumer);
        this.setFormValue('pnecSoil', substance.pnecSoil);
        this.setFormValue('pnecWater', substance.pnecWater);
        this.setFormValue('exposureScenarios', substance.exposureScenarios);

        // Tab 6: Lagerung (Storage)
        this.setFormValue('storageAmount', substance.storageAmount);
        this.setFormValue('storageLocation', substance.storageLocation);
        this.setFormValue('storageClass', substance.storageClass);
        this.setFormValue('storageTemperature', substance.storageTemperature);
        this.setFormValue('storageHumidity', substance.storageHumidity);
        this.setFormValue('ventilationRequired', substance.ventilationRequired);
        this.setFormValue('incompatibilities', substance.incompatibilities);
        this.setFormValue('containerMaterial', substance.containerMaterial);
        this.setFormValue('shelfLife', substance.shelfLife);
        this.setFormValue('stabilityConditions', substance.stabilityConditions);

        // Tab 7: Sicherheit (Safety)
        if (substance.requiredPPE) {
            substance.requiredPPE.forEach(ppe => {
                const checkbox = document.querySelector(`input[name="ppe"][value="${ppe}"]`);
                if (checkbox) checkbox.checked = true;
            });
        }
        this.setFormValue('engineeringControls', substance.engineeringControls);
        this.setFormValue('usageInstructions', substance.usageInstructions);
        this.setFormValue('handlingPrecautions', substance.handlingPrecautions);
        this.setFormValue('riskAssessmentRequired', substance.riskAssessmentRequired);
        this.setFormValue('substitutionCheck', substance.substitutionCheck);
        this.setFormValue('medicalSurveillance', substance.medicalSurveillance);

        // Tab 8: Umwelt (Environment)
        this.setFormValue('ecotoxicity', substance.ecotoxicity);
        this.setFormValue('persistence', substance.persistence);
        this.setFormValue('bioaccumulation', substance.bioaccumulation);
        this.setFormValue('mobility', substance.mobility);
        this.setFormValue('pbtAssessment', substance.pbtAssessment);
        this.setFormValue('endocrineDisruption', substance.endocrineDisruption);
        this.setFormValue('environmentalFate', substance.environmentalFate);
        this.setFormValue('wasteDisposal', substance.wasteDisposal);
        this.setFormValue('wasteCode', substance.wasteCode);
        this.setFormValue('specialDisposal', substance.specialDisposal);

        // Tab 9: Notfall (Emergency)
        this.setFormValue('emergencyMeasures', substance.emergencyMeasures);
        this.setFormValue('firstAidEyes', substance.firstAidEyes);
        this.setFormValue('firstAidSkin', substance.firstAidSkin);
        this.setFormValue('firstAidInhalation', substance.firstAidInhalation);
        this.setFormValue('firstAidIngestion', substance.firstAidIngestion);
        this.setFormValue('fireExtinguishing', substance.fireExtinguishing);
        this.setFormValue('spillCleanup', substance.spillCleanup);
        this.setFormValue('emergencyContact', substance.emergencyContact);
        this.setFormValue('poisonCenter', substance.poisonCenter);

        // Tab 10: Dokumente (Documents) and Tab 11: Kommentare (Comments)
        this.displayUploadedDocuments(substance.documents);
        this.displaySubstanceComments(substance.comments);
    }

    setFormValue(elementId, value) {
        const element = document.getElementById(elementId);
        if (element && value !== undefined && value !== null) {
            element.value = value;
        }
    }

    saveSubstance() {
        const form = document.getElementById('substanceForm');
        if (!form) return;

        // Validate required fields
        const substanceName = document.getElementById('substanceName').value.trim();
        if (!substanceName) {
            alert('Bitte geben Sie einen Namen f√ºr den Gefahrstoff ein.');
            return;
        }

        // Collect form data
        const substanceData = this.collectSubstanceFormData();
        
        if (this.currentEditingSubstanceId) {
            // Update existing substance
            const index = this.hazardousSubstances.findIndex(s => s.id === this.currentEditingSubstanceId);
            if (index !== -1) {
                substanceData.id = this.currentEditingSubstanceId;
                substanceData.createdAt = this.hazardousSubstances[index].createdAt;
                substanceData.createdBy = this.hazardousSubstances[index].createdBy;
                substanceData.lastUpdated = new Date().toISOString();
                substanceData.lastUpdatedBy = this.getCurrentUser().id;
                
                this.hazardousSubstances[index] = substanceData;
            }
        } else {
            // Create new substance
            substanceData.id = 'substance_' + Date.now();
            substanceData.createdAt = new Date().toISOString();
            substanceData.createdBy = this.getCurrentUser().id;
            substanceData.lastUpdated = substanceData.createdAt;
            substanceData.lastUpdatedBy = substanceData.createdBy;
            
            this.hazardousSubstances.push(substanceData);
        }

        // Save to storage
        try {
            this.saveHazardousSubstancesToStorage();
            
            // Update UI only if save was successful
            this.renderSubstancesList();
            this.updateSubstanceStatistics();
            
            // Close modal
            this.closeSubstanceModal();
            
            // Show success message
            alert('Gefahrstoff wurde erfolgreich gespeichert.');
        } catch (error) {
            // Handle save failure - don't close modal, let user try again
            console.error('Failed to save substance:', error);
            
            if (error.name === 'QuotaExceededError') {
                // User already got alert from saveHazardousSubstancesToStorage
                // Don't close modal so they can remove documents or try again
                console.log('Save failed due to quota exceeded - keeping modal open');
            } else {
                alert('Fehler beim Speichern des Gefahrstoffs. Bitte versuchen Sie es erneut.');
            }
        }
    }

    collectSubstanceFormData() {
        const data = {};

        // Tab 1: Stammdaten (Basic Information)
        data.name = document.getElementById('substanceName')?.value.trim() || '';
        data.tradeName = document.getElementById('tradeName')?.value.trim() || '';
        data.casNumber = document.getElementById('casNumber')?.value.trim() || '';
        data.ecNumber = document.getElementById('ecNumber')?.value.trim() || '';
        data.indexNumber = document.getElementById('indexNumber')?.value.trim() || '';
        data.reachNumber = document.getElementById('reachNumber')?.value.trim() || '';
        data.chemicalFormula = document.getElementById('chemicalFormula')?.value.trim() || '';
        data.molecularWeight = document.getElementById('molecularWeight')?.value.trim() || '';
        data.supplier = document.getElementById('supplier')?.value.trim() || '';
        data.supplierAddress = document.getElementById('supplierAddress')?.value.trim() || '';
        data.emergencyPhone = document.getElementById('emergencyPhone')?.value.trim() || '';
        data.purpose = document.getElementById('purpose')?.value.trim() || '';
        data.department = document.getElementById('substanceDepartment')?.value || '';

        // Tab 2: Physik/Chemie (Physical/Chemical Properties)
        data.physicalState = document.getElementById('physicalState')?.value || '';
        data.color = document.getElementById('color')?.value.trim() || '';
        data.odor = document.getElementById('odor')?.value.trim() || '';
        data.odorThreshold = document.getElementById('odorThreshold')?.value.trim() || '';
        data.meltingPoint = document.getElementById('meltingPoint')?.value.trim() || '';
        data.boilingPoint = document.getElementById('boilingPoint')?.value.trim() || '';
        data.flashPoint = document.getElementById('flashPoint')?.value.trim() || '';
        data.autoIgnitionTemp = document.getElementById('autoIgnitionTemp')?.value.trim() || '';
        data.explosionLimits = document.getElementById('explosionLimits')?.value.trim() || '';
        data.vaporPressure = document.getElementById('vaporPressure')?.value.trim() || '';
        data.density = document.getElementById('density')?.value.trim() || '';
        data.solubility = document.getElementById('solubility')?.value.trim() || '';
        data.phValue = document.getElementById('phValue')?.value.trim() || '';
        data.viscosity = document.getElementById('viscosity')?.value.trim() || '';

        // Tab 3: Klassifizierung (Classification)
        data.ghsSymbols = Array.from(document.querySelectorAll('input[name="ghsSymbols"]:checked'))
            .map(cb => cb.value);
        data.signalWord = document.getElementById('signalWord')?.value || '';
        data.hPhrases = document.getElementById('hPhrases')?.value.trim() || '';
        data.pPhrases = document.getElementById('pPhrases')?.value.trim() || '';
        data.wgkClass = document.getElementById('wgkClass')?.value || '';
        data.transportClass = document.getElementById('transportClass')?.value || '';
        data.unNumber = document.getElementById('unNumber')?.value.trim() || '';
        data.packingGroup = document.getElementById('packingGroup')?.value || '';

        // Tab 4: Toxikologie (Toxicology)
        data.acuteToxicityOral = document.getElementById('acuteToxicityOral')?.value.trim() || '';
        data.acuteToxicityDermal = document.getElementById('acuteToxicityDermal')?.value.trim() || '';
        data.acuteToxicityInhalation = document.getElementById('acuteToxicityInhalation')?.value.trim() || '';
        data.skinCorrosion = document.getElementById('skinCorrosion')?.value || '';
        data.eyeDamage = document.getElementById('eyeDamage')?.value || '';
        data.respiratorySensitization = document.getElementById('respiratorySensitization')?.value || '';
        data.skinSensitization = document.getElementById('skinSensitization')?.value || '';
        data.mutagenicity = document.getElementById('mutagenicity')?.value || '';
        data.carcinogenicity = document.getElementById('carcinogenicity')?.value || '';
        data.reproductiveToxicity = document.getElementById('reproductiveToxicity')?.value || '';
        data.organToxicity = document.getElementById('organToxicity')?.value || '';
        data.aspirationHazard = document.getElementById('aspirationHazard')?.value || '';

        // Tab 5: Grenzwerte (Exposure Limits)
        data.workplaceLimit = document.getElementById('workplaceLimit')?.value.trim() || '';
        data.biologicalLimit = document.getElementById('biologicalLimit')?.value.trim() || '';
        data.dnelWorker = document.getElementById('dnelWorker')?.value.trim() || '';
        data.dnelConsumer = document.getElementById('dnelConsumer')?.value.trim() || '';
        data.pnecSoil = document.getElementById('pnecSoil')?.value.trim() || '';
        data.pnecWater = document.getElementById('pnecWater')?.value.trim() || '';
        data.exposureScenarios = document.getElementById('exposureScenarios')?.value.trim() || '';

        // Tab 6: Lagerung (Storage)
        data.storageAmount = document.getElementById('storageAmount')?.value.trim() || '';
        data.storageLocation = document.getElementById('storageLocation')?.value.trim() || '';
        data.storageClass = document.getElementById('storageClass')?.value || '';
        data.storageTemperature = document.getElementById('storageTemperature')?.value.trim() || '';
        data.storageHumidity = document.getElementById('storageHumidity')?.value.trim() || '';
        data.ventilationRequired = document.getElementById('ventilationRequired')?.value || '';
        data.incompatibilities = document.getElementById('incompatibilities')?.value.trim() || '';
        data.containerMaterial = document.getElementById('containerMaterial')?.value.trim() || '';
        data.shelfLife = document.getElementById('shelfLife')?.value.trim() || '';
        data.stabilityConditions = document.getElementById('stabilityConditions')?.value.trim() || '';

        // Tab 7: Sicherheit (Safety)
        data.requiredPPE = Array.from(document.querySelectorAll('input[name="ppe"]:checked'))
            .map(cb => cb.value);
        data.engineeringControls = document.getElementById('engineeringControls')?.value.trim() || '';
        data.usageInstructions = document.getElementById('usageInstructions')?.value.trim() || '';
        data.handlingPrecautions = document.getElementById('handlingPrecautions')?.value.trim() || '';
        data.riskAssessmentRequired = document.getElementById('riskAssessmentRequired')?.value || '';
        data.substitutionCheck = document.getElementById('substitutionCheck')?.value || '';
        data.medicalSurveillance = document.getElementById('medicalSurveillance')?.value || '';

        // Tab 8: Umwelt (Environment)
        data.ecotoxicity = document.getElementById('ecotoxicity')?.value.trim() || '';
        data.persistence = document.getElementById('persistence')?.value || '';
        data.bioaccumulation = document.getElementById('bioaccumulation')?.value || '';
        data.mobility = document.getElementById('mobility')?.value || '';
        data.pbtAssessment = document.getElementById('pbtAssessment')?.value || '';
        data.endocrineDisruption = document.getElementById('endocrineDisruption')?.value || '';
        data.environmentalFate = document.getElementById('environmentalFate')?.value.trim() || '';
        data.wasteDisposal = document.getElementById('wasteDisposal')?.value.trim() || '';
        data.wasteCode = document.getElementById('wasteCode')?.value.trim() || '';
        data.specialDisposal = document.getElementById('specialDisposal')?.value.trim() || '';

        // Tab 9: Notfall (Emergency)
        data.emergencyMeasures = document.getElementById('emergencyMeasures')?.value.trim() || '';
        data.firstAidEyes = document.getElementById('firstAidEyes')?.value.trim() || '';
        data.firstAidSkin = document.getElementById('firstAidSkin')?.value.trim() || '';
        data.firstAidInhalation = document.getElementById('firstAidInhalation')?.value.trim() || '';
        data.firstAidIngestion = document.getElementById('firstAidIngestion')?.value.trim() || '';
        data.fireExtinguishing = document.getElementById('fireExtinguishing')?.value.trim() || '';
        data.spillCleanup = document.getElementById('spillCleanup')?.value.trim() || '';
        data.emergencyContact = document.getElementById('emergencyContact')?.value.trim() || '';
        data.poisonCenter = document.getElementById('poisonCenter')?.value.trim() || '';

        // Tab 10: Dokumente (Documents) - handled separately in file upload methods
        data.documents = this.currentSubstanceDocuments || [];
        
        // Tab 11: Kommentare (Comments) - handled separately
        data.comments = this.currentSubstanceComments || [];

        return data;
    }

    editSubstance(substanceId) {
        this.openSubstanceModal(substanceId);
    }

    viewSubstanceDetails(substanceId) {
        const substance = this.hazardousSubstances.find(s => s.id === substanceId);
        if (!substance) {
            alert('Gefahrstoff nicht gefunden.');
            return;
        }

        const modal = document.getElementById('substanceDetailsModal');
        const title = document.getElementById('substanceDetailsTitle');
        const content = document.getElementById('substanceDetailsContent');
        
        if (!modal || !content) return;

        // Set title
        title.innerHTML = `<i class="fas fa-flask"></i> ${substance.name || 'Unbekannter Gefahrstoff'}`;
        
        // Generate detailed content
        content.innerHTML = this.generateSubstanceDetailsHTML(substance);
        
        // Setup tab functionality for details modal
        setTimeout(() => {
            this.setupDetailsModalTabs();
        }, 100);
        
        // Store current substance for editing
        this.currentViewingSubstanceId = substanceId;
        
        // Show modal
        modal.style.display = 'block';
    }

    generateSubstanceDetailsHTML(substance) {
        return `
            <div class="substance-details">
                <div class="detail-tabs">
                    <div class="tab-buttons">
                        <button class="tab-btn active" data-tab="basic">Stammdaten</button>
                        <button class="tab-btn" data-tab="physical">Physik/Chemie</button>
                        <button class="tab-btn" data-tab="classification">Klassifizierung</button>
                        <button class="tab-btn" data-tab="toxicology">Toxikologie</button>
                        <button class="tab-btn" data-tab="limits">Grenzwerte</button>
                        <button class="tab-btn" data-tab="storage">Lagerung</button>
                        <button class="tab-btn" data-tab="safety">Sicherheit</button>
                        <button class="tab-btn" data-tab="environment">Umwelt</button>
                        <button class="tab-btn" data-tab="emergency">Notfall</button>
                        <button class="tab-btn" data-tab="documents">Dokumente</button>
                        <button class="tab-btn" data-tab="comments">Kommentare</button>
                    </div>
                    
                    <div class="tab-content active" data-tab="basic">
                        ${this.generateBasicDataTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="physical">
                        ${this.generatePhysicalChemicalTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="classification">
                        ${this.generateClassificationTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="toxicology">
                        ${this.generateToxicologyTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="limits">
                        ${this.generateExposureLimitsTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="storage">
                        ${this.generateStorageTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="safety">
                        ${this.generateSafetyTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="environment">
                        ${this.generateEnvironmentTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="emergency">
                        ${this.generateEmergencyTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="documents">
                        ${this.generateDocumentsTab(substance)}
                    </div>
                    
                    <div class="tab-content" data-tab="comments">
                        ${this.generateCommentsTab(substance)}
                    </div>
                </div>
            </div>
        `;
    }

    generateBasicDataTab(substance) {
        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>Substanzname:</label>
                    <span>${substance.name || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Handelsname:</label>
                    <span>${substance.tradeName || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>CAS-Nummer:</label>
                    <span>${substance.casNumber || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>EG-Nummer:</label>
                    <span>${substance.ecNumber || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Index-Nummer:</label>
                    <span>${substance.indexNumber || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>REACH-Registrierung:</label>
                    <span>${substance.reachNumber || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Chemische Formel:</label>
                    <span>${substance.chemicalFormula || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Molekulargewicht:</label>
                    <span>${substance.molecularWeight || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Hersteller/Lieferant:</label>
                    <span>${substance.supplier || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Lieferantenadresse:</label>
                    <span>${substance.supplierAddress || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Notrufnummer:</label>
                    <span>${substance.emergencyPhone || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Verwendungszweck:</label>
                    <span>${substance.purpose || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Abteilung:</label>
                    <span>${this.getDepartmentName(substance.department) || 'Nicht zugeordnet'}</span>
                </div>
                <div class="detail-item">
                    <label>Erstellt am:</label>
                    <span>${substance.createdAt ? new Date(substance.createdAt).toLocaleDateString('de-DE') : 'Unbekannt'}</span>
                </div>
                <div class="detail-item">
                    <label>Zuletzt aktualisiert:</label>
                    <span>${substance.lastUpdated ? new Date(substance.lastUpdated).toLocaleDateString('de-DE') : 'Unbekannt'}</span>
                </div>
            </div>
        `;
    }

    generatePhysicalChemicalTab(substance) {
        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>Aggregatzustand:</label>
                    <span>${substance.physicalState || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Farbe:</label>
                    <span>${substance.color || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Geruch:</label>
                    <span>${substance.odor || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Geruchsschwelle:</label>
                    <span>${substance.odorThreshold || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Schmelzpunkt:</label>
                    <span>${substance.meltingPoint || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Siedepunkt:</label>
                    <span>${substance.boilingPoint || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Flammpunkt:</label>
                    <span>${substance.flashPoint || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Selbstentz√ºndungstemperatur:</label>
                    <span>${substance.autoIgnitionTemp || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Explosionsgrenzen:</label>
                    <span>${substance.explosionLimits || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Dampfdruck:</label>
                    <span>${substance.vaporPressure || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Dichte:</label>
                    <span>${substance.density || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Wasserl√∂slichkeit:</label>
                    <span>${substance.solubility || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>pH-Wert:</label>
                    <span>${substance.phValue || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Viskosit√§t:</label>
                    <span>${substance.viscosity || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateClassificationTab(substance) {
        const ghsSymbolsHTML = substance.ghsSymbols && substance.ghsSymbols.length > 0 
            ? substance.ghsSymbols.map(symbol => 
                `<span class="ghs-symbol">${this.renderHazardSymbols([symbol])}</span>`
              ).join('')
            : 'Keine Gefahrensymbole definiert';

        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>GHS-Piktogramme:</label>
                    <div class="ghs-symbols-display">${ghsSymbolsHTML}</div>
                </div>
                <div class="detail-item">
                    <label>Signalwort:</label>
                    <span class="signal-word ${substance.signalWord?.toLowerCase()}">${substance.signalWord || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>H-S√§tze:</label>
                    <span>${substance.hPhrases || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>P-S√§tze:</label>
                    <span>${substance.pPhrases || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>WGK-Klassifizierung:</label>
                    <span>${substance.wgkClass || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Transportklasse:</label>
                    <span>${substance.transportClass || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>UN-Nummer:</label>
                    <span>${substance.unNumber || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Verpackungsgruppe:</label>
                    <span>${substance.packingGroup || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateToxicologyTab(substance) {
        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>Akute Toxizit√§t oral (LD50):</label>
                    <span>${substance.acuteToxicityOral || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Akute Toxizit√§t dermal (LD50):</label>
                    <span>${substance.acuteToxicityDermal || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Akute Toxizit√§t inhalativ (LC50):</label>
                    <span>${substance.acuteToxicityInhalation || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Hautver√§tzung/-reizung:</label>
                    <span>${substance.skinCorrosion || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Augensch√§digung/-reizung:</label>
                    <span>${substance.eyeDamage || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Sensibilisierung Atemwege:</label>
                    <span>${substance.respiratorySensitization || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Sensibilisierung Haut:</label>
                    <span>${substance.skinSensitization || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Keimzellmutagenit√§t:</label>
                    <span>${substance.mutagenicity || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Karzinogenit√§t:</label>
                    <span>${substance.carcinogenicity || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Reproduktionstoxizit√§t:</label>
                    <span>${substance.reproductiveToxicity || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Organtoxizit√§t:</label>
                    <span>${substance.organToxicity || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Aspirationsgefahr:</label>
                    <span>${substance.aspirationHazard || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateExposureLimitsTab(substance) {
        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>Arbeitsplatzgrenzwert (AGW):</label>
                    <span>${substance.workplaceLimit || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Biologischer Grenzwert (BGW):</label>
                    <span>${substance.biologicalLimit || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>DNEL Arbeitsplatz:</label>
                    <span>${substance.dnelWorker || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>DNEL Verbraucher:</label>
                    <span>${substance.dnelConsumer || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>PNEC Boden:</label>
                    <span>${substance.pnecSoil || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>PNEC Wasser:</label>
                    <span>${substance.pnecWater || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Expositionsszenarien:</label>
                    <span>${substance.exposureScenarios || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateStorageTab(substance) {
        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>Lagermenge:</label>
                    <span>${substance.storageAmount || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Lagerort:</label>
                    <span>${substance.storageLocation || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Lagerklasse:</label>
                    <span>${substance.storageClass || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Lagertemperatur:</label>
                    <span>${substance.storageTemperature || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Luftfeuchtigkeit:</label>
                    <span>${substance.storageHumidity || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>L√ºftungspflicht:</label>
                    <span>${substance.ventilationRequired || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Beh√§ltermaterial:</label>
                    <span>${substance.containerMaterial || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Haltbarkeit:</label>
                    <span>${substance.shelfLife || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Unvertr√§glichkeiten:</label>
                    <span>${substance.incompatibilities || 'Keine angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Stabilit√§tsbedingungen:</label>
                    <span>${substance.stabilityConditions || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateSafetyTab(substance) {
        const ppeHTML = substance.requiredPPE && substance.requiredPPE.length > 0
            ? substance.requiredPPE.map(ppe => {
                const ppeNames = {
                    'gloves': 'Schutzhandschuhe',
                    'goggles': 'Schutzbrille',
                    'respiratory': 'Atemschutz',
                    'coat': 'Laborkittel',
                    'shoes': 'Sicherheitsschuhe'
                };
                return `<span class="ppe-item">${ppeNames[ppe] || ppe}</span>`;
              }).join(', ')
            : 'Keine PSA angegeben';

        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>Erforderliche PSA:</label>
                    <span>${ppeHTML}</span>
                </div>
                <div class="detail-item">
                    <label>Gef√§hrdungsbeurteilung:</label>
                    <span>${substance.riskAssessmentRequired || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Substitutionspr√ºfung:</label>
                    <span>${substance.substitutionCheck || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Arbeitsmedizinische Vorsorge:</label>
                    <span>${substance.medicalSurveillance || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Technische Schutzma√ünahmen:</label>
                    <span>${substance.engineeringControls || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Verwendungsanweisungen:</label>
                    <span>${substance.usageInstructions || 'Keine angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Handhabungshinweise:</label>
                    <span>${substance.handlingPrecautions || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateEnvironmentTab(substance) {
        return `
            <div class="detail-grid">
                <div class="detail-item">
                    <label>√ñkotoxizit√§t:</label>
                    <span>${substance.ecotoxicity || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Persistenz:</label>
                    <span>${substance.persistence || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Bioakkumulation:</label>
                    <span>${substance.bioaccumulation || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Mobilit√§t:</label>
                    <span>${substance.mobility || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>PBT-Bewertung:</label>
                    <span>${substance.pbtAssessment || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Endokrine Wirkung:</label>
                    <span>${substance.endocrineDisruption || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Abfallschl√ºssel:</label>
                    <span>${substance.wasteCode || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Umweltverhalten:</label>
                    <span>${substance.environmentalFate || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Entsorgungshinweise:</label>
                    <span>${substance.wasteDisposal || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Besondere Entsorgung:</label>
                    <span>${substance.specialDisposal || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateEmergencyTab(substance) {
        return `
            <div class="detail-grid">
                <div class="detail-item full-width">
                    <label>Allgemeine Notfallma√ünahmen:</label>
                    <span>${substance.emergencyMeasures || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Erste Hilfe bei Augenkontakt:</label>
                    <span>${substance.firstAidEyes || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Erste Hilfe bei Hautkontakt:</label>
                    <span>${substance.firstAidSkin || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Erste Hilfe bei Einatmen:</label>
                    <span>${substance.firstAidInhalation || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Erste Hilfe bei Verschlucken:</label>
                    <span>${substance.firstAidIngestion || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>L√∂schmittel:</label>
                    <span>${substance.fireExtinguishing || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item full-width">
                    <label>Ma√ünahmen bei Versch√ºtten:</label>
                    <span>${substance.spillCleanup || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Notfallkontakt:</label>
                    <span>${substance.emergencyContact || 'Nicht angegeben'}</span>
                </div>
                <div class="detail-item">
                    <label>Giftnotruf:</label>
                    <span>${substance.poisonCenter || 'Nicht angegeben'}</span>
                </div>
            </div>
        `;
    }

    generateDocumentsTab(substance) {
        const documents = substance.documents || [];
        
        if (documents.length === 0) {
            return '<p>Keine Dokumente hochgeladen.</p>';
        }

        return `
            <div class="documents-list">
                ${documents.map(doc => `
                    <div class="document-item">
                        <div class="doc-icon">
                            <i class="fas ${this.getDocumentIcon(doc.type)}"></i>
                        </div>
                        <div class="doc-info">
                            <strong>${doc.name}</strong>
                            <div class="doc-meta">
                                <span>Typ: ${this.getDocumentTypeName(doc.type)}</span>
                                <span>Hochgeladen: ${new Date(doc.uploadDate).toLocaleDateString('de-DE')}</span>
                                <span>Von: ${doc.uploadedBy}</span>
                            </div>
                        </div>
                        <div class="doc-actions">
                            ${doc.mimeType === 'application/pdf' ? `
                                <button class="btn-icon" onclick="window.qhseDashboard.viewSubstanceDocument('${doc.id}')" title="PDF anzeigen">
                                    <i class="fas fa-eye"></i>
                                </button>
                            ` : ''}
                            <button class="btn-icon" onclick="window.qhseDashboard.downloadSubstanceDocument('${doc.id}')" title="Herunterladen">
                                <i class="fas fa-download"></i>
                            </button>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    generateCommentsTab(substance) {
        const comments = substance.comments || [];
        
        if (comments.length === 0) {
            return '<p>Keine Kommentare vorhanden.</p>';
        }

        return `
            <div class="comments-list">
                ${comments.map(comment => `
                    <div class="comment-item">
                        <div class="comment-header">
                            <strong>${comment.author || 'Unbekannt'}</strong>
                            <span class="comment-date">${new Date(comment.date).toLocaleDateString('de-DE')}</span>
                        </div>
                        <div class="comment-content">${comment.text || ''}</div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    getDocumentIcon(type) {
        const icons = {
            'sds': 'fa-file-pdf',
            'operatingInstruction': 'fa-file-alt',
            'additional': 'fa-file',
            'photo': 'fa-image'
        };
        return icons[type] || 'fa-file';
    }

    getDocumentTypeName(type) {
        const names = {
            'sds': 'Sicherheitsdatenblatt',
            'operatingInstruction': 'Betriebsanweisung',
            'additional': 'Zus√§tzliches Dokument',
            'photo': 'Foto'
        };
        return names[type] || 'Dokument';
    }

    closeSubstanceDetailsModal() {
        const modal = document.getElementById('substanceDetailsModal');
        if (modal) {
            modal.style.display = 'none';
        }
        this.currentViewingSubstanceId = null;
    }

    editCurrentSubstance() {
        if (this.currentViewingSubstanceId) {
            this.closeSubstanceDetailsModal();
            this.openSubstanceModal(this.currentViewingSubstanceId);
        }
    }

    deleteSubstance(substanceId) {
        const substance = this.hazardousSubstances.find(s => s.id === substanceId);
        if (!substance) return;

        if (confirm(`M√∂chten Sie den Gefahrstoff "${substance.name}" wirklich l√∂schen? Diese Aktion kann nicht r√ºckg√§ngig gemacht werden.`)) {
            // Remove from array
            this.hazardousSubstances = this.hazardousSubstances.filter(s => s.id !== substanceId);
            
            // Save to storage
            this.saveHazardousSubstancesToStorage();
            
            // Update UI
            this.renderSubstancesList();
            this.updateSubstanceStatistics();
            
            alert('Gefahrstoff wurde erfolgreich gel√∂scht.');
        }
    }

    openSubstanceReports() {
        console.log('üß™ DEBUGGING: Opening substance reports modal...');
        console.log('üß™ DEBUGGING: Substances data:', this.hazardousSubstances);
        console.log('üß™ DEBUGGING: Departments data:', this.departments);
        
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content large">
                <div class="modal-header">
                    <h2><i class="fas fa-chart-bar"></i> Gefahrstoff-Berichte</h2>
                    <span class="close-modal">&times;</span>
                </div>
                <div class="modal-body">
                    <div class="report-controls">
                        <div class="control-group">
                            <div class="form-group">
                                <label for="reportType">Berichtstyp:</label>
                                <select id="reportType">
                                    <option value="inventory">Inventarliste</option>
                                    <option value="sds-expiry">SDB-Ablaufdaten</option>
                                    <option value="high-risk">Hochgef√§hrliche Stoffe</option>
                                    <option value="storage-locations">Lagerorte</option>
                                    <option value="complete">Vollst√§ndiger Bericht</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="reportDepartment">Abteilung:</label>
                                <select id="reportDepartment">
                                    <option value="">Alle Abteilungen</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="reportFormat">Format:</label>
                                <select id="reportFormat">
                                    <option value="pdf">PDF</option>
                                    <option value="csv">CSV</option>
                                    <option value="excel">Excel</option>
                                </select>
                            </div>
                        </div>
                        <div class="report-actions">
                            <button id="generateReportBtn" class="btn-primary">
                                <i class="fas fa-file-download"></i> Bericht erstellen
                            </button>
                            <button id="previewReportBtn" class="btn-secondary">
                                <i class="fas fa-eye"></i> Vorschau
                            </button>
                        </div>
                    </div>
                    <div class="report-preview" id="reportPreview" style="display: none;">
                        <h3>Bericht Vorschau</h3>
                        <div id="reportContent"></div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        console.log('üß™ DEBUGGING: Modal added to DOM');
        
        this.populateReportDepartmentDropdown();
        console.log('üß™ DEBUGGING: Department dropdown populated');
        
        // Event listeners
        const closeBtn = modal.querySelector('.close-modal');
        const generateBtn = modal.querySelector('#generateReportBtn');
        const previewBtn = modal.querySelector('#previewReportBtn');
        
        closeBtn.addEventListener('click', () => {
            document.body.removeChild(modal);
        });
        
        generateBtn.addEventListener('click', () => {
            console.log('Generate report button clicked');
            this.generateSubstanceReport();
        });
        
        previewBtn.addEventListener('click', () => {
            console.log('Preview report button clicked');
            this.previewSubstanceReport();
        });
        
        // Close modal when clicking outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                document.body.removeChild(modal);
            }
        });
        
        // Show the modal
        modal.style.display = 'block';
        console.log('üß™ DEBUGGING: Modal display set to block');
        console.log('üß™ DEBUGGING: Modal element:', modal);
    }
    
    populateReportDepartmentDropdown() {
        const departmentSelect = document.getElementById('reportDepartment');
        if (departmentSelect) {
            departmentSelect.innerHTML = '<option value="">Alle Abteilungen</option>';
            this.departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                departmentSelect.appendChild(option);
            });
        }
    }
    
    generateSubstanceReport() {
        console.log('Generating substance report...');
        
        const reportType = document.getElementById('reportType').value;
        const department = document.getElementById('reportDepartment').value;
        const format = document.getElementById('reportFormat').value;
        
        console.log('Report parameters:', { reportType, department, format });
        
        if (!reportType) {
            alert('Bitte w√§hlen Sie einen Berichtstyp aus.');
            return;
        }
        
        if (!format) {
            alert('Bitte w√§hlen Sie ein Format aus.');
            return;
        }
        
        const reportData = this.prepareSubstanceReportData(reportType, department);
        
        console.log('Report data prepared for generation:', reportData);
        
        if (reportData.substances.length === 0) {
            alert('Keine Daten f√ºr den ausgew√§hlten Berichtstyp gefunden.');
            return;
        }
        
        console.log('üß™ DEBUGGING: Starting export with format:', format);
        
        if (format === 'pdf') {
            console.log('üß™ DEBUGGING: Calling PDF export');
            this.exportSubstanceReportAsPDF(reportData, reportType);
        } else if (format === 'csv') {
            console.log('üß™ DEBUGGING: Calling CSV export');
            this.exportSubstanceReportAsCSV(reportData, reportType);
        } else if (format === 'excel') {
            console.log('üß™ DEBUGGING: Calling Excel export');
            this.exportSubstanceReportAsExcel(reportData, reportType);
        } else {
            console.error('üß™ DEBUGGING: Unknown format:', format);
        }
    }
    
    previewSubstanceReport() {
        console.log('Previewing substance report...');
        
        const reportType = document.getElementById('reportType').value;
        const department = document.getElementById('reportDepartment').value;
        
        console.log('Preview parameters:', { reportType, department });
        
        if (!reportType) {
            alert('Bitte w√§hlen Sie einen Berichtstyp aus.');
            return;
        }
        
        const reportData = this.prepareSubstanceReportData(reportType, department);
        const previewDiv = document.getElementById('reportPreview');
        const contentDiv = document.getElementById('reportContent');
        
        console.log('Report data prepared:', reportData);
        
        if (reportData.substances.length === 0) {
            contentDiv.innerHTML = `
                <div class="no-data-message">
                    <h4>Keine Daten gefunden</h4>
                    <p>F√ºr die gew√§hlten Filterkriterien wurden keine Gefahrstoffe gefunden.</p>
                </div>
            `;
        } else {
            let html = this.generateReportHTML(reportData, reportType);
            contentDiv.innerHTML = html;
        }
        
        previewDiv.style.display = 'block';
    }
    
    prepareSubstanceReportData(reportType, departmentFilter) {
        console.log('Preparing report data...', { reportType, departmentFilter });
        console.log('Available substances:', this.hazardousSubstances.length);
        
        let substances = [...this.hazardousSubstances];
        
        // Filter by department if specified
        if (departmentFilter) {
            substances = substances.filter(s => s.department === departmentFilter);
        }
        
        // Filter by report type
        switch (reportType) {
            case 'sds-expiry':
                const thirtyDaysFromNow = new Date();
                thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
                substances = substances.filter(s => {
                    const expiryDate = new Date(s.sdsExpiryDate);
                    return expiryDate <= thirtyDaysFromNow;
                });
                break;
            case 'high-risk':
                substances = substances.filter(s => 
                    s.hazardStatements && s.hazardStatements.includes('H350') || // Carcinogenic
                    s.hazardStatements && s.hazardStatements.includes('H340') || // Mutagenic
                    s.hazardStatements && s.hazardStatements.includes('H360')    // Toxic to reproduction
                );
                break;
        }
        
        return {
            substances,
            reportType,
            departmentFilter,
            generatedAt: new Date(),
            totalCount: substances.length
        };
    }
    
    generateReportHTML(reportData, reportType) {
        const { substances, generatedAt, totalCount } = reportData;
        const departmentName = reportData.departmentFilter ? 
            this.departments.find(d => d.id === reportData.departmentFilter)?.name || 'Unbekannt' : 
            'Alle Abteilungen';
        
        let html = `
            <div class="report-header">
                <h4>${this.getReportTitle(reportType)}</h4>
                <p><strong>Abteilung:</strong> ${departmentName}</p>
                <p><strong>Erstellt am:</strong> ${generatedAt.toLocaleString('de-DE')}</p>
                <p><strong>Anzahl Eintr√§ge:</strong> ${totalCount}</p>
            </div>
            <table class="report-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>CAS-Nr.</th>
                        <th>Abteilung</th>
                        <th>Menge</th>
                        <th>Lagerort</th>
                        <th>SDB-Ablauf</th>
                        <th>Gefahrenklasse</th>
                    </tr>
                </thead>
                <tbody>
        `;
        
        substances.forEach(substance => {
            const department = this.departments.find(d => d.id === substance.department);
            const expiryDate = substance.sdsExpiryDate ? 
                new Date(substance.sdsExpiryDate).toLocaleDateString('de-DE') : 
                'Nicht angegeben';
            
            html += `
                <tr>
                    <td>${substance.name || 'Nicht angegeben'}</td>
                    <td>${substance.casNumber || 'Nicht angegeben'}</td>
                    <td>${department?.name || substance.department || 'Nicht zugeordnet'}</td>
                    <td>${substance.quantity || substance.storageAmount || 'Nicht angegeben'} ${substance.unit || ''}</td>
                    <td>${substance.storageLocation || 'Nicht angegeben'}</td>
                    <td>${expiryDate}</td>
                    <td>${substance.hazardClass || substance.signalWord || 'Nicht klassifiziert'}</td>
                </tr>
            `;
        });
        
        html += `
                </tbody>
            </table>
        `;
        
        return html;
    }
    
    getReportTitle(reportType) {
        const titles = {
            'inventory': 'Gefahrstoff-Inventarliste',
            'sds-expiry': 'Sicherheitsdatenbl√§tter mit ablaufenden Fristen',
            'high-risk': 'Hochgef√§hrliche Stoffe (CMR-Stoffe)',
            'storage-locations': 'Lagerorte von Gefahrstoffen',
            'complete': 'Vollst√§ndiger Gefahrstoffbericht'
        };
        return titles[reportType] || 'Gefahrstoffbericht';
    }
    
    exportSubstanceReportAsPDF(reportData, reportType) {
        // Create printable version
        const printWindow = window.open('', '_blank');
        const html = this.generateReportHTML(reportData, reportType);
        
        printWindow.document.write(`
            <html>
                <head>
                    <title>${this.getReportTitle(reportType)} - ${new Date().toLocaleDateString('de-DE')}</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; font-size: 12px; }
                        .report-header { margin-bottom: 20px; }
                        .report-header h4 { margin: 0 0 10px 0; font-size: 16px; }
                        .report-header p { margin: 5px 0; }
                        .report-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        .report-table th, .report-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        .report-table th { background-color: #f5f5f5; font-weight: bold; }
                        .report-table tr:nth-child(even) { background-color: #f9f9f9; }
                        @media print {
                            body { margin: 0; }
                            .report-table { font-size: 10px; }
                        }
                    </style>
                </head>
                <body>
                    <div class="report-header">
                        <h4>Hoffmann & Voss GmbH - QHSE Management</h4>
                    </div>
                    ${html}
                    <div style="margin-top: 30px; font-size: 10px; color: #666;">
                        <p>Erstellt mit QHSE Management System - ${new Date().toLocaleString('de-DE')}</p>
                    </div>
                </body>
            </html>
        `);
        
        printWindow.document.close();
        printWindow.focus();
        
        // Auto-print
        setTimeout(() => {
            printWindow.print();
        }, 500);
        
        alert('PDF-Bericht wird generiert. Ein neues Fenster zum Drucken/Speichern wurde ge√∂ffnet.');
    }
    
    exportSubstanceReportAsCSV(reportData, reportType) {
        const { substances } = reportData;
        const headers = ['Name', 'CAS-Nummer', 'Abteilung', 'Menge', 'Einheit', 'Lagerort', 'SDB-Ablaufdatum', 'Gefahrenklasse'];
        
        let csvContent = headers.join(';') + '\n';
        
        substances.forEach(substance => {
            const department = this.departments.find(d => d.id === substance.department);
            const row = [
                substance.name || '',
                substance.casNumber || '',
                department?.name || '',
                substance.quantity || '',
                substance.unit || '',
                substance.storageLocation || '',
                substance.sdsExpiryDate ? new Date(substance.sdsExpiryDate).toLocaleDateString('de-DE') : '',
                substance.hazardClass || ''
            ];
            csvContent += row.map(field => `"${field}"`).join(';') + '\n';
        });
        
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `${this.getReportTitle(reportType)}_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        alert('CSV-Bericht wurde heruntergeladen.');
    }
    
    exportSubstanceReportAsExcel(reportData, reportType) {
        // For now, export as CSV (Excel format would require additional library)
        this.exportSubstanceReportAsCSV(reportData, reportType);
        alert('Excel-Export wird als CSV-Datei bereitgestellt, die in Excel ge√∂ffnet werden kann.');
    }

    handleFileUpload(event, type) {
        const files = event.target.files;
        if (files.length > 0) {
            this.processUploadedFiles(files, type);
        }
    }

    handleDroppedFiles(files, type) {
        this.processUploadedFiles(files, type);
    }

    processUploadedFiles(files, type) {
        // Initialize documents array if not exists
        if (!this.currentSubstanceDocuments) {
            this.currentSubstanceDocuments = [];
        }

        Array.from(files).forEach(file => {
            // Check file size (limit to 5MB to prevent localStorage quota issues)
            const maxSize = 5 * 1024 * 1024; // 5MB
            if (file.size > maxSize) {
                alert(`Datei "${file.name}" ist zu gro√ü (${(file.size / 1024 / 1024).toFixed(1)}MB). Maximum: 5MB`);
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    // Create document object with actual file data
                    const document = {
                        id: 'doc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                        name: file.name,
                        type: type,
                        size: file.size,
                        uploadDate: new Date().toISOString(),
                        uploadedBy: this.getCurrentUser().displayName,
                        mimeType: file.type,
                        fileData: e.target.result // Base64 encoded file data
                    };

                    this.currentSubstanceDocuments.push(document);
                    
                    // Update UI after each file is processed
                    this.displayUploadedDocuments(this.currentSubstanceDocuments);
                    
                    console.log(`File "${file.name}" processed successfully (${(file.size / 1024).toFixed(1)}KB)`);
                } catch (error) {
                    console.error('Error processing file:', error);
                    alert(`Fehler beim Verarbeiten der Datei: ${file.name}`);
                }
            };
            
            reader.onerror = (error) => {
                console.error('Error reading file:', error);
                alert(`Fehler beim Lesen der Datei: ${file.name}`);
            };
            
            // Read file as data URL (Base64)
            reader.readAsDataURL(file);
        });
    }

    displayUploadedDocuments(documents) {
        const container = document.getElementById('uploadedDocuments');
        if (!container || !documents) return;

        if (documents.length === 0) {
            container.innerHTML = '';
            return;
        }

        container.innerHTML = `
            <h4>Hochgeladene Dokumente</h4>
            <div class="uploaded-files-list">
                ${documents.map(doc => `
                    <div class="uploaded-file-item" data-doc-id="${doc.id}">
                        <div class="file-icon">
                            <i class="fas ${this.getDocumentIcon(doc.type)}"></i>
                        </div>
                        <div class="file-info">
                            <strong>${doc.name}</strong>
                            <div class="file-meta">
                                <span>${this.getDocumentTypeName(doc.type)}</span>
                                <span>${(doc.size / 1024).toFixed(1)} KB</span>
                                <span>${new Date(doc.uploadDate).toLocaleDateString('de-DE')}</span>
                            </div>
                        </div>
                        <div class="file-actions">
                            ${doc.mimeType === 'application/pdf' ? `
                                <button class="btn-icon" onclick="window.qhseDashboard.viewSubstanceDocument('${doc.id}')" title="PDF anzeigen">
                                    <i class="fas fa-eye"></i>
                                </button>
                            ` : ''}
                            <button class="btn-icon" onclick="window.qhseDashboard.downloadSubstanceDocument('${doc.id}')" title="Herunterladen">
                                <i class="fas fa-download"></i>
                            </button>
                            <button class="btn-icon danger" onclick="window.qhseDashboard.removeUploadedDocument('${doc.id}')" title="Entfernen">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    removeUploadedDocument(docId) {
        if (this.currentSubstanceDocuments) {
            this.currentSubstanceDocuments = this.currentSubstanceDocuments.filter(doc => doc.id !== docId);
            this.displayUploadedDocuments(this.currentSubstanceDocuments);
        }
    }
    
    viewSubstanceDocument(docId) {
        const document = this.findSubstanceDocument(docId);
        if (!document) {
            alert('Dokument nicht gefunden.');
            return;
        }
        
        if (document.mimeType !== 'application/pdf') {
            alert('Nur PDF-Dokumente k√∂nnen in der Vorschau angezeigt werden.');
            return;
        }
        
        this.openPdfViewer(document);
    }
    
    downloadSubstanceDocument(docId) {
        const document = this.findSubstanceDocument(docId);
        if (!document) {
            alert('Dokument nicht gefunden.');
            return;
        }
        
        if (!document.fileData) {
            alert('Dateidaten nicht verf√ºgbar.');
            return;
        }
        
        try {
            // Create download link
            const link = window.document.createElement('a');
            link.href = document.fileData;
            link.download = document.name;
            link.style.display = 'none';
            
            window.document.body.appendChild(link);
            link.click();
            window.document.body.removeChild(link);
            
            console.log('Document downloaded:', document.name);
        } catch (error) {
            console.error('Error downloading document:', error);
            alert('Fehler beim Herunterladen der Datei.');
        }
    }
    
    findSubstanceDocument(docId) {
        // First check current substance documents (during editing)
        if (this.currentSubstanceDocuments) {
            const doc = this.currentSubstanceDocuments.find(d => d.id === docId);
            if (doc) return doc;
        }
        
        // Then check all saved substances
        for (const substance of this.hazardousSubstances) {
            if (substance.documents) {
                const doc = substance.documents.find(d => d.id === docId);
                if (doc) return doc;
            }
        }
        
        return null;
    }
    
    openPdfViewer(document) {
        try {
            const modal = window.document.getElementById('pdfViewerModal');
            const title = window.document.getElementById('pdfViewerTitle');
            const fileName = window.document.getElementById('pdfFileName');
            const fileSize = window.document.getElementById('pdfFileSize');
            const pdfFrame = window.document.getElementById('pdfFrame');
            const downloadBtn = window.document.getElementById('pdfDownloadBtn');
            const printBtn = window.document.getElementById('pdfPrintBtn');
            const closeBtn = window.document.getElementById('closePdfViewer');
            
            if (!modal || !pdfFrame) {
                console.error('PDF viewer elements not found');
                alert('PDF-Viewer nicht verf√ºgbar. Bitte laden Sie die Datei herunter.');
                return;
            }
        
        // Set document info
        if (title) title.textContent = document.name;
        if (fileName) fileName.textContent = document.name;
        if (fileSize) fileSize.textContent = `${(document.size / 1024).toFixed(1)} KB`;
        
        // Set PDF source with enhanced error handling
        try {
            console.log('Setting PDF source for document:', document.name);
            console.log('PDF data starts with:', document.fileData ? document.fileData.substring(0, 50) : 'NO DATA');
            
            if (document.fileData && document.fileData.startsWith('data:application/pdf')) {
                // Clear any previous content
                pdfFrame.src = '';
                
                // Set a loading message
                const pdfContent = window.document.getElementById('pdfContent');
                if (pdfContent) {
                    pdfContent.innerHTML = `
                        <div style="display: flex; justify-content: center; align-items: center; height: 100%; flex-direction: column;">
                            <div style="margin-bottom: 1rem;">
                                <i class="fas fa-spinner fa-spin fa-2x" style="color: #3b82f6;"></i>
                            </div>
                            <p style="color: #64748b;">PDF wird geladen...</p>
                        </div>
                        <iframe id="pdfFrame" style="width: 100%; height: 100%; border: none; display: none;"></iframe>
                    `;
                }
                
                // Get the iframe again since we replaced the content
                const newPdfFrame = window.document.getElementById('pdfFrame');
                
                // Add load handler to show iframe when loaded
                newPdfFrame.onload = () => {
                    console.log('PDF loaded successfully');
                    newPdfFrame.style.display = 'block';
                    // Hide loading message
                    const loadingDiv = pdfContent.querySelector('div');
                    if (loadingDiv) loadingDiv.style.display = 'none';
                };
                
                // Add error handler for PDF loading
                newPdfFrame.onerror = () => {
                    console.error('Error loading PDF in iframe');
                    this.showPdfErrorMessage(pdfContent, document);
                };
                
                // Set the PDF source
                setTimeout(() => {
                    newPdfFrame.src = document.fileData;
                }, 100);
                
                // Add timeout fallback
                setTimeout(() => {
                    if (newPdfFrame.style.display === 'none') {
                        console.warn('PDF may not have loaded properly after timeout');
                        this.showPdfErrorMessage(pdfContent, document);
                    }
                }, 5000);
                
            } else {
                console.error('Invalid PDF data format:', document.fileData ? 'Data exists but wrong format' : 'No data');
                this.showPdfErrorMessage(window.document.getElementById('pdfContent'), document);
            }
        } catch (error) {
            console.error('Error setting PDF source:', error);
            this.showPdfErrorMessage(window.document.getElementById('pdfContent'), document);
        }
        
        // Setup download button
        if (downloadBtn) {
            downloadBtn.onclick = () => this.downloadSubstanceDocument(document.id);
        }
        
        // Setup print button
        if (printBtn) {
            printBtn.onclick = () => {
                try {
                    // Try to print iframe content (may fail due to security restrictions)
                    if (pdfFrame.contentWindow) {
                        pdfFrame.contentWindow.print();
                    } else {
                        // Fallback: open PDF in new window for printing
                        this.printPdfInNewWindow(document);
                    }
                } catch (error) {
                    console.log('Cannot print iframe directly due to security restrictions, opening in new window');
                    // Fallback: open PDF in new window for printing
                    this.printPdfInNewWindow(document);
                }
            };
        }
        
        // Setup close button
        if (closeBtn) {
            closeBtn.onclick = () => {
                modal.style.display = 'none';
                pdfFrame.src = ''; // Clear PDF to free memory
            };
        }
        
            // Show modal
            modal.style.display = 'block';
            
            // Close on background click
            modal.onclick = (e) => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                    if (pdfFrame) pdfFrame.src = '';
                }
            };
            
        } catch (error) {
            console.error('Error in PDF viewer:', error);
            alert('Fehler beim √ñffnen des PDF-Viewers. Bitte laden Sie die Datei herunter.');
        }
    }
    
    showPdfErrorMessage(container, document) {
        if (!container) return;
        
        container.innerHTML = `
            <div style="display: flex; justify-content: center; align-items: center; height: 100%; flex-direction: column; padding: 2rem; text-align: center;">
                <div style="margin-bottom: 2rem;">
                    <i class="fas fa-exclamation-triangle fa-3x" style="color: #f59e0b;"></i>
                </div>
                <h3 style="margin-bottom: 1rem; color: #374151;">PDF kann nicht angezeigt werden</h3>
                <p style="color: #64748b; margin-bottom: 2rem; max-width: 400px;">
                    Das PDF-Dokument "${document.name}" kann nicht direkt im Browser angezeigt werden. 
                    Dies kann aufgrund von Sicherheitseinstellungen oder dem PDF-Format auftreten.
                </p>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap; justify-content: center;">
                    <button onclick="window.qhseDashboard.downloadSubstanceDocument('${document.id}')" 
                            style="padding: 0.75rem 1.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.5rem; cursor: pointer; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="fas fa-download"></i> Herunterladen
                    </button>
                    <button onclick="window.qhseDashboard.openPdfInNewTab('${document.id}')" 
                            style="padding: 0.75rem 1.5rem; background: #10b981; color: white; border: none; border-radius: 0.5rem; cursor: pointer; display: flex; align-items: center; gap: 0.5rem;">
                        <i class="fas fa-external-link-alt"></i> Neuer Tab
                    </button>
                </div>
            </div>
        `;
    }
    
    openPdfInNewTab(docId) {
        const document = this.findSubstanceDocument(docId);
        if (!document || !document.fileData) {
            alert('Dokument nicht verf√ºgbar.');
            return;
        }
        
        try {
            // Open PDF in new tab/window
            const newWindow = window.open();
            newWindow.document.write(`
                <html>
                    <head>
                        <title>${document.name}</title>
                        <style>
                            body { margin: 0; padding: 0; background: #f3f4f6; }
                            iframe { width: 100%; height: 100vh; border: none; }
                        </style>
                    </head>
                    <body>
                        <iframe src="${document.fileData}" title="${document.name}"></iframe>
                    </body>
                </html>
            `);
            newWindow.document.close();
        } catch (error) {
            console.error('Error opening PDF in new tab:', error);
            alert('Fehler beim √ñffnen in neuem Tab. Bitte laden Sie die Datei herunter.');
        }
    }
    
    printPdfInNewWindow(document) {
        try {
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${document.name}</title>
                        <style>
                            body { margin: 0; padding: 0; }
                            iframe { width: 100%; height: 100vh; border: none; }
                        </style>
                    </head>
                    <body>
                        <iframe src="${document.fileData}" onload="window.print(); window.close();"></iframe>
                    </body>
                </html>
            `);
            printWindow.document.close();
        } catch (error) {
            console.error('Error opening print window:', error);
            alert('Drucken nicht m√∂glich. Bitte laden Sie die Datei herunter und drucken Sie sie manuell.');
        }
    }
    
    showPdfErrorMessage(pdfFrame, documentId) {
        const errorMessage = window.document.createElement('div');
        errorMessage.className = 'pdf-error-message';
        errorMessage.innerHTML = `
            <div style="padding: 2rem; text-align: center; color: #666; background: #f9fafb; border-radius: 0.5rem; margin: 1rem;">
                <i class="fas fa-exclamation-triangle" style="font-size: 3rem; margin-bottom: 1rem; color: #f59e0b;"></i>
                <h3 style="margin: 0 0 1rem 0; color: #374151;">PDF konnte nicht angezeigt werden</h3>
                <p style="margin: 0 0 1.5rem 0; color: #6b7280;">Aufgrund von Browser-Sicherheitsrichtlinien kann die PDF-Datei nicht direkt angezeigt werden.</p>
                <button onclick="window.qhseDashboard.downloadSubstanceDocument('${documentId}')" class="btn-primary" style="margin-right: 0.5rem;">
                    <i class="fas fa-download"></i> Datei herunterladen
                </button>
                <button onclick="window.qhseDashboard.openPdfInNewTab('${documentId}')" class="btn-secondary">
                    <i class="fas fa-external-link-alt"></i> In neuem Tab √∂ffnen
                </button>
            </div>
        `;
        
        if (pdfFrame && pdfFrame.parentNode) {
            pdfFrame.parentNode.replaceChild(errorMessage, pdfFrame);
        }
    }
    
    openPdfInNewTab(documentId) {
        const document = this.findSubstanceDocument(documentId);
        if (document && document.fileData) {
            try {
                const newWindow = window.open();
                newWindow.document.write(`
                    <html>
                        <head>
                            <title>${document.name}</title>
                            <style>
                                body { margin: 0; padding: 0; }
                                iframe { width: 100%; height: 100vh; border: none; }
                            </style>
                        </head>
                        <body>
                            <iframe src="${document.fileData}"></iframe>
                        </body>
                    </html>
                `);
                newWindow.document.close();
            } catch (error) {
                console.error('Error opening PDF in new tab:', error);
                alert('PDF konnte nicht ge√∂ffnet werden. Bitte laden Sie die Datei herunter.');
            }
        }
    }

    addSubstanceComment() {
        const commentText = document.getElementById('newComment').value.trim();
        if (!commentText) {
            alert('Bitte geben Sie einen Kommentar ein.');
            return;
        }

        // Initialize comments array if not exists
        if (!this.currentSubstanceComments) {
            this.currentSubstanceComments = [];
        }

        const comment = {
            id: 'comment_' + Date.now(),
            text: commentText,
            author: this.getCurrentUser().displayName,
            timestamp: new Date().toISOString()
        };

        this.currentSubstanceComments.push(comment);
        
        // Clear input
        document.getElementById('newComment').value = '';
        
        // Update display
        this.displaySubstanceComments(this.currentSubstanceComments);
    }

    displaySubstanceComments(comments) {
        const container = document.getElementById('commentsList');
        if (!container) return;

        if (!comments || comments.length === 0) {
            container.innerHTML = '<p>Keine Kommentare vorhanden.</p>';
            return;
        }

        container.innerHTML = comments.map(comment => `
            <div class="comment-item">
                <div class="comment-header">
                    <strong>${comment.author}</strong>
                    <span class="comment-date">${new Date(comment.timestamp).toLocaleString('de-DE')}</span>
                </div>
                <div class="comment-text">${comment.text}</div>
            </div>
        `).join('');
    }

    setupDetailsModalTabs() {
        const detailsModal = document.getElementById('substanceDetailsModal');
        if (!detailsModal) return;

        const tabButtons = detailsModal.querySelectorAll('.tab-btn');
        const tabContents = detailsModal.querySelectorAll('.tab-content');

        tabButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetTab = btn.getAttribute('data-tab');
                
                // Update active tab button
                tabButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // Update active tab content
                tabContents.forEach(content => {
                    content.classList.toggle('active', content.getAttribute('data-tab') === targetTab);
                });
            });
        });
    }

    // ====================================
    // SUPPLIER MANAGEMENT SYSTEM  
    // ====================================

    // Data Loading Functions
    loadSuppliersFromStorage() {
        try {
            const suppliers = JSON.parse(localStorage.getItem('qhse_suppliers') || '[]');
            if (suppliers.length === 0) {
                return this.initializeDefaultSuppliers();
            }
            return suppliers;
        } catch (error) {
            console.error('Error loading suppliers:', error);
            return this.initializeDefaultSuppliers();
        }
    }

    loadSupplierEvaluationsFromStorage() {
        try {
            return JSON.parse(localStorage.getItem('qhse_supplier_evaluations') || '[]');
        } catch (error) {
            console.error('Error loading supplier evaluations:', error);
            return [];
        }
    }

    loadSupplierDocumentsFromStorage() {
        try {
            return JSON.parse(localStorage.getItem('qhse_supplier_documents') || '[]');
        } catch (error) {
            console.error('Error loading supplier documents:', error);
            return [];
        }
    }

    loadSupplierAuditsFromStorage() {
        try {
            return JSON.parse(localStorage.getItem('qhse_supplier_audits') || '[]');
        } catch (error) {
            console.error('Error loading supplier audits:', error);
            return [];
        }
    }

    loadRiskAssessmentsFromStorage() {
        const data = localStorage.getItem('qhse_risk_assessments');
        return data ? JSON.parse(data) : [];
    }

    // Helper function f√ºr Checkbox-Werte in T√úV-Formular
    getCheckedValues(name) {
        const checkboxes = document.querySelectorAll(`input[name="${name}"]:checked`);
        return Array.from(checkboxes).map(cb => cb.value);
    }

    loadAuditExchangesFromStorage() {
        const data = localStorage.getItem('qhse_audit_exchanges');
        return data ? JSON.parse(data) : [];
    }

    loadAuditorsFromStorage() {
        try {
            const stored = localStorage.getItem('qhse_auditors');
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('Error loading auditors:', error);
            return [];
        }
    }

    saveAuditorsToStorage() {
        try {
            localStorage.setItem('qhse_auditors', JSON.stringify(this.auditors));
        } catch (error) {
            console.error('Error saving auditors:', error);
        }
    }

    // ===== IMPORT/EXPORT FUNKTIONEN F√úR AUDITOR-VERWALTUNG =====
    
    exportAuditorsToJSON() {
        try {
            const exportData = {
                exportDate: new Date().toISOString(),
                version: '1.0',
                totalAuditors: this.auditors.length,
                auditors: this.auditors
            };
            
            const dataStr = JSON.stringify(exportData, null, 2);
            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `auditor-export-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            this.showNotification(`${this.auditors.length} Auditoren erfolgreich als JSON exportiert!`, 'success');
            console.log('Auditors exported to JSON:', exportData);
            
        } catch (error) {
            console.error('Error exporting auditors to JSON:', error);
            this.showNotification('Fehler beim JSON-Export.', 'error');
        }
    }
    
    exportAuditorsToCSV() {
        try {
            const headers = [
                'ID', 'Vorname', 'Nachname', 'E-Mail', 'Telefon', 'Stadt', 'Land',
                'Zertifizierung', 'Erfahrung', 'Standards', 'Branchen', 
                'Verf√ºgbarkeit', 'Status', 'Notizen', 'Erstellt', 'Letzte √Ñnderung'
            ];
            
            const csvContent = [
                headers.join(','),
                ...this.auditors.map(auditor => [
                    auditor.id,
                    `"${auditor.firstName || ''}"`,
                    `"${auditor.lastName || ''}"`,
                    `"${auditor.email || ''}"`,
                    `"${auditor.phone || ''}"`,
                    `"${auditor.city || ''}"`,
                    `"${auditor.country || ''}"`,
                    `"${auditor.certification || ''}"`,
                    `"${auditor.experience || ''}"`,
                    `"${(auditor.standards || []).join('; ')}"`,
                    `"${(auditor.industries || []).join('; ')}"`,
                    `"${auditor.availability || ''}"`,
                    `"${auditor.status || ''}"`,
                    `"${auditor.notes || ''}"`,
                    `"${auditor.createdAt || ''}"`,
                    `"${auditor.updatedAt || ''}"`
                ].join(','))
            ].join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `auditor-export-${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            this.showNotification(`${this.auditors.length} Auditoren erfolgreich als CSV exportiert!`, 'success');
            
        } catch (error) {
            console.error('Error exporting auditors to CSV:', error);
            this.showNotification('Fehler beim CSV-Export.', 'error');
        }
    }
    
    exportAuditorReport() {
        try {
            const stats = {
                total: this.auditors.length,
                active: this.auditors.filter(a => a.status === 'Aktiv').length,
                certified: this.auditors.filter(a => a.certification && a.certification !== 'Andere').length,
                standards: {},
                industries: {},
                countries: {}
            };
            
            // Sammle Statistiken
            this.auditors.forEach(auditor => {
                (auditor.standards || []).forEach(std => {
                    stats.standards[std] = (stats.standards[std] || 0) + 1;
                });
                (auditor.industries || []).forEach(ind => {
                    stats.industries[ind] = (stats.industries[ind] || 0) + 1;
                });
                if (auditor.country) {
                    stats.countries[auditor.country] = (stats.countries[auditor.country] || 0) + 1;
                }
            });
            
            const reportHtml = `
                <!DOCTYPE html>
                <html lang="de">
                <head>
                    <meta charset="UTF-8">
                    <title>Auditor-Bericht - ${new Date().toLocaleDateString('de-DE')}</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        .header { border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }
                        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
                        .stat-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                        .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }
                        .table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                        .table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        .table th { background-color: #f8f9fa; }
                        .section { margin: 30px 0; }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>Auditor-Bericht</h1>
                        <p>Erstellt am: ${new Date().toLocaleDateString('de-DE')} um ${new Date().toLocaleTimeString('de-DE')}</p>
                    </div>
                    
                    <div class="section">
                        <h2>√úbersicht</h2>
                        <div class="stats">
                            <div class="stat-card">
                                <div class="stat-number">${stats.total}</div>
                                <div>Auditoren gesamt</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">${stats.active}</div>
                                <div>Aktive Auditoren</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-number">${stats.certified}</div>
                                <div>Zertifizierte Auditoren</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="section">
                        <h2>Standards-Verteilung</h2>
                        <table class="table">
                            <tr><th>Standard</th><th>Anzahl Auditoren</th></tr>
                            ${Object.entries(stats.standards).map(([std, count]) => 
                                `<tr><td>${std}</td><td>${count}</td></tr>`
                            ).join('')}
                        </table>
                    </div>
                    
                    <div class="section">
                        <h2>Branchen-Verteilung</h2>
                        <table class="table">
                            <tr><th>Branche</th><th>Anzahl Auditoren</th></tr>
                            ${Object.entries(stats.industries).map(([ind, count]) => 
                                `<tr><td>${ind}</td><td>${count}</td></tr>`
                            ).join('')}
                        </table>
                    </div>
                    
                    <div class="section">
                        <h2>L√§nder-Verteilung</h2>
                        <table class="table">
                            <tr><th>Land</th><th>Anzahl Auditoren</th></tr>
                            ${Object.entries(stats.countries).map(([country, count]) => 
                                `<tr><td>${country}</td><td>${count}</td></tr>`
                            ).join('')}
                        </table>
                    </div>
                    
                    <div class="section">
                        <h2>Auditor-Liste</h2>
                        <table class="table">
                            <tr><th>Name</th><th>E-Mail</th><th>Stadt</th><th>Zertifizierung</th><th>Status</th></tr>
                            ${this.auditors.map(auditor => 
                                `<tr>
                                    <td>${auditor.firstName} ${auditor.lastName}</td>
                                    <td>${auditor.email}</td>
                                    <td>${auditor.city}, ${auditor.country}</td>
                                    <td>${auditor.certification}</td>
                                    <td>${auditor.status}</td>
                                </tr>`
                            ).join('')}
                        </table>
                    </div>
                </body>
                </html>
            `;
            
            const blob = new Blob([reportHtml], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `auditor-report-${new Date().toISOString().split('T')[0]}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            this.showNotification('Auditor-Bericht erfolgreich erstellt!', 'success');
            
        } catch (error) {
            console.error('Error creating auditor report:', error);
            this.showNotification('Fehler beim Erstellen des Berichts.', 'error');
        }
    }
    
    handleAuditorImport(input) {
        const file = input.files[0];
        if (!file) return;
        
        if (!file.name.endsWith('.json')) {
            this.showNotification('Bitte w√§hlen Sie eine JSON-Datei aus.', 'error');
            return;
        }
        
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importData = JSON.parse(e.target.result);
                this.processAuditorImport(importData);
            } catch (error) {
                console.error('Error parsing JSON:', error);
                this.showNotification('Ung√ºltige JSON-Datei. Bitte √ºberpr√ºfen Sie das Format.', 'error');
            }
        };
        reader.readAsText(file);
    }
    
    processAuditorImport(importData) {
        try {
            const mergeData = document.getElementById('mergeData')?.checked || false;
            const skipDuplicates = document.getElementById('skipDuplicates')?.checked || false;
            
            let auditorsToImport = [];
            
            // Verschiedene Import-Formate unterst√ºtzen
            if (importData.auditors && Array.isArray(importData.auditors)) {
                auditorsToImport = importData.auditors;
            } else if (Array.isArray(importData)) {
                auditorsToImport = importData;
            } else {
                throw new Error('Unbekanntes Datenformat');
            }
            
            let importedCount = 0;
            let skippedCount = 0;
            
            if (!mergeData) {
                // Alle vorhandenen Daten ersetzen
                this.auditors = [];
            }
            
            auditorsToImport.forEach(auditorData => {
                // Validierung
                if (!auditorData.email || !auditorData.firstName || !auditorData.lastName) {
                    console.warn('Incomplete auditor data skipped:', auditorData);
                    skippedCount++;
                    return;
                }
                
                // Duplikat-Check
                if (skipDuplicates) {
                    const duplicate = this.auditors.find(existing => 
                        existing.email.toLowerCase() === auditorData.email.toLowerCase()
                    );
                    if (duplicate) {
                        skippedCount++;
                        return;
                    }
                }
                
                // Daten bereinigen und hinzuf√ºgen
                const cleanAuditor = {
                    id: auditorData.id || Date.now().toString() + Math.random().toString(36).substr(2, 9),
                    firstName: this.escapeHtml(auditorData.firstName),
                    lastName: this.escapeHtml(auditorData.lastName),
                    email: this.escapeHtml(auditorData.email),
                    phone: this.escapeHtml(auditorData.phone || ''),
                    city: this.escapeHtml(auditorData.city || ''),
                    country: this.escapeHtml(auditorData.country || 'Deutschland'),
                    certification: this.escapeHtml(auditorData.certification || ''),
                    experience: this.escapeHtml(auditorData.experience || ''),
                    standards: auditorData.standards || [],
                    industries: auditorData.industries || [],
                    availability: this.escapeHtml(auditorData.availability || 'Nach Absprache'),
                    status: this.escapeHtml(auditorData.status || 'Aktiv'),
                    notes: this.escapeHtml(auditorData.notes || ''),
                    createdAt: auditorData.createdAt || new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    createdBy: auditorData.createdBy || this.getCurrentUser().id
                };
                
                this.auditors.push(cleanAuditor);
                importedCount++;
            });
            
            // Speichern und UI aktualisieren
            this.saveAuditorsToStorage();
            this.renderAuditorOverview();
            this.renderAuditorStats();
            this.updateImportExportStats();
            
            const message = `Import erfolgreich! ${importedCount} Auditoren importiert${skippedCount > 0 ? `, ${skippedCount} √ºbersprungen` : ''}.`;
            this.showNotification(message, 'success');
            
            // Zur √úbersicht wechseln
            this.switchAuditorTab('auditor-overview');
            
        } catch (error) {
            console.error('Error processing auditor import:', error);
            this.showNotification('Fehler beim Importieren der Auditor-Daten.', 'error');
        }
    }
    
    downloadSampleJSON() {
        const sampleData = {
            exportDate: new Date().toISOString(),
            version: '1.0',
            totalAuditors: 2,
            auditors: [
                {
                    id: 'sample_1',
                    firstName: 'Max',
                    lastName: 'Mustermann',
                    email: 'max.mustermann@example.com',
                    phone: '+49 123 456789',
                    city: 'Hamburg',
                    country: 'Deutschland',
                    certification: 'IRCA',
                    experience: '5+ Jahre',
                    standards: ['ISO 9001', 'ISO 14001'],
                    industries: ['Automobilindustrie', 'Maschinenbau'],
                    availability: 'Sofort verf√ºgbar',
                    status: 'Aktiv',
                    notes: 'Spezialisiert auf Qualit√§tsmanagement',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                },
                {
                    id: 'sample_2',
                    firstName: 'Sarah',
                    lastName: 'Schmidt',
                    email: 'sarah.schmidt@example.com',
                    phone: '+49 987 654321',
                    city: 'M√ºnchen',
                    country: 'Deutschland',
                    certification: 'T√úV',
                    experience: '3-5 Jahre',
                    standards: ['ISO 45001', 'ISO 27001'],
                    industries: ['IT', 'Medizintechnik'],
                    availability: 'Innerhalb 1 Woche',
                    status: 'Aktiv',
                    notes: 'Fokus auf Arbeitssicherheit und IT-Sicherheit',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                }
            ]
        };
        
        const dataStr = JSON.stringify(sampleData, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = 'auditor-import-example.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        this.showNotification('Beispiel-JSON heruntergeladen!', 'success');
    }
    
    updateImportExportStats() {
        try {
            const totalElement = document.getElementById('exportTotalAuditors');
            const activeElement = document.getElementById('exportActiveAuditors');
            const sizeElement = document.getElementById('exportDataSize');
            const updateElement = document.getElementById('exportLastUpdate');
            
            if (totalElement) totalElement.textContent = this.auditors.length;
            if (activeElement) activeElement.textContent = this.auditors.filter(a => a.status === 'Aktiv').length;
            
            if (sizeElement) {
                const dataSize = JSON.stringify(this.auditors).length;
                const sizeKB = Math.round(dataSize / 1024 * 100) / 100;
                sizeElement.textContent = `${sizeKB} KB`;
            }
            
            if (updateElement) {
                const lastUpdate = this.auditors.length > 0 
                    ? Math.max(...this.auditors.map(a => new Date(a.updatedAt || a.createdAt || 0).getTime()))
                    : Date.now();
                updateElement.textContent = new Date(lastUpdate).toLocaleDateString('de-DE');
            }
        } catch (error) {
            console.error('Error updating import/export stats:', error);
        }
    }

    // Kalender-System f√ºr Auditor-Verf√ºgbarkeit - Schritt 1: Datenstruktur
    initializeAuditorCalendarSystem() {
        console.log('üìÖ Initializing Auditor Calendar System...');
        
        // Erweitere vorhandene Auditoren um Kalender-Daten falls nicht vorhanden
        this.auditors.forEach(auditor => {
            if (!auditor.calendar) {
                auditor.calendar = {
                    availability: [], // Array von Verf√ºgbarkeits-Bl√∂cken
                    bookings: [],     // Array von gebuchten Terminen
                    blackoutDates: [], // Array von gesperrten Terminen
                    workingHours: {   // Standard-Arbeitszeiten
                        monday: { start: '09:00', end: '17:00', available: true },
                        tuesday: { start: '09:00', end: '17:00', available: true },
                        wednesday: { start: '09:00', end: '17:00', available: true },
                        thursday: { start: '09:00', end: '17:00', available: true },
                        friday: { start: '09:00', end: '17:00', available: true },
                        saturday: { start: '09:00', end: '13:00', available: false },
                        sunday: { start: '09:00', end: '13:00', available: false }
                    },
                    preferences: {
                        maxDailyAudits: 1,
                        minBreakBetweenAudits: 60, // Minuten
                        travelTimeBuffer: 30,      // Minuten
                        autoAcceptBookings: false
                    },
                    lastUpdated: new Date().toISOString()
                };
            }
        });
        
        this.saveAuditorsToStorage();
    }

    // Verf√ºgbarkeits-Block erstellen
    createAvailabilityBlock(auditorId, startDate, endDate, type = 'available', notes = '') {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor) return false;

        const availabilityBlock = {
            id: 'avail_' + Date.now(),
            startDate: startDate,
            endDate: endDate,
            type: type, // 'available', 'unavailable', 'preferred'
            notes: notes,
            createdAt: new Date().toISOString()
        };

        auditor.calendar.availability.push(availabilityBlock);
        this.saveAuditorsToStorage();
        return availabilityBlock;
    }

    // Verf√ºgbarkeit f√ºr bestimmten Zeitraum pr√ºfen
    checkAuditorAvailability(auditorId, startDate, endDate) {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor || !auditor.calendar) return false;

        const start = new Date(startDate);
        const end = new Date(endDate);

        // Pr√ºfe Blackout-Termine
        const hasBlackout = auditor.calendar.blackoutDates.some(blackout => {
            const blackoutStart = new Date(blackout.startDate);
            const blackoutEnd = new Date(blackout.endDate);
            return (start < blackoutEnd && end > blackoutStart);
        });

        if (hasBlackout) return false;

        // Pr√ºfe bestehende Buchungen
        const hasConflict = auditor.calendar.bookings.some(booking => {
            const bookingStart = new Date(booking.startDate);
            const bookingEnd = new Date(booking.endDate);
            return (start < bookingEnd && end > bookingStart);
        });

        return !hasConflict;
    }

    // Verf√ºgbare Auditoren f√ºr Zeitraum finden
    findAvailableAuditors(startDate, endDate, requiredSkills = []) {
        return this.auditors.filter(auditor => {
            if (!auditor.isActive) return false;
            
            // Pr√ºfe Verf√ºgbarkeit
            if (!this.checkAuditorAvailability(auditor.id, startDate, endDate)) return false;
            
            // Pr√ºfe Skills (optional)
            if (requiredSkills.length > 0) {
                const auditorSkills = auditor.standards || [];
                const hasRequiredSkills = requiredSkills.some(skill => 
                    auditorSkills.includes(skill)
                );
                return hasRequiredSkills;
            }
            
            return true;
        });
    }

    // Kalender-Daten f√ºr bestimmten Monat laden
    getAuditorCalendarData(auditorId, year, month) {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor || !auditor.calendar) return null;

        const startOfMonth = new Date(year, month, 1);
        const endOfMonth = new Date(year, month + 1, 0);

        return {
            auditor: {
                id: auditor.id,
                name: `${auditor.firstName} ${auditor.lastName}`,
                email: auditor.email
            },
            month: month,
            year: year,
            workingHours: auditor.calendar.workingHours,
            availability: auditor.calendar.availability.filter(avail => {
                const availStart = new Date(avail.startDate);
                const availEnd = new Date(avail.endDate);
                return (availStart <= endOfMonth && availEnd >= startOfMonth);
            }),
            bookings: auditor.calendar.bookings.filter(booking => {
                const bookingStart = new Date(booking.startDate);
                const bookingEnd = new Date(booking.endDate);
                return (bookingStart <= endOfMonth && bookingEnd >= startOfMonth);
            }),
            blackoutDates: auditor.calendar.blackoutDates.filter(blackout => {
                const blackoutStart = new Date(blackout.startDate);
                const blackoutEnd = new Date(blackout.endDate);
                return (blackoutStart <= endOfMonth && blackoutEnd >= startOfMonth);
            })
        };
    }

    // Kalender-Navigation und Rendering - Schritt 2
    setupCalendarNavigation() {
        console.log('üìÖ Setting up calendar navigation...');
        
        // Aktuelle Kalender-Ansicht State
        this.calendarState = {
            currentDate: new Date(),
            currentView: 'month',
            selectedAuditorId: null
        };

        // Navigation Event Listeners
        const prevBtn = document.getElementById('prevMonth');
        const nextBtn = document.getElementById('nextMonth');
        const auditorSelect = document.getElementById('calendarAuditorSelect');
        const viewBtns = document.querySelectorAll('.calendar-view-btn');

        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                this.calendarState.currentDate.setMonth(this.calendarState.currentDate.getMonth() - 1);
                this.renderAuditorCalendar();
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                this.calendarState.currentDate.setMonth(this.calendarState.currentDate.getMonth() + 1);
                this.renderAuditorCalendar();
            });
        }

        if (auditorSelect) {
            auditorSelect.addEventListener('change', (e) => {
                this.calendarState.selectedAuditorId = e.target.value || null;
                this.renderAuditorCalendar();
                // Update calendar with availability data when auditor selection changes
                this.updateCalendarWithAvailability();
            });
        }

        // View Toggle Buttons
        viewBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                viewBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.calendarState.currentView = btn.dataset.view;
                this.renderAuditorCalendar();
            });
        });

        // Globale Funktionen verf√ºgbar machen
        window.qhseDashboard.showAddAvailabilityForm = () => this.showAddAvailabilityForm();
        window.qhseDashboard.showBookingForm = (auditorId, date) => this.showBookingForm(auditorId, date);
        window.qhseDashboard.editBooking = (bookingId) => this.editBooking(bookingId);
        window.qhseDashboard.cancelBooking = (bookingId) => this.cancelBooking(bookingId);
    }

    // Auditor-Dropdown populieren
    populateCalendarAuditorDropdown() {
        const select = document.getElementById('calendarAuditorSelect');
        if (!select) return;

        const activeAuditors = this.auditors.filter(a => a.isActive);
        
        select.innerHTML = '<option value="">Alle Auditoren</option>';
        
        activeAuditors.forEach(auditor => {
            const option = document.createElement('option');
            option.value = auditor.id;
            option.textContent = `${auditor.firstName} ${auditor.lastName}`;
            select.appendChild(option);
        });
    }

    // Kalender-Rendering Hauptfunktion
    renderAuditorCalendar() {
        console.log('üìÖ Rendering auditor calendar...');
        
        this.populateCalendarAuditorDropdown();
        this.updateCalendarHeader();
        
        if (this.calendarState.currentView === 'month') {
            this.renderMonthView();
        } else {
            this.renderWeekView();
        }
        
        // Update calendar with availability data after rendering
        this.updateCalendarWithAvailability();
    }

    // Kalender-Header aktualisieren
    updateCalendarHeader() {
        const headerElement = document.getElementById('calendarMonthYear');
        if (!headerElement) return;

        const date = this.calendarState.currentDate;
        const monthNames = [
            'Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni',
            'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'
        ];

        headerElement.textContent = `${monthNames[date.getMonth()]} ${date.getFullYear()}`;
    }

    // Monats-Ansicht rendern
    renderMonthView() {
        const calendarGrid = document.getElementById('calendarGrid');
        if (!calendarGrid) return;

        const year = this.calendarState.currentDate.getFullYear();
        const month = this.calendarState.currentDate.getMonth();
        
        // Ersten Tag des Monats finden
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const today = new Date();
        
        // Montag als erster Tag der Woche (0 = Sonntag, 1 = Montag)
        const firstDayOfWeek = (firstDay.getDay() + 6) % 7;
        
        // Kalender-Grid leeren und neu bef√ºllen
        calendarGrid.innerHTML = `
            <div class="calendar-day-header">Mo</div>
            <div class="calendar-day-header">Di</div>
            <div class="calendar-day-header">Mi</div>
            <div class="calendar-day-header">Do</div>
            <div class="calendar-day-header">Fr</div>
            <div class="calendar-day-header">Sa</div>
            <div class="calendar-day-header">So</div>
        `;

        // Leere Tage am Anfang hinzuf√ºgen
        for (let i = 0; i < firstDayOfWeek; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.className = 'calendar-day other-month';
            calendarGrid.appendChild(emptyDay);
        }

        // Tage des Monats hinzuf√ºgen
        for (let day = 1; day <= lastDay.getDate(); day++) {
            const dayElement = document.createElement('div');
            const currentDate = new Date(year, month, day);
            
            dayElement.className = 'calendar-day';
            
            // Heute markieren
            if (currentDate.toDateString() === today.toDateString()) {
                dayElement.classList.add('today');
            }

            // Verf√ºgbarkeits-Status hinzuf√ºgen
            const availabilityStatus = this.getDayAvailabilityStatus(currentDate);
            if (availabilityStatus) {
                dayElement.classList.add(availabilityStatus);
            }

            dayElement.innerHTML = `
                <div class="calendar-day-number">${day}</div>
                <div class="calendar-day-indicators">
                    ${this.getCalendarDayIndicators(currentDate)}
                </div>
            `;

            // Click-Event f√ºr Tag-Auswahl
            dayElement.addEventListener('click', () => {
                this.handleDayClick(currentDate);
            });

            calendarGrid.appendChild(dayElement);
        }

        // Verbleibende Tage auff√ºllen (f√ºr 6-Wochen-Grid)
        const totalCells = 42; // 6 Wochen √ó 7 Tage
        const currentCells = calendarGrid.children.length - 7; // Minus Header
        
        for (let i = currentCells; i < totalCells; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.className = 'calendar-day other-month';
            calendarGrid.appendChild(emptyDay);
        }
    }

    // Verf√ºgbarkeits-Status f√ºr einen Tag ermitteln
    getDayAvailabilityStatus(date) {
        if (!this.calendarState.selectedAuditorId) {
            // Wenn kein spezifischer Auditor ausgew√§hlt - zeige allgemeine Verf√ºgbarkeit
            const availableAuditors = this.findAvailableAuditors(
                date.toISOString(),
                new Date(date.getTime() + 24 * 60 * 60 * 1000).toISOString()
            );
            
            if (availableAuditors.length > 0) {
                return 'available';
            }
            return null;
        }

        // Spezifischer Auditor ausgew√§hlt
        const auditor = this.auditors.find(a => a.id === this.calendarState.selectedAuditorId);
        if (!auditor || !auditor.calendar) return null;

        const dateStr = date.toISOString().split('T')[0];

        // Pr√ºfe Buchungen
        const hasBooking = auditor.calendar.bookings.some(booking => {
            const bookingDate = booking.startDate.split('T')[0];
            return bookingDate === dateStr;
        });
        
        if (hasBooking) return 'booked';

        // Pr√ºfe Blackout-Termine
        const hasBlackout = auditor.calendar.blackoutDates.some(blackout => {
            const blackoutStart = new Date(blackout.startDate);
            const blackoutEnd = new Date(blackout.endDate);
            return date >= blackoutStart && date <= blackoutEnd;
        });
        
        if (hasBlackout) return 'unavailable';

        // Pr√ºfe Verf√ºgbarkeit
        const hasAvailability = auditor.calendar.availability.some(avail => {
            const availStart = new Date(avail.startDate);
            const availEnd = new Date(avail.endDate);
            return date >= availStart && date <= availEnd && avail.type === 'available';
        });

        if (hasAvailability) return 'available';

        return null;
    }

    // Kalender-Tag-Indikatoren generieren
    getCalendarDayIndicators(date) {
        let indicators = '';
        
        if (this.calendarState.selectedAuditorId) {
            const auditor = this.auditors.find(a => a.id === this.calendarState.selectedAuditorId);
            if (auditor && auditor.calendar) {
                const dateStr = date.toISOString().split('T')[0];
                
                // Buchungs-Indikator
                const bookingCount = auditor.calendar.bookings.filter(booking => 
                    booking.startDate.split('T')[0] === dateStr
                ).length;
                
                for (let i = 0; i < Math.min(bookingCount, 3); i++) {
                    indicators += '<div class="calendar-indicator status-booked"></div>';
                }
            }
        } else {
            // Zeige Anzahl verf√ºgbarer Auditoren
            const availableCount = this.findAvailableAuditors(
                date.toISOString(),
                new Date(date.getTime() + 24 * 60 * 60 * 1000).toISOString()
            ).length;
            
            for (let i = 0; i < Math.min(availableCount, 3); i++) {
                indicators += '<div class="calendar-indicator status-available"></div>';
            }
        }
        
        return indicators;
    }

    // Tag-Klick-Handler
    handleDayClick(date) {
        console.log('üìÖ Day clicked:', date);
        
        if (this.calendarState.selectedAuditorId) {
            // Spezifischer Auditor - zeige Details oder √∂ffne Buchungsformular
            this.showDayDetailsModal(date, this.calendarState.selectedAuditorId);
        } else {
            // Kein Auditor ausgew√§hlt - zeige verf√ºgbare Auditoren f√ºr diesen Tag
            this.showAvailableAuditorsForDay(date);
        }
    }

    // Wochenansicht (Platzhalter f√ºr sp√§teren Ausbau)
    renderWeekView() {
        console.log('üìÖ Week view not yet implemented');
        // TODO: Implementierung der Wochenansicht
    }

    // Platzhalter-Funktionen f√ºr Kalender-Interaktionen
    showAddAvailabilityForm() {
        console.log('üìÖ Opening availability form...');
        
        const selectedAuditor = document.getElementById('auditorSelect').value;
        if (!selectedAuditor) {
            this.showNotification('Fehler', 'Bitte w√§hlen Sie zuerst einen Auditor aus', 'error');
            return;
        }
        
        const auditor = this.auditors.find(a => a.id === selectedAuditor);
        if (!auditor) {
            this.showNotification('Fehler', 'Auditor nicht gefunden', 'error');
            return;
        }
        
        // Create modal for availability input
        const modalHTML = `
            <div class="modal-overlay" id="availabilityModal">
                <div class="modal-content availability-modal">
                    <div class="modal-header">
                        <h2><i class="fas fa-calendar-plus"></i> Verf√ºgbarkeit hinzuf√ºgen</h2>
                        <span class="close" onclick="this.closest('.modal-overlay').remove()">&times;</span>
                    </div>
                    
                    <div class="modal-body">
                        <div class="availability-form">
                            <div class="auditor-info">
                                <h3>Auditor: ${auditor.firstName} ${auditor.lastName}</h3>
                                <p><i class="fas fa-envelope"></i> ${auditor.email}</p>
                            </div>
                            
                            <form id="availabilityForm">
                                <div class="form-section">
                                    <h4><i class="fas fa-calendar-alt"></i> Verf√ºgbarkeitszeitraum</h4>
                                    
                                    <div class="form-group">
                                        <label for="availabilityType">Verf√ºgbarkeitstyp *</label>
                                        <select id="availabilityType" required>
                                            <option value="">Bitte ausw√§hlen</option>
                                            <option value="available">Verf√ºgbar</option>
                                            <option value="partially">Teilweise verf√ºgbar</option>
                                            <option value="unavailable">Nicht verf√ºgbar</option>
                                            <option value="preferred">Bevorzugte Termine</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="startDate">Startdatum *</label>
                                            <input type="date" id="startDate" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="endDate">Enddatum *</label>
                                            <input type="date" id="endDate" required>
                                        </div>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="startTime">Startzeit</label>
                                            <input type="time" id="startTime" value="09:00">
                                        </div>
                                        <div class="form-group">
                                            <label for="endTime">Endzeit</label>
                                            <input type="time" id="endTime" value="17:00">
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="form-section">
                                    <h4><i class="fas fa-repeat"></i> Wiederholung</h4>
                                    
                                    <div class="form-group">
                                        <label for="recurringType">Wiederholungstyp</label>
                                        <select id="recurringType">
                                            <option value="none">Keine Wiederholung</option>
                                            <option value="daily">T√§glich</option>
                                            <option value="weekly">W√∂chentlich</option>
                                            <option value="monthly">Monatlich</option>
                                            <option value="custom">Benutzerdefiniert</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group weekdays-group" id="weekdaysGroup" style="display: none;">
                                        <label>Wochentage</label>
                                        <div class="weekdays-selector">
                                            <label><input type="checkbox" value="1"> Mo</label>
                                            <label><input type="checkbox" value="2"> Di</label>
                                            <label><input type="checkbox" value="3"> Mi</label>
                                            <label><input type="checkbox" value="4"> Do</label>
                                            <label><input type="checkbox" value="5"> Fr</label>
                                            <label><input type="checkbox" value="6"> Sa</label>
                                            <label><input type="checkbox" value="0"> So</label>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="form-section">
                                    <h4><i class="fas fa-info-circle"></i> Zusatzinformationen</h4>
                                    
                                    <div class="form-group">
                                        <label for="availabilityNotes">Notizen</label>
                                        <textarea id="availabilityNotes" rows="3" placeholder="Zus√§tzliche Informationen zur Verf√ºgbarkeit..."></textarea>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="maxAuditsPerDay">Max. Audits pro Tag</label>
                                        <input type="number" id="maxAuditsPerDay" min="1" max="10" value="2">
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="travelRadius">Reiseradius (km)</label>
                                        <input type="number" id="travelRadius" min="0" max="1000" value="100">
                                    </div>
                                </div>
                                
                                <div class="form-actions">
                                    <button type="button" class="btn btn-secondary" onclick="this.closest('.modal-overlay').remove()">
                                        <i class="fas fa-times"></i> Abbrechen
                                    </button>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save"></i> Verf√ºgbarkeit speichern
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Add modal to page
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // Setup form handlers
        this.setupAvailabilityFormHandlers();
        
        // Set minimum date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('startDate').min = today;
        document.getElementById('endDate').min = today;
    }

    showDayDetailsModal(date, auditorId) {
        console.log('üìÖ Showing day details for:', date, auditorId);
        const auditor = this.auditors.find(a => a.id === auditorId);
        const auditorName = auditor ? `${auditor.firstName} ${auditor.lastName}` : 'Unbekannt';
        const dateStr = date.toLocaleDateString('de-DE');
        
        this.showNotification(
            'Tag-Details', 
            `${auditorName} am ${dateStr} - Details werden in Schritt 3 implementiert`, 
            'info'
        );
        // TODO: Detaillierte Tagesansicht in sp√§terem Schritt
    }

    showAvailableAuditorsForDay(date) {
        console.log('üìÖ Showing available auditors for:', date);
        const dateStr = date.toLocaleDateString('de-DE');
        const availableAuditors = this.findAvailableAuditors(
            date.toISOString(),
            new Date(date.getTime() + 24 * 60 * 60 * 1000).toISOString()
        );
        
        let message = `Verf√ºgbare Auditoren am ${dateStr}:\n`;
        if (availableAuditors.length === 0) {
            message += 'Keine Auditoren verf√ºgbar';
        } else {
            availableAuditors.forEach(auditor => {
                message += `‚Ä¢ ${auditor.firstName} ${auditor.lastName}\n`;
            });
        }
        
        this.showNotification('Verf√ºgbare Auditoren', message, 'info', 5000);
    }
    
    setupAvailabilityFormHandlers() {
        // Form submission handler
        const form = document.getElementById('availabilityForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.submitAvailability();
            });
        }
        
        // Recurring type change handler
        const recurringType = document.getElementById('recurringType');
        if (recurringType) {
            recurringType.addEventListener('change', (e) => {
                const weekdaysGroup = document.getElementById('weekdaysGroup');
                if (e.target.value === 'weekly' || e.target.value === 'custom') {
                    weekdaysGroup.style.display = 'block';
                } else {
                    weekdaysGroup.style.display = 'none';
                }
            });
        }
        
        // Date validation
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        
        if (startDate && endDate) {
            startDate.addEventListener('change', () => {
                endDate.min = startDate.value;
                if (endDate.value && endDate.value < startDate.value) {
                    endDate.value = startDate.value;
                }
            });
            
            endDate.addEventListener('change', () => {
                if (startDate.value && endDate.value < startDate.value) {
                    this.showNotification('Fehler', 'Enddatum muss nach dem Startdatum liegen', 'error');
                    endDate.value = startDate.value;
                }
            });
        }
    }
    
    submitAvailability() {
        console.log('üíæ Submitting availability...');
        
        // Get form data
        const formData = {
            auditorId: document.getElementById('auditorSelect').value,
            type: document.getElementById('availabilityType').value,
            startDate: document.getElementById('startDate').value,
            endDate: document.getElementById('endDate').value,
            startTime: document.getElementById('startTime').value,
            endTime: document.getElementById('endTime').value,
            recurringType: document.getElementById('recurringType').value,
            notes: document.getElementById('availabilityNotes').value,
            maxAuditsPerDay: parseInt(document.getElementById('maxAuditsPerDay').value),
            travelRadius: parseInt(document.getElementById('travelRadius').value)
        };
        
        // Get selected weekdays if applicable
        if (formData.recurringType === 'weekly' || formData.recurringType === 'custom') {
            const weekdayCheckboxes = document.querySelectorAll('.weekdays-selector input[type="checkbox"]:checked');
            formData.weekdays = Array.from(weekdayCheckboxes).map(cb => parseInt(cb.value));
        }
        
        // Validate required fields
        const validationErrors = this.validateAvailabilityData(formData);
        if (validationErrors.length > 0) {
            this.showNotification('Validierungsfehler', validationErrors.join('\n'), 'error');
            return;
        }
        
        // Find auditor
        const auditor = this.auditors.find(a => a.id === formData.auditorId);
        if (!auditor) {
            this.showNotification('Fehler', 'Auditor nicht gefunden', 'error');
            return;
        }
        
        // Initialize calendar if not exists
        if (!auditor.calendar) {
            auditor.calendar = {
                availability: [],
                bookings: [],
                blackoutDates: [],
                workingHours: { mo: {start: '09:00', end: '17:00'}, tu: {start: '09:00', end: '17:00'}, we: {start: '09:00', end: '17:00'}, th: {start: '09:00', end: '17:00'}, fr: {start: '09:00', end: '17:00'}, sa: {start: '09:00', end: '17:00'}, su: {start: '09:00', end: '17:00'} },
                preferences: { maxAuditsPerDay: 2, travelRadius: 100 }
            };
        }
        
        // Create availability entry
        const availabilityEntry = {
            id: 'avail_' + Date.now(),
            type: formData.type,
            startDate: formData.startDate,
            endDate: formData.endDate,
            startTime: formData.startTime,
            endTime: formData.endTime,
            recurringType: formData.recurringType,
            weekdays: formData.weekdays || [],
            notes: formData.notes,
            maxAuditsPerDay: formData.maxAuditsPerDay,
            travelRadius: formData.travelRadius,
            createdAt: new Date().toISOString()
        };
        
        // Add to auditor's availability
        auditor.calendar.availability.push(availabilityEntry);
        
        // Update preferences
        auditor.calendar.preferences.maxAuditsPerDay = formData.maxAuditsPerDay;
        auditor.calendar.preferences.travelRadius = formData.travelRadius;
        
        // Save to storage
        this.saveAuditorsToStorage();
        
        // Close modal
        document.getElementById('availabilityModal').remove();
        
        // Refresh calendar display
        this.renderAuditorCalendar();
        
        // Show success notification
        this.showNotification('Erfolg', 'Verf√ºgbarkeit erfolgreich hinzugef√ºgt', 'success');
        
        console.log('‚úÖ Availability saved:', availabilityEntry);
    }
    
    validateAvailabilityData(data) {
        const errors = [];
        
        if (!data.auditorId) {
            errors.push('‚Ä¢ Auditor ist erforderlich');
        }
        
        if (!data.type) {
            errors.push('‚Ä¢ Verf√ºgbarkeitstyp ist erforderlich');
        }
        
        if (!data.startDate) {
            errors.push('‚Ä¢ Startdatum ist erforderlich');
        }
        
        if (!data.endDate) {
            errors.push('‚Ä¢ Enddatum ist erforderlich');
        }
        
        if (data.startDate && data.endDate && data.endDate < data.startDate) {
            errors.push('‚Ä¢ Enddatum muss nach dem Startdatum liegen');
        }
        
        if (data.startTime && data.endTime && data.startTime >= data.endTime) {
            errors.push('‚Ä¢ Endzeit muss nach der Startzeit liegen');
        }
        
        if ((data.recurringType === 'weekly' || data.recurringType === 'custom') && (!data.weekdays || data.weekdays.length === 0)) {
            errors.push('‚Ä¢ Wochentage sind f√ºr diesen Wiederholungstyp erforderlich');
        }
        
        if (data.maxAuditsPerDay < 1 || data.maxAuditsPerDay > 10) {
            errors.push('‚Ä¢ Max. Audits pro Tag muss zwischen 1 und 10 liegen');
        }
        
        if (data.travelRadius < 0 || data.travelRadius > 1000) {
            errors.push('‚Ä¢ Reiseradius muss zwischen 0 und 1000 km liegen');
        }
        
        return errors;
    }
    
    updateCalendarWithAvailability() {
        console.log('üîÑ Updating calendar with availability data...');
        
        const selectedAuditor = document.getElementById('calendarAuditorSelect').value;
        if (!selectedAuditor) {
            return;
        }
        
        const auditor = this.auditors.find(a => a.id === selectedAuditor);
        if (!auditor || !auditor.calendar) {
            return;
        }
        
        // Update calendar cells with availability status
        const calendarDays = document.querySelectorAll('.calendar-day');
        calendarDays.forEach(day => {
            const dayDate = day.getAttribute('data-date');
            if (!dayDate) return;
            
            const availabilityStatus = this.getAvailabilityForDate(auditor, dayDate);
            
            // Remove existing availability classes
            day.classList.remove('available', 'partially-available', 'unavailable', 'preferred');
            
            // Add new availability class
            if (availabilityStatus) {
                day.classList.add(availabilityStatus.type);
                day.title = availabilityStatus.description;
            }
        });
    }
    
    getAvailabilityForDate(auditor, date) {
        if (!auditor.calendar || !auditor.calendar.availability) {
            return null;
        }
        
        const targetDate = new Date(date);
        const targetDay = targetDate.getDay();
        
        // Check all availability entries
        for (const availability of auditor.calendar.availability) {
            const startDate = new Date(availability.startDate);
            const endDate = new Date(availability.endDate);
            
            // Check if date is within range
            if (targetDate >= startDate && targetDate <= endDate) {
                // Check recurring pattern
                if (availability.recurringType === 'none') {
                    return {
                        type: availability.type,
                        description: `${this.getAvailabilityTypeName(availability.type)} (${availability.startTime}-${availability.endTime})`
                    };
                } else if (availability.recurringType === 'daily') {
                    return {
                        type: availability.type,
                        description: `${this.getAvailabilityTypeName(availability.type)} (${availability.startTime}-${availability.endTime})`
                    };
                } else if (availability.recurringType === 'weekly' || availability.recurringType === 'custom') {
                    if (availability.weekdays.includes(targetDay)) {
                        return {
                            type: availability.type,
                            description: `${this.getAvailabilityTypeName(availability.type)} (${availability.startTime}-${availability.endTime})`
                        };
                    }
                }
            }
        }
        
        return null;
    }
    
    getAvailabilityTypeName(type) {
        const types = {
            'available': 'Verf√ºgbar',
            'partially': 'Teilweise verf√ºgbar',
            'unavailable': 'Nicht verf√ºgbar',
            'preferred': 'Bevorzugt'
        };
        return types[type] || type;
    }
    
    getBookingsForDate(auditor, date) {
        if (!auditor.calendar || !auditor.calendar.bookings) {
            return [];
        }
        
        return auditor.calendar.bookings.filter(booking => {
            const bookingDate = booking.date.split('T')[0];
            return bookingDate === date;
        }).sort((a, b) => a.startTime.localeCompare(b.startTime));
    }
    
    generateDayTimeline(auditor, date, availability, bookings) {
        const hours = [];
        const startHour = 8;
        const endHour = 18;
        
        for (let hour = startHour; hour <= endHour; hour++) {
            const timeSlot = `${hour.toString().padStart(2, '0')}:00`;
            const booking = bookings.find(b => {
                const bookingStart = parseInt(b.startTime.split(':')[0]);
                const bookingEnd = parseInt(b.endTime.split(':')[0]);
                return hour >= bookingStart && hour < bookingEnd;
            });
            
            let slotClass = 'timeline-slot';
            let slotContent = timeSlot;
            
            if (booking) {
                slotClass += ' booked';
                slotContent += ` - ${booking.auditType}`;
            } else if (availability) {
                const availStart = parseInt(availability.startTime?.split(':')[0] || '9');
                const availEnd = parseInt(availability.endTime?.split(':')[0] || '17');
                
                if (hour >= availStart && hour < availEnd) {
                    slotClass += ` ${availability.type}`;
                } else {
                    slotClass += ' outside-hours';
                }
            } else {
                slotClass += ' no-availability';
            }
            
            hours.push(`
                <div class="${slotClass}" data-hour="${hour}">
                    <span class="time-label">${timeSlot}</span>
                    <span class="slot-content">${booking ? booking.auditType : ''}</span>
                </div>
            `);
        }
        
        return hours.join('');
    }
    
    generateBookingsList(bookings) {
        if (bookings.length === 0) {
            return `
                <div class="no-bookings">
                    <i class="fas fa-calendar-times"></i>
                    <p>Keine Audits f√ºr diesen Tag gebucht</p>
                </div>
            `;
        }
        
        return bookings.map(booking => `
            <div class="booking-item">
                <div class="booking-header">
                    <h5>${booking.auditType}</h5>
                    <span class="booking-time">${booking.startTime} - ${booking.endTime}</span>
                </div>
                <div class="booking-details">
                    <p><strong>Unternehmen:</strong> ${booking.company}</p>
                    <p><strong>Standort:</strong> ${booking.location}</p>
                    <p><strong>Status:</strong> 
                        <span class="status-badge ${booking.status.toLowerCase()}">
                            ${booking.status}
                        </span>
                    </p>
                    ${booking.notes ? `<p><strong>Notizen:</strong> ${booking.notes}</p>` : ''}
                </div>
                <div class="booking-actions">
                    <button class="btn btn-sm btn-secondary" onclick="window.qhseDashboard.editBooking('${booking.id}')">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="window.qhseDashboard.cancelBooking('${booking.id}')">
                        <i class="fas fa-times"></i> Stornieren
                    </button>
                </div>
            </div>
        `).join('');
    }

    showBookingForm(auditorId, date) {
        console.log('üìù Creating booking form for:', auditorId, date);
        
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor) {
            this.showNotification('Fehler', 'Auditor nicht gefunden', 'error');
            return;
        }
        
        // Check availability first
        const availability = this.getAvailabilityForDate(auditor, date);
        if (!availability || availability.type === 'unavailable') {
            this.showNotification('Buchung nicht m√∂glich', 'Auditor ist an diesem Tag nicht verf√ºgbar', 'warning');
            return;
        }
        
        // Check existing bookings
        const existingBookings = this.getBookingsForDate(auditor, date);
        const maxAudits = auditor.calendar?.preferences?.maxAuditsPerDay || 2;
        
        if (existingBookings.length >= maxAudits) {
            this.showNotification('Buchung nicht m√∂glich', `Maximale Anzahl Audits (${maxAudits}) f√ºr diesen Tag bereits erreicht`, 'warning');
            return;
        }
        
        // Close day details modal
        const dayModal = document.getElementById('dayDetailsModal');
        if (dayModal) dayModal.remove();
        
        const dateStr = new Date(date).toLocaleDateString('de-DE');
        
        const modalHTML = `
            <div class="modal-overlay" id="bookingModal">
                <div class="modal-content booking-modal">
                    <div class="modal-header">
                        <h2><i class="fas fa-calendar-plus"></i> Audit buchen</h2>
                        <span class="close" onclick="this.closest('.modal-overlay').remove()">&times;</span>
                    </div>
                    
                    <div class="modal-body">
                        <div class="booking-form">
                            <div class="booking-info">
                                <h3>Auditor: ${auditor.firstName} ${auditor.lastName}</h3>
                                <p>Datum: ${dateStr}</p>
                                <p>Verf√ºgbarkeit: ${availability.description}</p>
                            </div>
                            
                            <form id="bookingForm">
                                <input type="hidden" id="bookingAuditorId" value="${auditorId}">
                                <input type="hidden" id="bookingDate" value="${date}">
                                
                                <div class="form-section">
                                    <h4><i class="fas fa-clipboard-list"></i> Audit-Details</h4>
                                    
                                    <div class="form-group">
                                        <label for="auditType">Audit-Typ *</label>
                                        <select id="auditType" required>
                                            <option value="">Bitte ausw√§hlen</option>
                                            <option value="ISO 9001">ISO 9001 - Qualit√§tsmanagement</option>
                                            <option value="ISO 14001">ISO 14001 - Umweltmanagement</option>
                                            <option value="ISO 45001">ISO 45001 - Arbeitsschutzmanagement</option>
                                            <option value="ISO 27001">ISO 27001 - Informationssicherheit</option>
                                            <option value="ISO 50001">ISO 50001 - Energiemanagement</option>
                                            <option value="IATF 16949">IATF 16949 - Automotive</option>
                                            <option value="Combined Audit">Kombiniertes Audit</option>
                                            <option value="Surveillance">Surveillance Audit</option>
                                            <option value="Re-certification">Re-Zertifizierung</option>
                                        </select>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="bookingStartTime">Startzeit *</label>
                                            <input type="time" id="bookingStartTime" required>
                                        </div>
                                        <div class="form-group">
                                            <label for="bookingEndTime">Endzeit *</label>
                                            <input type="time" id="bookingEndTime" required>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="form-section">
                                    <h4><i class="fas fa-building"></i> Unternehmen</h4>
                                    
                                    <div class="form-group">
                                        <label for="company">Firmenname *</label>
                                        <input type="text" id="company" required placeholder="z.B. Mustermann GmbH">
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="location">Standort *</label>
                                        <input type="text" id="location" required placeholder="Stadt, PLZ oder vollst√§ndige Adresse">
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="contactPerson">Ansprechpartner</label>
                                        <input type="text" id="contactPerson" placeholder="Name des Ansprechpartners">
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="contactEmail">Kontakt E-Mail</label>
                                        <input type="email" id="contactEmail" placeholder="kontakt@unternehmen.de">
                                    </div>
                                </div>
                                
                                <div class="form-section">
                                    <h4><i class="fas fa-info-circle"></i> Zus√§tzliche Informationen</h4>
                                    
                                    <div class="form-group">
                                        <label for="bookingNotes">Notizen</label>
                                        <textarea id="bookingNotes" rows="3" placeholder="Besondere Anforderungen, Hinweise, etc."></textarea>
                                    </div>
                                    
                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="priority">Priorit√§t</label>
                                            <select id="priority">
                                                <option value="normal">Normal</option>
                                                <option value="high">Hoch</option>
                                                <option value="urgent">Dringend</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="bookingStatus">Status</label>
                                            <select id="bookingStatus">
                                                <option value="Geplant">Geplant</option>
                                                <option value="Best√§tigt">Best√§tigt</option>
                                                <option value="Vorl√§ufig">Vorl√§ufig</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="form-actions">
                                    <button type="button" class="btn btn-secondary" onclick="this.closest('.modal-overlay').remove()">
                                        <i class="fas fa-times"></i> Abbrechen
                                    </button>
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save"></i> Audit buchen
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.setupBookingFormHandlers(availability);
    }
    
    setupBookingFormHandlers(availability) {
        // Form submission handler
        const form = document.getElementById('bookingForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.submitBooking();
            });
        }
        
        // Set time constraints based on availability
        const startTimeInput = document.getElementById('bookingStartTime');
        const endTimeInput = document.getElementById('bookingEndTime');
        
        if (availability && availability.startTime && availability.endTime) {
            startTimeInput.min = availability.startTime;
            startTimeInput.max = availability.endTime;
            endTimeInput.min = availability.startTime;
            endTimeInput.max = availability.endTime;
            
            // Set default times
            startTimeInput.value = availability.startTime;
            const defaultEndTime = this.addHoursToTime(availability.startTime, 4);
            endTimeInput.value = defaultEndTime <= availability.endTime ? defaultEndTime : availability.endTime;
        }
        
        // Time validation
        startTimeInput.addEventListener('change', () => {
            endTimeInput.min = startTimeInput.value;
            if (endTimeInput.value <= startTimeInput.value) {
                const newEndTime = this.addHoursToTime(startTimeInput.value, 2);
                endTimeInput.value = newEndTime;
            }
        });
        
        endTimeInput.addEventListener('change', () => {
            if (endTimeInput.value <= startTimeInput.value) {
                this.showNotification('Fehler', 'Endzeit muss nach der Startzeit liegen', 'error');
                const newEndTime = this.addHoursToTime(startTimeInput.value, 2);
                endTimeInput.value = newEndTime;
            }
        });
    }
    
    addHoursToTime(timeString, hours) {
        const [hour, minute] = timeString.split(':').map(Number);
        const newHour = Math.min(hour + hours, 23);
        return `${newHour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
    }
    
    submitBooking() {
        console.log('üíæ Submitting booking...');
        
        // Get form data
        const formData = {
            auditorId: document.getElementById('bookingAuditorId').value,
            date: document.getElementById('bookingDate').value,
            auditType: document.getElementById('auditType').value,
            startTime: document.getElementById('bookingStartTime').value,
            endTime: document.getElementById('bookingEndTime').value,
            company: document.getElementById('company').value,
            location: document.getElementById('location').value,
            contactPerson: document.getElementById('contactPerson').value,
            contactEmail: document.getElementById('contactEmail').value,
            notes: document.getElementById('bookingNotes').value,
            priority: document.getElementById('priority').value,
            status: document.getElementById('bookingStatus').value
        };
        
        // Validate required fields
        const validationErrors = this.validateBookingData(formData);
        if (validationErrors.length > 0) {
            this.showNotification('Validierungsfehler', validationErrors.join('\n'), 'error');
            return;
        }
        
        // Find auditor
        const auditor = this.auditors.find(a => a.id === formData.auditorId);
        if (!auditor) {
            this.showNotification('Fehler', 'Auditor nicht gefunden', 'error');
            return;
        }
        
        // Initialize calendar if not exists
        if (!auditor.calendar) {
            auditor.calendar = {
                availability: [],
                bookings: [],
                blackoutDates: [],
                workingHours: { mo: {start: '09:00', end: '17:00'}, tu: {start: '09:00', end: '17:00'}, we: {start: '09:00', end: '17:00'}, th: {start: '09:00', end: '17:00'}, fr: {start: '09:00', end: '17:00'}, sa: {start: '09:00', end: '17:00'}, su: {start: '09:00', end: '17:00'} },
                preferences: { maxAuditsPerDay: 2, travelRadius: 100 }
            };
        }
        
        // Check for conflicts
        const conflicts = this.checkBookingConflicts(auditor, formData);
        if (conflicts.length > 0) {
            this.showNotification('Terminkonflikt', `Konflikt erkannt:\n${conflicts.join('\n')}`, 'warning');
            return;
        }
        
        // Create booking entry
        const booking = {
            id: 'booking_' + Date.now(),
            auditorId: formData.auditorId,
            date: formData.date,
            auditType: formData.auditType,
            startTime: formData.startTime,
            endTime: formData.endTime,
            company: formData.company,
            location: formData.location,
            contactPerson: formData.contactPerson,
            contactEmail: formData.contactEmail,
            notes: formData.notes,
            priority: formData.priority,
            status: formData.status,
            createdAt: new Date().toISOString(),
            createdBy: this.getCurrentUser()?.id || 'system'
        };
        
        // Add to auditor's bookings
        auditor.calendar.bookings.push(booking);
        
        // Save to storage
        this.saveAuditorsToStorage();
        
        // Close modal
        document.getElementById('bookingModal').remove();
        
        // Refresh calendar display
        this.renderAuditorCalendar();
        
        // Show success notification
        this.showNotification('Erfolg', `Audit erfolgreich gebucht f√ºr ${formData.company}`, 'success');
        
        console.log('‚úÖ Booking saved:', booking);
    }
    
    validateBookingData(data) {
        const errors = [];
        
        if (!data.auditorId) {
            errors.push('‚Ä¢ Auditor ist erforderlich');
        }
        
        if (!data.date) {
            errors.push('‚Ä¢ Datum ist erforderlich');
        }
        
        if (!data.auditType) {
            errors.push('‚Ä¢ Audit-Typ ist erforderlich');
        }
        
        if (!data.startTime) {
            errors.push('‚Ä¢ Startzeit ist erforderlich');
        }
        
        if (!data.endTime) {
            errors.push('‚Ä¢ Endzeit ist erforderlich');
        }
        
        if (data.startTime && data.endTime && data.startTime >= data.endTime) {
            errors.push('‚Ä¢ Endzeit muss nach der Startzeit liegen');
        }
        
        if (!data.company || data.company.length < 2) {
            errors.push('‚Ä¢ Firmenname ist erforderlich (mindestens 2 Zeichen)');
        }
        
        if (!data.location || data.location.length < 2) {
            errors.push('‚Ä¢ Standort ist erforderlich (mindestens 2 Zeichen)');
        }
        
        if (data.contactEmail && !this.isValidEmail(data.contactEmail)) {
            errors.push('‚Ä¢ Ung√ºltige E-Mail-Adresse');
        }
        
        return errors;
    }
    
    checkBookingConflicts(auditor, newBooking) {
        const conflicts = [];
        
        if (!auditor.calendar || !auditor.calendar.bookings) {
            return conflicts;
        }
        
        const existingBookings = auditor.calendar.bookings.filter(booking => 
            booking.date === newBooking.date && booking.status !== 'Storniert'
        );
        
        // Check time overlap
        existingBookings.forEach(booking => {
            if (this.timesOverlap(newBooking.startTime, newBooking.endTime, booking.startTime, booking.endTime)) {
                conflicts.push(`Zeitkonflikt mit ${booking.auditType} (${booking.startTime}-${booking.endTime})`);
            }
        });
        
        // Check maximum audits per day
        const maxAudits = auditor.calendar.preferences?.maxAuditsPerDay || 2;
        if (existingBookings.length >= maxAudits) {
            conflicts.push(`Maximale Anzahl Audits pro Tag erreicht (${maxAudits})`);
        }
        
        return conflicts;
    }
    
    timesOverlap(start1, end1, start2, end2) {
        return start1 < end2 && end1 > start2;
    }
    
    editBooking(bookingId) {
        console.log('‚úèÔ∏è Editing booking:', bookingId);
        this.showNotification('Bearbeitung', 'Buchungsbearbeitung wird in Schritt 4.2 implementiert', 'info');
        // TODO: Implement booking editing
    }
    
    cancelBooking(bookingId) {
        console.log('‚ùå Canceling booking:', bookingId);
        
        if (!confirm('M√∂chten Sie diese Buchung wirklich stornieren?')) {
            return;
        }
        
        // Find the booking
        let bookingFound = false;
        
        this.auditors.forEach(auditor => {
            if (auditor.calendar && auditor.calendar.bookings) {
                const booking = auditor.calendar.bookings.find(b => b.id === bookingId);
                if (booking) {
                    booking.status = 'Storniert';
                    booking.cancelledAt = new Date().toISOString();
                    booking.cancelledBy = this.getCurrentUser()?.id || 'system';
                    bookingFound = true;
                }
            }
        });
        
        if (bookingFound) {
            this.saveAuditorsToStorage();
            this.renderAuditorCalendar();
            
            // Close day details modal if open
            const dayModal = document.getElementById('dayDetailsModal');
            if (dayModal) dayModal.remove();
            
            this.showNotification('Erfolg', 'Buchung wurde storniert', 'success');
        } else {
            this.showNotification('Fehler', 'Buchung nicht gefunden', 'error');
        }
    }

    setupRiskAssessment() {
        console.log('üîß Setting up Risk Assessment module...');
        setTimeout(() => {
            this.updateRiskAssessmentDashboard();
            this.setupRiskAssessmentEventListeners();
        }, 100);
    }

    setupAuditExchange() {
        console.log('üîß Setting up Audit Exchange module...');
        setTimeout(() => {
            // Setup tab navigation
            const tabBtns = document.querySelectorAll('.exchange-tabs .tab-btn');
            tabBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    const targetTab = btn.getAttribute('data-tab');
                    this.switchExchangeTab(targetTab);
                });
            });

            // Setup form submission
            const offerForm = document.getElementById('offerForm');
            if (offerForm) {
                offerForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.submitAuditOffer();
                });
            }

            // Make updateScopeRequirements globally available
            window.updateScopeRequirements = () => this.updateScopeRequirements();
        }, 100);
    }

    setupAuditorManagement() {
        console.log('üîß Setting up Auditor Management module...');
        setTimeout(() => {
            // Setup tab navigation for auditor management
            const tabBtns = document.querySelectorAll('.auditor-management-tabs .tab-btn');
            tabBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    const targetTab = btn.getAttribute('data-tab');
                    this.switchAuditorTab(targetTab);
                });
            });

            // Setup form submission for adding new auditor
            const addAuditorForm = document.getElementById('addAuditorForm');
            if (addAuditorForm) {
                addAuditorForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.submitNewAuditor();
                });
            }

            // Initial load of auditor data
            this.renderAuditorOverview();
            this.renderAuditorStats();

            // Initialize calendar system for availability management
            this.initializeAuditorCalendarSystem();
            this.setupCalendarNavigation();
            this.renderAuditorCalendar();

            // Make functions globally available
            window.clearAuditorForm = () => this.clearAuditorForm();
            window.clearAuditorSearchFilters = () => this.clearAuditorSearchFilters();
            window.editAuditor = (id) => this.editAuditor(id);
            window.deleteAuditor = (id) => this.deleteAuditor(id);
            window.viewAuditorDetails = (id) => this.viewAuditorDetails(id);
        }, 100);
    }

    switchAuditorTab(tabName) {
        try {
            // Finde den Auditor-Management-Container
            const auditorContainer = document.querySelector('.auditor-management-tabs');
            if (!auditorContainer) {
                console.error('Auditor management tabs container not found');
                return;
            }

            // Hide all tabs - nur innerhalb des Auditor-Containers
            const allTabs = auditorContainer.querySelectorAll('.tab-content');
            allTabs.forEach(tab => tab.classList.remove('active'));

            // Hide all tab buttons - nur innerhalb des Auditor-Containers
            const allBtns = auditorContainer.querySelectorAll('.tab-btn');
            allBtns.forEach(btn => btn.classList.remove('active'));

            // Show selected tab - spezifisch f√ºr Auditor-Management
            const auditorSection = document.getElementById('auditor-management');
            let targetTab = null;
            if (auditorSection) {
                targetTab = auditorSection.querySelector(`#${tabName}-tab`);
            }
            
            if (targetTab) {
                targetTab.classList.add('active');
            } else {
                console.warn(`Auditor tab content for "${tabName}" not found`);
            }

            // Activate selected button
            const targetBtn = auditorContainer.querySelector(`.tab-btn[data-tab="${tabName}"]`);
            if (targetBtn) {
                targetBtn.classList.add('active');
            } else {
                console.warn(`Auditor tab button for "${tabName}" not found`);
            }

            // Update content based on tab
            if (tabName === 'auditor-overview') {
                this.renderAuditorOverview();
                this.renderAuditorStats();
            } else if (tabName === 'auditor-search-manage') {
                this.setupAdvancedSearch();
            } else if (tabName === 'auditor-import-export') {
                this.updateImportExportStats();
            } else if (tabName === 'audit-plan-generator') {
                this.initializeAuditPlanGenerator();
            }

            console.log(`Successfully switched to auditor tab: ${tabName}`);
            
        } catch (error) {
            console.error('Error in switchAuditorTab:', error);
            this.showNotification('Fehler beim Wechseln der Auditor-Registerkarte.', 'error');
        }
    }

    submitNewAuditor() {
        try {
            const form = document.getElementById('addAuditorForm');
            const formData = new FormData(form);
            const currentUser = this.getCurrentUser();
            
            // T√úV-compliant authorization check
            if (!this.validatePermissions(currentUser, 'create_auditor')) {
                this.showNotification('Keine Berechtigung f√ºr diese Aktion.', 'error');
                return;
            }
            
            // Collect and sanitize checkbox values
            const standards = Array.from(form.querySelectorAll('input[name="auditorStandards"]:checked')).map(cb => this.escapeHtml(cb.value));
            const industries = Array.from(form.querySelectorAll('input[name="auditorIndustries"]:checked')).map(cb => this.escapeHtml(cb.value));
            
            // Create new auditor object with sanitized data
            const rawAuditorData = {
                id: Date.now().toString(),
                firstName: this.escapeHtml(formData.get('auditorFirstName')),
                lastName: this.escapeHtml(formData.get('auditorLastName')),
                email: this.escapeHtml(formData.get('auditorEmail')),
                phone: this.escapeHtml(formData.get('auditorPhone')),
                city: this.escapeHtml(formData.get('auditorCity')),
                country: this.escapeHtml(formData.get('auditorCountry')),
                certification: this.escapeHtml(formData.get('auditorCertification')),
                experience: this.escapeHtml(formData.get('auditorExperience')),
                standards: standards,
                industries: industries,
                availability: this.escapeHtml(formData.get('auditorAvailability')),
                status: this.escapeHtml(formData.get('auditorStatus')),
                notes: this.escapeHtml(formData.get('auditorNotes')),
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                createdBy: currentUser.id
            };

            // T√úV-compliant input validation
            const validationErrors = this.validateAuditorData(rawAuditorData);
            if (validationErrors.length > 0) {
                this.showNotification(`Validierungsfehler: ${validationErrors.join(', ')}`, 'error');
                return;
            }

            // Check for duplicate email
            const existingAuditor = this.auditors.find(auditor => 
                auditor.email.toLowerCase() === rawAuditorData.email.toLowerCase()
            );
            if (existingAuditor) {
                this.showNotification('Ein Auditor mit dieser E-Mail-Adresse existiert bereits.', 'error');
                return;
            }

            // Add to auditors array
            this.auditors.push(rawAuditorData);
            
            // Save with error handling
            try {
                this.saveAuditorsToStorage();
            } catch (e) {
                console.error('Storage error:', e);
                this.showNotification('Fehler beim Speichern der Auditordaten.', 'error');
                return;
            }
            
            // Reset form and switch to overview
            form.reset();
            this.switchAuditorTab('auditor-overview');
            
            // Update overview display
            this.renderAuditorOverview();
            
            // Success notification
            this.showNotification('Auditor erfolgreich hinzugef√ºgt!', 'success');
            
            console.log('New auditor created:', rawAuditorData);
        } catch (error) {
            console.error('Error in submitNewAuditor:', error);
            this.showNotification('Ein unerwarteter Fehler ist aufgetreten.', 'error');
        }
    }

    renderAuditorOverview() {
        const auditorList = document.getElementById('auditorList');
        if (!auditorList) return;

        if (this.auditors.length === 0) {
            auditorList.innerHTML = '<p class="no-auditors">Noch keine Auditoren registriert.</p>';
            return;
        }

        auditorList.innerHTML = this.auditors.map(auditor => {
            const standardsBadges = auditor.standards.map(std => 
                `<span class="badge">${this.escapeHtml(std)}</span>`
            ).join(' ');

            const industriesBadges = auditor.industries.slice(0, 3).map(ind => 
                `<span class="badge industry-badge">${this.escapeHtml(ind)}</span>`
            ).join(' ');

            return `
                <div class="auditor-card">
                    <div class="auditor-header">
                        <div class="auditor-name">
                            <strong>${this.escapeHtml(auditor.firstName)} ${this.escapeHtml(auditor.lastName)}</strong>
                            <span class="auditor-certification">${this.escapeHtml(auditor.certification)}</span>
                        </div>
                        <div class="auditor-status status-${this.escapeHtml(auditor.status.toLowerCase().replace(' ', '-'))}">
                            ${this.escapeHtml(auditor.status)}
                        </div>
                    </div>
                    <div class="auditor-details">
                        <div class="detail-row">
                            <i class="fas fa-map-marker-alt"></i>
                            <span>${this.escapeHtml(auditor.city)}, ${this.escapeHtml(auditor.country)}</span>
                        </div>
                        <div class="detail-row">
                            <i class="fas fa-briefcase"></i>
                            <span>${this.escapeHtml(auditor.experience)} Erfahrung</span>
                        </div>
                        <div class="detail-row">
                            <i class="fas fa-calendar-check"></i>
                            <span>${this.escapeHtml(auditor.availability)}</span>
                        </div>
                    </div>
                    <div class="auditor-standards">
                        <strong>Standards:</strong>
                        <div class="badges">${standardsBadges}</div>
                    </div>
                    <div class="auditor-industries">
                        <strong>Branchen:</strong>
                        <div class="badges">${industriesBadges}</div>
                    </div>
                    <div class="auditor-actions">
                        <button class="btn btn-small btn-primary" onclick="viewAuditorDetails('${this.escapeHtml(auditor.id)}')">
                            <i class="fas fa-eye"></i> Details
                        </button>
                        <button class="btn btn-small btn-secondary" onclick="editAuditor('${this.escapeHtml(auditor.id)}')">
                            <i class="fas fa-edit"></i> Bearbeiten
                        </button>
                        <button class="btn btn-small btn-danger" onclick="deleteAuditor('${this.escapeHtml(auditor.id)}')">
                            <i class="fas fa-trash"></i> L√∂schen
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    renderAuditorStats() {
        const totalAuditors = document.getElementById('totalAuditors');
        const activeAuditors = document.getElementById('activeAuditors');
        const certifiedAuditors = document.getElementById('certifiedAuditors');

        if (totalAuditors) totalAuditors.textContent = this.auditors.length;
        if (activeAuditors) activeAuditors.textContent = this.auditors.filter(a => a.status === 'Aktiv').length;
        if (certifiedAuditors) certifiedAuditors.textContent = this.auditors.filter(a => a.certification && a.certification !== 'Andere').length;
    }

    clearAuditorForm() {
        const form = document.getElementById('addAuditorForm');
        if (form) {
            form.reset();
        }
    }

    clearAuditorSearchFilters() {
        const filters = ['searchAuditorStandard', 'searchAuditorLocation', 'searchAuditorIndustry', 'searchAuditorStatus'];
        filters.forEach(filterId => {
            const element = document.getElementById(filterId);
            if (element) {
                element.value = '';
            }
        });
        this.renderAuditorSearchResults();
    }

    renderAuditorSearchResults() {
        const resultsContainer = document.getElementById('auditorSearchResults');
        if (!resultsContainer) return;

        // Get filter values
        const standardFilter = document.getElementById('searchAuditorStandard')?.value || '';
        const locationFilter = document.getElementById('searchAuditorLocation')?.value || '';
        const industryFilter = document.getElementById('searchAuditorIndustry')?.value || '';
        const statusFilter = document.getElementById('searchAuditorStatus')?.value || '';

        // Filter auditors
        let filteredAuditors = this.auditors;

        if (standardFilter) {
            filteredAuditors = filteredAuditors.filter(auditor => 
                auditor.standards.includes(standardFilter)
            );
        }

        if (locationFilter) {
            filteredAuditors = filteredAuditors.filter(auditor => 
                auditor.city.toLowerCase().includes(locationFilter.toLowerCase()) ||
                auditor.country.toLowerCase().includes(locationFilter.toLowerCase())
            );
        }

        if (industryFilter) {
            filteredAuditors = filteredAuditors.filter(auditor => 
                auditor.industries.includes(industryFilter)
            );
        }

        if (statusFilter) {
            filteredAuditors = filteredAuditors.filter(auditor => 
                auditor.status === statusFilter
            );
        }

        // Render results
        if (filteredAuditors.length === 0) {
            resultsContainer.innerHTML = '<p class="no-results">Keine Auditoren gefunden, die den Suchkriterien entsprechen.</p>';
            return;
        }

        resultsContainer.innerHTML = `
            <div class="search-results-header">
                <h4>${filteredAuditors.length} Auditoren gefunden</h4>
            </div>
            <div class="auditor-grid">
                ${filteredAuditors.map(auditor => {
                    const standardsBadges = auditor.standards.map(std => 
                        `<span class="badge">${std}</span>`
                    ).join(' ');

                    return `
                        <div class="auditor-card">
                            <div class="auditor-header">
                                <div class="auditor-name">
                                    <strong>${auditor.firstName} ${auditor.lastName}</strong>
                                    <span class="auditor-certification">${auditor.certification}</span>
                                </div>
                                <div class="auditor-status status-${auditor.status.toLowerCase().replace(' ', '-')}">
                                    ${auditor.status}
                                </div>
                            </div>
                            <div class="auditor-details">
                                <div class="detail-row">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <span>${auditor.city}, ${auditor.country}</span>
                                </div>
                                <div class="detail-row">
                                    <i class="fas fa-briefcase"></i>
                                    <span>${auditor.experience} Erfahrung</span>
                                </div>
                                <div class="detail-row">
                                    <i class="fas fa-calendar-check"></i>
                                    <span>${auditor.availability}</span>
                                </div>
                            </div>
                            <div class="auditor-standards">
                                <strong>Standards:</strong>
                                <div class="badges">${standardsBadges}</div>
                            </div>
                            <div class="auditor-actions">
                                <button class="btn btn-small btn-primary" onclick="viewAuditorDetails('${auditor.id}')">
                                    <i class="fas fa-eye"></i> Details
                                </button>
                                <button class="btn btn-small btn-secondary" onclick="editAuditor('${auditor.id}')">
                                    <i class="fas fa-edit"></i> Bearbeiten
                                </button>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }

    editAuditor(auditorId) {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor) return;

        // Switch to add auditor tab
        this.switchAuditorTab('add-auditor');

        // Populate form with auditor data
        setTimeout(() => {
            document.getElementById('auditorFirstName').value = auditor.firstName;
            document.getElementById('auditorLastName').value = auditor.lastName;
            document.getElementById('auditorEmail').value = auditor.email;
            document.getElementById('auditorPhone').value = auditor.phone || '';
            document.getElementById('auditorCity').value = auditor.city;
            document.getElementById('auditorCountry').value = auditor.country;
            document.getElementById('auditorCertification').value = auditor.certification;
            document.getElementById('auditorExperience').value = auditor.experience;
            document.getElementById('auditorAvailability').value = auditor.availability;
            document.getElementById('auditorStatus').value = auditor.status;
            document.getElementById('auditorNotes').value = auditor.notes || '';

            // Set checkboxes
            auditor.standards.forEach(standard => {
                const checkbox = document.querySelector(`input[name="auditorStandards"][value="${standard}"]`);
                if (checkbox) checkbox.checked = true;
            });

            auditor.industries.forEach(industry => {
                const checkbox = document.querySelector(`input[name="auditorIndustries"][value="${industry}"]`);
                if (checkbox) checkbox.checked = true;
            });

            // Store editing ID for update
            document.getElementById('addAuditorForm').dataset.editingId = auditorId;
        }, 100);
    }

    deleteAuditor(auditorId) {
        if (confirm('Sind Sie sicher, dass Sie diesen Auditor l√∂schen m√∂chten?')) {
            this.auditors = this.auditors.filter(a => a.id !== auditorId);
            this.saveAuditorsToStorage();
            this.renderAuditorOverview();
            this.renderAuditorStats();
            alert('Auditor erfolgreich gel√∂scht!');
        }
    }

    viewAuditorDetails(auditorId) {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor) {
            this.showNotification('Auditor nicht gefunden.', 'error');
            return;
        }

        // Erstelle eine professionelle Modal-Anzeige mit umfassenden Auditor-Informationen
        const modalHtml = `
            <div class="auditor-details-modal-overlay" onclick="this.remove()">
                <div class="auditor-details-modal-content" onclick="event.stopPropagation()">
                    <div class="modal-header">
                        <h2><i class="fas fa-user-tie"></i> ${this.escapeHtml(auditor.firstName)} ${this.escapeHtml(auditor.lastName)}</h2>
                        <span class="auditor-status-badge status-${auditor.status.toLowerCase()}">${this.escapeHtml(auditor.status)}</span>
                        <button class="modal-close" onclick="this.closest('.auditor-details-modal-overlay').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="modal-body">
                        <div class="auditor-info-grid">
                            <!-- Kontaktinformationen -->
                            <div class="info-card">
                                <h3><i class="fas fa-address-card"></i> Kontaktinformationen</h3>
                                <div class="info-items">
                                    <div class="info-item">
                                        <i class="fas fa-envelope"></i>
                                        <div>
                                            <label>E-Mail</label>
                                            <span>${this.escapeHtml(auditor.email)}</span>
                                        </div>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-phone"></i>
                                        <div>
                                            <label>Telefon</label>
                                            <span>${this.escapeHtml(auditor.phone || 'Nicht angegeben')}</span>
                                        </div>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <div>
                                            <label>Standort</label>
                                            <span>${this.escapeHtml(auditor.city)}, ${this.escapeHtml(auditor.country)}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Qualifikationen & Zertifizierungen -->
                            <div class="info-card">
                                <h3><i class="fas fa-certificate"></i> Qualifikationen</h3>
                                <div class="info-items">
                                    <div class="info-item">
                                        <i class="fas fa-award"></i>
                                        <div>
                                            <label>Hauptzertifizierung</label>
                                            <span class="certification-badge">${this.escapeHtml(auditor.certification)}</span>
                                        </div>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-clock"></i>
                                        <div>
                                            <label>Berufserfahrung</label>
                                            <span>${this.escapeHtml(auditor.experience)}</span>
                                        </div>
                                    </div>
                                    <div class="info-item full-width">
                                        <i class="fas fa-clipboard-check"></i>
                                        <div>
                                            <label>Zertifizierte Standards</label>
                                            <div class="standards-grid">
                                                ${auditor.standards.map(std => 
                                                    `<span class="standard-badge ${this.getStandardBadgeClass(std)}">${this.escapeHtml(std)}</span>`
                                                ).join('')}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Branchenerfahrung -->
                            <div class="info-card">
                                <h3><i class="fas fa-industry"></i> Branchenerfahrung</h3>
                                <div class="industries-list">
                                    ${auditor.industries.map(industry => 
                                        `<div class="industry-item">
                                            <i class="fas fa-check-circle"></i>
                                            <span>${this.escapeHtml(industry)}</span>
                                        </div>`
                                    ).join('')}
                                </div>
                            </div>

                            <!-- Verf√ºgbarkeit & Status -->
                            <div class="info-card">
                                <h3><i class="fas fa-calendar-check"></i> Verf√ºgbarkeit</h3>
                                <div class="info-items">
                                    <div class="info-item">
                                        <i class="fas fa-traffic-light"></i>
                                        <div>
                                            <label>Aktueller Status</label>
                                            <span class="status-indicator status-${auditor.status.toLowerCase()}">${this.escapeHtml(auditor.status)}</span>
                                        </div>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-calendar"></i>
                                        <div>
                                            <label>Verf√ºgbarkeit</label>
                                            <span>${this.escapeHtml(auditor.availability)}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Statistiken & Bewertungen -->
                            <div class="info-card">
                                <h3><i class="fas fa-chart-line"></i> Auditor-Statistiken</h3>
                                <div class="stats-grid">
                                    <div class="stat-item">
                                        <div class="stat-value">${this.getAuditorCompletedAudits(auditorId)}</div>
                                        <div class="stat-label">Durchgef√ºhrte Audits</div>
                                    </div>
                                    <div class="stat-item">
                                        <div class="stat-value">${this.getAuditorRating(auditorId)}</div>
                                        <div class="stat-label">Durchschnittliche Bewertung</div>
                                    </div>
                                    <div class="stat-item">
                                        <div class="stat-value">${this.getAuditorSpecializations(auditorId)}</div>
                                        <div class="stat-label">Spezialisierungen</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Zus√§tzliche Informationen -->
                            ${auditor.notes ? `
                            <div class="info-card full-width">
                                <h3><i class="fas fa-sticky-note"></i> Zus√§tzliche Informationen</h3>
                                <div class="notes-content">
                                    ${this.escapeHtml(auditor.notes).replace(/\n/g, '<br>')}
                                </div>
                            </div>
                            ` : ''}

                            <!-- Registrierungsdaten -->
                            <div class="info-card">
                                <h3><i class="fas fa-info-circle"></i> Registrierungsdaten</h3>
                                <div class="info-items">
                                    <div class="info-item">
                                        <i class="fas fa-calendar-plus"></i>
                                        <div>
                                            <label>Registriert am</label>
                                            <span>${new Date(auditor.createdAt).toLocaleDateString('de-DE', {
                                                year: 'numeric',
                                                month: 'long',
                                                day: 'numeric'
                                            })}</span>
                                        </div>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-edit"></i>
                                        <div>
                                            <label>Zuletzt aktualisiert</label>
                                            <span>${new Date(auditor.updatedAt).toLocaleDateString('de-DE', {
                                                year: 'numeric',
                                                month: 'long',
                                                day: 'numeric'
                                            })}</span>
                                        </div>
                                    </div>
                                    <div class="info-item">
                                        <i class="fas fa-user"></i>
                                        <div>
                                            <label>Auditor-ID</label>
                                            <span class="auditor-id">${this.escapeHtml(auditor.id)}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-primary" onclick="window.qhseDashboard.contactAuditor('${auditor.id}')">
                            <i class="fas fa-envelope"></i> Kontaktieren
                        </button>
                        <button class="btn btn-secondary" onclick="window.qhseDashboard.requestAudit('${auditor.id}')">
                            <i class="fas fa-handshake"></i> Audit anfragen
                        </button>
                        <button class="btn btn-outline" onclick="this.closest('.auditor-details-modal-overlay').remove()">
                            <i class="fas fa-times"></i> Schlie√üen
                        </button>
                    </div>
                </div>
            </div>
        `;

        // F√ºge das Modal zum DOM hinzu
        document.body.insertAdjacentHTML('beforeend', modalHtml);

        // F√ºge Event Listener f√ºr Escape-Taste hinzu
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                document.querySelector('.auditor-details-modal-overlay')?.remove();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
    }

    getAuditorCompletedAudits(auditorId) {
        // Z√§hle durchgef√ºhrte Audits f√ºr diesen Auditor
        const completedAudits = this.auditExchanges.filter(offer => 
            offer.offeredBy === auditorId && offer.status === 'completed'
        ).length;
        return completedAudits || Math.floor(Math.random() * 25) + 5; // Demo-Daten
    }

    getAuditorRating(auditorId) {
        // Berechne Durchschnittsbewertung (Demo-Implementierung)
        const ratings = [4.8, 4.9, 4.7, 4.6, 4.8, 5.0];
        const rating = ratings[Math.floor(Math.random() * ratings.length)];
        return `‚≠ê ${rating}/5.0`;
    }

    getAuditorSpecializations(auditorId) {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor) return '0';
        
        // Z√§hle Anzahl der Standards als Spezialisierungen
        return auditor.standards.length;
    }

    contactAuditor(auditorId) {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor) {
            this.showNotification('Auditor nicht gefunden.', 'error');
            return;
        }

        // Erstelle Kontakt-Modal
        const contactModal = `
            <div class="contact-modal-overlay" onclick="this.remove()">
                <div class="contact-modal-content" onclick="event.stopPropagation()">
                    <div class="modal-header">
                        <h3><i class="fas fa-envelope"></i> Kontakt zu ${this.escapeHtml(auditor.firstName)} ${this.escapeHtml(auditor.lastName)}</h3>
                        <button class="modal-close" onclick="this.closest('.contact-modal-overlay').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="contact-info">
                            <p><strong>E-Mail:</strong> <a href="mailto:${this.escapeHtml(auditor.email)}">${this.escapeHtml(auditor.email)}</a></p>
                            ${auditor.phone ? `<p><strong>Telefon:</strong> <a href="tel:${this.escapeHtml(auditor.phone)}">${this.escapeHtml(auditor.phone)}</a></p>` : ''}
                        </div>
                        <form class="contact-form">
                            <div class="form-group">
                                <label for="contactSubject">Betreff</label>
                                <input type="text" id="contactSubject" placeholder="Audit-Anfrage" required>
                            </div>
                            <div class="form-group">
                                <label for="contactMessage">Nachricht</label>
                                <textarea id="contactMessage" rows="5" placeholder="Ihre Nachricht an den Auditor..." required></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" onclick="window.qhseDashboard.sendContactMessage('${auditor.id}')">
                            <i class="fas fa-paper-plane"></i> Nachricht senden
                        </button>
                        <button class="btn btn-secondary" onclick="this.closest('.contact-modal-overlay').remove()">
                            Abbrechen
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', contactModal);
    }

    requestAudit(auditorId) {
        const auditor = this.auditors.find(a => a.id === auditorId);
        if (!auditor) {
            this.showNotification('Auditor nicht gefunden.', 'error');
            return;
        }

        // Erstelle Audit-Anfrage-Modal
        const requestModal = `
            <div class="request-modal-overlay" onclick="this.remove()">
                <div class="request-modal-content large-modal" onclick="event.stopPropagation()">
                    <div class="modal-header">
                        <h3><i class="fas fa-handshake"></i> Audit-Anfrage an ${this.escapeHtml(auditor.firstName)} ${this.escapeHtml(auditor.lastName)}</h3>
                        <button class="modal-close" onclick="this.closest('.request-modal-overlay').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form class="audit-request-form">
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="requestStandard">Gew√ºnschter Standard</label>
                                    <select id="requestStandard" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        ${auditor.standards.map(std => 
                                            `<option value="${this.escapeHtml(std)}">${this.escapeHtml(std)}</option>`
                                        ).join('')}
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="requestType">Audit-Typ</label>
                                    <select id="requestType" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="Zertifizierungsaudit">Zertifizierungsaudit</option>
                                        <option value="√úberwachungsaudit">√úberwachungsaudit</option>
                                        <option value="Rezertifizierungsaudit">Rezertifizierungsaudit</option>
                                        <option value="Internes Audit">Internes Audit</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="requestStartDate">Gew√ºnschtes Startdatum</label>
                                    <input type="date" id="requestStartDate" required>
                                </div>
                                <div class="form-group">
                                    <label for="requestDuration">Gesch√§tzte Dauer</label>
                                    <select id="requestDuration" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="1 Tag">1 Tag</option>
                                        <option value="2 Tage">2 Tage</option>
                                        <option value="3 Tage">3 Tage</option>
                                        <option value="1 Woche">1 Woche</option>
                                        <option value="2 Wochen">2 Wochen</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="requestScope">Audit-Scope</label>
                                <textarea id="requestScope" rows="3" placeholder="Beschreiben Sie den gew√ºnschten Audit-Scope..." required></textarea>
                            </div>
                            <div class="form-group">
                                <label for="requestNotes">Zus√§tzliche Anforderungen</label>
                                <textarea id="requestNotes" rows="4" placeholder="Weitere Details, spezielle Anforderungen, etc."></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" onclick="window.qhseDashboard.submitAuditRequest('${auditor.id}')">
                            <i class="fas fa-paper-plane"></i> Anfrage senden
                        </button>
                        <button class="btn btn-secondary" onclick="this.closest('.request-modal-overlay').remove()">
                            Abbrechen
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', requestModal);
    }

    sendContactMessage(auditorId) {
        const subject = document.getElementById('contactSubject')?.value;
        const message = document.getElementById('contactMessage')?.value;

        if (!subject || !message) {
            this.showNotification('Bitte f√ºllen Sie alle Felder aus.', 'warning');
            return;
        }

        // Simuliere Nachrichtenversand
        this.showNotification('Ihre Nachricht wurde erfolgreich versendet!', 'success');
        document.querySelector('.contact-modal-overlay')?.remove();
    }

    submitAuditRequest(auditorId) {
        const formData = {
            standard: document.getElementById('requestStandard')?.value,
            type: document.getElementById('requestType')?.value,
            startDate: document.getElementById('requestStartDate')?.value,
            duration: document.getElementById('requestDuration')?.value,
            scope: document.getElementById('requestScope')?.value,
            notes: document.getElementById('requestNotes')?.value
        };

        if (!formData.standard || !formData.type || !formData.startDate || !formData.duration || !formData.scope) {
            this.showNotification('Bitte f√ºllen Sie alle Pflichtfelder aus.', 'warning');
            return;
        }

        // Erstelle Audit-Anfrage
        const auditRequest = {
            id: Date.now().toString(),
            auditorId: auditorId,
            requesterId: this.getCurrentUser().id,
            ...formData,
            status: 'pending',
            createdAt: new Date().toISOString()
        };

        // Speichere Anfrage (erweitere exchangeRequests)
        if (!this.exchangeRequests) this.exchangeRequests = [];
        this.exchangeRequests.push(auditRequest);
        localStorage.setItem('qhse_exchange_requests', JSON.stringify(this.exchangeRequests));

        this.showNotification('Ihre Audit-Anfrage wurde erfolgreich √ºbermittelt!', 'success');
        document.querySelector('.request-modal-overlay')?.remove();
        
        // Trigger smart matching after request submission
        this.performSmartMatching(auditRequest);
    }

    // Smart Matching System f√ºr Auditoren und Anfragen
    performSmartMatching(auditRequest) {
        console.log('ü§ñ Starting smart matching for audit request...');
        
        // Find suitable auditors based on multiple criteria
        const matches = this.findMatchingAuditors(auditRequest);
        
        if (matches.length > 0) {
            this.showMatchingResults(auditRequest, matches);
        }
    }

    findMatchingAuditors(auditRequest) {
        const availableAuditors = this.auditors.filter(auditor => 
            auditor.status === 'Aktiv' || auditor.status === 'Verf√ºgbar'
        );

        const scoredAuditors = availableAuditors.map(auditor => {
            const score = this.calculateMatchScore(auditor, auditRequest);
            return { auditor, score };
        }).filter(match => match.score > 0.3) // Minimum 30% match
          .sort((a, b) => b.score - a.score);

        return scoredAuditors.slice(0, 5); // Top 5 matches
    }

    calculateMatchScore(auditor, request) {
        let score = 0;
        let maxScore = 0;

        // Standard matching (40% weight)
        maxScore += 40;
        if (auditor.standards.includes(request.standard)) {
            score += 40;
        } else {
            // Partial match for related standards
            const relatedStandards = this.getRelatedStandards(request.standard);
            const hasRelated = auditor.standards.some(std => relatedStandards.includes(std));
            if (hasRelated) score += 20;
        }

        // Industry experience matching (25% weight)
        maxScore += 25;
        if (auditor.industries.includes(request.companyIndustry || 'General')) {
            score += 25;
        }

        // Experience level matching (20% weight)
        maxScore += 20;
        const experienceScore = this.getExperienceScore(auditor.experience, request.type);
        score += experienceScore;

        // Availability matching (10% weight)
        maxScore += 10;
        const availabilityScore = this.getAvailabilityScore(auditor.availability, request.startDate);
        score += availabilityScore;

        // Location proximity bonus (5% weight)
        maxScore += 5;
        if (this.isLocationNearby(auditor.city, request.location)) {
            score += 5;
        }

        return score / maxScore; // Normalize to 0-1
    }

    getRelatedStandards(standard) {
        const standardFamilies = {
            'ISO 9001': ['ISO 9001', 'IATF 16949', 'AS9100'],
            'ISO 14001': ['ISO 14001', 'ISO 45001', 'ISO 50001'],
            'ISO 45001': ['ISO 45001', 'ISO 14001', 'ISO 9001'],
            'IATF 16949': ['IATF 16949', 'ISO 9001', 'VDA'],
            'ISO 27001': ['ISO 27001', 'ISO 22301', 'ISO 20000'],
            'AS9100': ['AS9100', 'ISO 9001', 'EN 9100']
        };
        return standardFamilies[standard] || [standard];
    }

    getExperienceScore(auditorExp, requestType) {
        const expMap = {
            '1-2 Jahre': 1,
            '3-5 Jahre': 2,
            '5-10 Jahre': 3,
            '10+ Jahre': 4,
            'Senior (15+ Jahre)': 5
        };

        const typeRequirements = {
            'Zertifizierungsaudit': 3,
            'Rezertifizierungsaudit': 3,
            '√úberwachungsaudit': 2,
            'Internes Audit': 1
        };

        const auditorLevel = expMap[auditorExp] || 1;
        const requiredLevel = typeRequirements[requestType] || 2;

        if (auditorLevel >= requiredLevel) {
            return 20;
        } else if (auditorLevel >= requiredLevel - 1) {
            return 10;
        }
        return 0;
    }

    getAvailabilityScore(auditorAvail, requestDate) {
        const availMap = {
            'Sofort verf√ºgbar': 10,
            'Verf√ºgbar in 1-2 Wochen': 8,
            'Verf√ºgbar in 1 Monat': 6,
            'Auf Anfrage': 4
        };
        return availMap[auditorAvail] || 5;
    }

    isLocationNearby(auditorCity, requestLocation) {
        if (!auditorCity || !requestLocation) return false;
        
        // Simple proximity check (in real app, use geo-coordinates)
        const germanCities = {
            'Hamburg': ['Bremen', 'Hannover', 'L√ºbeck'],
            'Berlin': ['Dresden', 'Leipzig', 'Potsdam'],
            'M√ºnchen': ['N√ºrnberg', 'Augsburg', 'Stuttgart'],
            'K√∂ln': ['D√ºsseldorf', 'Dortmund', 'Essen'],
            'Frankfurt': ['Mainz', 'Wiesbaden', 'Mannheim']
        };

        return auditorCity === requestLocation || 
               germanCities[auditorCity]?.includes(requestLocation) ||
               germanCities[requestLocation]?.includes(auditorCity);
    }

    showMatchingResults(request, matches) {
        const matchModal = `
            <div class="match-results-overlay" onclick="this.remove()">
                <div class="match-results-content" onclick="event.stopPropagation()">
                    <div class="modal-header">
                        <h2><i class="fas fa-magic"></i> Smart Matching Ergebnisse</h2>
                        <span class="match-count">${matches.length} passende Auditoren gefunden</span>
                        <button class="modal-close" onclick="this.closest('.match-results-overlay').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <div class="modal-body">
                        <div class="request-summary">
                            <h3>Ihre Anfrage</h3>
                            <div class="request-details">
                                <span class="detail-item">
                                    <i class="fas fa-certificate"></i>
                                    ${this.escapeHtml(request.standard)}
                                </span>
                                <span class="detail-item">
                                    <i class="fas fa-clipboard-check"></i>
                                    ${this.escapeHtml(request.type)}
                                </span>
                                <span class="detail-item">
                                    <i class="fas fa-calendar"></i>
                                    ${new Date(request.startDate).toLocaleDateString('de-DE')}
                                </span>
                            </div>
                        </div>

                        <div class="matches-list">
                            ${matches.map((match, index) => this.generateMatchCard(match, index + 1)).join('')}
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button class="btn btn-primary" onclick="window.qhseDashboard.contactTopMatches([${matches.slice(0, 3).map(m => `'${m.auditor.id}'`).join(',')}])">
                            <i class="fas fa-paper-plane"></i> Top 3 kontaktieren
                        </button>
                        <button class="btn btn-secondary" onclick="this.closest('.match-results-overlay').remove()">
                            Sp√§ter entscheiden
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', matchModal);
    }

    generateMatchCard(match, rank) {
        const { auditor, score } = match;
        const percentage = Math.round(score * 100);
        
        return `
            <div class="match-card" data-match-score="${percentage}">
                <div class="match-header">
                    <div class="match-rank">
                        <span class="rank-number">#${rank}</span>
                        <div class="match-score">
                            <div class="score-circle">
                                <span>${percentage}%</span>
                            </div>
                            <span class="score-label">Match</span>
                        </div>
                    </div>
                    <div class="auditor-info">
                        <h4>${this.escapeHtml(auditor.firstName)} ${this.escapeHtml(auditor.lastName)}</h4>
                        <span class="auditor-cert">${this.escapeHtml(auditor.certification)}</span>
                        <span class="auditor-location">
                            <i class="fas fa-map-marker-alt"></i>
                            ${this.escapeHtml(auditor.city)}
                        </span>
                    </div>
                    <div class="match-actions">
                        <button class="btn btn-small btn-primary" onclick="window.qhseDashboard.contactAuditor('${auditor.id}')">
                            <i class="fas fa-envelope"></i>
                        </button>
                        <button class="btn btn-small btn-secondary" onclick="window.qhseDashboard.viewAuditorDetails('${auditor.id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                
                <div class="match-details">
                    <div class="match-strengths">
                        <h5>St√§rken:</h5>
                        <div class="strengths-list">
                            ${this.generateMatchStrengths(auditor, score).join('')}
                        </div>
                    </div>
                    
                    <div class="auditor-badges">
                        <div class="standards-preview">
                            ${auditor.standards.slice(0, 3).map(std => 
                                `<span class="mini-badge standard">${this.escapeHtml(std)}</span>`
                            ).join('')}
                            ${auditor.standards.length > 3 ? `<span class="mini-badge more">+${auditor.standards.length - 3}</span>` : ''}
                        </div>
                        
                        <div class="status-info">
                            <span class="availability-badge ${auditor.status.toLowerCase()}">
                                ${this.escapeHtml(auditor.availability)}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    generateMatchStrengths(auditor, score) {
        const strengths = [];
        
        if (score > 0.8) {
            strengths.push('<span class="strength-item excellent"><i class="fas fa-star"></i> Hervorragende √úbereinstimmung</span>');
        }
        if (auditor.experience.includes('10+') || auditor.experience.includes('Senior')) {
            strengths.push('<span class="strength-item"><i class="fas fa-award"></i> Langj√§hrige Erfahrung</span>');
        }
        if (auditor.standards.length >= 5) {
            strengths.push('<span class="strength-item"><i class="fas fa-certificate"></i> Vielseitige Zertifizierung</span>');
        }
        if (auditor.availability.includes('Sofort')) {
            strengths.push('<span class="strength-item"><i class="fas fa-clock"></i> Sofort verf√ºgbar</span>');
        }
        
        return strengths.length > 0 ? strengths : ['<span class="strength-item"><i class="fas fa-check"></i> Qualifizierter Auditor</span>'];
    }

    contactTopMatches(auditorIds) {
        if (!auditorIds || auditorIds.length === 0) return;
        
        const auditorNames = auditorIds.map(id => {
            const auditor = this.auditors.find(a => a.id === id);
            return auditor ? `${auditor.firstName} ${auditor.lastName}` : 'Unbekannt';
        }).join(', ');

        this.showNotification(`Kontaktanfrage an ${auditorNames} wurde versendet!`, 'success');
        document.querySelector('.match-results-overlay')?.remove();
    }

    // Erweiterte Suchfilter und Sortieroptionen
    setupAdvancedSearch() {
        const searchContainer = document.getElementById('auditor-search-manage-tab');
        if (!searchContainer) {
            console.warn('Auditor search manage tab not found');
            return;
        }

        const advancedSearchPanel = `
            <div class="advanced-search-panel">
                <h3><i class="fas fa-search"></i> Erweiterte Auditor-Suche</h3>
                <div class="search-filters-grid">
                    <div class="filter-group">
                        <label for="searchStandard">Standard</label>
                        <select id="searchStandard" onchange="window.qhseDashboard.performAdvancedSearch()">
                            <option value="">Alle Standards</option>
                            <option value="ISO 9001">ISO 9001</option>
                            <option value="ISO 14001">ISO 14001</option>
                            <option value="ISO 45001">ISO 45001</option>
                            <option value="IATF 16949">IATF 16949</option>
                            <option value="ISO 27001">ISO 27001</option>
                            <option value="AS9100">AS9100</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="searchLocation">Standort</label>
                        <input type="text" id="searchLocation" placeholder="Stadt oder Region" onchange="window.qhseDashboard.performAdvancedSearch()">
                    </div>
                    <div class="filter-group">
                        <label for="searchCertification">Zertifizierung</label>
                        <select id="searchCertification" onchange="window.qhseDashboard.performAdvancedSearch()">
                            <option value="">Alle Zertifizierungen</option>
                            <option value="IRCA">IRCA</option>
                            <option value="T√úV">T√úV</option>
                            <option value="DQS">DQS</option>
                            <option value="DEKRA">DEKRA</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="searchExperience">Erfahrung</label>
                        <select id="searchExperience" onchange="window.qhseDashboard.performAdvancedSearch()">
                            <option value="">Alle Erfahrungsstufen</option>
                            <option value="1-2 Jahre">1-2 Jahre</option>
                            <option value="3-5 Jahre">3-5 Jahre</option>
                            <option value="5-10 Jahre">5-10 Jahre</option>
                            <option value="10+ Jahre">10+ Jahre</option>
                            <option value="Senior">Senior (15+ Jahre)</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="searchIndustry">Branche</label>
                        <select id="searchIndustry" onchange="window.qhseDashboard.performAdvancedSearch()">
                            <option value="">Alle Branchen</option>
                            <option value="Automotive">Automotive</option>
                            <option value="Healthcare">Healthcare</option>
                            <option value="Manufacturing">Manufacturing</option>
                            <option value="IT">IT & Software</option>
                            <option value="Construction">Construction</option>
                            <option value="Food">Food & Beverage</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="searchAvailability">Verf√ºgbarkeit</label>
                        <select id="searchAvailability" onchange="window.qhseDashboard.performAdvancedSearch()">
                            <option value="">Alle</option>
                            <option value="Sofort verf√ºgbar">Sofort verf√ºgbar</option>
                            <option value="Verf√ºgbar in 1-2 Wochen">1-2 Wochen</option>
                            <option value="Verf√ºgbar in 1 Monat">1 Monat</option>
                            <option value="Auf Anfrage">Auf Anfrage</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="searchSortBy">Sortieren nach</label>
                        <select id="searchSortBy" onchange="window.qhseDashboard.performAdvancedSearch()">
                            <option value="relevance">Relevanz</option>
                            <option value="experience">Erfahrung</option>
                            <option value="location">Standort</option>
                            <option value="availability">Verf√ºgbarkeit</option>
                            <option value="rating">Bewertung</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="searchOrder">Reihenfolge</label>
                        <select id="searchOrder" onchange="window.qhseDashboard.performAdvancedSearch()">
                            <option value="desc">Absteigend</option>
                            <option value="asc">Aufsteigend</option>
                        </select>
                    </div>
                </div>
                <div class="search-actions">
                    <button class="btn btn-secondary" onclick="window.qhseDashboard.clearAdvancedSearch()">
                        <i class="fas fa-eraser"></i> Filter zur√ºcksetzen
                    </button>
                    <button class="btn btn-primary" onclick="window.qhseDashboard.saveSearchPreset()">
                        <i class="fas fa-bookmark"></i> Suche speichern
                    </button>
                </div>
            </div>
            <div id="searchResultsContainer"></div>
        `;

        searchContainer.innerHTML = advancedSearchPanel;
        this.performAdvancedSearch(); // Initial search
    }

    performAdvancedSearch() {
        const filters = {
            standard: document.getElementById('searchStandard')?.value || '',
            location: document.getElementById('searchLocation')?.value.toLowerCase() || '',
            certification: document.getElementById('searchCertification')?.value || '',
            experience: document.getElementById('searchExperience')?.value || '',
            industry: document.getElementById('searchIndustry')?.value || '',
            availability: document.getElementById('searchAvailability')?.value || '',
            sortBy: document.getElementById('searchSortBy')?.value || 'relevance',
            order: document.getElementById('searchOrder')?.value || 'desc'
        };

        let filteredAuditors = this.auditors.filter(auditor => {
            // Standard filter
            if (filters.standard && !auditor.standards.includes(filters.standard)) {
                return false;
            }

            // Location filter
            if (filters.location && !auditor.city.toLowerCase().includes(filters.location) && 
                !auditor.country.toLowerCase().includes(filters.location)) {
                return false;
            }

            // Certification filter
            if (filters.certification && !auditor.certification.includes(filters.certification)) {
                return false;
            }

            // Experience filter
            if (filters.experience && auditor.experience !== filters.experience) {
                return false;
            }

            // Industry filter
            if (filters.industry && !auditor.industries.includes(filters.industry)) {
                return false;
            }

            // Availability filter
            if (filters.availability && auditor.availability !== filters.availability) {
                return false;
            }

            return true;
        });

        // Sort results
        filteredAuditors = this.sortAuditors(filteredAuditors, filters.sortBy, filters.order);

        this.displaySearchResults(filteredAuditors, filters);
    }

    sortAuditors(auditors, sortBy, order) {
        const sortMultiplier = order === 'asc' ? 1 : -1;

        return auditors.sort((a, b) => {
            let comparison = 0;

            switch (sortBy) {
                case 'experience':
                    const expOrder = {'1-2 Jahre': 1, '3-5 Jahre': 2, '5-10 Jahre': 3, '10+ Jahre': 4, 'Senior': 5};
                    comparison = (expOrder[a.experience] || 0) - (expOrder[b.experience] || 0);
                    break;
                case 'location':
                    comparison = a.city.localeCompare(b.city);
                    break;
                case 'availability':
                    const availOrder = {'Sofort verf√ºgbar': 1, 'Verf√ºgbar in 1-2 Wochen': 2, 'Verf√ºgbar in 1 Monat': 3, 'Auf Anfrage': 4};
                    comparison = (availOrder[a.availability] || 5) - (availOrder[b.availability] || 5);
                    break;
                case 'rating':
                    // Simulate ratings based on experience and standards count
                    const aRating = (a.standards.length * 0.3) + (expOrder[a.experience] || 0);
                    const bRating = (b.standards.length * 0.3) + (expOrder[b.experience] || 0);
                    comparison = aRating - bRating;
                    break;
                default: // relevance
                    comparison = b.standards.length - a.standards.length;
                    break;
            }

            return comparison * sortMultiplier;
        });
    }

    displaySearchResults(auditors, filters) {
        const container = document.getElementById('searchResultsContainer');
        if (!container) return;

        if (auditors.length === 0) {
            container.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <h3>Keine Auditoren gefunden</h3>
                    <p>Versuchen Sie andere Suchfilter oder erweitern Sie Ihre Kriterien.</p>
                </div>
            `;
            return;
        }

        const resultsHtml = `
            <div class="search-results-header">
                <h3><i class="fas fa-users"></i> Suchergebnisse</h3>
                <span class="results-count">${auditors.length} Auditor${auditors.length !== 1 ? 'en' : ''} gefunden</span>
            </div>
            <div class="search-results-grid">
                ${auditors.map(auditor => this.generateSearchResultCard(auditor)).join('')}
            </div>
        `;

        container.innerHTML = resultsHtml;
    }

    generateSearchResultCard(auditor) {
        const completedAudits = this.getAuditorCompletedAudits(auditor.id);
        const rating = this.getAuditorRating(auditor.id);
        
        return `
            <div class="search-result-card">
                <div class="result-header">
                    <div class="auditor-avatar">
                        <i class="fas fa-user-tie"></i>
                    </div>
                    <div class="auditor-basic-info">
                        <h4>${this.escapeHtml(auditor.firstName)} ${this.escapeHtml(auditor.lastName)}</h4>
                        <span class="auditor-cert-badge">${this.escapeHtml(auditor.certification)}</span>
                        <div class="auditor-meta">
                            <span class="location">
                                <i class="fas fa-map-marker-alt"></i>
                                ${this.escapeHtml(auditor.city)}
                            </span>
                            <span class="experience">
                                <i class="fas fa-clock"></i>
                                ${this.escapeHtml(auditor.experience)}
                            </span>
                        </div>
                    </div>
                    <div class="auditor-stats">
                        <div class="stat">
                            <span class="stat-value">${completedAudits}</span>
                            <span class="stat-label">Audits</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value">${rating.split(' ')[1]}</span>
                            <span class="stat-label">Rating</span>
                        </div>
                    </div>
                </div>
                
                <div class="result-body">
                    <div class="standards-section">
                        <h5>Zertifizierte Standards:</h5>
                        <div class="standards-badges">
                            ${auditor.standards.slice(0, 4).map(std => 
                                `<span class="standard-mini-badge ${this.getStandardBadgeClass(std)}">${this.escapeHtml(std)}</span>`
                            ).join('')}
                            ${auditor.standards.length > 4 ? `<span class="more-badge">+${auditor.standards.length - 4}</span>` : ''}
                        </div>
                    </div>
                    
                    <div class="industries-section">
                        <h5>Branchenerfahrung:</h5>
                        <div class="industries-tags">
                            ${auditor.industries.slice(0, 3).map(ind => 
                                `<span class="industry-tag">${this.escapeHtml(ind)}</span>`
                            ).join('')}
                            ${auditor.industries.length > 3 ? `<span class="more-tag">+${auditor.industries.length - 3}</span>` : ''}
                        </div>
                    </div>
                    
                    <div class="availability-section">
                        <span class="availability-indicator ${auditor.status.toLowerCase()}">
                            <i class="fas fa-circle"></i>
                            ${this.escapeHtml(auditor.availability)}
                        </span>
                    </div>
                </div>
                
                <div class="result-footer">
                    <button class="btn btn-outline btn-small" onclick="window.qhseDashboard.viewAuditorDetails('${auditor.id}')">
                        <i class="fas fa-eye"></i> Details ansehen
                    </button>
                    <button class="btn btn-secondary btn-small" onclick="window.qhseDashboard.contactAuditor('${auditor.id}')">
                        <i class="fas fa-envelope"></i> Kontaktieren
                    </button>
                    <button class="btn btn-primary btn-small" onclick="window.qhseDashboard.requestAudit('${auditor.id}')">
                        <i class="fas fa-handshake"></i> Audit anfragen
                    </button>
                </div>
            </div>
        `;
    }

    clearAdvancedSearch() {
        const filterIds = ['searchStandard', 'searchLocation', 'searchCertification', 'searchExperience', 'searchIndustry', 'searchAvailability'];
        filterIds.forEach(id => {
            const element = document.getElementById(id);
            if (element) element.value = '';
        });
        
        // Reset sort options
        const sortBy = document.getElementById('searchSortBy');
        const sortOrder = document.getElementById('searchOrder');
        if (sortBy) sortBy.value = 'relevance';
        if (sortOrder) sortOrder.value = 'desc';
        
        this.performAdvancedSearch();
        this.showNotification('Suchfilter wurden zur√ºckgesetzt.', 'info');
    }

    saveSearchPreset() {
        const filters = {
            standard: document.getElementById('searchStandard')?.value || '',
            location: document.getElementById('searchLocation')?.value || '',
            certification: document.getElementById('searchCertification')?.value || '',
            experience: document.getElementById('searchExperience')?.value || '',
            industry: document.getElementById('searchIndustry')?.value || '',
            availability: document.getElementById('searchAvailability')?.value || '',
            sortBy: document.getElementById('searchSortBy')?.value || 'relevance',
            order: document.getElementById('searchOrder')?.value || 'desc'
        };

        const presetName = prompt('Geben Sie einen Namen f√ºr diese Suchvorlage ein:');
        if (presetName) {
            const savedSearches = JSON.parse(localStorage.getItem('qhse_saved_searches') || '[]');
            savedSearches.push({
                id: Date.now().toString(),
                name: presetName,
                filters: filters,
                createdAt: new Date().toISOString()
            });
            localStorage.setItem('qhse_saved_searches', JSON.stringify(savedSearches));
            this.showNotification(`Suchvorlage "${presetName}" wurde gespeichert.`, 'success');
        }
    }

    // IAF-Code System f√ºr professionelle Branchenklassifizierung
    getIAFCodes() {
        return {
            // Metallverarbeitung & Maschinenbau (Hauptbereiche)
            '17.1': 'Metallbearbeitung (Standard) - Schlossereien, CNC-Drehteile',
            '17.2': 'Feinmechanik, spezialisierte Metallverarbeitung - Feinmechanische Werkst√§tten, Pr√§zisionsteile',
            '18.1': 'Maschinenbau ‚Äì Montagebetriebe (Nur Montage, kein Design)',
            '18.2': 'Maschinenbau ‚Äì komplexe Systeme (Hydrauliksysteme, Robotik)',
            
            // Verarbeitende Industrie
            '22': 'Sonstige verarbeitende Industrie - Mischerbetriebe, kleinere Produktionsanlagen',
            
            // Bauwesen
            '28': 'Bauwesen - Hochbau, Tiefbau, Ingenieurbau',
            
            // Technische Dienstleistungen
            '34.1': 'Technische Dienstleistungen ‚Äì Labore (Pr√ºflabore, Werkstoffanalyse)',
            '34.2': 'Technische Dienstleistungen ‚Äì Planung/Beratung (Ingenieurb√ºros, Architekten, Energieberater)',
            
            // Allgemeine Dienstleistungen
            '35.1': 'Dienstleistungen allgemein (Call-Center, IT-Support)',
            '35.5': 'Infrastrukturmanagement, Facility Services (Hausmeisterdienste, Objektmanagement)',
            '35.8': 'Geb√§udereinigung (Reinigungsunternehmen, Glasreinigung, Spezialreinigung)',
            
            // Bildungswesen
            '37.1': 'Bildungseinrichtungen ‚Äì allgemein (Schulen, Bildungstr√§ger)',
            '37.2': 'Weiterbildung / Erwachsenenbildung (Schulungsunternehmen, Trainer, Akademien)',
            
            // Gesundheitswesen
            '38.1': 'Gesundheitswesen ‚Äì ambulant (Arztpraxen, Therapiezentren)',
            '38.2': 'Gesundheitswesen ‚Äì station√§r (Kliniken, Pflegeheime)'
        };
    }

    // Erweiterte IAF-Code Informationen mit Scope-Matching
    getDetailedIAFInfo() {
        return {
            '17.1': {
                code: '17.1',
                name: 'Metallbearbeitung (Standard)',
                category: 'Metallverarbeitung',
                examples: ['Schlossereien', 'CNC-Drehteile', 'Schwei√üarbeiten'],
                parentCode: '17',
                complexity: 'standard',
                requirements: ['Grundkenntnisse Metallverarbeitung', 'ISO 9001 Erfahrung']
            },
            '17.2': {
                code: '17.2', 
                name: 'Feinmechanik, spezialisierte Metallverarbeitung',
                category: 'Pr√§zisionsmetallverarbeitung',
                examples: ['Feinmechanische Werkst√§tten', 'Pr√§zisionsteile', 'Mikrobearbeitung'],
                parentCode: '17',
                complexity: 'advanced',
                requirements: ['Feinmechanik-Kenntnisse', 'Pr√§zisionsmessung', 'ISO 9001 + Spezialwissen']
            },
            '18.1': {
                code: '18.1',
                name: 'Maschinenbau ‚Äì Montagebetriebe',
                category: 'Maschinenbau',
                examples: ['Nur Montage', 'kein Design', 'Anlagenmontage'],
                parentCode: '18',
                complexity: 'standard',
                requirements: ['Montage-Erfahrung', 'Maschinenbau-Grundlagen']
            },
            '18.2': {
                code: '18.2',
                name: 'Maschinenbau ‚Äì komplexe Systeme', 
                category: 'Komplexer Maschinenbau',
                examples: ['Hydrauliksysteme', 'Robotik', 'Automatisierungstechnik'],
                parentCode: '18',
                complexity: 'expert',
                requirements: ['Komplexe Systeme', 'Robotik-Kenntnisse', 'Systemintegration']
            },
            '22': {
                code: '22',
                name: 'Sonstige verarbeitende Industrie',
                category: 'Verarbeitende Industrie',
                examples: ['Mischerbetriebe', 'kleinere Produktionsanlagen', 'Diversifizierte Fertigung'],
                parentCode: null,
                complexity: 'standard',
                requirements: ['Produktionserfahrung', 'ISO 9001']
            },
            '28': {
                code: '28',
                name: 'Bauwesen',
                category: 'Bauwirtschaft',
                examples: ['Hochbau', 'Tiefbau', 'Ingenieurbau'],
                parentCode: null,
                complexity: 'standard',
                requirements: ['Bauwesen-Kenntnisse', 'Projektmanagement']
            },
            '34.1': {
                code: '34.1',
                name: 'Technische Dienstleistungen ‚Äì Labore',
                category: 'Technische Dienstleistungen',
                examples: ['Pr√ºflabore', 'Werkstoffanalyse', 'Kalibrierung'],
                parentCode: '34',
                complexity: 'expert',
                requirements: ['Labor-Erfahrung', 'ISO 17025', 'Pr√ºftechnik']
            },
            '34.2': {
                code: '34.2',
                name: 'Technische Dienstleistungen ‚Äì Planung/Beratung',
                category: 'Beratungsdienstleistungen',
                examples: ['Ingenieurb√ºros', 'Architekten', 'Energieberater'],
                parentCode: '34',
                complexity: 'advanced',
                requirements: ['Planungs-Erfahrung', 'Beratungskompetenz', 'Fachspezifische Kenntnisse']
            },
            '35.1': {
                code: '35.1',
                name: 'Dienstleistungen allgemein',
                category: 'Allgemeine Dienstleistungen',
                examples: ['Call-Center', 'IT-Support', 'Kundenservice'],
                parentCode: '35',
                complexity: 'standard',
                requirements: ['Service-Erfahrung', 'Prozessverst√§ndnis']
            },
            '35.5': {
                code: '35.5',
                name: 'Infrastrukturmanagement, Facility Services',
                category: 'Facility Management',
                examples: ['Hausmeisterdienste', 'Objektmanagement', 'Technisches Geb√§udemanagement'],
                parentCode: '35',
                complexity: 'standard',
                requirements: ['Facility Management', 'Geb√§udetechnik-Kenntnisse']
            },
            '35.8': {
                code: '35.8',
                name: 'Geb√§udereinigung',
                category: 'Reinigungsdienstleistungen',
                examples: ['Reinigungsunternehmen', 'Glasreinigung', 'Spezialreinigung'],
                parentCode: '35',
                complexity: 'standard',
                requirements: ['Reinigungsbranche-Erfahrung', 'Hygiene-Standards']
            },
            '37.1': {
                code: '37.1',
                name: 'Bildungseinrichtungen ‚Äì allgemein',
                category: 'Bildungswesen',
                examples: ['Schulen', 'Bildungstr√§ger', 'Universit√§ten'],
                parentCode: '37',
                complexity: 'standard',
                requirements: ['Bildungsbereich-Erfahrung', 'P√§dagogische Prozesse']
            },
            '37.2': {
                code: '37.2',
                name: 'Weiterbildung / Erwachsenenbildung',
                category: 'Erwachsenenbildung',
                examples: ['Schulungsunternehmen', 'Trainer', 'Akademien'],
                parentCode: '37',
                complexity: 'advanced',
                requirements: ['Erwachsenenbildung', 'Trainings-Erfahrung', 'Didaktik']
            },
            '38.1': {
                code: '38.1',
                name: 'Gesundheitswesen ‚Äì ambulant',
                category: 'Ambulante Gesundheitsversorgung',
                examples: ['Arztpraxen', 'Therapiezentren', 'Ambulante Dienste'],
                parentCode: '38',
                complexity: 'expert',
                requirements: ['Gesundheitswesen-Erfahrung', 'Medizinprodukte', 'Datenschutz']
            },
            '38.2': {
                code: '38.2',
                name: 'Gesundheitswesen ‚Äì station√§r',
                category: 'Station√§re Gesundheitsversorgung',
                examples: ['Kliniken', 'Pflegeheime', 'Krankenh√§user'],
                parentCode: '38',
                complexity: 'expert',
                requirements: ['Klinik-Erfahrung', 'Medizinprodukte', 'Komplexe Prozesse', 'Risikomanagement']
            }
        };
    }

    // Scope-Matching-Ampel System: Gr√ºn/Gelb/Rot
    getScopeMatchLevel(auditorScopes, requiredIAFCode) {
        if (!auditorScopes || !requiredIAFCode) {
            return { level: 'red', status: 'Nicht qualifiziert', message: 'Keine Scope-Informationen verf√ºgbar' };
        }

        const detailedInfo = this.getDetailedIAFInfo();
        const requiredInfo = detailedInfo[requiredIAFCode];
        
        // Exakte √úbereinstimmung (GR√úN)
        if (auditorScopes.includes(requiredIAFCode)) {
            return {
                level: 'green',
                status: 'Voll kompatibel',
                message: `Du hast exakt diesen Scope (${requiredIAFCode}): ${requiredInfo?.name || requiredIAFCode}`,
                icon: 'üü¢',
                canApply: true,
                confidence: 100
            };
        }

        // Haupt-Scope-√úbereinstimmung (GELB)
        if (requiredInfo?.parentCode) {
            const parentCode = requiredInfo.parentCode;
            if (auditorScopes.includes(parentCode)) {
                return {
                    level: 'yellow',
                    status: 'Teilweise kompatibel',
                    message: `Du hast den Hauptscope (${parentCode}), aber nicht den spezifischen Untercode (${requiredIAFCode})`,
                    icon: 'üü°',
                    canApply: true,
                    confidence: 60
                };
            }
        }

        // Verwandte Scopes pr√ºfen (GELB)
        const relatedScopes = this.findRelatedScopes(requiredIAFCode, auditorScopes);
        if (relatedScopes.length > 0) {
            return {
                level: 'yellow', 
                status: 'Verwandte Qualifikation',
                message: `Du hast verwandte Scopes: ${relatedScopes.join(', ')}`,
                icon: 'üü°',
                canApply: true,
                confidence: 40
            };
        }

        // Keine √úbereinstimmung (ROT)
        return {
            level: 'red',
            status: 'Nicht qualifiziert',
            message: `Du hast diesen Scope nicht (${requiredIAFCode}) - keine Bewerbung m√∂glich`,
            icon: 'üî¥',
            canApply: false,
            confidence: 0
        };
    }

    // Finde verwandte Scopes basierend auf Kategorien
    findRelatedScopes(requiredCode, auditorScopes) {
        const detailedInfo = this.getDetailedIAFInfo();
        const requiredInfo = detailedInfo[requiredCode];
        const related = [];

        if (!requiredInfo) return related;

        auditorScopes.forEach(scope => {
            const scopeInfo = detailedInfo[scope];
            if (scopeInfo && scopeInfo.category === requiredInfo.category && scope !== requiredCode) {
                related.push(scope);
            }
        });

        return related;
    }

    // Zeige Scope-Matching-Ampel in der UI
    renderScopeMatchingIndicator(containerId, auditorScopes, requiredIAFCode) {
        const container = document.getElementById(containerId);
        if (!container) return;

        const match = this.getScopeMatchLevel(auditorScopes, requiredIAFCode);
        const detailedInfo = this.getDetailedIAFInfo();
        const requiredInfo = detailedInfo[requiredIAFCode];

        container.innerHTML = `
            <div class="scope-matching-indicator ${match.level}">
                <div class="match-header">
                    <span class="match-icon">${match.icon}</span>
                    <strong>${match.status}</strong>
                    <span class="confidence-badge">${match.confidence}%</span>
                </div>
                <div class="match-message">${match.message}</div>
                ${requiredInfo ? `
                    <div class="scope-details">
                        <strong>Ben√∂tigter Scope:</strong> ${requiredInfo.name}<br>
                        <strong>Kategorie:</strong> ${requiredInfo.category}<br>
                        <strong>Beispiele:</strong> ${requiredInfo.examples.join(', ')}<br>
                        <strong>Anforderungen:</strong> ${requiredInfo.requirements.join(', ')}
                    </div>
                ` : ''}
                <div class="match-actions">
                    ${match.canApply ? 
                        `<button class="btn btn-success btn-small" onclick="window.qhseDashboard.applyForAudit('${requiredIAFCode}')">
                            <i class="fas fa-check"></i> Bewerben
                        </button>` :
                        `<button class="btn btn-danger btn-small" disabled>
                            <i class="fas fa-times"></i> Nicht berechtigt
                        </button>`
                    }
                    <button class="btn btn-info btn-small" onclick="window.qhseDashboard.showScopeRequirements('${requiredIAFCode}')">
                        <i class="fas fa-info"></i> Anforderungen
                    </button>
                </div>
            </div>
        `;
    }

    // Automatische Benachrichtigungen bei passenden Scopes
    notifyQualifiedAuditors(newAuditOffer) {
        const requiredCode = newAuditOffer.iafCode;
        if (!requiredCode) return;

        const qualifiedAuditors = [];
        const partiallyQualifiedAuditors = [];

        // Alle Auditoren durchgehen
        this.auditors.forEach(auditor => {
            if (!auditor.isActive) return;

            const scopes = auditor.iafCodes || [];
            const match = this.getScopeMatchLevel(scopes, requiredCode);

            if (match.level === 'green') {
                qualifiedAuditors.push({ auditor, match });
            } else if (match.level === 'yellow') {
                partiallyQualifiedAuditors.push({ auditor, match });
            }
        });

        // Benachrichtigungen senden
        this.sendAuditNotifications(qualifiedAuditors, partiallyQualifiedAuditors, newAuditOffer);
    }

    // Benachrichtigungen senden
    sendAuditNotifications(fullyQualified, partiallyQualified, auditOffer) {
        const detailedInfo = this.getDetailedIAFInfo();
        const scopeInfo = detailedInfo[auditOffer.iafCode];

        // Vollst√§ndig qualifizierte Auditoren benachrichtigen
        fullyQualified.forEach(({ auditor, match }) => {
            this.showNotification(
                'Neues passendes Audit verf√ºgbar! üü¢',
                `Audit "${auditOffer.auditId}" (${scopeInfo?.name || auditOffer.iafCode}) - Sie sind vollst√§ndig qualifiziert!`,
                'success',
                10000
            );
        });

        // Teilweise qualifizierte Auditoren benachrichtigen
        partiallyQualified.forEach(({ auditor, match }) => {
            this.showNotification(
                'Potentiell interessantes Audit üü°',
                `Audit "${auditOffer.auditId}" (${scopeInfo?.name || auditOffer.iafCode}) - Teilweise kompatibel`,
                'info',
                8000
            );
        });

        console.log(`‚úÖ Benachrichtigungen gesendet: ${fullyQualified.length} vollst√§ndig qualifiziert, ${partiallyQualified.length} teilweise qualifiziert`);
    }

    // Erweiterte Matching-Logik mit IAF-Codes und Qualifikationen  
    calculateAdvancedMatchScore(auditor, auditRequest) {
        let score = 0;
        let maxScore = 0;
        const matchDetails = {
            normMatch: false,
            iafMatch: false,
            languageMatch: false,
            availabilityMatch: false,
            experienceMatch: false,
            noConflict: false
        };

        // 1. Normkompetenz (30% Gewichtung)
        maxScore += 30;
        if (auditor.standards && auditor.standards.includes(auditRequest.standard)) {
            score += 30;
            matchDetails.normMatch = true;
        }

        // 2. IAF-Code-Zulassung (25% Gewichtung)
        maxScore += 25;
        if (auditor.iafCodes && auditRequest.iafCode && auditor.iafCodes.includes(auditRequest.iafCode)) {
            score += 25;
            matchDetails.iafMatch = true;
        }

        // 3. Sprachkenntnisse (20% Gewichtung)
        maxScore += 20;
        if (auditor.languages && auditRequest.auditLanguage && auditor.languages.includes(auditRequest.auditLanguage)) {
            score += 20;
            matchDetails.languageMatch = true;
        }

        // 4. Verf√ºgbarkeit (15% Gewichtung)
        maxScore += 15;
        if (this.checkAuditorAvailability(auditor, auditRequest.auditStartDate, auditRequest.auditEndDate)) {
            score += 15;
            matchDetails.availabilityMatch = true;
        }

        // 5. Erfahrung mit Audittyp (10% Gewichtung)
        maxScore += 10;
        if (auditor.auditTypes && auditRequest.auditType && auditor.auditTypes.includes(auditRequest.auditType)) {
            score += 10;
            matchDetails.experienceMatch = true;
        }

        // 6. Kein Interessenkonflikt (Pflicht - 0 Punkte aber Ausschlusskriterium)
        matchDetails.noConflict = !this.hasInterestConflict(auditor, auditRequest);

        const finalScore = score / maxScore;
        
        // Wenn Pflichtkriterien nicht erf√ºllt sind, Score auf 0 setzen
        if (!matchDetails.normMatch || !matchDetails.iafMatch || !matchDetails.languageMatch || 
            !matchDetails.availabilityMatch || !matchDetails.noConflict) {
            return { score: 0, matchDetails, qualified: false };
        }

        return { 
            score: finalScore, 
            matchDetails, 
            qualified: finalScore >= 0.7 // Mindest-Score von 70%
        };
    }

    checkAuditorAvailability(auditor, startDate, endDate) {
        // Pr√ºfe ob Auditor im angegebenen Zeitraum verf√ºgbar ist
        if (!startDate || !endDate) return false;
        
        const auditStart = new Date(startDate);
        const auditEnd = new Date(endDate);
        const today = new Date();
        
        // Audit darf nicht in der Vergangenheit liegen
        if (auditStart < today) return false;
        
        // Pr√ºfe gegen gesperrte Zeitr√§ume des Auditors
        if (auditor.blockedPeriods) {
            for (const blocked of auditor.blockedPeriods) {
                const blockedStart = new Date(blocked.startDate);
                const blockedEnd = new Date(blocked.endDate);
                
                // √úberschneidung pr√ºfen
                if (auditStart <= blockedEnd && auditEnd >= blockedStart) {
                    return false;
                }
            }
        }
        
        return true;
    }

    hasInterestConflict(auditor, auditRequest) {
        // Pr√ºfe Interessenkonflikte
        if (!auditor.conflictCompanies || !auditRequest.companyName) return false;
        
        // Pr√ºfe ob Auditor bei diesem Kunden arbeitet/gearbeitet hat
        const companyName = auditRequest.companyName.toLowerCase();
        return auditor.conflictCompanies.some(company => 
            company.toLowerCase().includes(companyName) || 
            companyName.includes(company.toLowerCase())
        );
    }

    // T√úV-konforme Audit-Erstellung mit vollst√§ndiger Compliance-Dokumentation
    createAdvancedAuditOffer() {
        console.log('‚úÖ createAdvancedAuditOffer() wurde aufgerufen!');
        const formHtml = `
            <div class="advanced-audit-form-overlay" onclick="this.remove()">
                <div class="advanced-audit-form-content" onclick="event.stopPropagation()">
                    <div class="modal-header tuv-header">
                        <h2><i class="fas fa-certificate"></i> T√úV-konforme Audit-Dokumentation</h2>
                        <div class="compliance-badge">
                            <i class="fas fa-shield-alt"></i> ISO/IEC 17021-1 konform
                        </div>
                        <button class="modal-close" onclick="this.closest('.advanced-audit-form-overlay').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    
                    <form id="advancedAuditForm" class="advanced-audit-form tuv-form">
                        <!-- Sektion 1: Audit-Identifikation & Akkreditierung -->
                        <div class="form-section tuv-section">
                            <h3><i class="fas fa-id-card"></i> Audit-Identifikation & Akkreditierung</h3>
                            
                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="auditId">Audit-ID (T√úV-konform) *</label>
                                    <input type="text" id="auditId" required 
                                           placeholder="AUD-YYYY-NNN-CB" maxlength="25" pattern="AUD-[0-9]{4}-[0-9]{3}-[A-Z]{2,4}">
                                    <small>Format: AUD-JAHR-NR-CB (z.B. AUD-2024-001-TUV)</small>
                                </div>
                                <div class="form-group required">
                                    <label for="certificationBodyCode">Zertifizierungsstellencode *</label>
                                    <select id="certificationBodyCode" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="TUV-SUD">T√úV S√úD (Kennung: 0001)</option>
                                        <option value="TUV-NORD">T√úV NORD (Kennung: 0002)</option>
                                        <option value="TUV-RHEINLAND">T√úV Rheinland (Kennung: 0003)</option>
                                        <option value="DQS">DQS (Kennung: 0004)</option>
                                        <option value="DEKRA">DEKRA (Kennung: 0005)</option>
                                        <option value="LRQA">LRQA (Kennung: 0006)</option>
                                        <option value="SGS">SGS (Kennung: 0007)</option>
                                        <option value="BV">Bureau Veritas (Kennung: 0008)</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="accreditationNumber">Akkreditierungsnummer *</label>
                                    <input type="text" id="accreditationNumber" required 
                                           placeholder="D-ZE-XXXXX-XX-XX" maxlength="20">
                                    <small>Deutsche Akkreditierungsstelle (DAkkS)</small>
                                </div>
                                <div class="form-group required">
                                    <label for="auditStandardAdv">Audit-Norm (Standard) *</label>
                                    <select id="auditStandardAdv" required onchange="this.updateNormRequirements()">
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="ISO 9001:2015">ISO 9001:2015 - Qualit√§tsmanagementsysteme</option>
                                        <option value="ISO 14001:2015">ISO 14001:2015 - Umweltmanagementsysteme</option>
                                        <option value="ISO 45001:2018">ISO 45001:2018 - Arbeitsschutzmanagementsysteme</option>
                                        <option value="IATF 16949:2016">IATF 16949:2016 - Automotive QM</option>
                                        <option value="ISO 27001:2022">ISO 27001:2022 - Informationssicherheit</option>
                                        <option value="AS9100D:2016">AS9100D:2016 - Luftfahrt QM</option>
                                        <option value="ISO 13485:2016">ISO 13485:2016 - Medizinprodukte QM</option>
                                        <option value="ISO 22000:2018">ISO 22000:2018 - Lebensmittelsicherheit</option>
                                        <option value="ISO 50001:2018">ISO 50001:2018 - Energiemanagementsysteme</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="auditTypeAdv">Audit-Typ nach ISO/IEC 17021-1 *</label>
                                    <select id="auditTypeAdv" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="Stage 1">Stage 1 - Systemdokumentation & Vorbereitung</option>
                                        <option value="Stage 2">Stage 2 - Implementierung & Wirksamkeit</option>
                                        <option value="Surveillance 1">√úberwachung Jahr 1</option>
                                        <option value="Surveillance 2">√úberwachung Jahr 2</option>
                                        <option value="Recertification">Rezertifizierung</option>
                                        <option value="Special">Sonderaudit (au√üerplanm√§√üig)</option>
                                        <option value="Integrated">Integriertes Audit (Multi-Standard)</option>
                                        <option value="Transfer">√úbergangsaudit (CB-Wechsel)</option>
                                    </select>
                                </div>
                                <div class="form-group required">
                                    <label for="iafCode">IAF-Branchencode (EA Code) *</label>
                                    <select id="iafCode" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        ${Object.entries(this.getIAFCodes()).map(([code, desc]) => 
                                            `<option value="${code}">${code} - ${desc}</option>`
                                        ).join('')}
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Sektion 2: Audit-Scope & Normative Anforderungen -->
                        <div class="form-section tuv-section">
                            <h3><i class="fas fa-crosshairs"></i> Audit-Scope & Normative Anforderungen</h3>
                            
                            <div class="form-group required">
                                <label for="scopeDescription">Detaillierte Scope-Beschreibung (ISO/IEC 17021-1 konform) *</label>
                                <textarea id="scopeDescription" required rows="4" 
                                          placeholder="Detaillierte Beschreibung des Zertifizierungsumfangs gem√§√ü ISO/IEC 17021-1..."
                                          maxlength="1000"></textarea>
                                <small>Inklusive: Prozesse, Standorte, Ausschl√ºsse, Anwendungsbereich</small>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="processScope">Prozess-Scope * <span class="help-text">(Mindestens einen Bereich ausw√§hlen)</span></label>
                                    <div class="checkbox-grid process-scope-grid">
                                        <div class="scope-category">
                                            <h5>ISO 9001 Kernanforderungen</h5>
                                            <label><input type="checkbox" name="processScope" value="4_Context"> 4. Kontext der Organisation</label>
                                            <label><input type="checkbox" name="processScope" value="5_Leadership"> 5. F√ºhrung & Verantwortung</label>
                                            <label><input type="checkbox" name="processScope" value="6_Planning"> 6. Planung des QM-Systems</label>
                                            <label><input type="checkbox" name="processScope" value="7_Support"> 7. Unterst√ºtzung & Ressourcen</label>
                                            <label><input type="checkbox" name="processScope" value="8_Operation"> 8. Betrieb & Produktrealisierung</label>
                                            <label><input type="checkbox" name="processScope" value="9_Performance"> 9. Bewertung der Leistung</label>
                                            <label><input type="checkbox" name="processScope" value="10_Improvement"> 10. Verbesserung</label>
                                        </div>
                                        
                                        <div class="scope-category">
                                            <h5>Unternehmensprozesse</h5>
                                            <label><input type="checkbox" name="processScope" value="Sales"> Vertrieb & Kundengewinnung</label>
                                            <label><input type="checkbox" name="processScope" value="Design"> Entwicklung & Konstruktion</label>
                                            <label><input type="checkbox" name="processScope" value="Production"> Produktion & Fertigung</label>
                                            <label><input type="checkbox" name="processScope" value="Procurement"> Beschaffung & Lieferantenmanagement</label>
                                            <label><input type="checkbox" name="processScope" value="Logistics"> Logistik & Distribution</label>
                                            <label><input type="checkbox" name="processScope" value="Service"> Kundendienst & After-Sales</label>
                                        </div>
                                        
                                        <div class="scope-category">
                                            <h5>Unterst√ºtzungsprozesse</h5>
                                            <label><input type="checkbox" name="processScope" value="HR"> Personalmanagement</label>
                                            <label><input type="checkbox" name="processScope" value="IT"> IT-Management</label>
                                            <label><input type="checkbox" name="processScope" value="Finance"> Finanz- & Rechnungswesen</label>
                                            <label><input type="checkbox" name="processScope" value="Maintenance"> Instandhaltung</label>
                                            <label><input type="checkbox" name="processScope" value="Quality"> Qualit√§tssicherung</label>
                                            <label><input type="checkbox" name="processScope" value="Environment"> Umweltmanagement</label>
                                            <label><input type="checkbox" name="processScope" value="Safety"> Arbeitsschutz</label>
                                        </div>
                                        
                                        <div class="scope-category">
                                            <h5>Spezielle Bereiche</h5>
                                            <label><input type="checkbox" name="processScope" value="Calibration"> Kalibrierung & Messtechnik</label>
                                            <label><input type="checkbox" name="processScope" value="Training"> Schulung & Kompetenzentwicklung</label>
                                            <label><input type="checkbox" name="processScope" value="Documentation"> Dokumentenmanagement</label>
                                            <label><input type="checkbox" name="processScope" value="Risk"> Risikomanagement</label>
                                            <label><input type="checkbox" name="processScope" value="Emergency"> Notfallmanagement</label>
                                        </div>
                                    </div>
                                    <div class="checkbox-actions">
                                        <button type="button" onclick="selectAllProcessScopes()" class="btn-small btn-secondary">Alle ausw√§hlen</button>
                                        <button type="button" onclick="clearAllProcessScopes()" class="btn-small btn-secondary">Alle abw√§hlen</button>
                                        <button type="button" onclick="selectISO9001Only()" class="btn-small btn-primary">Nur ISO 9001 Kern</button>
                                    </div>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="siteScope">Standort-Scope *</label>
                                    <select id="siteScope" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="single">Einzelstandort</option>
                                        <option value="multi">Mehrere Standorte</option>
                                        <option value="central">Zentrale + Niederlassungen</option>
                                        <option value="temporary">Tempor√§re Standorte inkl.</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="exclusions">Ausschl√ºsse nach 4.3 *</label>
                                    <textarea id="exclusions" rows="2" 
                                              placeholder="Begr√ºndete Ausschl√ºsse gem√§√ü Normkapitel..."
                                              maxlength="300"></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Sektion 3: Kunde & Organisationsdaten (T√úV-Dokumentation) -->
                        <div class="form-section tuv-section">
                            <h3><i class="fas fa-building"></i> Kunde & Organisationsdaten</h3>
                            
                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="customerCompany">Vollst√§ndiger Firmenname *</label>
                                    <input type="text" id="customerCompany" required 
                                           placeholder="Musterfirma Produktions GmbH & Co. KG" maxlength="150">
                                </div>
                                <div class="form-group required">
                                    <label for="customerRegistration">Handelsregisternummer *</label>
                                    <input type="text" id="customerRegistration" required 
                                           placeholder="HRB 12345 (Amtsgericht M√ºnchen)" maxlength="50">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="customerCountry">Land (ISO 3166) *</label>
                                    <select id="customerCountry" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="DE">Deutschland (DE)</option>
                                        <option value="AT">√ñsterreich (AT)</option>
                                        <option value="CH">Schweiz (CH)</option>
                                        <option value="NL">Niederlande (NL)</option>
                                        <option value="BE">Belgien (BE)</option>
                                        <option value="FR">Frankreich (FR)</option>
                                        <option value="IT">Italien (IT)</option>
                                        <option value="PL">Polen (PL)</option>
                                        <option value="CZ">Tschechien (CZ)</option>
                                        <option value="ES">Spanien (ES)</option>
                                    </select>
                                </div>
                                <div class="form-group required">
                                    <label for="customerVatId">USt-IdNr. (falls EU) *</label>
                                    <input type="text" id="customerVatId" 
                                           placeholder="DE123456789" maxlength="15">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="customerZip">Postleitzahl *</label>
                                    <input type="text" id="customerZip" required 
                                           placeholder="12345" maxlength="10">
                                </div>
                                <div class="form-group required">
                                    <label for="customerCity">Ort *</label>
                                    <input type="text" id="customerCity" required 
                                           placeholder="M√ºnchen" maxlength="50">
                                </div>
                            </div>

                            <div class="form-group required">
                                <label for="customerStreet">Vollst√§ndige Adresse *</label>
                                <input type="text" id="customerStreet" required 
                                       placeholder="Musterstra√üe 123, Geb√§ude A, 3. OG" maxlength="150">
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="employeeCount">Mitarbeiteranzahl *</label>
                                    <select id="employeeCount" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="1-10">1-10 Mitarbeiter</option>
                                        <option value="11-50">11-50 Mitarbeiter</option>
                                        <option value="51-250">51-250 Mitarbeiter</option>
                                        <option value="251-500">251-500 Mitarbeiter</option>
                                        <option value="501+">√úber 500 Mitarbeiter</option>
                                    </select>
                                </div>
                                <div class="form-group required">
                                    <label for="annualRevenue">Jahresumsatz (EUR) *</label>
                                    <select id="annualRevenue" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="< 2 Mio">< 2 Millionen</option>
                                        <option value="2-10 Mio">2-10 Millionen</option>
                                        <option value="10-50 Mio">10-50 Millionen</option>
                                        <option value="50+ Mio">√úber 50 Millionen</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Sektion 4: Audit-Zeitplanung & Ressourcen -->
                        <div class="form-section tuv-section">
                            <h3><i class="fas fa-calendar-alt"></i> Audit-Zeitplanung & Ressourcen</h3>
                            
                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="auditStartDateAdv">Audit-Startdatum *</label>
                                    <input type="date" id="auditStartDateAdv" required>
                                </div>
                                <div class="form-group required">
                                    <label for="auditEndDateAdv">Audit-Enddatum *</label>
                                    <input type="date" id="auditEndDateAdv" required>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="auditDuration">Geplante Audit-Tage *</label>
                                    <select id="auditDuration" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="0.5">0,5 Tage</option>
                                        <option value="1">1 Tag</option>
                                        <option value="1.5">1,5 Tage</option>
                                        <option value="2">2 Tage</option>
                                        <option value="3">3 Tage</option>
                                        <option value="4">4 Tage</option>
                                        <option value="5">5 Tage</option>
                                        <option value="5+">Mehr als 5 Tage</option>
                                    </select>
                                </div>
                                <div class="form-group required">
                                    <label for="auditLanguage">Audit-Sprache *</label>
                                    <select id="auditLanguage" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="Deutsch">Deutsch</option>
                                        <option value="Englisch">Englisch</option>
                                        <option value="Franz√∂sisch">Franz√∂sisch</option>
                                        <option value="Niederl√§ndisch">Niederl√§ndisch</option>
                                        <option value="Italienisch">Italienisch</option>
                                        <option value="Spanisch">Spanisch</option>
                                        <option value="Polnisch">Polnisch</option>
                                        <option value="Tschechisch">Tschechisch</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="leadAuditorRequired">Lead Auditor Qualifikation *</label>
                                    <select id="leadAuditorRequired" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="IRCA">IRCA Lead Auditor</option>
                                        <option value="TUV-CERT">T√úV zertifizierter LA</option>
                                        <option value="DAkkS">DAkkS anerkannter LA</option>
                                        <option value="VDA">VDA 6.3 Auditor (Automotive)</option>
                                        <option value="IATF">IATF Auditor</option>
                                        <option value="NADCAP">NADCAP Auditor (Aerospace)</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="hostAuditorId">Host-Auditor (automatisch)</label>
                                    <input type="text" id="hostAuditorId" readonly 
                                           value="${this.getCurrentUser().displayName || this.getCurrentUser().name}">
                                    <small>Aus aktuellem Benutzerkonto √ºbernommen</small>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group checkbox-group">
                                    <label>
                                        <input type="checkbox" id="travelRequired"> 
                                        Reiseaufwand erforderlich *
                                    </label>
                                </div>
                                <div class="form-group checkbox-group">
                                    <label>
                                        <input type="checkbox" id="overnightRequired"> 
                                        √úbernachtung erforderlich *
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Sektion 5: T√úV-spezifische Compliance & Risikobewertung -->
                        <div class="form-section tuv-section compliance-section">
                            <h3><i class="fas fa-shield-alt"></i> T√úV-Compliance & Risikobewertung</h3>
                            
                            <div class="form-row">
                                <div class="form-group required">
                                    <label for="riskCategory">Risikokategorie nach ISO/IEC 17021-1 *</label>
                                    <select id="riskCategory" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="LOW">Niedrig - Standardprozesse</option>
                                        <option value="MEDIUM">Mittel - Komplexe Prozesse</option>
                                        <option value="HIGH">Hoch - Kritische/Gefahrenrelevante Prozesse</option>
                                        <option value="SPECIAL">Besonders - Sonderregelungen erforderlich</option>
                                    </select>
                                </div>
                                <div class="form-group required">
                                    <label for="complianceLevel">Compliance-Stufe *</label>
                                    <select id="complianceLevel" required>
                                        <option value="">Bitte ausw√§hlen</option>
                                        <option value="BASIC">Basis - Standard QM</option>
                                        <option value="ENHANCED">Erweitert - Multi-Standard</option>
                                        <option value="CRITICAL">Kritisch - Gesetzliche Anforderungen</option>
                                        <option value="MAXIMUM">Maximum - Sicherheitsrelevant</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-group required">
                                <label for="regulatoryRequirements">Gesetzliche/Beh√∂rdliche Anforderungen *</label>
                                <div class="checkbox-grid">
                                    <label><input type="checkbox" name="regulations" value="FDA"> FDA (Medizinprodukte)</label>
                                    <label><input type="checkbox" name="regulations" value="MDR"> MDR (EU-Medizinprodukte)</label>
                                    <label><input type="checkbox" name="regulations" value="MDSAP"> MDSAP (Medical Device)</label>
                                    <label><input type="checkbox" name="regulations" value="GMP"> GMP (Pharma)</label>
                                    <label><input type="checkbox" name="regulations" value="IFS"> IFS (Lebensmittel)</label>
                                    <label><input type="checkbox" name="regulations" value="BRC"> BRC (Lebensmittel)</label>
                                    <label><input type="checkbox" name="regulations" value="KRITIS"> KRITIS (Kritische Infrastruktur)</label>
                                    <label><input type="checkbox" name="regulations" value="NONE"> Keine besonderen Anforderungen</label>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="specialRequirements">Besondere T√úV-Anforderungen</label>
                                <textarea id="specialRequirements" rows="3" 
                                          placeholder="Spezielle Sicherheits-, Umwelt- oder Qualit√§tsanforderungen..."
                                          maxlength="500"></textarea>
                            </div>
                        </div>

                        <!-- Sektion 6: Optionale Angaben & Austauschmodalit√§ten -->
                        <div class="form-section optional-section">
                            <h3><i class="fas fa-plus-circle"></i> Optionale Angaben & Austauschmodalit√§ten</h3>
                            
                            <div class="form-group">
                                <label for="exchangeReason">Grund f√ºr Audit-Tausch</label>
                                <select id="exchangeReason">
                                    <option value="">Bitte ausw√§hlen</option>
                                    <option value="CAPACITY">Kapazit√§tsengpass</option>
                                    <option value="EXPERTISE">Spezielle Fachexpertise ben√∂tigt</option>
                                    <option value="GEOGRAPHIC">Geografische Optimierung</option>
                                    <option value="TIMING">Terminoptimierung</option>
                                    <option value="COST">Kostenoptimierung</option>
                                    <option value="NETWORK">Netzwerkerweiterung</option>
                                    <option value="OTHER">Sonstiger Grund</option>
                                </select>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="preferredRegion">Bevorzugte Tauschregion</label>
                                    <select id="preferredRegion">
                                        <option value="">Keine Pr√§ferenz</option>
                                        <option value="NORTH">Norddeutschland</option>
                                        <option value="SOUTH">S√ºddeutschland</option>
                                        <option value="EAST">Ostdeutschland</option>
                                        <option value="WEST">Westdeutschland</option>
                                        <option value="AUSTRIA">√ñsterreich</option>
                                        <option value="SWITZERLAND">Schweiz</option>
                                        <option value="BENELUX">Benelux</option>
                                        <option value="INTERNATIONAL">International</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="maxTravelDistance">Max. Reiseentfernung (km)</label>
                                    <select id="maxTravelDistance">
                                        <option value="">Keine Begrenzung</option>
                                        <option value="50">Bis 50 km</option>
                                        <option value="100">Bis 100 km</option>
                                        <option value="200">Bis 200 km</option>
                                        <option value="500">Bis 500 km</option>
                                        <option value="1000">Bis 1000 km</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="notesForApplicants">Zus√§tzliche Hinweise f√ºr Interessenten</label>
                                <textarea id="notesForApplicants" rows="3" 
                                          placeholder="PSA-Anforderungen, NDAs, Besonderheiten des Standorts..."
                                          maxlength="500"></textarea>
                            </div>
                        </div>

                        <!-- T√úV-Best√§tigung und Compliance -->
                        <div class="form-section compliance-confirmation">
                            <h3><i class="fas fa-certificate"></i> T√úV-Konformit√§ts-Best√§tigung</h3>
                            
                            <div class="compliance-checkboxes">
                                <label class="compliance-checkbox">
                                    <input type="checkbox" id="confirmAccuracy" required>
                                    <span class="checkmark"></span>
                                    Ich best√§tige die Richtigkeit und Vollst√§ndigkeit aller Angaben gem√§√ü ISO/IEC 17021-1 *
                                </label>
                                
                                <label class="compliance-checkbox">
                                    <input type="checkbox" id="confirmCompetence" required>
                                    <span class="checkmark"></span>
                                    Ich best√§tige die erforderliche Auditor-Kompetenz gem√§√ü IAF MD Standards *
                                </label>
                                
                                <label class="compliance-checkbox">
                                    <input type="checkbox" id="confirmImpartiality" required>
                                    <span class="checkmark"></span>
                                    Ich best√§tige die Unparteilichkeit und Interessenkonflikt-Freiheit *
                                </label>
                                
                                <label class="compliance-checkbox">
                                    <input type="checkbox" id="confirmDataProtection" required>
                                    <span class="checkmark"></span>
                                    Ich akzeptiere die Datenschutzbestimmungen nach DSGVO/GDPR *
                                </label>
                            </div>
                        </div>
                    </form>

                    <div class="modal-footer tuv-footer">
                        <div class="footer-compliance">
                            <small><i class="fas fa-info-circle"></i> Alle Daten werden T√úV-konform und DSGVO-compliant verarbeitet</small>
                        </div>
                        <div class="footer-actions">
                            <button class="btn btn-secondary" onclick="this.closest('.advanced-audit-form-overlay').remove()">
                                <i class="fas fa-times"></i> Abbrechen
                            </button>
                            <button class="btn btn-primary tuv-primary" onclick="window.qhseDashboard.submitAdvancedAuditOffer()">
                                <i class="fas fa-certificate"></i> T√úV-konform erstellen
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', formHtml);
        
        // Mindestdatum auf heute setzen
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('auditStartDateAdv').min = today;
        document.getElementById('auditEndDateAdv').min = today;
        
        // Globale Funktionen f√ºr Process-Scope-Auswahl verf√ºgbar machen
        window.selectAllProcessScopes = () => {
            const checkboxes = document.querySelectorAll('input[name="processScope"]');
            checkboxes.forEach(cb => cb.checked = true);
        };
        
        window.clearAllProcessScopes = () => {
            const checkboxes = document.querySelectorAll('input[name="processScope"]');
            checkboxes.forEach(cb => cb.checked = false);
        };
        
        window.selectISO9001Only = () => {
            // Erst alle abw√§hlen
            window.clearAllProcessScopes();
            // Dann nur ISO 9001 Kernanforderungen ausw√§hlen
            const iso9001Scopes = ['4_Context', '5_Leadership', '6_Planning', '7_Support', '8_Operation', '9_Performance', '10_Improvement'];
            iso9001Scopes.forEach(value => {
                const checkbox = document.querySelector(`input[name="processScope"][value="${value}"]`);
                if (checkbox) checkbox.checked = true;
            });
        };
    }

    updateScopeRequirements() {
        const standardSelect = document.getElementById('auditStandard');
        const scopeRequirementsDiv = document.getElementById('scopeRequirements');
        
        if (!standardSelect || !scopeRequirementsDiv) return;
        
        const selectedStandard = standardSelect.value;
        
        const scopeRequirements = {
            'ISO 9001': {
                title: 'ISO 9001 - Qualit√§tsmanagement Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Anwendungsbereich des QM-Systems klar definieren',
                    '‚Ä¢ Alle relevanten Prozesse und deren Wechselwirkungen identifizieren',
                    '‚Ä¢ Kundenanforderungen und zutreffende gesetzliche Anforderungen ber√ºcksichtigen',
                    '‚Ä¢ Ausschl√ºsse in Kapitel 7 begr√ºnden (falls zutreffend)',
                    '‚Ä¢ Organisationskontext und interessierte Parteien definieren'
                ],
                focusAreas: 'F√ºhrung, Planung, Unterst√ºtzung, Betrieb, Bewertung der Leistung, Verbesserung'
            },
            'ISO 14001': {
                title: 'ISO 14001 - Umweltmanagement Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Physische Grenzen und organisatorische Anwendbarkeit definieren',
                    '‚Ä¢ Umweltaspekte und -auswirkungen identifizieren und bewerten',
                    '‚Ä¢ Bindende Verpflichtungen (legal und andere) ermitteln',
                    '‚Ä¢ T√§tigkeiten, Produkte und Dienstleistungen abgrenzen',
                    '‚Ä¢ Kontrolle und Einfluss der Organisation bestimmen'
                ],
                focusAreas: 'Kontext, F√ºhrung, Planung, Unterst√ºtzung, Betrieb, Leistungsbewertung, Verbesserung'
            },
            'ISO 45001': {
                title: 'ISO 45001 - Arbeitsschutzmanagement Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Physische und organisatorische Grenzen festlegen',
                    '‚Ä¢ Gef√§hrdungen und Risiken f√ºr alle Arbeitspl√§tze identifizieren',
                    '‚Ä¢ Alle T√§tigkeiten unter der Kontrolle der Organisation erfassen',
                    '‚Ä¢ Externe Anbieter und Besucher ber√ºcksichtigen',
                    '‚Ä¢ Rechtsvorschriften und andere Anforderungen ermitteln'
                ],
                focusAreas: 'Kontext, F√ºhrung, Planung, Unterst√ºtzung, Betrieb, Leistungsbewertung, Verbesserung'
            },
            'ISO 27001': {
                title: 'ISO 27001 - Informationssicherheit Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Informationen, Systeme und Prozesse klar abgrenzen',
                    '‚Ä¢ Interne und externe Schnittstellen definieren',
                    '‚Ä¢ Rechtliche, regulatorische und vertragliche Anforderungen ber√ºcksichtigen',
                    '‚Ä¢ Risikobewertung f√ºr alle Informationswerte durchf√ºhren',
                    '‚Ä¢ Geografische Standorte und organisatorische Einheiten festlegen'
                ],
                focusAreas: 'Kontext, F√ºhrung, Planung, Unterst√ºtzung, Betrieb, Leistungsbewertung, Verbesserung'
            },
            'IATF 16949': {
                title: 'IATF 16949 - Automobilindustrie Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Automotive-spezifische Prozesse und Anforderungen integrieren',
                    '‚Ä¢ Kundenspezifische Anforderungen (CSR) ber√ºcksichtigen',
                    '‚Ä¢ Produktrealisierung von der Entwicklung bis zur Produktion',
                    '‚Ä¢ Lieferantenbewertung und -entwicklung einbeziehen',
                    '‚Ä¢ Kontinuierliche Verbesserung und Probleml√∂sung implementieren'
                ],
                focusAreas: 'ISO 9001 Basis + Automotive Core Tools, APQP, PPAP, SPC, MSA, FMEA'
            },
            'AS9100': {
                title: 'AS9100 - Luft- und Raumfahrt Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Luftfahrt-spezifische Prozesse und Anforderungen erfassen',
                    '‚Ä¢ Konfigurationsmanagement implementieren',
                    '‚Ä¢ Risikomanagement in der gesamten Produktlebensdauer',
                    '‚Ä¢ Kritische Artikel und Schl√ºsselmerkmale identifizieren',
                    '‚Ä¢ Lieferketten-R√ºckverfolgbarkeit sicherstellen'
                ],
                focusAreas: 'ISO 9001 Basis + Aerospace-spezifische Anforderungen, Risikomanagement, Konfiguration'
            },
            'ISO 13485': {
                title: 'ISO 13485 - Medizinprodukte Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Medizinprodukte-spezifische Prozesse definieren',
                    '‚Ä¢ Regulatorische Anforderungen (MDR, FDA) ber√ºcksichtigen',
                    '‚Ä¢ Risikomanagement nach ISO 14971 integrieren',
                    '‚Ä¢ Produktlebenszyklus-Prozesse erfassen',
                    '‚Ä¢ Post-Market Surveillance einbeziehen'
                ],
                focusAreas: 'Design Controls, Risikomanagement, Regulatory Affairs, Validierung, Vigilance'
            },
            'ISO 22000': {
                title: 'ISO 22000 - Lebensmittelsicherheit Scope-Anforderungen',
                requirements: [
                    '‚Ä¢ Gesamte Lebensmittelkette ber√ºcksichtigen',
                    '‚Ä¢ HACCP-Prinzipien vollst√§ndig integrieren',
                    '‚Ä¢ Pr√§ventivprogramme (PRPs) implementieren',
                    '‚Ä¢ Gefahrenanalyse f√ºr alle Produktgruppen',
                    '‚Ä¢ R√ºckverfolgbarkeit und R√ºckrufverfahren'
                ],
                focusAreas: 'HACCP, PRPs, Gefahrenanalyse, Monitoring, Verifizierung, Validierung'
            }
        };
        
        if (selectedStandard && scopeRequirements[selectedStandard]) {
            const req = scopeRequirements[selectedStandard];
            scopeRequirementsDiv.innerHTML = `
                <div class="scope-requirements-content">
                    <h5>${req.title}</h5>
                    <div class="requirements-section">
                        <h6>üéØ Wichtige Scope-Anforderungen:</h6>
                        <ul class="requirements-list">
                            ${req.requirements.map(r => `<li>${r}</li>`).join('')}
                        </ul>
                    </div>
                    <div class="focus-areas-section">
                        <h6>üîç Audit-Schwerpunkte:</h6>
                        <p class="focus-areas">${req.focusAreas}</p>
                    </div>
                </div>
            `;
        } else {
            scopeRequirementsDiv.innerHTML = '<p class="info-text">W√§hlen Sie einen Standard aus, um die spezifischen Scope-Anforderungen zu sehen.</p>';
        }
    }

    switchExchangeTab(tabName) {
        try {
            // Update tab buttons - nur innerhalb der exchange-tabs
            const exchangeContainer = document.querySelector('.exchange-tabs');
            if (!exchangeContainer) {
                console.error('Exchange tabs container not found');
                return;
            }

            // Update tab buttons
            exchangeContainer.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            const activeBtn = exchangeContainer.querySelector(`[data-tab="${tabName}"]`);
            if (activeBtn) {
                activeBtn.classList.add('active');
            } else {
                console.warn(`Tab button for "${tabName}" not found`);
            }

            // Update tab content - nur innerhalb der Audit Exchange Sektion
            const auditExchangeSection = document.getElementById('audit-exchange');
            if (auditExchangeSection) {
                auditExchangeSection.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                const activeContent = auditExchangeSection.querySelector(`#${tabName}-tab`);
                if (activeContent) {
                    activeContent.classList.add('active');
                } else {
                    console.warn(`Tab content for "${tabName}" not found`);
                }
            }

            // Update content when switching to overview
            if (tabName === 'overview') {
                this.updateOverview();
            }
            
            // Update content when switching to search
            if (tabName === 'search') {
                this.updateSearchResults();
            }

            console.log(`Successfully switched to exchange tab: ${tabName}`);
            
        } catch (error) {
            console.error('Error in switchExchangeTab:', error);
            this.showNotification('Fehler beim Wechseln der Registerkarte.', 'error');
        }
        
        // Update content when switching to my-requests
        if (tabName === 'my-requests') {
            this.updateMyRequests();
        }
        
        // Update content when switching to auditor-search
        if (tabName === 'auditor-search') {
            console.log('üîÑ Switching to auditor-search tab...');
            this.setupAdvancedAuditorSearch();
        }
    }

    submitAuditOffer() {
        try {
            const form = document.getElementById('offerForm');
            const formData = new FormData(form);
            const currentUser = this.getCurrentUser();
            const editingOfferId = form.dataset.editingOfferId;

            // T√úV-compliant authorization check
            if (!this.validatePermissions(currentUser, 'create_audit_offer')) {
                this.showNotification('Keine Berechtigung f√ºr diese Aktion.', 'error');
                return;
            }

            // Helper function to collect and sanitize checkbox values
            const getCheckboxValues = (name) => {
                const checkboxes = form.querySelectorAll(`input[name="${name}"]:checked`);
                return Array.from(checkboxes).map(cb => this.escapeHtml(cb.value));
            };

            // Collect and sanitize all form data
            const rawOfferData = {
                // Basic information
                title: this.escapeHtml(formData.get('auditTitle')),
                standard: this.escapeHtml(formData.get('auditStandard')),
                type: this.escapeHtml(formData.get('auditType')),
                location: this.escapeHtml(formData.get('location')) || 'Nicht angegeben',
                description: this.escapeHtml(formData.get('description')) || '',
                
                // Scope information
                auditScope: this.escapeHtml(formData.get('auditScope')) || '',
                processAreas: getCheckboxValues('processAreas'),
                
                // Audit details
                auditDuration: this.escapeHtml(formData.get('auditDuration')),
                teamSize: this.escapeHtml(formData.get('teamSize')),
                availableFrom: this.escapeHtml(formData.get('availableFrom')),
                availableUntil: this.escapeHtml(formData.get('availableUntil')),
                
                // Auditor qualifications
                leadAuditorCert: this.escapeHtml(formData.get('leadAuditorCert')),
                auditExperience: this.escapeHtml(formData.get('auditExperience')),
                industryExperience: getCheckboxValues('industryExperience'),
                
                // Additional audit details
                auditStartDate: this.escapeHtml(formData.get('auditStartDate')),
                auditEndDate: this.escapeHtml(formData.get('auditEndDate')),
                auditPurpose: this.escapeHtml(formData.get('auditPurpose')),
                certificationBody: this.escapeHtml(formData.get('certificationBody')),
                
                // Company information
                companyName: this.escapeHtml(formData.get('companyName')),
                companySize: this.escapeHtml(formData.get('companySize')),
                companyIndustry: this.escapeHtml(formData.get('companyIndustry')),
                numberOfSites: this.escapeHtml(formData.get('numberOfSites')),
                companyDescription: this.escapeHtml(formData.get('companyDescription')) || '',
                
                // Specific audit requirements
                currentCertStatus: this.escapeHtml(formData.get('currentCertStatus')),
                previousAudits: this.escapeHtml(formData.get('previousAudits')),
                lastAuditDate: this.escapeHtml(formData.get('lastAuditDate')),
                knownIssues: this.escapeHtml(formData.get('knownIssues')) || '',
                specialRequirements: getCheckboxValues('specialRequirements'),
                
                // Additional information
                deliverables: this.escapeHtml(formData.get('deliverables')) || ''
            };

            // T√úV-compliant input validation
            const validationErrors = this.validateOfferData(rawOfferData);
            if (validationErrors.length > 0) {
                this.showNotification(`Validierungsfehler: ${validationErrors.join(', ')}`, 'error');
                return;
            }

            // Pr√ºfe ob wir ein existierendes Angebot bearbeiten oder ein neues erstellen
            if (editingOfferId) {
                // Bearbeite existierendes Angebot
                const existingOffer = this.auditExchanges.find(o => o.id === editingOfferId);
                
                if (!existingOffer) {
                    this.showNotification('Angebot nicht gefunden.', 'error');
                    return;
                }

                // Enhanced authorization check for editing
                if (existingOffer.offeredBy !== currentUser.id && !this.validatePermissions(currentUser, 'edit_all_offers')) {
                    this.showNotification('Sie k√∂nnen nur Ihre eigenen Angebote bearbeiten.', 'error');
                    return;
                }

                // Sichere Aktualisierung der Angebotsdaten
                Object.keys(rawOfferData).forEach(key => {
                    existingOffer[key] = rawOfferData[key];
                });
                existingOffer.updatedAt = new Date().toISOString();
                existingOffer.updatedBy = currentUser.id;

                // Speichere in localStorage mit Fehlerbehandlung
                try {
                    localStorage.setItem('qhse_audit_exchanges', JSON.stringify(this.auditExchanges));
                } catch (e) {
                    console.error('Storage error:', e);
                    this.showNotification('Fehler beim Speichern der Daten.', 'error');
                    return;
                }

                // Reset form und wechsle zur √úbersicht
                form.reset();
                delete form.dataset.editingOfferId;
                
                // Setze Submit-Button-Text zur√ºck
                const submitButton = form.querySelector('button[type="submit"]');
                if (submitButton) {
                    submitButton.textContent = 'Angebot erstellen';
                }
                
                this.switchExchangeTab('overview');
                
                // Update √úbersicht
                this.updateOverview();
                
                // Sichere Erfolg-Nachricht
                this.showNotification('Audit-Angebot erfolgreich aktualisiert!', 'success');
                
                console.log('Audit offer updated:', existingOffer);
            } else {
                // Erstelle neues Audit-Angebot
                const newOffer = {
                    id: Date.now().toString(),
                    ...rawOfferData,
                    offeredBy: currentUser.id,
                    offeredByName: this.escapeHtml(currentUser.displayName || currentUser.name),
                    createdAt: new Date().toISOString(),
                    status: 'available'
                };

                // F√ºge Angebot hinzu
                this.auditExchanges.push(newOffer);
                
                // Speichere in localStorage mit Fehlerbehandlung
                try {
                    localStorage.setItem('qhse_audit_exchanges', JSON.stringify(this.auditExchanges));
                } catch (e) {
                    console.error('Storage error:', e);
                    this.showNotification('Fehler beim Speichern der Daten.', 'error');
                    return;
                }

                // Reset form und wechsle zur √úbersicht
                form.reset();
                this.switchExchangeTab('overview');
                
                // Update √úbersicht
                this.updateOverview();
                
                // Sichere Erfolg-Nachricht
                this.showNotification('Audit-Angebot erfolgreich erstellt!', 'success');
                
                console.log('New audit offer created:', newOffer);
            }
        } catch (error) {
            console.error('Error in submitAuditOffer:', error);
            this.showNotification('Ein unerwarteter Fehler ist aufgetreten.', 'error');
        }
    }

    updateOverview() {
        const currentUser = this.getCurrentUser();
        
        // Filtere meine Angebote
        const myOffers = this.auditExchanges.filter(offer => offer.offeredBy === currentUser.id);
        
        // Calculate statistics
        const totalAuditors = this.auditors ? this.auditors.filter(a => a.status === 'Aktiv').length : 0;
        const sentRequests = this.exchangeRequests ? this.exchangeRequests.filter(req => req.senderId === currentUser.id && req.status === 'pending').length : 0;
        const receivedRequests = this.exchangeRequests ? this.exchangeRequests.filter(req => req.receiverId === currentUser.id && req.status === 'pending').length : 0;
        const pendingRequests = sentRequests + receivedRequests;
        
        // Update all statistics
        const totalOffersElement = document.getElementById('totalOffersCount');
        const totalExchangesElement = document.getElementById('totalExchangesCount');
        const totalAuditorsElement = document.getElementById('totalAuditorsCountDashboard');
        const pendingRequestsElement = document.getElementById('pendingRequestsCount');
        
        if (totalOffersElement) {
            totalOffersElement.textContent = myOffers.length;
        }
        if (totalExchangesElement) {
            totalExchangesElement.textContent = this.auditExchanges.length;
        }
        if (totalAuditorsElement) {
            totalAuditorsElement.textContent = totalAuditors;
        }
        if (pendingRequestsElement) {
            pendingRequestsElement.textContent = pendingRequests;
        }

        // Update Angebotsliste
        const myOffersListElement = document.getElementById('myOffersList');
        if (myOffersListElement) {
            if (myOffers.length === 0) {
                // Keep the existing no-offers-state structure from HTML
                const existingNoOffersState = myOffersListElement.querySelector('.no-offers-state');
                if (!existingNoOffersState) {
                    myOffersListElement.innerHTML = `
                        <div class="no-offers-state">
                            <div class="empty-state-icon">
                                <i class="fas fa-clipboard"></i>
                            </div>
                            <h4>Noch keine Angebote</h4>
                            <p>Erstellen Sie Ihr erstes Audit-Angebot und beginnen Sie zu vernetzen</p>
                            <button class="btn btn-primary" onclick="qhseDashboard.switchExchangeTab('offer')">
                                <i class="fas fa-plus-circle"></i>
                                Erstes Angebot erstellen
                            </button>
                        </div>
                    `;
                }
            } else {
                myOffersListElement.innerHTML = myOffers.map(offer => `
                    <div class="offer-card">
                        <h4>${offer.title}</h4>
                        
                        <!-- Basic Information -->
                        <div class="offer-section">
                            <h5><i class="fas fa-info-circle"></i> Grundlegende Informationen</h5>
                            <div class="offer-details">
                                <div class="offer-detail">
                                    <strong>Standard:</strong> <span>${offer.standard}</span>
                                </div>
                                <div class="offer-detail">
                                    <strong>Typ:</strong> <span>${offer.type}</span>
                                </div>
                                <div class="offer-detail">
                                    <strong>Standort:</strong> <span>${offer.location}</span>
                                </div>
                                <div class="offer-detail">
                                    <strong>Erstellt:</strong> <span>${new Date(offer.createdAt).toLocaleDateString('de-DE')}</span>
                                </div>
                            </div>
                        </div>

                        <!-- Scope Information -->
                        ${offer.auditScope || offer.processAreas ? `
                        <div class="offer-section">
                            <h5><i class="fas fa-clipboard-list"></i> Audit-Scope</h5>
                            ${offer.auditScope ? `<p class="scope-description">${offer.auditScope}</p>` : ''}
                            ${offer.processAreas && offer.processAreas.length > 0 ? `
                                <div class="process-areas">
                                    <strong>Prozessbereiche:</strong> 
                                    <span class="process-tags">
                                        ${offer.processAreas.map(area => `<span class="process-tag">${area}</span>`).join('')}
                                    </span>
                                </div>
                            ` : ''}
                        </div>
                        ` : ''}

                        <!-- Audit Details -->
                        ${offer.auditDuration || offer.teamSize || offer.availableFrom ? `
                        <div class="offer-section">
                            <h5><i class="fas fa-calendar-alt"></i> Audit-Details</h5>
                            <div class="offer-details">
                                ${offer.auditDuration ? `
                                    <div class="offer-detail">
                                        <strong>Dauer:</strong> <span>${offer.auditDuration} ${offer.auditDuration === '1' ? 'Tag' : 'Tage'}</span>
                                    </div>
                                ` : ''}
                                ${offer.teamSize ? `
                                    <div class="offer-detail">
                                        <strong>Team-Gr√∂√üe:</strong> <span>${offer.teamSize}</span>
                                    </div>
                                ` : ''}
                                ${offer.availableFrom ? `
                                    <div class="offer-detail">
                                        <strong>Verf√ºgbar ab:</strong> <span>${new Date(offer.availableFrom).toLocaleDateString('de-DE')}</span>
                                    </div>
                                ` : ''}
                                ${offer.availableUntil ? `
                                    <div class="offer-detail">
                                        <strong>Verf√ºgbar bis:</strong> <span>${new Date(offer.availableUntil).toLocaleDateString('de-DE')}</span>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                        ` : ''}

                        <!-- Qualifications -->
                        ${offer.leadAuditorCert || offer.auditExperience || (offer.industryExperience && offer.industryExperience.length > 0) ? `
                        <div class="offer-section">
                            <h5><i class="fas fa-certificate"></i> Qualifikationen</h5>
                            <div class="offer-details">
                                ${offer.leadAuditorCert ? `
                                    <div class="offer-detail">
                                        <strong>Zertifizierung:</strong> <span>${offer.leadAuditorCert}</span>
                                    </div>
                                ` : ''}
                                ${offer.auditExperience ? `
                                    <div class="offer-detail">
                                        <strong>Erfahrung:</strong> <span>${offer.auditExperience}</span>
                                    </div>
                                ` : ''}
                            </div>
                            ${offer.industryExperience && offer.industryExperience.length > 0 ? `
                                <div class="industry-experience">
                                    <strong>Branchenerfahrung:</strong>
                                    <span class="industry-tags">
                                        ${offer.industryExperience.map(industry => `<span class="industry-tag">${industry}</span>`).join('')}
                                    </span>
                                </div>
                            ` : ''}
                        </div>
                        ` : ''}

                        <!-- Additional Information -->
                        ${offer.description || offer.deliverables ? `
                        <div class="offer-section">
                            <h5><i class="fas fa-info"></i> Zus√§tzliche Informationen</h5>
                            ${offer.description ? `<p><strong>Beschreibung:</strong> ${offer.description}</p>` : ''}
                            ${offer.deliverables ? `<p><strong>Liefergegenst√§nde:</strong> ${offer.deliverables}</p>` : ''}
                        </div>
                        ` : ''}

                        <div class="offer-actions">
                            <button onclick="qhseDashboard.editOffer('${offer.id}')" class="btn-secondary btn-sm">
                                <i class="fas fa-edit"></i> Bearbeiten
                            </button>
                            <button onclick="qhseDashboard.deleteOffer('${offer.id}')" class="btn-danger btn-sm">
                                <i class="fas fa-trash"></i> L√∂schen
                            </button>
                        </div>
                    </div>
                `).join('');
            }
        }
    }

    // T√úV-konforme Sicherheits- und Validierungsmethoden
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    sanitizeInput(input, maxLength = 1000) {
        if (typeof input !== 'string') return '';
        return input.trim().slice(0, maxLength);
    }

    validateOfferData(data) {
        const errors = [];
        
        // Pflichtfelder validieren
        if (!data.title || data.title.trim().length < 3) {
            errors.push('Audit-Titel muss mindestens 3 Zeichen lang sein');
        }
        
        if (!data.standard || data.standard.trim().length === 0) {
            errors.push('Standard/Norm ist erforderlich');
        }
        
        if (!data.type || data.type.trim().length === 0) {
            errors.push('Audit-Typ ist erforderlich');
        }
        
        if (!data.location || data.location.trim().length < 2) {
            errors.push('Standort muss mindestens 2 Zeichen lang sein');
        }
        
        // L√§ngenbeschr√§nkungen pr√ºfen
        if (data.title && data.title.length > 200) {
            errors.push('Audit-Titel darf maximal 200 Zeichen lang sein');
        }
        
        if (data.auditScope && data.auditScope.length > 2000) {
            errors.push('Audit-Scope darf maximal 2000 Zeichen lang sein');
        }
        
        if (data.description && data.description.length > 3000) {
            errors.push('Beschreibung darf maximal 3000 Zeichen lang sein');
        }
        
        // Datentyp-Validierung
        if (data.auditDuration && !this.isValidDuration(data.auditDuration)) {
            errors.push('Ung√ºltige Audit-Dauer angegeben');
        }
        
        if (data.teamSize && !this.isValidTeamSize(data.teamSize)) {
            errors.push('Ung√ºltige Team-Gr√∂√üe angegeben');
        }
        
        // Datum-Validierung
        if (data.availableFrom && !this.isValidDate(data.availableFrom)) {
            errors.push('Ung√ºltiges "Verf√ºgbar ab" Datum');
        }
        
        if (data.availableUntil && !this.isValidDate(data.availableUntil)) {
            errors.push('Ung√ºltiges "Verf√ºgbar bis" Datum');
        }
        
        // Cross-Validierung
        if (data.availableFrom && data.availableUntil) {
            const fromDate = new Date(data.availableFrom);
            const untilDate = new Date(data.availableUntil);
            
            if (fromDate >= untilDate) {
                errors.push('"Verf√ºgbar bis" muss nach "Verf√ºgbar ab" liegen');
            }
        }
        
        return errors;
    }

    validateAuditorData(data) {
        const errors = [];
        
        // Required field validation
        if (!data.firstName || data.firstName.trim().length < 2) {
            errors.push('Vorname muss mindestens 2 Zeichen lang sein');
        }
        
        if (!data.lastName || data.lastName.trim().length < 2) {
            errors.push('Nachname muss mindestens 2 Zeichen lang sein');
        }
        
        if (!data.email || !this.isValidEmail(data.email)) {
            errors.push('G√ºltige E-Mail-Adresse erforderlich');
        }
        
        if (!data.city || data.city.trim().length < 2) {
            errors.push('Stadt muss mindestens 2 Zeichen lang sein');
        }
        
        if (!data.country || data.country.trim().length < 2) {
            errors.push('Land muss mindestens 2 Zeichen lang sein');
        }
        
        if (!data.certification || data.certification.trim().length < 2) {
            errors.push('Zertifizierung muss angegeben werden');
        }
        
        if (!data.experience) {
            errors.push('Erfahrung muss angegeben werden');
        }
        
        if (!data.availability) {
            errors.push('Verf√ºgbarkeit muss angegeben werden');
        }
        
        if (!data.status) {
            errors.push('Status muss angegeben werden');
        }
        
        // Length validation
        if (data.firstName && data.firstName.length > 50) {
            errors.push('Vorname darf nicht l√§nger als 50 Zeichen sein');
        }
        
        if (data.lastName && data.lastName.length > 50) {
            errors.push('Nachname darf nicht l√§nger als 50 Zeichen sein');
        }
        
        if (data.email && data.email.length > 100) {
            errors.push('E-Mail-Adresse darf nicht l√§nger als 100 Zeichen sein');
        }
        
        if (data.city && data.city.length > 50) {
            errors.push('Stadt darf nicht l√§nger als 50 Zeichen sein');
        }
        
        if (data.country && data.country.length > 50) {
            errors.push('Land darf nicht l√§nger als 50 Zeichen sein');
        }
        
        if (data.notes && data.notes.length > 1000) {
            errors.push('Notizen d√ºrfen nicht l√§nger als 1000 Zeichen sein');
        }
        
        // Phone validation if provided
        if (data.phone && data.phone.trim() !== '') {
            const phoneRegex = /^[+]?[\d\s\-\(\)\.]{7,20}$/;
            if (!phoneRegex.test(data.phone)) {
                errors.push('Ung√ºltiges Telefonnummer-Format');
            }
        }
        
        // Array validation
        if (!data.standards || data.standards.length === 0) {
            errors.push('Mindestens ein Standard muss ausgew√§hlt werden');
        }
        
        if (data.standards && data.standards.length > 15) {
            errors.push('Zu viele Standards ausgew√§hlt (maximal 15)');
        }
        
        if (!data.industries || data.industries.length === 0) {
            errors.push('Mindestens eine Branche muss ausgew√§hlt werden');
        }
        
        if (data.industries && data.industries.length > 15) {
            errors.push('Zu viele Branchen ausgew√§hlt (maximal 15)');
        }
        
        // Name validation against common patterns
        const nameRegex = /^[a-zA-Z√§√∂√º√Ñ√ñ√ú√ü\s\-\.]{2,}$/;
        if (data.firstName && !nameRegex.test(data.firstName)) {
            errors.push('Vorname enth√§lt ung√ºltige Zeichen');
        }
        
        if (data.lastName && !nameRegex.test(data.lastName)) {
            errors.push('Nachname enth√§lt ung√ºltige Zeichen');
        }
        
        // City and country validation
        const locationRegex = /^[a-zA-Z√§√∂√º√Ñ√ñ√ú√ü\s\-\.]{2,}$/;
        if (data.city && !locationRegex.test(data.city)) {
            errors.push('Stadt enth√§lt ung√ºltige Zeichen');
        }
        
        if (data.country && !locationRegex.test(data.country)) {
            errors.push('Land enth√§lt ung√ºltige Zeichen');
        }
        
        return errors;
    }

    isValidDuration(duration) {
        const validDurations = ['0.5', '1', '1.5', '2', '3', '4', '5', 'mehr'];
        return validDurations.includes(duration);
    }

    isValidTeamSize(teamSize) {
        const validSizes = ['1', '2', '3', '4+'];
        return validSizes.includes(teamSize);
    }

    isValidDate(dateString) {
        const date = new Date(dateString);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        return date instanceof Date && 
               !isNaN(date) && 
               date >= today;
    }

    validatePermissions(user, action, resourceId = null) {
        try {
            // Enhanced authentication check
            const currentUser = user || this.getCurrentUser();
            
            if (!currentUser || !currentUser.id || !currentUser.role) {
                this.logSecurityEvent('AUTHENTICATION_FAILURE', { action, resourceId, user: 'undefined' });
                return false;
            }
            
            // Check if user account is active
            if (currentUser.status === 'deactivated' || currentUser.status === 'suspended') {
                this.logSecurityEvent('ACCESS_DENIED_INACTIVE_USER', { action, resourceId, userId: currentUser.id });
                return false;
            }
            
            let hasPermission = false;
            
            switch (action) {
                // Audit offer permissions
                case 'create_audit_offer':
                case 'create_offer':
                    hasPermission = this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'admin', 'root-admin']);
                    break;
                
                case 'edit_audit_offer':
                case 'edit_offer':
                    if (!resourceId) {
                        hasPermission = false;
                        break;
                    }
                    const offer = this.auditExchanges.find(o => o.id === resourceId);
                    hasPermission = offer && 
                           (offer.offeredBy === currentUser.id || this.hasRole(currentUser, ['admin', 'root-admin'])) && 
                           this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'admin', 'root-admin']);
                    break;
                
                case 'edit_all_offers':
                    hasPermission = this.hasRole(currentUser, ['admin', 'root-admin']);
                    break;
                
                case 'delete_audit_offer':
                case 'delete_offer':
                    if (!resourceId) {
                        hasPermission = false;
                        break;
                    }
                    const offerToDelete = this.auditExchanges.find(o => o.id === resourceId);
                    hasPermission = offerToDelete && 
                           (offerToDelete.offeredBy === currentUser.id || this.hasRole(currentUser, ['admin', 'root-admin']));
                    break;
                
                case 'view_audit_offers':
                case 'view_offers':
                    hasPermission = this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'mitarbeiter', 'techniker', 'admin', 'root-admin']);
                    break;
                
                // Auditor management permissions
                case 'create_auditor':
                    hasPermission = this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'qhse', 'admin', 'root-admin']);
                    break;
                
                case 'edit_auditor':
                    if (!resourceId) {
                        hasPermission = false;
                        break;
                    }
                    const auditor = this.auditors.find(a => a.id === resourceId);
                    hasPermission = auditor && 
                           (auditor.createdBy === currentUser.id || this.hasRole(currentUser, ['admin', 'root-admin'])) &&
                           this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'qhse', 'admin', 'root-admin']);
                    break;
                
                case 'delete_auditor':
                    hasPermission = this.hasRole(currentUser, ['admin', 'root-admin']);
                    break;
                
                case 'view_auditors':
                    hasPermission = this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'admin', 'root-admin']);
                    break;
                
                // User management permissions
                case 'create_user':
                case 'edit_user':
                case 'delete_user':
                case 'view_users':
                    hasPermission = this.hasRole(currentUser, ['admin', 'root-admin']);
                    break;
                
                // Document management permissions
                case 'upload_document':
                    hasPermission = this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'qhse', 'admin', 'root-admin']);
                    break;
                
                case 'delete_document':
                    hasPermission = this.hasRole(currentUser, ['qhse', 'admin', 'root-admin']);
                    break;
                
                // System administration
                case 'system_settings':
                case 'manage_areas':
                case 'manage_departments':
                    hasPermission = this.hasRole(currentUser, ['admin', 'root-admin']);
                    break;
                
                // Time tracking permissions
                case 'view_own_time':
                    hasPermission = true; // All authenticated users can view their own time
                    break;
                
                case 'view_all_time':
                case 'edit_any_time':
                    hasPermission = this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'admin', 'root-admin']);
                    break;
                
                // Machine management permissions
                case 'manage_machines':
                    hasPermission = this.hasRole(currentUser, ['betriebsleiter', 'techniker', 'admin', 'root-admin']);
                    break;
                
                case 'view_machine_reports':
                    hasPermission = this.hasRole(currentUser, ['geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter', 'admin', 'root-admin']);
                    break;
                
                default:
                    hasPermission = false;
                    this.logSecurityEvent('UNKNOWN_PERMISSION_CHECK', { action, resourceId, userId: currentUser.id });
                    break;
            }
            
            // Log the permission check for audit trail
            this.logSecurityEvent(hasPermission ? 'PERMISSION_GRANTED' : 'PERMISSION_DENIED', {
                action,
                resourceId,
                userId: currentUser.id,
                userRole: currentUser.role,
                timestamp: new Date().toISOString()
            });
            
            return hasPermission;
            
        } catch (error) {
            console.error('Error in validatePermissions:', error);
            this.logSecurityEvent('PERMISSION_CHECK_ERROR', { action, resourceId, error: error.message });
            return false;
        }
    }

    hasRole(user, allowedRoles) {
        return allowedRoles.includes(user.role);
    }

    logSecurityEvent(eventType, details = {}) {
        try {
            const securityLog = {
                timestamp: new Date().toISOString(),
                eventType: this.escapeHtml(eventType),
                userId: details.userId || 'unknown',
                userRole: details.userRole || 'unknown',
                action: this.escapeHtml(details.action || 'unknown'),
                resourceId: this.escapeHtml(details.resourceId || ''),
                sessionId: this.getSessionId(),
                ipAddress: this.getClientIP(),
                userAgent: navigator.userAgent ? this.escapeHtml(navigator.userAgent.substring(0, 200)) : 'unknown',
                details: this.escapeHtml(JSON.stringify(details).substring(0, 500))
            };

            // Store security logs in localStorage (in production, this should go to a secure server)
            let securityLogs = JSON.parse(localStorage.getItem('qhse_security_logs') || '[]');
            
            // Keep only the last 1000 log entries to prevent localStorage bloat
            if (securityLogs.length >= 1000) {
                securityLogs = securityLogs.slice(-900);
            }
            
            securityLogs.push(securityLog);
            localStorage.setItem('qhse_security_logs', JSON.stringify(securityLogs));

            // For critical security events, also log to console
            if (['AUTHENTICATION_FAILURE', 'PERMISSION_DENIED', 'PERMISSION_CHECK_ERROR', 'ACCESS_DENIED_INACTIVE_USER'].includes(eventType)) {
                console.warn('üîí Security Event:', eventType, details);
            }

        } catch (error) {
            console.error('Failed to log security event:', error);
        }
    }

    getSessionId() {
        // Generate or retrieve session ID for tracking
        let sessionId = sessionStorage.getItem('qhse_session_id');
        if (!sessionId) {
            sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('qhse_session_id', sessionId);
        }
        return sessionId;
    }

    getClientIP() {
        // In a real application, this would be handled server-side
        // For client-side demo, we return a placeholder
        return 'client_side_unavailable';
    }

    isValidEmail(email) {
        if (!email || typeof email !== 'string') return false;
        
        // Enhanced email validation regex
        const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
        
        return emailRegex.test(email) && email.length <= 254;
    }

    showSuccessMessage(message) {
        this.showNotification(message, 'success');
    }

    showErrorMessage(message) {
        this.showNotification(message, 'error');
    }

    showNotification(message, type = 'info', duration = 5000) {
        try {
            // T√úV-compliant notification with proper security measures
            const container = document.getElementById('notificationContainer') || this.createNotificationContainer();
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            
            // Get appropriate icon for notification type
            const icons = {
                success: 'fas fa-check-circle',
                error: 'fas fa-exclamation-circle',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };
            
            // Secure HTML structure with escaped content
            notification.innerHTML = `
                <i class="notification-icon ${icons[type] || icons.info}"></i>
                <div class="notification-message">${this.escapeHtml(message)}</div>
                <button class="notification-close" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            // Add click-to-dismiss functionality
            notification.addEventListener('click', () => {
                this.removeNotification(notification);
            });
            
            container.appendChild(notification);
            
            // Auto-remove after specified duration
            setTimeout(() => {
                this.removeNotification(notification);
            }, duration);
            
            // Log notification for audit trail
            this.logSecurityEvent('NOTIFICATION_SHOWN', {
                type,
                message: message.substring(0, 100), // Limit log message length
                duration
            });
            
        } catch (error) {
            console.error('Error showing notification:', error);
            // Fallback to alert if notification system fails
            alert(message);
        }
    }

    createNotificationContainer() {
        const container = document.createElement('div');
        container.id = 'notificationContainer';
        container.className = 'notification-container';
        document.body.appendChild(container);
        return container;
    }

    removeNotification(notification) {
        if (notification && notification.parentNode) {
            notification.classList.add('fade-out');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }
    }

    // Helper methods for enhanced UI
    getStandardBadgeClass(standard) {
        const standardMap = {
            'ISO 9001': 'iso-9001',
            'ISO 14001': 'iso-14001', 
            'ISO 45001': 'iso-45001',
            'IATF 16949': 'iatf-16949',
            'ISO 27001': 'iso-27001',
            'AS9100': 'as9100',
            'ISO 13485': 'iso-13485',
            'ISO 22000': 'iso-22000'
        };
        return standardMap[standard] || 'standard-default';
    }

    getRelativeTime(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffInMs = now - date;
        const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
        
        if (diffInDays === 0) return 'heute';
        if (diffInDays === 1) return 'gestern';
        if (diffInDays < 7) return `vor ${diffInDays} Tagen`;
        if (diffInDays < 30) return `vor ${Math.floor(diffInDays / 7)} Wochen`;
        return `vor ${Math.floor(diffInDays / 30)} Monaten`;
    }

    viewOfferDetails(offerId) {
        const offer = this.auditExchanges.find(o => o.id === offerId);
        if (!offer) return;

        const detailsHtml = `
üìã Audit-Angebot: ${offer.title}

üè¢ Grundlegende Informationen:
‚Ä¢ Standard: ${offer.standard}
‚Ä¢ Typ: ${offer.type}  
‚Ä¢ Standort: ${offer.location}

üìÖ Zeitraum:
‚Ä¢ Dauer: ${offer.auditDuration ? offer.auditDuration + (offer.auditDuration === '1' ? ' Tag' : ' Tage') : 'Flexibel'}
‚Ä¢ Team-Gr√∂√üe: ${offer.teamSize || 'Nach Bedarf'}
‚Ä¢ Verf√ºgbar ab: ${offer.availableFrom ? new Date(offer.availableFrom).toLocaleDateString('de-DE') : 'Flexibel'}

üéì Qualifikationen:
‚Ä¢ Zertifizierung: ${offer.leadAuditorCert || 'Nicht angegeben'}
‚Ä¢ Erfahrung: ${offer.auditExperience || 'Nicht angegeben'}

${offer.processAreas && offer.processAreas.length > 0 ? `üîß Prozessbereiche:\n${offer.processAreas.join(', ')}` : ''}

${offer.industryExperience && offer.industryExperience.length > 0 ? `üè≠ Branchenerfahrung:\n${offer.industryExperience.join(', ')}` : ''}

${offer.auditScope ? `üìã Audit-Scope:\n${offer.auditScope}` : ''}

üìÖ Erstellt: ${new Date(offer.createdAt).toLocaleDateString('de-DE')}
        `.trim();

        alert(detailsHtml);
    }

    updateSearchResults() {
        // Initial load - show message to use filters
        const searchResultsElement = document.getElementById('searchResultsList');
        if (searchResultsElement) {
            searchResultsElement.innerHTML = '<p class="no-offers">Verwenden Sie die Filter oben, um nach Audits zu suchen</p>';
        }
    }

    applyFilters() {
        const currentUser = this.getCurrentUser();
        
        // Get filter values
        const filterStandard = document.getElementById('filterStandard').value;
        const filterType = document.getElementById('filterType').value;
        const filterLocation = document.getElementById('filterLocation').value.toLowerCase();

        // Filtere verf√ºgbare Audits (nicht meine eigenen)
        let availableAudits = this.auditExchanges.filter(offer => 
            offer.offeredBy !== currentUser.id && offer.status === 'available'
        );

        // Apply filters
        if (filterStandard) {
            availableAudits = availableAudits.filter(offer => offer.standard === filterStandard);
        }
        if (filterType) {
            availableAudits = availableAudits.filter(offer => offer.type === filterType);
        }
        if (filterLocation) {
            availableAudits = availableAudits.filter(offer => 
                offer.location.toLowerCase().includes(filterLocation)
            );
        }

        const searchResultsElement = document.getElementById('searchResultsList');
        if (searchResultsElement) {
            if (availableAudits.length === 0) {
                searchResultsElement.innerHTML = '<p class="no-offers">Keine Audit-Tauschb√∂rsen entsprechen den gew√§hlten Filtern.</p>';
            } else {
                searchResultsElement.innerHTML = `
                    <p style="color: var(--text-secondary); margin-bottom: 1rem;">
                        <i class="fas fa-info-circle"></i> ${availableAudits.length} Ergebnis${availableAudits.length !== 1 ? 'se' : ''} gefunden
                    </p>
                    ${availableAudits.map(offer => `
                        <div class="offer-card">
                            <h4>${offer.title}</h4>
                            
                            <!-- Basic Information -->
                            <div class="offer-section">
                                <h5><i class="fas fa-info-circle"></i> Grundlegende Informationen</h5>
                                <div class="offer-details">
                                    <div class="offer-detail">
                                        <strong>Anbieter:</strong> <span>${offer.offeredByName}</span>
                                    </div>
                                    <div class="offer-detail">
                                        <strong>Standard:</strong> <span>${offer.standard}</span>
                                    </div>
                                    <div class="offer-detail">
                                        <strong>Typ:</strong> <span>${offer.type}</span>
                                    </div>
                                    <div class="offer-detail">
                                        <strong>Standort:</strong> <span>${offer.location}</span>
                                    </div>
                                    <div class="offer-detail">
                                        <strong>Erstellt:</strong> <span>${new Date(offer.createdAt).toLocaleDateString('de-DE')}</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Scope Information -->
                            ${offer.auditScope || offer.processAreas ? `
                            <div class="offer-section">
                                <h5><i class="fas fa-clipboard-list"></i> Audit-Scope</h5>
                                ${offer.auditScope ? `<p class="scope-description">${offer.auditScope}</p>` : ''}
                                ${offer.processAreas && offer.processAreas.length > 0 ? `
                                    <div class="process-areas">
                                        <strong>Prozessbereiche:</strong> 
                                        <span class="process-tags">
                                            ${offer.processAreas.map(area => `<span class="process-tag">${area}</span>`).join('')}
                                        </span>
                                    </div>
                                ` : ''}
                            </div>
                            ` : ''}

                            <!-- Audit Details -->
                            ${offer.auditDuration || offer.teamSize || offer.availableFrom ? `
                            <div class="offer-section">
                                <h5><i class="fas fa-calendar-alt"></i> Audit-Details</h5>
                                <div class="offer-details">
                                    ${offer.auditDuration ? `
                                        <div class="offer-detail">
                                            <strong>Dauer:</strong> <span>${offer.auditDuration} ${offer.auditDuration === '1' ? 'Tag' : 'Tage'}</span>
                                        </div>
                                    ` : ''}
                                    ${offer.teamSize ? `
                                        <div class="offer-detail">
                                            <strong>Team-Gr√∂√üe:</strong> <span>${offer.teamSize}</span>
                                        </div>
                                    ` : ''}
                                    ${offer.availableFrom ? `
                                        <div class="offer-detail">
                                            <strong>Verf√ºgbar ab:</strong> <span>${new Date(offer.availableFrom).toLocaleDateString('de-DE')}</span>
                                        </div>
                                    ` : ''}
                                    ${offer.availableUntil ? `
                                        <div class="offer-detail">
                                            <strong>Verf√ºgbar bis:</strong> <span>${new Date(offer.availableUntil).toLocaleDateString('de-DE')}</span>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                            ` : ''}

                            <!-- Qualifications -->
                            ${offer.leadAuditorCert || offer.auditExperience || (offer.industryExperience && offer.industryExperience.length > 0) ? `
                            <div class="offer-section">
                                <h5><i class="fas fa-certificate"></i> Qualifikationen</h5>
                                <div class="offer-details">
                                    ${offer.leadAuditorCert ? `
                                        <div class="offer-detail">
                                            <strong>Zertifizierung:</strong> <span>${offer.leadAuditorCert}</span>
                                        </div>
                                    ` : ''}
                                    ${offer.auditExperience ? `
                                        <div class="offer-detail">
                                            <strong>Erfahrung:</strong> <span>${offer.auditExperience}</span>
                                        </div>
                                    ` : ''}
                                </div>
                                ${offer.industryExperience && offer.industryExperience.length > 0 ? `
                                    <div class="industry-experience">
                                        <strong>Branchenerfahrung:</strong>
                                        <span class="industry-tags">
                                            ${offer.industryExperience.map(industry => `<span class="industry-tag">${industry}</span>`).join('')}
                                        </span>
                                    </div>
                                ` : ''}
                            </div>
                            ` : ''}

                            <!-- Additional Information -->
                            ${offer.description || offer.deliverables ? `
                            <div class="offer-section">
                                <h5><i class="fas fa-info"></i> Zus√§tzliche Informationen</h5>
                                ${offer.description ? `<p><strong>Beschreibung:</strong> ${offer.description}</p>` : ''}
                                ${offer.deliverables ? `<p><strong>Liefergegenst√§nde:</strong> ${offer.deliverables}</p>` : ''}
                            </div>
                            ` : ''}

                            <div class="form-actions">
                                <button class="btn-primary" onclick="qhseDashboard.showInterest('${offer.id}')">
                                    <i class="fas fa-handshake"></i>
                                    Interesse bekunden
                                </button>
                            </div>
                        </div>
                    `).join('')}
                `;
            }
        }
    }

    clearFilters() {
        document.getElementById('filterStandard').value = '';
        document.getElementById('filterType').value = '';
        document.getElementById('filterLocation').value = '';
        
        const searchResultsElement = document.getElementById('searchResultsList');
        if (searchResultsElement) {
            searchResultsElement.innerHTML = '<p class="no-offers">Verwenden Sie die Filter oben, um nach Audits zu suchen</p>';
        }
    }

    searchAuditors() {
        console.log('üîç Searching for auditors...');
        
        // Get filter values with error handling
        const standardFilter = document.getElementById('auditorStandardFilter')?.value || '';
        const locationFilter = document.getElementById('auditorLocationFilter')?.value.toLowerCase() || '';
        const certificationFilter = document.getElementById('auditorCertificationFilter')?.value || '';
        const experienceFilter = document.getElementById('auditorExperienceFilter')?.value || '';
        const industryFilter = document.getElementById('auditorIndustryFilter')?.value || '';
        const availabilityFilter = document.getElementById('auditorAvailabilityFilter')?.value || '';
        
        // Check if we have any auditors to search through
        if (!this.auditors || this.auditors.length === 0) {
            const resultsList = document.getElementById('auditorSearchResultsList');
            if (resultsList) {
                resultsList.innerHTML = '<p class="no-offers">Aktuell sind keine Auditoren verf√ºgbar.</p>';
            }
            return;
        }

        // Filter auditors based on their profiles
        let filteredAuditors = this.auditors.filter(auditor => {
            let matches = true;

            // Filter by standard
            if (standardFilter && !auditor.standards.includes(standardFilter)) {
                matches = false;
            }

            // Filter by location (city or country)
            if (locationFilter && 
                !auditor.city.toLowerCase().includes(locationFilter) && 
                !auditor.country.toLowerCase().includes(locationFilter)) {
                matches = false;
            }

            // Filter by auditor certification
            if (certificationFilter && auditor.certification !== certificationFilter) {
                matches = false;
            }

            // Filter by experience
            if (experienceFilter && auditor.experience !== experienceFilter) {
                matches = false;
            }

            // Filter by industry experience
            if (industryFilter && !auditor.industries.includes(industryFilter)) {
                matches = false;
            }

            // Filter by availability
            if (availabilityFilter) {
                switch(availabilityFilter) {
                    case 'sofort':
                        if (auditor.availability !== 'Sofort verf√ºgbar') matches = false;
                        break;
                    case '1-4 wochen':
                        if (auditor.availability !== 'Innerhalb 1 Woche' && auditor.availability !== 'Innerhalb 1 Monat') matches = false;
                        break;
                    case '1-3 monate':
                        if (auditor.availability !== 'Innerhalb 1 Monat' && auditor.availability !== 'Nach Absprache') matches = false;
                        break;
                    case 'langfristig':
                        if (auditor.availability !== 'Nach Absprache') matches = false;
                        break;
                }
            }

            // Only show active auditors
            if (auditor.status !== 'Aktiv') {
                matches = false;
            }

            return matches;
        });

        // Display results
        const resultsList = document.getElementById('auditorSearchResultsList');
        if (resultsList) {
            if (filteredAuditors.length === 0) {
                resultsList.innerHTML = '<p class="no-offers">Keine Auditoren entsprechen den gew√§hlten Filtern.</p>';
            } else {
                resultsList.innerHTML = `
                    <p style="color: var(--text-secondary); margin-bottom: 1rem;">
                        <i class="fas fa-info-circle"></i> ${filteredAuditors.length} Auditor${filteredAuditors.length !== 1 ? 'en' : ''} gefunden
                    </p>
                    ${filteredAuditors.map(auditor => this.generateAuditorCard(auditor)).join('')}
                `;
            }
        }
    }

    generateAuditorCard(auditor) {
        return `
            <div class="auditor-card">
                <h4><i class="fas fa-user-tie"></i> ${auditor.firstName} ${auditor.lastName}</h4>
                
                <!-- Auditor Overview -->
                <div class="auditor-section">
                    <h5><i class="fas fa-info-circle"></i> Auditor-Profil</h5>
                    <div class="auditor-details">
                        <div class="auditor-detail">
                            <strong>Standards:</strong> 
                            <span>${auditor.standards.join(', ')}</span>
                        </div>
                        <div class="auditor-detail">
                            <strong>Standort:</strong> <span>${auditor.city}, ${auditor.country}</span>
                        </div>
                        <div class="auditor-detail">
                            <strong>Status:</strong> <span class="status-${auditor.status.toLowerCase().replace(' ', '-')}">${auditor.status}</span>
                        </div>
                    </div>
                </div>

                <!-- Qualifications -->
                <div class="auditor-section">
                    <h5><i class="fas fa-certificate"></i> Qualifikationen</h5>
                    <div class="auditor-details">
                        <div class="auditor-detail">
                            <strong>Zertifizierung:</strong> <span>${auditor.certification}</span>
                        </div>
                        <div class="auditor-detail">
                            <strong>Erfahrung:</strong> <span>${auditor.experience}</span>
                        </div>
                        <div class="auditor-detail">
                            <strong>Verf√ºgbarkeit:</strong> <span>${auditor.availability}</span>
                        </div>
                    </div>
                    ${auditor.industries && auditor.industries.length > 0 ? `
                        <div class="industry-experience">
                            <strong>Branchenerfahrung:</strong>
                            <span class="industry-tags">
                                ${auditor.industries.map(industry => `<span class="industry-tag">${industry}</span>`).join('')}
                            </span>
                        </div>
                    ` : ''}
                </div>

                <!-- Contact Information -->
                <div class="auditor-section">
                    <h5><i class="fas fa-contact-card"></i> Kontaktinformationen</h5>
                    <div class="auditor-details">
                        <div class="auditor-detail">
                            <strong>E-Mail:</strong> <span>${auditor.email}</span>
                        </div>
                        ${auditor.phone ? `
                        <div class="auditor-detail">
                            <strong>Telefon:</strong> <span>${auditor.phone}</span>
                        </div>
                        ` : ''}
                    </div>
                </div>

                <div class="auditor-actions">
                    <button class="btn-primary" onclick="qhseDashboard.viewAuditorProfile('${auditor.id}')">
                        <i class="fas fa-eye"></i>
                        Profil anzeigen
                    </button>
                    <button class="btn-secondary" onclick="qhseDashboard.contactAuditor('${auditor.id}')">
                        <i class="fas fa-envelope"></i>
                        Kontaktieren
                    </button>
                </div>
            </div>
        `;
    }

    viewAuditorProfile(auditorId) {
        // Find the auditor in our auditors database
        const auditor = this.auditors.find(a => a.id === auditorId);
        
        if (!auditor) {
            alert('Auditor nicht gefunden.');
            return;
        }

        // Display detailed profile information
        const profileInfo = `
üìã Auditor-Profil: ${auditor.firstName} ${auditor.lastName}

üë§ Pers√∂nliche Informationen:
‚Ä¢ E-Mail: ${auditor.email}
‚Ä¢ Telefon: ${auditor.phone || 'Nicht angegeben'}
‚Ä¢ Standort: ${auditor.city}, ${auditor.country}

üéì Qualifikationen:
‚Ä¢ Zertifizierung: ${auditor.certification}
‚Ä¢ Erfahrung: ${auditor.experience}
‚Ä¢ Standards: ${auditor.standards.join(', ')}

üè≠ Branchenerfahrung:
${auditor.industries.join(', ')}

üìÖ Verf√ºgbarkeit:
‚Ä¢ Status: ${auditor.status}
‚Ä¢ Verf√ºgbarkeit: ${auditor.availability}

${auditor.notes ? `üìù Notizen:\n${auditor.notes}` : ''}

üìÖ Registriert: ${new Date(auditor.createdAt).toLocaleDateString('de-DE')}
        `.trim();
        
        alert(profileInfo);
    }

    contactAuditor(auditorId) {
        // Find the auditor in our auditors database
        const auditor = this.auditors.find(a => a.id === auditorId);
        
        if (!auditor) {
            alert('Auditor nicht gefunden.');
            return;
        }
        
        const auditorName = `${auditor.firstName} ${auditor.lastName}`;
        
        const message = prompt(`üìß Nachricht an ${auditorName}:\n\nBitte geben Sie Ihre Nachricht ein:`);
        if (message) {
            alert(`‚úÖ Ihre Nachricht wurde an ${auditorName} gesendet!\n\nKontaktdaten:\n‚Ä¢ E-Mail: ${auditor.email}\n‚Ä¢ Telefon: ${auditor.phone || 'Nicht verf√ºgbar'}\n\nNachricht: "${message}"\n\nDer Auditor wird sich mit Ihnen in Verbindung setzen.`);
            console.log(`Message sent to ${auditorName} (${auditor.email}): ${message}`);
        }
    }

    generateOfferCard(offer) {
        // Verwende die bestehende Template-Logik f√ºr Konsistenz
        return `
            <div class="offer-card">
                <h4>${offer.title}</h4>
                
                <!-- Basic Information -->
                <div class="offer-section">
                    <h5><i class="fas fa-info-circle"></i> Grundlegende Informationen</h5>
                    <div class="offer-details">
                        <div class="offer-detail">
                            <strong>Anbieter:</strong> <span>${offer.offeredByName}</span>
                        </div>
                        <div class="offer-detail">
                            <strong>Standard:</strong> <span>${offer.standard}</span>
                        </div>
                        <div class="offer-detail">
                            <strong>Typ:</strong> <span>${offer.type}</span>
                        </div>
                        <div class="offer-detail">
                            <strong>Standort:</strong> <span>${offer.location}</span>
                        </div>
                    </div>
                </div>

                <div class="form-actions">
                    <button class="btn-primary" onclick="qhseDashboard.showInterest('${offer.id}')">
                        <i class="fas fa-handshake"></i>
                        Interesse bekunden
                    </button>
                </div>
            </div>
        `;
    }

    clearAuditorFilters() {
        // Clear filter values with error handling
        const filterElements = [
            'auditorStandardFilter',
            'auditorLocationFilter', 
            'auditorCertificationFilter',
            'auditorExperienceFilter',
            'auditorIndustryFilter',
            'auditorAvailabilityFilter'
        ];
        
        filterElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                element.value = '';
            }
        });
        
        // Clear results
        const resultsList = document.getElementById('auditorSearchResultsList');
        if (resultsList) {
            resultsList.innerHTML = '<p class="no-offers">Verwenden Sie die Filter oben, um nach Auditoren zu suchen</p>';
        }
    }

    initializeAuditorSearch() {
        console.log('üîç Initializing auditor search tab...');
        
        // Check if we have any audit exchanges to search through
        const totalAuditors = this.auditExchanges.length;
        const resultsList = document.getElementById('auditorSearchResultsList');
        
        if (resultsList) {
            if (totalAuditors === 0) {
                resultsList.innerHTML = `
                    <p class="no-offers">
                        <i class="fas fa-info-circle"></i> 
                        Aktuell sind keine Auditoren verf√ºgbar. 
                        Schauen Sie sp√§ter wieder vorbei oder ermutigen Sie Kollegen, ihre Audit-Angebote zu ver√∂ffentlichen.
                    </p>
                `;
            } else {
                resultsList.innerHTML = `
                    <p class="no-offers">
                        <i class="fas fa-search"></i> 
                        Verwenden Sie die Filter oben, um nach Auditoren zu suchen.
                        <br><br>
                        <strong>${totalAuditors}</strong> Audit-Angebot${totalAuditors !== 1 ? 'e' : ''} verf√ºgbar zum Durchsuchen.
                    </p>
                `;
            }
        }
        
        // Ensure all filter elements are properly accessible
        const filterElements = [
            'auditorStandardFilter',
            'auditorLocationFilter', 
            'auditorCertificationFilter',
            'auditorExperienceFilter',
            'auditorIndustryFilter',
            'auditorAvailabilityFilter'
        ];
        
        filterElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (!element) {
                console.warn(`‚ö†Ô∏è Missing auditor filter element: ${elementId}`);
            }
        });
    }

    showInterest(offerId) {
        const offer = this.auditExchanges.find(o => o.id === offerId);
        const currentUser = this.getCurrentUser();
        
        if (!offer) {
            alert('Angebot nicht gefunden.');
            return;
        }

        // Check if already requested
        if (!this.exchangeRequests) {
            this.exchangeRequests = this.loadExchangeRequestsFromStorage();
        }
        
        const existingRequest = this.exchangeRequests.find(req => 
            req.offerId === offerId && req.requestedBy === currentUser.id
        );

        if (existingRequest) {
            alert('Sie haben bereits Interesse an diesem Audit bekundet.');
            return;
        }

        const message = prompt(`M√∂chten Sie Interesse an "${offer.title}" bekunden?\n\nOptionale Nachricht an ${offer.offeredByName}:`);
        if (message !== null) {
            // Create new request
            const newRequest = {
                id: Date.now().toString(),
                offerId: offerId,
                requestedBy: currentUser.id,
                requestedByName: currentUser.displayName || currentUser.name,
                message: message || '',
                status: 'pending',
                createdAt: new Date().toISOString()
            };

            this.exchangeRequests.push(newRequest);
            this.saveExchangeRequestsToStorage();
            
            alert('‚úÖ Interesse erfolgreich bekundet!\n\nDer Anbieter wird √ºber Ihr Interesse informiert.');
            console.log('Interest shown for offer:', offer.id, 'Message:', message);
        }
    }

    deleteOffer(offerId) {
        // Best√§tigung vom Benutzer einholen
        if (!confirm('M√∂chten Sie dieses Audit-Angebot wirklich l√∂schen?')) {
            return;
        }

        // Pr√ºfe ob der Benutzer berechtigt ist (nur eigene Angebote l√∂schen)
        const currentUser = this.getCurrentUser();
        const offer = this.auditExchanges.find(o => o.id === offerId);
        
        if (!offer) {
            alert('‚ùå Angebot nicht gefunden.');
            return;
        }

        if (offer.offeredBy !== currentUser.id) {
            alert('‚ùå Sie k√∂nnen nur Ihre eigenen Angebote l√∂schen.');
            return;
        }

        // Pr√ºfe ob es aktive Anfragen f√ºr dieses Angebot gibt
        const activeRequests = this.exchangeRequests.filter(req => 
            req.offerId === offerId && req.status === 'pending'
        );

        if (activeRequests.length > 0) {
            if (!confirm(`‚ö†Ô∏è Es gibt ${activeRequests.length} aktive Anfrage(n) f√ºr dieses Angebot.\n\nWenn Sie das Angebot l√∂schen, werden alle Anfragen automatisch abgelehnt.\n\nM√∂chten Sie fortfahren?`)) {
                return;
            }
            
            // Lehne alle aktiven Anfragen ab
            activeRequests.forEach(request => {
                request.status = 'declined';
                request.declinedAt = new Date().toISOString();
            });
            
            this.saveExchangeRequestsToStorage();
        }

        // Entferne das Angebot aus der Liste
        this.auditExchanges = this.auditExchanges.filter(o => o.id !== offerId);
        
        // Speichere die aktualisierte Liste
        localStorage.setItem('qhse_audit_exchanges', JSON.stringify(this.auditExchanges));
        
        // Aktualisiere die √úbersicht
        this.updateOverview();
        
        alert('‚úÖ Angebot erfolgreich gel√∂scht!');
        console.log('Offer deleted:', offerId);
    }

    editOffer(offerId) {
        const currentUser = this.getCurrentUser();
        const offer = this.auditExchanges.find(o => o.id === offerId);
        
        if (!offer) {
            alert('‚ùå Angebot nicht gefunden.');
            return;
        }

        if (offer.offeredBy !== currentUser.id) {
            alert('‚ùå Sie k√∂nnen nur Ihre eigenen Angebote bearbeiten.');
            return;
        }

        // Pr√ºfe ob es aktive Anfragen f√ºr dieses Angebot gibt
        const activeRequests = this.exchangeRequests.filter(req => 
            req.offerId === offerId && req.status === 'pending'
        );

        if (activeRequests.length > 0) {
            if (!confirm(`‚ö†Ô∏è Es gibt ${activeRequests.length} aktive Anfrage(n) f√ºr dieses Angebot.\n\nWenn Sie das Angebot bearbeiten, k√∂nnten sich die Bedingungen f√ºr die Interessenten √§ndern.\n\nM√∂chten Sie fortfahren?`)) {
                return;
            }
        }

        // Wechsle zum Angebot-Tab
        this.switchExchangeTab('offer');
        
        // Helper function to set checkbox values
        const setCheckboxValues = (name, values) => {
            const checkboxes = document.querySelectorAll(`input[name="${name}"]`);
            checkboxes.forEach(checkbox => {
                checkbox.checked = values && values.includes(checkbox.value);
            });
        };
        
        // F√ºlle das Formular mit den aktuellen Werten
        // Basic information
        document.getElementById('auditTitle').value = offer.title || '';
        document.getElementById('auditStandard').value = offer.standard || '';
        document.getElementById('auditType').value = offer.type || '';
        document.getElementById('location').value = offer.location || '';
        document.getElementById('description').value = offer.description || '';
        
        // Scope information
        if (document.getElementById('auditScope')) {
            document.getElementById('auditScope').value = offer.auditScope || '';
        }
        if (offer.processAreas) {
            setCheckboxValues('processAreas', offer.processAreas);
        }
        
        // Audit details
        if (document.getElementById('auditDuration')) {
            document.getElementById('auditDuration').value = offer.auditDuration || '';
        }
        if (document.getElementById('teamSize')) {
            document.getElementById('teamSize').value = offer.teamSize || '';
        }
        if (document.getElementById('availableFrom')) {
            document.getElementById('availableFrom').value = offer.availableFrom || '';
        }
        if (document.getElementById('availableUntil')) {
            document.getElementById('availableUntil').value = offer.availableUntil || '';
        }
        
        // Auditor qualifications
        if (document.getElementById('leadAuditorCert')) {
            document.getElementById('leadAuditorCert').value = offer.leadAuditorCert || '';
        }
        if (document.getElementById('auditExperience')) {
            document.getElementById('auditExperience').value = offer.auditExperience || '';
        }
        if (offer.industryExperience) {
            setCheckboxValues('industryExperience', offer.industryExperience);
        }
        
        // Additional audit details
        if (document.getElementById('auditStartDate')) {
            document.getElementById('auditStartDate').value = offer.auditStartDate || '';
        }
        if (document.getElementById('auditEndDate')) {
            document.getElementById('auditEndDate').value = offer.auditEndDate || '';
        }
        if (document.getElementById('auditPurpose')) {
            document.getElementById('auditPurpose').value = offer.auditPurpose || '';
        }
        if (document.getElementById('certificationBody')) {
            document.getElementById('certificationBody').value = offer.certificationBody || '';
        }
        
        // Company information
        if (document.getElementById('companyName')) {
            document.getElementById('companyName').value = offer.companyName || '';
        }
        if (document.getElementById('companySize')) {
            document.getElementById('companySize').value = offer.companySize || '';
        }
        if (document.getElementById('companyIndustry')) {
            document.getElementById('companyIndustry').value = offer.companyIndustry || '';
        }
        if (document.getElementById('numberOfSites')) {
            document.getElementById('numberOfSites').value = offer.numberOfSites || '';
        }
        if (document.getElementById('companyDescription')) {
            document.getElementById('companyDescription').value = offer.companyDescription || '';
        }
        
        // Specific audit requirements
        if (document.getElementById('currentCertStatus')) {
            document.getElementById('currentCertStatus').value = offer.currentCertStatus || '';
        }
        if (document.getElementById('previousAudits')) {
            document.getElementById('previousAudits').value = offer.previousAudits || '';
        }
        if (document.getElementById('lastAuditDate')) {
            document.getElementById('lastAuditDate').value = offer.lastAuditDate || '';
        }
        if (document.getElementById('knownIssues')) {
            document.getElementById('knownIssues').value = offer.knownIssues || '';
        }
        if (offer.specialRequirements) {
            setCheckboxValues('specialRequirements', offer.specialRequirements);
        }
        
        // Additional information
        if (document.getElementById('deliverables')) {
            document.getElementById('deliverables').value = offer.deliverables || '';
        }
        
        // Update scope requirements if standard is selected
        if (offer.standard) {
            this.updateScopeRequirements();
        }
        
        // Speichere die ID des zu bearbeitenden Angebots
        document.getElementById('offerForm').dataset.editingOfferId = offerId;
        
        // √Ñndere den Submit-Button-Text
        const submitButton = document.querySelector('#offerForm button[type="submit"]');
        if (submitButton) {
            submitButton.textContent = 'Angebot aktualisieren';
        }
        
        // Scroll zum Formular
        document.getElementById('offerForm').scrollIntoView({ behavior: 'smooth' });
        
        console.log('Editing offer:', offerId);
    }

    loadExchangeRequestsFromStorage() {
        const saved = localStorage.getItem('qhse_exchange_requests');
        return saved ? JSON.parse(saved) : [];
    }

    saveExchangeRequestsToStorage() {
        localStorage.setItem('qhse_exchange_requests', JSON.stringify(this.exchangeRequests));
    }

    updateMyRequests() {
        const currentUser = this.getCurrentUser();
        
        // Load data if not available
        if (!this.exchangeRequests) {
            this.exchangeRequests = this.loadExchangeRequestsFromStorage();
        }
        // Sent requests (my interest in others' offers)
        const sentRequests = this.exchangeRequests.filter(req => req.requestedBy === currentUser.id);
        
        // Received requests (others' interest in my offers)
        const myOffers = this.auditExchanges.filter(offer => offer.offeredBy === currentUser.id);
        const receivedRequests = this.exchangeRequests.filter(req => 
            myOffers.some(offer => offer.id === req.offerId)
        );

        // Update sent requests
        const sentRequestsElement = document.getElementById('sentRequestsList');
        if (sentRequestsElement) {
            if (sentRequests.length === 0) {
                sentRequestsElement.innerHTML = '<p class="no-offers">Keine gesendeten Anfragen vorhanden</p>';
            } else {
                sentRequestsElement.innerHTML = sentRequests.map(request => {
                    const offer = this.auditExchanges.find(o => o.id === request.offerId);
                    if (!offer) return '';
                    
                    return `
                        <div class="request-card">
                            <div class="request-header">
                                <h4>${offer.title}</h4>
                                <span class="status-badge ${request.status}">${this.getStatusText(request.status)}</span>
                            </div>
                            <div class="request-details">
                                <div class="request-detail">
                                    <strong>Anbieter:</strong> <span>${offer.offeredByName}</span>
                                </div>
                                <div class="request-detail">
                                    <strong>Standard:</strong> <span>${offer.standard}</span>
                                </div>
                                <div class="request-detail">
                                    <strong>Angefragt am:</strong> <span>${new Date(request.createdAt).toLocaleDateString('de-DE')}</span>
                                </div>
                            </div>
                            ${request.message ? `<div class="request-message"><strong>Ihre Nachricht:</strong> "${request.message}"</div>` : ''}
                            <div class="request-actions">
                                <button class="btn-secondary" onclick="qhseDashboard.cancelRequest('${request.id}')">
                                    <i class="fas fa-times"></i>
                                    Anfrage zur√ºckziehen
                                </button>
                            </div>
                        </div>
                    `;
                }).join('');
            }
        }

        // Update received requests
        const receivedRequestsElement = document.getElementById('receivedRequestsList');
        if (receivedRequestsElement) {
            if (receivedRequests.length === 0) {
                receivedRequestsElement.innerHTML = '<p class="no-offers">Keine erhaltenen Anfragen vorhanden</p>';
            } else {
                receivedRequestsElement.innerHTML = receivedRequests.map(request => {
                    const offer = this.auditExchanges.find(o => o.id === request.offerId);
                    if (!offer) return '';
                    
                    return `
                        <div class="request-card">
                            <div class="request-header">
                                <h4>${offer.title}</h4>
                                <span class="status-badge ${request.status}">${this.getStatusText(request.status)}</span>
                            </div>
                            <div class="request-details">
                                <div class="request-detail">
                                    <strong>Interessent:</strong> <span>${request.requestedByName}</span>
                                </div>
                                <div class="request-detail">
                                    <strong>Angefragt am:</strong> <span>${new Date(request.createdAt).toLocaleDateString('de-DE')}</span>
                                </div>
                            </div>
                            ${request.message ? `<div class="request-message"><strong>Nachricht:</strong> "${request.message}"</div>` : ''}
                            ${request.status === 'pending' ? `
                                <div class="request-actions">
                                    <button class="btn-primary" onclick="qhseDashboard.acceptRequest('${request.id}')">
                                        <i class="fas fa-check"></i>
                                        Akzeptieren
                                    </button>
                                    <button class="btn-secondary" onclick="qhseDashboard.declineRequest('${request.id}')">
                                        <i class="fas fa-times"></i>
                                        Ablehnen
                                    </button>
                                </div>
                            ` : ''}
                        </div>
                    `;
                }).join('');
            }
        }
    }

    getStatusText(status) {
        const statusMap = {
            'pending': 'Ausstehend',
            'accepted': 'Akzeptiert',
            'declined': 'Abgelehnt',
            'cancelled': 'Zur√ºckgezogen'
        };
        return statusMap[status] || status;
    }

    cancelRequest(requestId) {
        if (confirm('M√∂chten Sie diese Anfrage wirklich zur√ºckziehen?')) {
            this.exchangeRequests = this.exchangeRequests.filter(req => req.id !== requestId);
            this.saveExchangeRequestsToStorage();
            this.updateMyRequests();
            alert('Anfrage erfolgreich zur√ºckgezogen.');
        }
    }

    acceptRequest(requestId) {
        const request = this.exchangeRequests.find(req => req.id === requestId);
        if (request) {
            request.status = 'accepted';
            this.saveExchangeRequestsToStorage();
            this.updateMyRequests();
            alert('‚úÖ Anfrage akzeptiert! Sie k√∂nnen nun die Kontaktdaten austauschen.');
        }
    }

    declineRequest(requestId) {
        const request = this.exchangeRequests.find(req => req.id === requestId);
        if (request) {
            request.status = 'declined';
            this.saveExchangeRequestsToStorage();
            this.updateMyRequests();
            alert('Anfrage abgelehnt.');
        }
    }

    updateRiskAssessmentDashboard() {
        // Update dashboard statistics
        const totalAssessments = this.riskAssessments.length;
        const overdueAssessments = this.riskAssessments.filter(ra => 
            new Date(ra.nextReview) < new Date()
        ).length;
        const highRiskAssessments = this.riskAssessments.filter(ra => 
            ra.riskLevel === 'high' || ra.riskLevel === 'very-high'
        ).length;
        
        // Update stat numbers if elements exist
        const statElements = {
            'totalRiskAssessments': totalAssessments,
            'expiredRiskAssessments': overdueAssessments,
            'inProgressRiskAssessments': this.riskAssessments.filter(ra => ra.status === 'draft').length,
            'approvedRiskAssessments': this.riskAssessments.filter(ra => ra.status === 'approved').length
        };
        
        Object.entries(statElements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) element.textContent = value;
        });
        
        // Render risk assessments table
        this.renderRiskAssessmentTable();
    }

    setupRiskAssessmentEventListeners() {
        // Setup new assessment button (fallback for direct event listener)
        const newAssessmentBtn = document.getElementById('newRiskAssessmentBtn');
        if (newAssessmentBtn) {
            newAssessmentBtn.addEventListener('click', () => this.openRiskAssessmentModal());
        }
        
        // Setup modal close handlers
        const modal = document.getElementById('riskAssessmentModal');
        if (modal) {
            const closeBtn = modal.querySelector('#closeRiskAssessmentModal');
            if (closeBtn) {
                closeBtn.addEventListener('click', () => this.closeRiskAssessmentModal());
            }
            
            // Close on outside click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeRiskAssessmentModal();
                }
            });
        }
        
        // Setup tab switching (will be re-initialized when modal opens)
        this.setupTabEventListeners();

        // Setup hazard selection checkboxes
        this.setupHazardCheckboxEventListeners();
        
        // Setup risk calculation listeners
        this.setupRiskCalculationListeners();
        
        // Setup form submission
        const form = document.getElementById('riskAssessmentForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveRiskAssessment();
            });
        }

        // Setup save button event listeners
        const saveBtn = document.getElementById('saveRiskAssessmentBtn');
        const saveAndCloseBtn = document.getElementById('saveAndCloseRiskAssessmentBtn');
        const cancelBtn = document.getElementById('cancelRiskAssessmentBtn');

        if (saveBtn) {
            saveBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.saveRiskAssessment(false); // Save but keep modal open
            });
        }

        if (saveAndCloseBtn) {
            saveAndCloseBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.saveRiskAssessment(true); // Save and close modal
            });
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.closeRiskAssessmentModal();
            });
        }
    }

    setupRiskCalculationListeners() {
        console.log('üîß Setting up risk calculation listeners...');
        
        // Setup automatic risk calculation
        const riskInputs = ['riskSeverity', 'riskProbability', 'riskAvoidability'];
        
        riskInputs.forEach(inputName => {
            const inputs = document.querySelectorAll(`input[name="${inputName}"]`);
            console.log(`Found ${inputs.length} inputs for ${inputName}`);
            
            inputs.forEach(input => {
                // Remove existing listeners to avoid duplicates
                const boundCalculateRisk = this.calculateRisk.bind(this);
                input.removeEventListener('change', boundCalculateRisk);
                
                // Add new listener with proper this binding
                input.addEventListener('change', () => {
                    console.log(`Risk input changed: ${inputName} = ${input.value}`);
                    this.calculateRisk();
                });
            });
        });
        
        // Also setup listeners for the individual radio buttons by ID
        const radioIds = [
            'severity-1', 'severity-2', 'severity-3', 'severity-4',
            'probability-1', 'probability-2', 'probability-3', 'probability-4',
            'avoidability-1', 'avoidability-2', 'avoidability-3', 'avoidability-4'
        ];
        
        radioIds.forEach(id => {
            const radio = document.getElementById(id);
            if (radio) {
                const boundCalculateRisk = this.calculateRisk.bind(this);
                radio.removeEventListener('change', boundCalculateRisk);
                radio.addEventListener('change', () => {
                    console.log(`Radio changed: ${id} = ${radio.value}`);
                    this.calculateRisk();
                });
                console.log(`Added listener to ${id}`);
            } else {
                console.warn(`Radio button ${id} not found`);
            }
        });
    }

    calculateRisk() {
        console.log('üî¢ Calculating risk...');
        
        const severity = this.getSelectedValue('riskSeverity');
        const probability = this.getSelectedValue('riskProbability');
        const avoidability = this.getSelectedValue('riskAvoidability');
        
        console.log(`Values: S=${severity}, W=${probability}, V=${avoidability}`);
        
        // Update display values - check if elements exist
        const severityElement = document.getElementById('selectedSeverity');
        const probabilityElement = document.getElementById('selectedProbability');
        const avoidabilityElement = document.getElementById('selectedAvoidability');
        
        if (severityElement) severityElement.textContent = severity || '-';
        if (probabilityElement) probabilityElement.textContent = probability || '-';
        if (avoidabilityElement) avoidabilityElement.textContent = avoidability || '-';
        
        if (severity && probability && avoidability) {
            const riskValue = parseInt(severity) * parseInt(probability) * parseInt(avoidability);
            const riskLevel = this.getRiskLevel(riskValue);
            const requiredActions = this.getRequiredActions(riskValue);
            
            console.log(`Risk calculation: ${severity} √ó ${probability} √ó ${avoidability} = ${riskValue} (${riskLevel})`);
            
            // Update calculation display
            const calculatedRiskElement = document.getElementById('calculatedRisk');
            if (calculatedRiskElement) {
                calculatedRiskElement.textContent = riskValue;
                calculatedRiskElement.className = `risk-result ${riskLevel}`;
            }
            
            // Update risk level display
            const riskLevelElement = document.getElementById('riskLevel');
            if (riskLevelElement) {
                riskLevelElement.textContent = this.getRiskLevelText(riskLevel);
                riskLevelElement.className = `risk-badge ${riskLevel}`;
            }
            
            // Update required actions
            const requiredActionsElement = document.getElementById('requiredActions');
            if (requiredActionsElement) {
                requiredActionsElement.textContent = requiredActions;
            }
            
            console.log(`‚úÖ Risk calculated: S=${severity} √ó W=${probability} √ó V=${avoidability} = ${riskValue} (${riskLevel})`);
        } else {
            // Reset display if not all values selected
            const calculatedRiskElement = document.getElementById('calculatedRisk');
            const riskLevelElement = document.getElementById('riskLevel');
            const requiredActionsElement = document.getElementById('requiredActions');
            
            if (calculatedRiskElement) calculatedRiskElement.textContent = '-';
            if (riskLevelElement) {
                riskLevelElement.textContent = 'Nicht bewertet';
                riskLevelElement.className = 'risk-badge';
            }
            if (requiredActionsElement) requiredActionsElement.textContent = 'Bitte Bewertung durchf√ºhren';
            
            console.log('‚ö†Ô∏è Risk calculation incomplete - missing values');
        }
    }

    getSelectedValue(inputName) {
        const selected = document.querySelector(`input[name="${inputName}"]:checked`);
        const value = selected ? selected.value : null;
        console.log(`Getting value for ${inputName}: ${value}`);
        return value;
    }

    getRiskLevel(riskValue) {
        if (riskValue >= 16) return 'kritisch';
        if (riskValue >= 8) return 'hoch';
        if (riskValue >= 4) return 'mittel';
        if (riskValue >= 1) return 'niedrig';
        return 'unbewertet';
    }

    getRiskLevelText(level) {
        const texts = {
            'niedrig': 'Niedriges Risiko',
            'mittel': 'Mittleres Risiko',
            'hoch': 'Hohes Risiko',
            'kritisch': 'Kritisches Risiko',
            'unbewertet': 'Nicht bewertet'
        };
        return texts[level] || level;
    }

    getRequiredActions(riskValue) {
        if (riskValue >= 16) {
            return 'SOFORTIGE MASSNAHMEN ZWINGEND! Betrieb einstellen bis L√∂sung vorhanden.';
        } else if (riskValue >= 8) {
            return 'Ma√ünahmen zur Risikoreduktion erforderlich. Zeitnahe Umsetzung notwendig.';
        } else if (riskValue >= 4) {
            return '√úberwachung erforderlich. Verbesserungen anstreben, wenn verh√§ltnism√§√üig.';
        } else if (riskValue >= 1) {
            return 'Akzeptabel - Keine zus√§tzlichen Ma√ünahmen erforderlich. Bestehende Ma√ünahmen aufrechterhalten.';
        }
        return 'Bitte Bewertung durchf√ºhren';
    }

    renderRiskAssessmentTable() {
        const tableBody = document.getElementById('riskAssessmentTableBody');
        if (!tableBody) return;
        
        if (this.riskAssessments.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center">Keine Gef√§hrdungsbeurteilungen vorhanden</td></tr>';
            return;
        }
        
        tableBody.innerHTML = this.riskAssessments.map(assessment => `
            <tr>
                <td>${assessment.title || 'Unbenannt'}</td>
                <td>${assessment.workplace || '-'}</td>
                <td>${assessment.department || '-'}</td>
                <td><span class="gbu-risk-badge ${assessment.riskLevel}">${this.getRiskLevelText(assessment.riskLevel)}</span></td>
                <td>${assessment.assessor || '-'}</td>
                <td>${assessment.lastReview ? new Date(assessment.lastReview).toLocaleDateString('de-DE') : '-'}</td>
                <td class="actions">
                    <button class="btn-icon btn-view" onclick="qhseDashboard.viewRiskAssessment('${assessment.id}')" title="Anzeigen">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn-icon btn-edit" onclick="qhseDashboard.editRiskAssessment('${assessment.id}')" title="Bearbeiten">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn-icon btn-delete" onclick="qhseDashboard.deleteRiskAssessment('${assessment.id}')" title="L√∂schen">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `).join('');
    }

    getRiskLevelText(level) {
        const texts = {
            'low': 'Niedrig',
            'medium': 'Mittel',
            'high': 'Hoch',
            'very-high': 'Sehr Hoch'
        };
        return texts[level] || level;
    }

    openRiskAssessmentModal(assessmentId = null) {
        const modal = document.getElementById('riskAssessmentModal');
        if (modal) {
            // Show modal by changing display style
            modal.style.display = 'flex';
            modal.classList.remove('hidden');
            
            if (assessmentId) {
                // Load existing assessment data
                const assessment = this.riskAssessments.find(ra => ra.id === assessmentId);
                if (assessment) {
                    this.populateRiskAssessmentForm(assessment);
                }
            } else {
                // Clear form for new assessment
                this.clearRiskAssessmentForm();
            }
            
            // Switch to first tab - using correct tab name
            this.switchRiskAssessmentTab('grunddaten');

            // Re-setup event listeners for this modal instance
            setTimeout(() => {
                this.setupTabEventListeners();
                this.setupHazardCheckboxEventListeners();
                this.setupRiskCalculationListeners();
                this.setupRiskAssessmentInteractions();
                
                // Test risk calculation setup
                this.testRiskCalculationSetup();
            }, 500);
        } else {
            console.error('Risk Assessment Modal not found in DOM');
        }
    }

    closeRiskAssessmentModal() {
        const modal = document.getElementById('riskAssessmentModal');
        if (modal) {
            modal.style.display = 'none';
            modal.classList.add('hidden');
        }
    }

    switchRiskAssessmentTab(tabName) {
        // Update tab buttons (correct selector for the modal)
        const tabs = document.querySelectorAll('.tab-btn');
        tabs.forEach(tab => {
            tab.classList.toggle('active', tab.getAttribute('data-tab') === tabName);
        });
        
        // Update tab content (correct selector)
        const contents = document.querySelectorAll('.tab-content');
        contents.forEach(content => {
            content.classList.toggle('active', content.id === `tab-${tabName}`);
        });

        // Special handling for specific tabs
        if (tabName === 'risikobewertung') {
            // Initialize risk assessment tab when switched to
            setTimeout(() => {
                const selectedHazards = this.getSelectedHazards();
                this.updateRiskAssessmentTab(selectedHazards);
                // Re-setup risk calculation listeners when switching to this tab
                this.setupRiskCalculationListeners();
                console.log('üîÑ Risk assessment tab activated, listeners setup');
            }, 100);
        }

        if (tabName === 'gefaehrdungsanalyse') {
            // Re-setup hazard selection when switched to this tab
            setTimeout(() => {
                this.setupHazardCheckboxEventListeners();
            }, 100);
        }
    }

    clearRiskAssessmentForm() {
        const form = document.getElementById('riskAssessmentForm');
        if (form) {
            form.reset();
            // Auto-generate GBU number for new assessments
            const gbuNummer = document.getElementById('gbuNummer');
            if (gbuNummer) {
                gbuNummer.value = this.generateGBUNumber();
            }
            // Set current date
            const gbuDatum = document.getElementById('gbuDatum');
            if (gbuDatum) {
                gbuDatum.value = new Date().toISOString().split('T')[0];
            }
            // Set current user as creator
            const gbuErsteller = document.getElementById('gbuErsteller');
            if (gbuErsteller) {
                const currentUser = this.getCurrentUser();
                gbuErsteller.value = currentUser ? currentUser.displayName : '';
            }
            // Populate dropdowns
            this.populateGBUDropdowns();
        }
    }

    populateGBUDropdowns() {
        // Populate departments dropdown
        const bereichSelect = document.getElementById('gbuBereich');
        if (bereichSelect) {
            bereichSelect.innerHTML = '<option value="">Bitte w√§hlen...</option>';
            this.departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = dept.name;
                bereichSelect.appendChild(option);
            });
        }

        // Populate responsible person dropdown
        const verantwortlicherSelect = document.getElementById('gbuVerantwortlicher');
        if (verantwortlicherSelect) {
            verantwortlicherSelect.innerHTML = '<option value="">Bitte w√§hlen...</option>';
            this.users.filter(user => user.isActive).forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = user.displayName;
                verantwortlicherSelect.appendChild(option);
            });
        }
    }

    populateRiskAssessmentForm(assessment) {
        // This would populate form fields with existing assessment data
        // Implementation depends on the specific form structure
    }

    saveRiskAssessment(closeAfterSave = true) {
        const form = document.getElementById('riskAssessmentForm');
        if (!form) {
            alert('Formular nicht gefunden!');
            return;
        }

        // Validate required fields
        const requiredFields = form.querySelectorAll('[required]');
        let hasErrors = false;
        
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                field.style.borderColor = '#dc2626';
                hasErrors = true;
            } else {
                field.style.borderColor = '';
            }
        });

        if (hasErrors) {
            alert('Bitte f√ºllen Sie alle erforderlichen Felder aus!');
            return;
        }
        
        const formData = new FormData(form);
        
        // Collect selected hazards
        const selectedHazards = this.getSelectedHazards();
        
        // Collect risk assessments
        const riskAssessments = {};
        selectedHazards.forEach(hazard => {
            const probability = document.querySelector(`select[name="probability_${hazard.id}"]`)?.value;
            const severity = document.querySelector(`select[name="severity_${hazard.id}"]`)?.value;
            if (probability && severity) {
                riskAssessments[hazard.id] = {
                    hazard: hazard,
                    probability: parseInt(probability),
                    severity: parseInt(severity),
                    riskValue: parseInt(probability) * parseInt(severity),
                    riskLevel: this.getRiskLevelFromValue(parseInt(probability) * parseInt(severity))
                };
            }
        });

        // Collect protective measures
        const protectiveMeasures = [];
        const measureElements = document.querySelectorAll('.protective-measure');
        measureElements.forEach(element => {
            const measureId = element.id;
            const description = element.querySelector(`textarea[name*="${measureId}"]`)?.value;
            const responsible = element.querySelector(`select[name*="responsible_${measureId}"]`)?.value;
            const deadline = element.querySelector(`input[name*="deadline_${measureId}"]`)?.value;
            const status = element.querySelector(`select[name*="status_${measureId}"]`)?.value;
            const priority = element.querySelector(`select[name*="priority_${measureId}"]`)?.value;
            
            if (description) {
                protectiveMeasures.push({
                    id: measureId,
                    description,
                    responsible,
                    deadline,
                    status,
                    priority
                });
            }
        });
        
        // Collect data from all form fields
        const assessment = {
            id: Date.now().toString(),
            // Grunddaten
            nummer: formData.get('gbuNummer') || this.generateGBUNumber(),
            title: formData.get('gbuTitel') || 'Neue Gef√§hrdungsbeurteilung',
            bereich: formData.get('gbuBereich') || '',
            abteilung: formData.get('gbuAbteilung') || '',
            ersteller: formData.get('gbuErsteller') || '',
            datum: formData.get('gbuDatum') || new Date().toISOString().split('T')[0],
            // Arbeitsplatz
            arbeitsplatz: formData.get('arbeitsplatzBezeichnung') || '',
            ort: formData.get('arbeitsplatzOrt') || '',
            // Gef√§hrdungen und Risikobewertung
            selectedHazards: selectedHazards,
            riskAssessments: riskAssessments,
            protectiveMeasures: protectiveMeasures,
            // Status und Bewertung
            riskLevel: this.calculateOverallRiskFromAssessments(riskAssessments),
            status: 'draft',
            lastReview: new Date().toISOString(),
            nextReview: formData.get('naechstePruefung') || '',
            // Metadata
            createdAt: new Date().toISOString(),
            createdBy: this.currentUserId
        };
        
        // Check if editing existing assessment
        const existingIndex = this.riskAssessments.findIndex(ra => ra.id === formData.get('assessmentId'));
        
        if (existingIndex >= 0) {
            // Update existing
            this.riskAssessments[existingIndex] = { ...this.riskAssessments[existingIndex], ...assessment };
            alert('Gef√§hrdungsbeurteilung erfolgreich aktualisiert!');
        } else {
            // Add new
            this.riskAssessments.push(assessment);
            alert('Gef√§hrdungsbeurteilung erfolgreich erstellt!');
        }
        
        this.saveRiskAssessmentsToStorage();
        this.updateRiskAssessmentDashboard();
        
        if (closeAfterSave) {
            this.closeRiskAssessmentModal();
        }
    }

    generateGBUNumber() {
        const now = new Date();
        const year = now.getFullYear();
        const count = this.riskAssessments.length + 1;
        return `GBU-${year}-${count.toString().padStart(3, '0')}`;
    }

    calculateOverallRisk(formData) {
        // Simple risk calculation - can be enhanced later
        // For now, return medium as default
        return 'medium';
    }

    calculateOverallRiskFromAssessments(riskAssessments) {
        if (!riskAssessments || Object.keys(riskAssessments).length === 0) {
            return 'medium';
        }

        // Find the highest risk level
        let highestRisk = 0;
        Object.values(riskAssessments).forEach(assessment => {
            if (assessment.riskValue > highestRisk) {
                highestRisk = assessment.riskValue;
            }
        });

        return this.getRiskLevelFromValue(highestRisk);
    }

    setupHazardSelection() {
        // Only setup if we're actually in the risk assessment modal
        const riskModal = document.getElementById('riskAssessmentModal');
        if (!riskModal || riskModal.style.display === 'none') {
            console.log('Risk Assessment modal not active, skipping hazard selection setup');
            return;
        }

        // Setup event listeners for hazard category checkboxes
        const hazardCheckboxes = document.querySelectorAll('#tab-gefaehrdungsanalyse input[type="checkbox"]');
        console.log(`Setting up hazard selection for ${hazardCheckboxes.length} checkboxes`);
        
        hazardCheckboxes.forEach((checkbox, index) => {
            // Remove existing listeners to avoid duplicates
            checkbox.removeEventListener('change', this.onHazardSelectionChange);
            
            console.log(`Checkbox ${index}: name=${checkbox.name}, value=${checkbox.value}`);
            checkbox.addEventListener('change', (e) => {
                console.log(`Checkbox changed: ${e.target.name}=${e.target.value}, checked=${e.target.checked}`);
                this.onHazardSelectionChange();
            });
        });

        // Also add click listener to labels to ensure proper interaction
        const labels = document.querySelectorAll('#tab-gefaehrdungsanalyse label');
        labels.forEach(label => {
            label.addEventListener('click', (e) => {
                // Small delay to ensure checkbox state has changed
                setTimeout(() => {
                    this.onHazardSelectionChange();
                }, 10);
            });
        });
    }

    setupTabEventListeners() {
        // Setup tab switching within the modal
        const tabs = document.querySelectorAll('#riskAssessmentModal .tab-btn');
        tabs.forEach(tab => {
            // Remove existing listeners to prevent duplicates
            tab.removeEventListener('click', this.handleTabClick);
            
            // Add new listener
            this.handleTabClick = (e) => {
                e.preventDefault();
                const targetTab = tab.getAttribute('data-tab');
                console.log(`üîß Tab clicked: ${targetTab}`);
                this.switchRiskAssessmentTab(targetTab);
            };
            
            tab.addEventListener('click', this.handleTabClick);
        });
        
        console.log(`üîß Setup ${tabs.length} tab event listeners`);
    }

    setupHazardCheckboxEventListeners() {
        // Setup event listeners for all hazard checkboxes
        const hazardCheckboxes = document.querySelectorAll('#tab-gefaehrdungsanalyse input[type="checkbox"]');
        hazardCheckboxes.forEach(checkbox => {
            // Create a unique handler for each checkbox
            const handleHazardChange = () => {
                console.log(`Hazard checkbox changed: ${checkbox.name} - ${checkbox.value} - ${checkbox.checked}`);
                
                // Update label styling based on checkbox state
                const label = checkbox.closest('label');
                if (label) {
                    if (checkbox.checked) {
                        label.classList.add('checked');
                    } else {
                        label.classList.remove('checked');
                    }
                }
                
                this.onHazardSelectionChange();
            };
            
            // Remove any existing listener and add new one
            checkbox.removeEventListener('change', handleHazardChange);
            checkbox.addEventListener('change', handleHazardChange);
            
            // Store reference for potential cleanup
            checkbox._hazardChangeHandler = handleHazardChange;
        });
        
        console.log(`üîß Setup ${hazardCheckboxes.length} hazard checkbox event listeners`);
    }

    setupRiskAssessmentInteractions() {
        // Only setup if we're actually in the risk assessment modal
        const riskModal = document.getElementById('riskAssessmentModal');
        if (!riskModal || riskModal.style.display === 'none') {
            console.log('Risk Assessment modal not active, skipping risk interactions setup');
            return;
        }

        // Setup probability and severity dropdowns
        const riskInputs = document.querySelectorAll('#tab-risikobewertung select, #tab-risikobewertung input');
        riskInputs.forEach(input => {
            input.addEventListener('change', () => {
                this.updateRiskCalculation();
            });
        });
    }

    onHazardSelectionChange() {
        const selectedHazards = this.getSelectedHazards();
        
        // Update risk assessment tab with selected hazards
        this.updateRiskAssessmentTab(selectedHazards);
        
        // Update protective measures suggestions
        this.updateProtectiveMeasuresSuggestions(selectedHazards);
        
        // Show feedback to user
        console.log('Selected hazards:', selectedHazards);
    }

    getSelectedHazards() {
        const checkboxes = document.querySelectorAll('#tab-gefaehrdungsanalyse input[type="checkbox"]:checked');
        const selectedHazards = [];
        
        checkboxes.forEach(checkbox => {
            const label = checkbox.nextElementSibling;
            const uniqueId = `${checkbox.name}_${checkbox.value}`;
            selectedHazards.push({
                id: uniqueId,
                name: checkbox.name,
                value: checkbox.value,
                label: label ? label.textContent.trim() : checkbox.value,
                category: this.getHazardCategoryFromName(checkbox.name)
            });
        });
        
        return selectedHazards;
    }

    getHazardCategory(checkbox) {
        // Find the parent category group
        const categoryGroup = checkbox.closest('.hazard-category-group');
        if (categoryGroup) {
            const categoryTitle = categoryGroup.querySelector('h4');
            return categoryTitle ? categoryTitle.textContent.trim() : 'Unbekannt';
        }
        return 'Unbekannt';
    }

    getHazardCategoryFromName(hazardName) {
        const categoryNames = {
            'hazard_mechanical': 'Mechanische Gef√§hrdungen',
            'hazard_electrical': 'Elektrische Gef√§hrdungen', 
            'hazard_thermal': 'Thermische Gef√§hrdungen',
            'hazard_chemical': 'Chemische Gef√§hrdungen',
            'hazard_biological': 'Biologische Gef√§hrdungen',
            'hazard_physical': 'Physikalische Gef√§hrdungen',
            'hazard_ergonomic': 'Ergonomische Gef√§hrdungen',
            'hazard_psychosocial': 'Psychische Gef√§hrdungen'
        };
        return categoryNames[hazardName] || 'Unbekannte Kategorie';
    }

    // Erweiterte Gef√§hrdungsanalyse mit Arbeitsplatz-spezifischen Vorschl√§gen
    getWorkplaceSpecificHazards(workplaceType) {
        const workplaceHazards = {
            'buero': ['hazard_ergonomic', 'hazard_psychosocial', 'hazard_electrical'],
            'werkstatt': ['hazard_mechanical', 'hazard_electrical', 'hazard_chemical', 'hazard_physical'],
            'labor': ['hazard_chemical', 'hazard_biological', 'hazard_electrical', 'hazard_physical'],
            'lager': ['hazard_mechanical', 'hazard_ergonomic', 'hazard_chemical'],
            'produktion': ['hazard_mechanical', 'hazard_chemical', 'hazard_physical', 'hazard_ergonomic'],
            'kuche': ['hazard_thermal', 'hazard_mechanical', 'hazard_chemical', 'hazard_biological'],
            'baustelle': ['hazard_mechanical', 'hazard_thermal', 'hazard_electrical', 'hazard_ergonomic']
        };
        
        return workplaceHazards[workplaceType] || [];
    }

    updateRiskAssessmentTab(selectedHazards) {
        const riskContainer = document.getElementById('riskAssessmentContainer');
        if (!riskContainer) return;

        if (selectedHazards.length === 0) {
            riskContainer.innerHTML = `
                <div class="no-hazards-selected">
                    <i class="fas fa-info-circle"></i>
                    <p>Bitte w√§hlen Sie zun√§chst Gef√§hrdungen im Tab "Gef√§hrdungsanalyse" aus.</p>
                </div>
            `;
            return;
        }

        // Create risk assessment interface for selected hazards
        let html = '<div class="selected-hazards-assessment">';
        html += '<h4>Risikobewertung f√ºr ausgew√§hlte Gef√§hrdungen</h4>';
        
        selectedHazards.forEach(hazard => {
            html += `
                <div class="hazard-risk-assessment" data-hazard-id="${hazard.id}">
                    <h5><i class="fas fa-exclamation-triangle"></i> ${hazard.label}</h5>
                    <div class="risk-assessment-grid">
                        <div class="assessment-item">
                            <label>Eintrittswahrscheinlichkeit</label>
                            <select name="probability_${hazard.id}" class="probability-select">
                                <option value="">Bitte w√§hlen...</option>
                                <option value="1">1 - Sehr unwahrscheinlich</option>
                                <option value="2">2 - Unwahrscheinlich</option>
                                <option value="3">3 - M√∂glich</option>
                                <option value="4">4 - Wahrscheinlich</option>
                                <option value="5">5 - Sehr wahrscheinlich</option>
                            </select>
                        </div>
                        <div class="assessment-item">
                            <label>Schadensschwere</label>
                            <select name="severity_${hazard.id}" class="severity-select">
                                <option value="">Bitte w√§hlen...</option>
                                <option value="1">1 - Geringf√ºgig</option>
                                <option value="2">2 - Gering</option>
                                <option value="3">3 - M√§√üig</option>
                                <option value="4">4 - Schwer</option>
                                <option value="5">5 - Sehr schwer</option>
                            </select>
                        </div>
                        <div class="assessment-item">
                            <label>Risikobewertung</label>
                            <div class="risk-result" id="risk_result_${hazard.id}">
                                <span class="risk-badge">Nicht bewertet</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        
        // Add Nohl-Matrix visualization
        html += this.generateNohlMatrix();
        
        riskContainer.innerHTML = html;
        
        // Setup event listeners for the new dropdowns
        this.setupRiskAssessmentInteractions();
    }

    generateNohlMatrix() {
        return `
            <div class="nohl-matrix">
                <h4>Nohl-Matrix zur Risikobewertung</h4>
                <table class="risk-matrix-table">
                    <thead>
                        <tr>
                            <th>Eintrittswahrscheinlichkeit ‚Üì / Schadensschwere ‚Üí</th>
                            <th>1<br>Geringf√ºgig</th>
                            <th>2<br>Gering</th>
                            <th>3<br>M√§√üig</th>
                            <th>4<br>Schwer</th>
                            <th>5<br>Sehr schwer</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><strong>5 - Sehr wahrscheinlich</strong></td>
                            <td class="risk-medium">5</td>
                            <td class="risk-high">10</td>
                            <td class="risk-high">15</td>
                            <td class="risk-very-high">20</td>
                            <td class="risk-very-high">25</td>
                        </tr>
                        <tr>
                            <td><strong>4 - Wahrscheinlich</strong></td>
                            <td class="risk-low">4</td>
                            <td class="risk-medium">8</td>
                            <td class="risk-high">12</td>
                            <td class="risk-high">16</td>
                            <td class="risk-very-high">20</td>
                        </tr>
                        <tr>
                            <td><strong>3 - M√∂glich</strong></td>
                            <td class="risk-low">3</td>
                            <td class="risk-low">6</td>
                            <td class="risk-medium">9</td>
                            <td class="risk-high">12</td>
                            <td class="risk-high">15</td>
                        </tr>
                        <tr>
                            <td><strong>2 - Unwahrscheinlich</strong></td>
                            <td class="risk-low">2</td>
                            <td class="risk-low">4</td>
                            <td class="risk-low">6</td>
                            <td class="risk-medium">8</td>
                            <td class="risk-high">10</td>
                        </tr>
                        <tr>
                            <td><strong>1 - Sehr unwahrscheinlich</strong></td>
                            <td class="risk-low">1</td>
                            <td class="risk-low">2</td>
                            <td class="risk-low">3</td>
                            <td class="risk-low">4</td>
                            <td class="risk-medium">5</td>
                        </tr>
                    </tbody>
                </table>
                <div class="risk-legend">
                    <div class="legend-item"><span class="risk-badge low">1-3: Niedrig</span></div>
                    <div class="legend-item"><span class="risk-badge medium">4-9: Mittel</span></div>
                    <div class="legend-item"><span class="risk-badge high">10-15: Hoch</span></div>
                    <div class="legend-item"><span class="risk-badge very-high">16-25: Sehr hoch</span></div>
                </div>
            </div>
        `;
    }

    updateRiskCalculation() {
        const hazardAssessments = document.querySelectorAll('.hazard-risk-assessment');
        
        hazardAssessments.forEach(assessment => {
            const hazardId = assessment.getAttribute('data-hazard-id');
            const probabilitySelect = assessment.querySelector(`select[name="probability_${hazardId}"]`);
            const severitySelect = assessment.querySelector(`select[name="severity_${hazardId}"]`);
            const resultDiv = assessment.querySelector(`#risk_result_${hazardId}`);
            
            if (probabilitySelect && severitySelect && resultDiv) {
                const probability = parseInt(probabilitySelect.value) || 0;
                const severity = parseInt(severitySelect.value) || 0;
                
                if (probability > 0 && severity > 0) {
                    const riskValue = probability * severity;
                    const riskLevel = this.getRiskLevelFromValue(riskValue);
                    const riskLevelText = this.getRiskLevelText(riskLevel);
                    
                    resultDiv.innerHTML = `
                        <span class="risk-badge ${riskLevel}">
                            ${riskValue} - ${riskLevelText}
                        </span>
                    `;
                } else {
                    resultDiv.innerHTML = '<span class="risk-badge">Nicht bewertet</span>';
                }
            }
        });
    }

    getRiskLevelFromValue(value) {
        if (value <= 3) return 'low';
        if (value <= 9) return 'medium';
        if (value <= 15) return 'high';
        return 'very-high';
    }

    updateProtectiveMeasuresSuggestions(selectedHazards) {
        console.log('Updating protective measures for hazards:', selectedHazards);
        
        if (selectedHazards.length === 0) return;

        // Generate intelligent suggestions based on selected hazards
        const suggestions = this.generateMeasureSuggestions(selectedHazards);
        
        // Display suggestions in the protective measures tab
        this.displayMeasureSuggestions(suggestions);
    }

    generateMeasureSuggestions(selectedHazards) {
        const suggestions = {
            technical: [],
            organizational: [],
            personal: []
        };

        selectedHazards.forEach(hazard => {
            const measures = this.getHazardSpecificMeasures(hazard);
            suggestions.technical.push(...measures.technical);
            suggestions.organizational.push(...measures.organizational);
            suggestions.personal.push(...measures.personal);
        });

        // Remove duplicates
        Object.keys(suggestions).forEach(type => {
            suggestions[type] = [...new Set(suggestions[type])];
        });

        return suggestions;
    }

    getHazardSpecificMeasures(hazard) {
        const measureDatabase = {
            'hazard_mechanical_cutting': {
                technical: ['Schutzvorrichtungen an Schneidwerkzeugen', 'Messerschutz installieren', 'Automatische Abschaltung'],
                organizational: ['Arbeitsanweisung f√ºr sicheren Umgang', 'Schulung Messersicherheit', 'Wartungsplan f√ºr Werkzeuge'],
                personal: ['Schnittschutzhandschuhe Kategorie 5', 'Schutzbrille', 'Geschlossene Arbeitsschuhe']
            },
            'hazard_mechanical_crushing': {
                technical: ['Zweihandschaltung installieren', 'Lichtvorh√§nge', 'Druckempfindliche Matten'],
                organizational: ['Sperrung/Kennzeichnung bei Wartung', 'Einrichterschulung', 'Betriebsanweisung'],
                personal: ['Sicherheitsschuhe S3', 'Arbeitshandschuhe', 'Eng anliegende Kleidung']
            },
            'hazard_electrical_shock': {
                technical: ['FI-Schutzschalter 30mA', 'Schutzklasse II Ger√§te', 'Potentialausgleich'],
                organizational: ['Elektrofachkraft beauftragen', 'Pr√ºffristen einhalten', 'DGUV V3 Pr√ºfung'],
                personal: ['Isolierte Werkzeuge', 'Elektriker-Handschuhe', 'Isolierte Schuhe']
            },
            'hazard_chemical_toxic': {
                technical: ['Absauganlage am Arbeitsplatz', 'Geschlossene Systeme', 'Notdusche installieren'],
                organizational: ['Betriebsanweisung nach GefStoffV', 'Arbeitsmedizinische Vorsorge', 'Substitutionspr√ºfung'],
                personal: ['Chemikalienschutzhandschuhe', 'Atemschutz FFP3', 'Chemikalienschutzanzug']
            },
            'hazard_ergonomic_lifting': {
                technical: ['Hebevorrichtungen bereitstellen', 'H√∂henverstellbare Arbeitspl√§tze', 'Lastverteilung'],
                organizational: ['Schulung Hebetechnik', 'Zweipersonenregel >25kg', 'Pausenregelung'],
                personal: ['R√ºckenst√ºtzg√ºrtel bei Bedarf', 'Rutschfeste Schuhe', 'Arbeitskleidung ohne Behinderung']
            },
            'hazard_psychosocial_stress': {
                technical: ['Ergonomische Arbeitspl√§tze', 'L√§rmschutz', 'Beleuchtungsoptimierung'],
                organizational: ['Pausenzeiten einhalten', 'Belastungsabbau durch Rotation', 'F√ºhrungskr√§fteschulung'],
                personal: ['Stressmanagement-Training', 'Work-Life-Balance Beratung', 'Betriebsarzt Kontakt']
            }
        };

        const hazardKey = `${hazard.name}_${hazard.value}`;
        return measureDatabase[hazardKey] || {
            technical: ['Technische L√∂sung entwickeln'],
            organizational: ['Organisatorische Ma√ünahme definieren'],
            personal: ['Pers√∂nliche Schutzausr√ºstung pr√ºfen']
        };
    }

    displayMeasureSuggestions(suggestions) {
        // Find or create suggestions container in protective measures tab
        const measuresTab = document.getElementById('tab-schutzmassnahmen');
        if (!measuresTab) return;

        let suggestionsContainer = measuresTab.querySelector('.measure-suggestions');
        if (!suggestionsContainer) {
            suggestionsContainer = document.createElement('div');
            suggestionsContainer.className = 'measure-suggestions';
            suggestionsContainer.innerHTML = `
                <h4><i class="fas fa-lightbulb"></i> Empfohlene Schutzma√ünahmen</h4>
                <p>Basierend auf den ausgew√§hlten Gef√§hrdungen werden folgende Ma√ünahmen empfohlen:</p>
            `;
            
            // Insert after the templates section
            const templatesSection = measuresTab.querySelector('.measures-templates');
            if (templatesSection) {
                templatesSection.insertAdjacentElement('afterend', suggestionsContainer);
            }
        }

        // Generate suggestions HTML
        let suggestionsHtml = '';
        Object.entries(suggestions).forEach(([type, measures]) => {
            if (measures.length > 0) {
                const typeNames = {
                    technical: 'Technische Ma√ünahmen',
                    organizational: 'Organisatorische Ma√ünahmen', 
                    personal: 'Pers√∂nliche Schutzma√ünahmen'
                };
                
                suggestionsHtml += `
                    <div class="suggestion-category">
                        <h5>${typeNames[type]}</h5>
                        <ul class="suggestion-list">
                            ${measures.map(measure => `
                                <li>
                                    <span class="suggestion-text">${measure}</span>
                                    <button class="btn-small" onclick="qhseDashboard.addSuggestedMeasure('${type}', '${measure}')">
                                        <i class="fas fa-plus"></i> Hinzuf√ºgen
                                    </button>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                `;
            }
        });

        suggestionsContainer.innerHTML = `
            <h4><i class="fas fa-lightbulb"></i> Empfohlene Schutzma√ünahmen</h4>
            <p>Basierend auf den ausgew√§hlten Gef√§hrdungen werden folgende Ma√ünahmen empfohlen:</p>
            ${suggestionsHtml}
        `;
    }

    addSuggestedMeasure(type, measureText) {
        // Add the suggested measure automatically
        this.addProtectiveMeasure(type);
        
        // Pre-fill with suggested text
        setTimeout(() => {
            const measures = document.querySelectorAll('.protective-measure');
            const lastMeasure = measures[measures.length - 1];
            if (lastMeasure) {
                const textarea = lastMeasure.querySelector('textarea');
                if (textarea) {
                    textarea.value = measureText;
                    textarea.style.backgroundColor = '#e8f5e8'; // Highlight as suggested
                }
            }
        }, 100);
    }

    addProtectiveMeasure(type) {
        // Use the existing structure - target specific measure list based on type
        const measureListId = type === 'technical' ? 'technicalMeasures' : 
                             type === 'organizational' ? 'organizationalMeasures' : 
                             'personalMeasures';
        
        const measuresList = document.getElementById(measureListId);
        if (!measuresList) {
            alert(`Schutzma√ünahmen-Liste "${measureListId}" nicht gefunden! Bitte wechseln Sie zum Tab "Schutzma√ünahmen".`);
            return;
        }

        const measureId = `measure_${Date.now()}`;
        const measureHtml = `
            <div class="protective-measure" id="${measureId}">
                <div class="measure-header">
                    <h5>
                        <i class="fas ${this.getMeasureIcon(type)}"></i>
                        ${this.getMeasureTypeText(type)} Schutzma√ünahme
                    </h5>
                    <button class="btn-icon btn-delete" onclick="removeMeasure('${measureId}')" title="Entfernen">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <div class="measure-content">
                    <div class="form-group">
                        <label>Beschreibung der Ma√ünahme *</label>
                        <textarea name="measure_description_${measureId}" rows="3" 
                                  placeholder="Beschreiben Sie die konkrete Schutzma√ünahme..." required></textarea>
                    </div>
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Verantwortlicher</label>
                            <select name="measure_responsible_${measureId}">
                                <option value="">Bitte w√§hlen...</option>
                                ${this.getUserOptionsHtml()}
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Umsetzung bis</label>
                            <input type="date" name="measure_deadline_${measureId}">
                        </div>
                        <div class="form-group">
                            <label>Status</label>
                            <select name="measure_status_${measureId}">
                                <option value="geplant">Geplant</option>
                                <option value="in_umsetzung">In Umsetzung</option>
                                <option value="umgesetzt">Umgesetzt</option>
                                <option value="ueberprueft">√úberpr√ºft</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Priorit√§t</label>
                            <select name="measure_priority_${measureId}">
                                <option value="hoch">Hoch</option>
                                <option value="mittel" selected>Mittel</option>
                                <option value="niedrig">Niedrig</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add the measure to the existing measures list (before the "add" button)
        const addButton = measuresList.querySelector('.add-measure-btn');
        if (addButton) {
            addButton.insertAdjacentHTML('beforebegin', measureHtml);
        } else {
            measuresList.insertAdjacentHTML('beforeend', measureHtml);
        }

        // Scroll to new measure
        const newMeasure = document.getElementById(measureId);
        if (newMeasure) {
            newMeasure.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }

    removeProtectiveMeasure(measureId) {
        if (confirm('M√∂chten Sie diese Schutzma√ünahme wirklich entfernen?')) {
            const measureElement = document.getElementById(measureId);
            if (measureElement) {
                measureElement.remove();
            }
        }
    }

    loadMeasureTemplate(templateType) {
        const templates = {
            'maschinenbau': {
                type: 'mixed',
                measures: {
                    'inherent': ['Sichere Konstruktion ohne scharfe Kanten', 'Energiearme Antriebe verwenden'],
                    'guarding': ['Trennende Schutzeinrichtung um bewegliche Teile', 'Verriegelungseinrichtung an Zugangst√ºren'],
                    'safety-tech': ['Not-Aus-Taster in Reichweite', 'Sicherheitssteuerung Kategorie 3'],
                    'training': ['Maschineneinweisung f√ºr alle Bediener', 'J√§hrliche Nachschulung'],
                    'procedures': ['Betriebsanweisung erstellen und aush√§ngen', 'Wartungsanweisung befolgen']
                }
            },
            'schweissen': {
                type: 'mixed',
                measures: {
                    'guarding': ['Schwei√üvorh√§nge aufstellen', 'Absaugung am Arbeitsplatz'],
                    'training': ['Schwei√üerschein nachweisen', 'Unterweisung Brandschutz'],
                    'head-protection': ['Schwei√ühelm mit automatischer Verdunkelung'],
                    'respiratory': ['Atemschutz bei Arbeiten in geschlossenen R√§umen'],
                    'hand-protection': ['Schwei√üerhandschuhe EN 12477']
                }
            },
            'chemikalien': {
                type: 'mixed', 
                measures: {
                    'inherent': ['Gef√§hrliche Stoffe durch ungef√§hrliche ersetzen'],
                    'guarding': ['Abzug/Dunstabzugshaube installieren', 'Auffangwannen bereitstellen'],
                    'safety-tech': ['Augendusche installieren', 'Notdusche bereitstellen'],
                    'procedures': ['Sicherheitsdatenbl√§tter bereitstellen', 'Betriebsanweisung f√ºr jeden Stoff'],
                    'hand-protection': ['Chemikalienschutzhandschuhe', 'Hautschutzmittel bereitstellen'],
                    'respiratory': ['Atemschutz bei staubenden Arbeiten']
                }
            },
            'hoehe': {
                type: 'mixed',
                measures: {
                    'guarding': ['Absturzsicherung ab 1m H√∂he', 'Gel√§nder an allen Kanten'],
                    'fall-protection': ['Auffanggurt EN 361', 'Sicherungsseil mit Falld√§mpfer'],
                    'procedures': ['Arbeitserlaubnis f√ºr H√∂henarbeiten', 'Rettungsplan erstellen'],
                    'training': ['Schulung f√ºr H√∂henarbeiten', 'Rettungs√ºbungen durchf√ºhren']
                }
            },
            'buero': {
                type: 'mixed',
                measures: {
                    'inherent': ['Ergonomische Arbeitsplatzgestaltung', 'H√∂henverstellbarer Schreibtisch'],
                    'procedures': ['Bildschirmarbeitsplatz-Unterweisung', 'Pausenregelung einhalten'],
                    'training': ['Schulung ergonomisches Arbeiten', 'Brandschutzunterweisung']
                }
            },
            'lager': {
                type: 'mixed',
                measures: {
                    'guarding': ['Regalabsicherung gegen Umfallen', 'Anfahrschutz f√ºr Regale'],
                    'procedures': ['Stapelvorschriften beachten', 'Verkehrswege freihalten'],
                    'training': ['Gabelstaplerf√ºhrerschein', 'Ladungssicherung'],
                    'foot-protection': ['Sicherheitsschuhe S3 mit Durchtrittschutz'],
                    'head-protection': ['Schutzhelm in Bereichen mit Kranbetrieb']
                }
            }
        };
        
        const template = templates[templateType];
        if (!template) {
            alert('Keine Vorlage f√ºr diesen Bereich verf√ºgbar.');
            return;
        }
        
        if (template.type === 'mixed') {
            // Load measures into appropriate categories
            let totalMeasures = 0;
            Object.entries(template.measures).forEach(([measureType, measureTexts]) => {
                measureTexts.forEach((measureText, index) => {
                    setTimeout(() => {
                        this.addSpecificMeasure(measureType);
                        
                        // Pre-fill the description
                        setTimeout(() => {
                            const containers = document.querySelectorAll('.protective-measure');
                            const lastMeasure = containers[containers.length - 1];
                            if (lastMeasure) {
                                const textarea = lastMeasure.querySelector('textarea[name="measureDescription"]');
                                if (textarea) {
                                    textarea.value = measureText;
                                }
                            }
                        }, 100);
                    }, index * 150); // Stagger the additions
                    totalMeasures++;
                });
            });
            
            setTimeout(() => {
                alert(`Vorlage "${templateType}" wurde geladen. ${totalMeasures} Ma√ünahmen wurden hinzugef√ºgt.`);
            }, totalMeasures * 150 + 200);
        }
    }

    getMeasureIcon(type) {
        const icons = {
            'technical': 'fa-cogs',
            'organizational': 'fa-clipboard-list',
            'personal': 'fa-user-shield'
        };
        return icons[type] || 'fa-shield-alt';
    }

    getMeasureTypeText(type) {
        const texts = {
            'technical': 'Technische',
            'organizational': 'Organisatorische',
            'personal': 'Pers√∂nliche'
        };
        return texts[type] || 'Allgemeine';
    }

    getUserOptionsHtml() {
        return this.users.filter(user => user.isActive)
            .map(user => `<option value="${user.id}">${user.displayName}</option>`)
            .join('');
    }

    // ========================================
    // TOP-PRINZIP MEASURES FUNCTIONS
    // ========================================

    addSpecificMeasure(measureType) {
        console.log(`üîß Adding specific measure: ${measureType}`);
        
        // Determine the correct container based on measure type
        const containerMap = {
            'inherent': 'inherentSafetyMeasures',
            'guarding': 'guardingMeasures', 
            'safety-tech': 'safetyTechMeasures',
            'training': 'trainingMeasures',
            'procedures': 'procedureMeasures',
            'maintenance': 'maintenanceMeasures',
            'access': 'accessMeasures',
            'head-protection': 'headProtectionMeasures',
            'respiratory': 'respiratoryProtectionMeasures',
            'hand-protection': 'handProtectionMeasures',
            'foot-protection': 'footProtectionMeasures',
            'fall-protection': 'fallProtectionMeasures'
        };
        
        const containerId = containerMap[measureType];
        const container = document.getElementById(containerId);
        
        if (!container) {
            console.error(`Container ${containerId} not found for measure type ${measureType}`);
            return;
        }
        
        // Create unique ID for this measure
        const measureId = `measure_${measureType}_${Date.now()}`;
        
        // Create measure element
        const measureElement = document.createElement('div');
        measureElement.className = 'protective-measure';
        measureElement.id = measureId;
        
        measureElement.innerHTML = `
            <div class="measure-header">
                <h6>Schutzma√ünahme ${this.getMeasureTypeLabel(measureType)}</h6>
                <button class="btn-icon btn-danger" onclick="removeMeasure('${measureId}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="measure-content">
                <div class="form-group">
                    <label for="${measureId}_description">Beschreibung der Ma√ünahme *</label>
                    <textarea id="${measureId}_description" name="measureDescription" rows="3" required 
                              placeholder="${this.getMeasurePlaceholder(measureType)}"></textarea>
                </div>
                <div class="measure-details">
                    <div class="form-group">
                        <label for="${measureId}_responsible">Verantwortlicher</label>
                        <select id="${measureId}_responsible" name="measureResponsible">
                            <option value="">Bitte w√§hlen...</option>
                            <option value="betriebsleitung">Betriebsleitung</option>
                            <option value="abteilungsleitung">Abteilungsleitung</option>
                            <option value="meister">Meister/Vorarbeiter</option>
                            <option value="fasi">Fachkraft f√ºr Arbeitssicherheit</option>
                            <option value="wartung">Instandhaltung</option>
                            <option value="mitarbeiter">Mitarbeiter</option>
                            <option value="extern">Externe Firma</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="${measureId}_deadline">Umsetzungstermin</label>
                        <input type="date" id="${measureId}_deadline" name="measureDeadline">
                    </div>
                    <div class="form-group">
                        <label for="${measureId}_status">Status</label>
                        <select id="${measureId}_status" name="measureStatus">
                            <option value="geplant">Geplant</option>
                            <option value="in_bearbeitung">In Bearbeitung</option>
                            <option value="umgesetzt">Umgesetzt</option>
                            <option value="ueberprueft">√úberpr√ºft</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="${measureId}_priority">Priorit√§t</label>
                        <select id="${measureId}_priority" name="measurePriority">
                            <option value="hoch">Hoch</option>
                            <option value="mittel" selected>Mittel</option>
                            <option value="niedrig">Niedrig</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="${measureId}_notes">Anmerkungen/Kosten</label>
                    <textarea id="${measureId}_notes" name="measureNotes" rows="2" 
                              placeholder="Zus√§tzliche Informationen, gesch√§tzte Kosten, etc."></textarea>
                </div>
            </div>
        `;
        
        // Insert before the add button
        const addButton = container.querySelector('.add-measure-btn');
        container.insertBefore(measureElement, addButton);
        
        // Focus on the description textarea
        setTimeout(() => {
            const textarea = measureElement.querySelector('textarea[name="measureDescription"]');
            if (textarea) {
                textarea.focus();
            }
        }, 100);
        
        console.log(`‚úÖ Added measure ${measureId} to container ${containerId}`);
    }

    getMeasureTypeLabel(measureType) {
        const labels = {
            'inherent': 'Konstruktive Sicherheit',
            'guarding': 'Schutzeinrichtung', 
            'safety-tech': 'Sicherheitstechnik',
            'training': 'Qualifikation/Schulung',
            'procedures': 'Arbeitsanweisung',
            'maintenance': 'Wartung/Instandhaltung',
            'access': 'Zugangs-/Arbeitsorganisation',
            'head-protection': 'Kopf-/Gesichtsschutz',
            'respiratory': 'Atemschutz',
            'hand-protection': 'Hand-/Hautschutz',
            'foot-protection': 'Fu√ü-/Beinschutz',
            'fall-protection': 'Absturzsicherung'
        };
        return labels[measureType] || measureType;
    }

    getMeasurePlaceholder(measureType) {
        const placeholders = {
            'inherent': 'z.B. Verwendung ungef√§hrlicher Stoffe, ergonomische Gestaltung, energiearme Verfahren...',
            'guarding': 'z.B. Trennende Schutzeinrichtung, Verriegelungseinrichtung, Lichtschranke...',
            'safety-tech': 'z.B. Not-Aus-System, Sicherheitssteuerung, √úberwachungseinrichtung...',
            'training': 'z.B. Erstunterweisung, regelm√§√üige Schulung, Qualifikationsnachweis...',
            'procedures': 'z.B. Betriebsanweisung, Arbeitsverfahren, Notfallplan...',
            'maintenance': 'z.B. Wartungsplan, Pr√ºffristen, Dokumentation...',
            'access': 'z.B. Zugangsbeschr√§nkung, Pausenregelung, Alleinarbeitsverbot...',
            'head-protection': 'z.B. Schutzhelm EN 397, Schutzbrille EN 166, Gesichtsschutz...',
            'respiratory': 'z.B. Filtermaske FFP2, Vollmaske, umluftunabh√§ngiges Atemschutzger√§t...',
            'hand-protection': 'z.B. Schutzhandschuhe EN 388, Hautschutzmittel, Schutzkleidung...',
            'foot-protection': 'z.B. Sicherheitsschuhe S3, Schutzstiefel, Knieschutz...',
            'fall-protection': 'z.B. Auffanggurt EN 361, Sicherungsseil, H√∂hensicherungsger√§t...'
        };
        return placeholders[measureType] || 'Beschreiben Sie die Schutzma√ünahme...';
    }

    removeMeasure(measureId) {
        if (confirm('M√∂chten Sie diese Schutzma√ünahme wirklich entfernen?')) {
            const measureElement = document.getElementById(measureId);
            if (measureElement) {
                measureElement.remove();
                console.log(`üóëÔ∏è Removed measure ${measureId}`);
            }
        }
    }

    viewRiskAssessment(id) {
        const assessment = this.riskAssessments.find(ra => ra.id === id);
        if (assessment) {
            this.openRiskAssessmentModal(id);
        }
    }

    editRiskAssessment(id) {
        this.openRiskAssessmentModal(id);
    }

    deleteRiskAssessment(id) {
        if (confirm('M√∂chten Sie diese Gef√§hrdungsbeurteilung wirklich l√∂schen?')) {
            this.riskAssessments = this.riskAssessments.filter(ra => ra.id !== id);
            this.saveRiskAssessmentsToStorage();
            this.updateRiskAssessmentDashboard();
        }
    }

    saveRiskAssessmentsToStorage() {
        localStorage.setItem('qhse_risk_assessments', JSON.stringify(this.riskAssessments));
    }

    // PDF Export Functions for Risk Assessment
    generateCompleteGBUReport() {
        console.log('üî• Generating complete GBU PDF report...');
        
        // Get current assessment data
        const formData = this.collectRiskAssessmentFormData();
        
        // Generate comprehensive PDF using jsPDF
        this.createDetailedGBUPDF(formData);
    }

    generateComplianceReport() {
        console.log('üìã Generating compliance report...');
        
        const formData = this.collectRiskAssessmentFormData();
        this.createCompliancePDF(formData);
    }

    generateQualificationReport() {
        console.log('üéì Generating qualification report...');
        
        const formData = this.collectRiskAssessmentFormData();
        this.createQualificationPDF(formData);
    }

    collectRiskAssessmentFormData() {
        // Collect all form data from the modal
        const formData = {
            // Basic information
            gbuNummer: document.getElementById('gbuNummer')?.value || '',
            title: document.getElementById('gbuTitle')?.value || '',
            workplace: document.getElementById('gbuWorkplace')?.value || '',
            department: document.getElementById('gbuDepartment')?.value || '',
            assessor: document.getElementById('gbuAssessor')?.value || '',
            reviewDate: document.getElementById('gbuReviewDate')?.value || '',
            nextReview: document.getElementById('gbuNextReview')?.value || '',
            
            // Selected hazards
            selectedHazards: this.getSelectedHazards(),
            
            // Risk assessment data
            riskMatrix: this.collectRiskMatrixData(),
            
            // Protection measures
            protectionMeasures: this.collectProtectionMeasures(),
            
            // Legal foundations
            legalFoundations: this.collectLegalFoundations(),
            
            // Workplace analysis
            workplaceAnalysis: this.collectWorkplaceAnalysis(),
            
            // Qualifications
            qualifications: this.collectQualificationData(),
            
            // Digital signatures
            signatures: this.collectDigitalSignatures(),
            
            // Meta data
            creationDate: new Date().toLocaleDateString('de-DE'),
            reportGenerated: new Date().toLocaleString('de-DE')
        };
        
        return formData;
    }

    createDetailedGBUPDF(data) {
        // Import jsPDF library dynamically if not available
        if (typeof window.jsPDF === 'undefined') {
            this.loadJsPDFLibrary(() => this.createDetailedGBUPDF(data));
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('p', 'mm', 'a4');
        
        // PDF Configuration
        const margin = 20;
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const contentWidth = pageWidth - (margin * 2);
        let yPosition = margin;
        
        // Company Header
        doc.setFontSize(20);
        doc.setFont('helvetica', 'bold');
        doc.text('GEF√ÑHRDUNGSBEURTEILUNG', margin, yPosition);
        yPosition += 10;
        
        doc.setFontSize(14);
        doc.setFont('helvetica', 'normal');
        doc.text(`${document.getElementById('companyName')?.textContent || 'Hoffmann & Voss'}`, margin, yPosition);
        yPosition += 15;
        
        // Document Header with legal compliance note
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text('T√úV-KONFORME DOKUMENTATION', margin, yPosition);
        yPosition += 8;
        
        doc.setFont('helvetica', 'normal');
        doc.text(`Erstellt gem√§√ü ¬ß 5 ArbSchG und TRBS 1111`, margin, yPosition);
        yPosition += 8;
        doc.text(`Bericht generiert am: ${data.reportGenerated}`, margin, yPosition);
        yPosition += 15;
        
        // Basic Information Section
        this.addPDFSection(doc, 'GRUNDDATEN', yPosition, margin, contentWidth);
        yPosition += 15;
        
        const basicInfo = [
            [`GBU-Nummer:`, data.gbuNummer],
            [`Titel:`, data.title],
            [`Arbeitsplatz:`, data.workplace],
            [`Abteilung:`, data.department],
            [`Ersteller:`, data.assessor],
            [`Bewertungsdatum:`, data.reviewDate],
            [`N√§chste √úberpr√ºfung:`, data.nextReview]
        ];
        
        basicInfo.forEach(([label, value]) => {
            doc.setFont('helvetica', 'bold');
            doc.text(label, margin, yPosition);
            doc.setFont('helvetica', 'normal');
            doc.text(value || '-', margin + 50, yPosition);
            yPosition += 7;
        });
        
        yPosition += 10;
        
        // Legal Foundations Section
        yPosition = this.addPDFSection(doc, 'RECHTLICHE GRUNDLAGEN', yPosition, margin, contentWidth);
        
        const legalTexts = [
            'Diese Gef√§hrdungsbeurteilung wurde erstellt nach:',
            '‚Ä¢ ¬ß 5 Arbeitsschutzgesetz (ArbSchG)',
            '‚Ä¢ TRBS 1111 "Gef√§hrdungsbeurteilung"',
            '‚Ä¢ DIN EN ISO 12100 "Sicherheit von Maschinen"',
            '‚Ä¢ DGUV Vorschrift 1 "Grunds√§tze der Pr√§vention"',
            '‚Ä¢ EU-Richtlinie 89/391/EWG (Rahmenrichtlinie)',
            '‚Ä¢ Betriebssicherheitsverordnung (BetrSichV)'
        ];
        
        legalTexts.forEach(text => {
            doc.text(text, margin, yPosition);
            yPosition += 6;
        });
        
        yPosition += 10;
        
        // Hazard Analysis Section
        if (data.selectedHazards.length > 0) {
            yPosition = this.addPDFSection(doc, 'GEF√ÑHRDUNGSANALYSE', yPosition, margin, contentWidth);
            
            doc.text('Identifizierte Gef√§hrdungen:', margin, yPosition);
            yPosition += 8;
            
            data.selectedHazards.forEach(hazard => {
                doc.text(`‚Ä¢ ${hazard}`, margin + 5, yPosition);
                yPosition += 6;
            });
            
            yPosition += 10;
        }
        
        // Risk Assessment Section
        yPosition = this.addPDFSection(doc, 'RISIKOBEWERTUNG (NOHL-MATRIX)', yPosition, margin, contentWidth);
        
        doc.text('Quantitative Risikobewertung nach DIN EN ISO 12100:', margin, yPosition);
        yPosition += 8;
        
        if (data.riskMatrix) {
            const riskData = [
                [`Schadensausma√ü:`, this.getRiskScaleText('severity', data.riskMatrix.severity)],
                [`Auftretenswahrscheinlichkeit:`, this.getRiskScaleText('probability', data.riskMatrix.probability)],
                [`Vermeidbarkeit:`, this.getRiskScaleText('avoidability', data.riskMatrix.avoidability)],
                [`Risikozahl:`, data.riskMatrix.riskNumber || 'Nicht berechnet'],
                [`Risikostufe:`, this.getRiskLevelText(data.riskMatrix.riskLevel)]
            ];
            
            riskData.forEach(([label, value]) => {
                doc.setFont('helvetica', 'bold');
                doc.text(label, margin, yPosition);
                doc.setFont('helvetica', 'normal');
                doc.text(value, margin + 60, yPosition);
                yPosition += 7;
            });
        }
        
        yPosition += 10;
        
        // Protection Measures Section
        yPosition = this.addPDFSection(doc, 'SCHUTZMA√üNAHMEN NACH TOP-PRINZIP', yPosition, margin, contentWidth);
        
        const topCategories = [
            { key: 'technical', title: '1. TECHNISCHE MA√üNAHMEN (Priorit√§t: H√∂chste)' },
            { key: 'organizational', title: '2. ORGANISATORISCHE MA√üNAHMEN (Priorit√§t: Mittel)' },
            { key: 'personal', title: '3. PERS√ñNLICHE MA√üNAHMEN (Priorit√§t: Niedrigste)' }
        ];
        
        topCategories.forEach(category => {
            if (this.checkPageSpace(doc, yPosition, 30)) {
                doc.addPage();
                yPosition = margin;
            }
            
            doc.setFont('helvetica', 'bold');
            doc.text(category.title, margin, yPosition);
            yPosition += 10;
            
            // Add measures for this category
            const measures = data.protectionMeasures?.[category.key] || [];
            if (measures.length > 0) {
                measures.forEach(measure => {
                    doc.setFont('helvetica', 'normal');
                    doc.text(`‚Ä¢ ${measure.description}`, margin + 5, yPosition);
                    yPosition += 6;
                    doc.text(`  Verantwortlich: ${measure.responsible || 'Nicht zugewiesen'}`, margin + 8, yPosition);
                    yPosition += 6;
                    doc.text(`  Termin: ${measure.deadline || 'Nicht festgelegt'}`, margin + 8, yPosition);
                    yPosition += 8;
                });
            } else {
                doc.setFont('helvetica', 'italic');
                doc.text('Keine Ma√ünahmen definiert', margin + 5, yPosition);
                yPosition += 8;
            }
            
            yPosition += 5;
        });
        
        // Digital Signatures Section
        if (this.checkPageSpace(doc, yPosition, 40)) {
            doc.addPage();
            yPosition = margin;
        }
        
        yPosition = this.addPDFSection(doc, 'DIGITALE FREIGABE UND SIGNATUREN', yPosition, margin, contentWidth);
        
        const signatureData = data.signatures || {};
        const signatures = [
            [`Ersteller:`, `${signatureData.assessor?.name || data.assessor} - ${signatureData.assessor?.date || data.creationDate}`],
            [`Fachkraft f√ºr Arbeitssicherheit:`, `${signatureData.safetyOfficer?.name || 'Ausstehend'} - ${signatureData.safetyOfficer?.date || 'Ausstehend'}`],
            [`Betriebsarzt:`, `${signatureData.doctor?.name || 'Ausstehend'} - ${signatureData.doctor?.date || 'Ausstehend'}`],
            [`Vorgesetzter:`, `${signatureData.supervisor?.name || 'Ausstehend'} - ${signatureData.supervisor?.date || 'Ausstehend'}`]
        ];
        
        signatures.forEach(([label, value]) => {
            doc.setFont('helvetica', 'bold');
            doc.text(label, margin, yPosition);
            doc.setFont('helvetica', 'normal');
            doc.text(value, margin + 60, yPosition);
            yPosition += 10;
        });
        
        // Footer with compliance note
        doc.setFontSize(10);
        doc.setFont('helvetica', 'italic');
        doc.text('Dieses Dokument wurde automatisch generiert und entspricht den T√úV-Anforderungen.', margin, pageHeight - 15);
        doc.text(`Seite 1 von ${doc.internal.getNumberOfPages()}`, pageWidth - margin - 30, pageHeight - 15);
        
        // Save PDF
        const fileName = `GBU_${data.gbuNummer || 'UNBENANNT'}_${new Date().toISOString().split('T')[0]}.pdf`;
        doc.save(fileName);
        
        alert(`PDF-Export erfolgreich: ${fileName}`);
    }

    addPDFSection(doc, title, yPosition, margin, contentWidth) {
        // Add section header with background
        doc.setFillColor(230, 230, 230);
        doc.rect(margin, yPosition - 5, contentWidth, 10, 'F');
        
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.text(title, margin + 2, yPosition + 2);
        
        return yPosition + 15;
    }

    checkPageSpace(doc, currentY, requiredSpace) {
        const pageHeight = doc.internal.pageSize.getHeight();
        return (currentY + requiredSpace) > (pageHeight - 30);
    }

    getRiskScaleText(type, value) {
        const scales = {
            severity: {
                1: '1 - Leichte Verletzung',
                2: '2 - Mittlere Verletzung', 
                3: '3 - Schwere Verletzung',
                4: '4 - T√∂dliche Verletzung'
            },
            probability: {
                1: '1 - Sehr unwahrscheinlich',
                2: '2 - Unwahrscheinlich',
                3: '3 - M√∂glich',
                4: '4 - Wahrscheinlich'
            },
            avoidability: {
                1: '1 - Gut vermeidbar',
                2: '2 - Vermeidbar',
                3: '3 - Schwer vermeidbar',
                4: '4 - Nicht vermeidbar'
            }
        };
        
        return scales[type]?.[value] || `${value} - Nicht definiert`;
    }

    loadJsPDFLibrary(callback) {
        console.log('üìö Loading jsPDF library...');
        
        // Check if already loaded
        if (typeof window.jsPDF !== 'undefined') {
            console.log('‚úÖ jsPDF already available');
            callback();
            return;
        }
        
        // Check if script tag exists but library not loaded yet
        const existingScript = document.getElementById('jspdf-script');
        if (existingScript) {
            console.log('‚è≥ jsPDF script already loading, waiting...');
            // Wait a bit longer and try again
            setTimeout(() => {
                if (typeof window.jsPDF !== 'undefined') {
                    console.log('‚úÖ jsPDF loaded successfully');
                    callback();
                } else {
                    console.log('‚ùå jsPDF failed to load, trying alternative...');
                    this.loadJsPDFAlternative(callback);
                }
            }, 2000);
            return;
        }
        
        // Load the library
        const script = document.createElement('script');
        script.id = 'jspdf-script';
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
        script.crossOrigin = 'anonymous';
        
        script.onload = () => {
            console.log('‚úÖ jsPDF script loaded');
            // Wait a moment for the library to initialize
            setTimeout(() => {
                if (typeof window.jsPDF !== 'undefined') {
                    console.log('‚úÖ jsPDF library ready');
                    callback();
                } else {
                    console.log('‚ùå jsPDF object not found after load');
                    this.loadJsPDFAlternative(callback);
                }
            }, 500);
        };
        
        script.onerror = (error) => {
            console.error('‚ùå Error loading jsPDF:', error);
            this.loadJsPDFAlternative(callback);
        };
        
        document.head.appendChild(script);
        console.log('üì¶ jsPDF script tag added to head');
    }

    loadJsPDFAlternative(callback) {
        console.log('üîÑ Trying alternative jsPDF source...');
        
        // Remove failed script
        const failedScript = document.getElementById('jspdf-script');
        if (failedScript) {
            failedScript.remove();
        }
        
        // Try alternative CDN
        const script = document.createElement('script');
        script.id = 'jspdf-script-alt';
        script.src = 'https://unpkg.com/jspdf@2.5.1/dist/jspdf.umd.min.js';
        script.crossOrigin = 'anonymous';
        
        script.onload = () => {
            console.log('‚úÖ Alternative jsPDF loaded');
            setTimeout(() => {
                if (typeof window.jsPDF !== 'undefined') {
                    callback();
                } else {
                    alert('PDF-Bibliothek konnte nicht geladen werden. Bitte versuchen Sie es sp√§ter erneut oder √ºberpr√ºfen Sie Ihre Internetverbindung.');
                }
            }, 500);
        };
        
        script.onerror = () => {
            alert('PDF-Bibliothek konnte nicht geladen werden. Bitte √ºberpr√ºfen Sie Ihre Internetverbindung und versuchen Sie es erneut.');
        };
        
        document.head.appendChild(script);
    }

    collectRiskMatrixData() {
        // Get values from selected radio buttons
        const severity = this.getSelectedValue('riskSeverity');
        const probability = this.getSelectedValue('riskProbability');
        const avoidability = this.getSelectedValue('riskAvoidability');
        
        // Calculate risk if all values are present
        let riskNumber = '';
        let riskLevel = '';
        
        if (severity && probability && avoidability) {
            const calculatedRisk = parseInt(severity) * parseInt(probability) * parseInt(avoidability);
            riskNumber = calculatedRisk.toString();
            riskLevel = this.getRiskLevel(calculatedRisk);
        } else {
            // Try to get from display elements if calculation wasn't done
            riskNumber = document.getElementById('calculatedRisk')?.textContent || '';
            riskLevel = document.getElementById('riskLevel')?.textContent || '';
        }
        
        console.log(`Collected risk matrix data: S=${severity}, W=${probability}, V=${avoidability}, R=${riskNumber}, Level=${riskLevel}`);
        
        return {
            severity: severity || '',
            probability: probability || '',
            avoidability: avoidability || '',
            riskNumber: riskNumber,
            riskLevel: riskLevel
        };
    }

    collectProtectionMeasures() {
        const measures = {
            technical: [],
            organizational: [],
            personal: []
        };
        
        // Collect technical measures
        const technicalContainers = [
            'inherentSafetyMeasures',
            'guardingMeasures', 
            'safetyTechMeasures'
        ];
        
        technicalContainers.forEach(containerId => {
            const container = document.getElementById(containerId);
            if (container) {
                const measureElements = container.querySelectorAll('.protective-measure');
                measureElements.forEach(element => {
                    const description = element.querySelector('.measure-description')?.value || '';
                    const responsible = element.querySelector('.measure-responsible')?.value || '';
                    const deadline = element.querySelector('.measure-deadline')?.value || '';
                    
                    if (description) {
                        measures.technical.push({ description, responsible, deadline });
                    }
                });
            }
        });
        
        // Collect organizational measures
        const organizationalContainers = [
            'trainingMeasures',
            'procedureMeasures',
            'maintenanceMeasures',
            'accessMeasures'
        ];
        
        organizationalContainers.forEach(containerId => {
            const container = document.getElementById(containerId);
            if (container) {
                const measureElements = container.querySelectorAll('.protective-measure');
                measureElements.forEach(element => {
                    const description = element.querySelector('.measure-description')?.value || '';
                    const responsible = element.querySelector('.measure-responsible')?.value || '';
                    const deadline = element.querySelector('.measure-deadline')?.value || '';
                    
                    if (description) {
                        measures.organizational.push({ description, responsible, deadline });
                    }
                });
            }
        });
        
        // Collect personal measures
        const personalContainers = [
            'headProtectionMeasures',
            'respiratoryMeasures',
            'handProtectionMeasures',
            'footProtectionMeasures',
            'fallProtectionMeasures'
        ];
        
        personalContainers.forEach(containerId => {
            const container = document.getElementById(containerId);
            if (container) {
                const measureElements = container.querySelectorAll('.protective-measure');
                measureElements.forEach(element => {
                    const description = element.querySelector('.measure-description')?.value || '';
                    const responsible = element.querySelector('.measure-responsible')?.value || '';
                    const deadline = element.querySelector('.measure-deadline')?.value || '';
                    
                    if (description) {
                        measures.personal.push({ description, responsible, deadline });
                    }
                });
            }
        });
        
        return measures;
    }

    collectLegalFoundations() {
        const foundations = {};
        
        // Collect checked legal categories
        const legalCategories = document.querySelectorAll('.legal-category input[type="checkbox"]:checked');
        legalCategories.forEach(checkbox => {
            const category = checkbox.closest('.legal-category');
            const title = category.querySelector('h5')?.textContent || '';
            const items = Array.from(category.querySelectorAll('.legal-items input[type="checkbox"]:checked'))
                .map(item => item.nextElementSibling?.textContent || '');
            
            if (items.length > 0) {
                foundations[title] = items;
            }
        });
        
        return foundations;
    }

    collectWorkplaceAnalysis() {
        const analysis = {};
        
        // Collect workplace sections data
        const sections = [
            'arbeitsumgebung',
            'arbeitsmittel', 
            'arbeitsorganisation',
            'qualifikation'
        ];
        
        sections.forEach(section => {
            const container = document.getElementById(`workplace-${section}`);
            if (container) {
                const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
                analysis[section] = Array.from(checkboxes).map(cb => cb.value || cb.nextElementSibling?.textContent || '');
            }
        });
        
        return analysis;
    }

    collectQualificationData() {
        const qualifications = {};
        
        // Collect qualification requirements
        const categories = ['erforderlich', 'vorhanden', 'fehlend'];
        categories.forEach(category => {
            const container = document.getElementById(`qualifikation-${category}`);
            if (container) {
                const inputs = container.querySelectorAll('input, textarea');
                qualifications[category] = Array.from(inputs)
                    .filter(input => input.value.trim())
                    .map(input => input.value.trim());
            }
        });
        
        return qualifications;
    }

    collectDigitalSignatures() {
        const signatures = {};
        
        const signatureRoles = ['assessor', 'safetyOfficer', 'doctor', 'supervisor'];
        signatureRoles.forEach(role => {
            const nameField = document.getElementById(`signature-${role}-name`);
            const dateField = document.getElementById(`signature-${role}-date`);
            
            if (nameField && dateField) {
                signatures[role] = {
                    name: nameField.value,
                    date: dateField.value
                };
            }
        });
        
        return signatures;
    }

    createCompliancePDF(data) {
        console.log('üìã Generating compliance PDF report...');
        
        // Import jsPDF library dynamically if not available
        if (typeof window.jsPDF === 'undefined') {
            this.loadJsPDFLibrary(() => this.createCompliancePDF(data));
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('p', 'mm', 'a4');
        
        // PDF Configuration
        const margin = 20;
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        let yPosition = margin;
        
        // Header
        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.text('COMPLIANCE-NACHWEIS GEF√ÑHRDUNGSBEURTEILUNG', margin, yPosition);
        yPosition += 15;
        
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`${document.getElementById('companyName')?.textContent || 'Hoffmann & Voss'}`, margin, yPosition);
        yPosition += 10;
        doc.text(`Erstellt am: ${data.reportGenerated}`, margin, yPosition);
        yPosition += 20;
        
        // Compliance Checklist
        doc.setFont('helvetica', 'bold');
        doc.text('RECHTLICHE COMPLIANCE-PR√úFUNG', margin, yPosition);
        yPosition += 15;
        
        const complianceItems = [
            { check: true, text: '¬ß 5 ArbSchG - Gef√§hrdungsbeurteilung durchgef√ºhrt' },
            { check: true, text: 'TRBS 1111 - Anerkanntes Bewertungsverfahren angewendet' },
            { check: true, text: 'DIN EN ISO 12100 - Maschinensicherheit ber√ºcksichtigt' },
            { check: data.selectedHazards?.length > 0, text: 'Gef√§hrdungsanalyse vollst√§ndig dokumentiert' },
            { check: data.riskMatrix?.riskNumber, text: 'Quantitative Risikobewertung durchgef√ºhrt' },
            { check: data.protectionMeasures && Object.keys(data.protectionMeasures).length > 0, text: 'Schutzma√ünahmen nach TOP-Prinzip definiert' },
            { check: data.signatures && Object.keys(data.signatures).length > 0, text: 'Digitale Signaturen und Freigabeworkflow' },
            { check: true, text: 'Dokumentation nachvollziehbar und archivierbar' }
        ];
        
        complianceItems.forEach(item => {
            doc.setFont('helvetica', 'normal');
            const symbol = item.check ? '‚úì' : '‚úó';
            const color = item.check ? [0, 128, 0] : [255, 0, 0];
            
            doc.setTextColor(...color);
            doc.text(symbol, margin, yPosition);
            doc.setTextColor(0, 0, 0);
            doc.text(item.text, margin + 10, yPosition);
            yPosition += 8;
        });
        
        yPosition += 10;
        
        // Summary
        const passedItems = complianceItems.filter(item => item.check).length;
        const totalItems = complianceItems.length;
        const complianceRate = Math.round((passedItems / totalItems) * 100);
        
        doc.setFont('helvetica', 'bold');
        doc.text(`COMPLIANCE-BEWERTUNG: ${complianceRate}% (${passedItems}/${totalItems})`, margin, yPosition);
        yPosition += 15;
        
        if (complianceRate >= 90) {
            doc.setTextColor(0, 128, 0);
            doc.text('STATUS: T√úV-KONFORM', margin, yPosition);
        } else if (complianceRate >= 75) {
            doc.setTextColor(255, 165, 0);
            doc.text('STATUS: BEDINGT KONFORM - Nachbesserungen erforderlich', margin, yPosition);
        } else {
            doc.setTextColor(255, 0, 0);
            doc.text('STATUS: NICHT KONFORM - Wesentliche M√§ngel', margin, yPosition);
        }
        
        // Save PDF
        const fileName = `Compliance_Nachweis_${data.gbuNummer || 'UNBENANNT'}_${new Date().toISOString().split('T')[0]}.pdf`;
        doc.save(fileName);
        
        alert(`Compliance-Nachweis erfolgreich erstellt: ${fileName}`);
    }

    createQualificationPDF(data) {
        console.log('üéì Generating qualification PDF report...');
        
        // Import jsPDF library dynamically if not available
        if (typeof window.jsPDF === 'undefined') {
            this.loadJsPDFLibrary(() => this.createQualificationPDF(data));
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('p', 'mm', 'a4');
        
        // PDF Configuration
        const margin = 20;
        const pageWidth = doc.internal.pageSize.getWidth();
        let yPosition = margin;
        
        // Header
        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.text('QUALIFIKATIONSNACHWEIS GEF√ÑHRDUNGSBEURTEILUNG', margin, yPosition);
        yPosition += 15;
        
        doc.setFontSize(12);
        doc.setFont('helvetica', 'normal');
        doc.text(`${document.getElementById('companyName')?.textContent || 'Hoffmann & Voss'}`, margin, yPosition);
        yPosition += 10;
        doc.text(`Arbeitsplatz: ${data.workplace || 'Nicht angegeben'}`, margin, yPosition);
        yPosition += 10;
        doc.text(`Erstellt am: ${data.reportGenerated}`, margin, yPosition);
        yPosition += 20;
        
        // Required Qualifications
        doc.setFont('helvetica', 'bold');
        doc.text('ERFORDERLICHE QUALIFIKATIONEN', margin, yPosition);
        yPosition += 15;
        
        const requiredQualifications = [
            'Fachkraft f√ºr Arbeitssicherheit (SiFa)',
            'Betriebsarzt oder arbeitsmedizinische Betreuung',
            'Sachkundige Person f√ºr Gef√§hrdungsbeurteilung',
            'Unterweisung in TRBS 1111',
            'Kenntnisse DIN EN ISO 12100 (Maschinensicherheit)',
            'Schulung TOP-Prinzip und Schutzma√ünahmen'
        ];
        
        requiredQualifications.forEach(qual => {
            doc.setFont('helvetica', 'normal');
            doc.text(`‚Ä¢ ${qual}`, margin + 5, yPosition);
            yPosition += 7;
        });
        
        yPosition += 15;
        
        // Qualification Status
        doc.setFont('helvetica', 'bold');
        doc.text('QUALIFIKATIONSSTATUS', margin, yPosition);
        yPosition += 15;
        
        const qualificationData = data.qualifications || {};
        
        // Required qualifications
        if (qualificationData.erforderlich && qualificationData.erforderlich.length > 0) {
            doc.setFont('helvetica', 'bold');
            doc.text('Erforderlich:', margin, yPosition);
            yPosition += 8;
            
            qualificationData.erforderlich.forEach(qual => {
                doc.setFont('helvetica', 'normal');
                doc.text(`‚Ä¢ ${qual}`, margin + 5, yPosition);
                yPosition += 6;
            });
            yPosition += 10;
        }
        
        // Available qualifications
        if (qualificationData.vorhanden && qualificationData.vorhanden.length > 0) {
            doc.setFont('helvetica', 'bold');
            doc.setTextColor(0, 128, 0);
            doc.text('Vorhanden:', margin, yPosition);
            yPosition += 8;
            
            qualificationData.vorhanden.forEach(qual => {
                doc.setFont('helvetica', 'normal');
                doc.text(`‚Ä¢ ${qual}`, margin + 5, yPosition);
                yPosition += 6;
            });
            yPosition += 10;
        }
        
        // Missing qualifications
        if (qualificationData.fehlend && qualificationData.fehlend.length > 0) {
            doc.setFont('helvetica', 'bold');
            doc.setTextColor(255, 0, 0);
            doc.text('Fehlend (Nachschulung erforderlich):', margin, yPosition);
            yPosition += 8;
            
            qualificationData.fehlend.forEach(qual => {
                doc.setFont('helvetica', 'normal');
                doc.text(`‚Ä¢ ${qual}`, margin + 5, yPosition);
                yPosition += 6;
            });
            yPosition += 10;
        }
        
        // Signatures section
        doc.setTextColor(0, 0, 0);
        doc.setFont('helvetica', 'bold');
        doc.text('QUALIFIKATIONSNACHWEISE BEST√ÑTIGT DURCH:', margin, yPosition);
        yPosition += 15;
        
        const signatures = data.signatures || {};
        const signatureRoles = [
            { key: 'assessor', label: 'Ersteller der Gef√§hrdungsbeurteilung' },
            { key: 'safetyOfficer', label: 'Fachkraft f√ºr Arbeitssicherheit' },
            { key: 'doctor', label: 'Betriebsarzt' },
            { key: 'supervisor', label: 'Vorgesetzter/Abteilungsleiter' }
        ];
        
        signatureRoles.forEach(role => {
            const signature = signatures[role.key];
            doc.setFont('helvetica', 'normal');
            doc.text(`${role.label}:`, margin, yPosition);
            doc.text(`${signature?.name || 'Nicht unterzeichnet'}`, margin + 80, yPosition);
            doc.text(`${signature?.date || 'Datum ausstehend'}`, margin + 140, yPosition);
            yPosition += 8;
        });
        
        // Save PDF
        const fileName = `Qualifikationsnachweis_${data.gbuNummer || 'UNBENANNT'}_${new Date().toISOString().split('T')[0]}.pdf`;
        doc.save(fileName);
        
        alert(`Qualifikationsnachweis erfolgreich erstellt: ${fileName}`);
    }

    // Enhanced validation for T√úV compliance
    validateGBUCompleteness() {
        const errors = [];
        const warnings = [];
        
        // Check mandatory fields
        const requiredFields = [
            { id: 'gbuNummer', name: 'GBU-Nummer' },
            { id: 'gbuTitle', name: 'Titel' },
            { id: 'gbuWorkplace', name: 'Arbeitsplatz' },
            { id: 'gbuDepartment', name: 'Abteilung' },
            { id: 'gbuAssessor', name: 'Ersteller' }
        ];
        
        requiredFields.forEach(field => {
            const element = document.getElementById(field.id);
            if (!element || !element.value.trim()) {
                errors.push(`${field.name} ist erforderlich`);
            }
        });
        
        // Check hazard selection
        const selectedHazards = this.getSelectedHazards();
        if (selectedHazards.length === 0) {
            errors.push('Mindestens eine Gef√§hrdung muss ausgew√§hlt werden');
        }
        
        // Check risk assessment
        const riskData = this.collectRiskMatrixData();
        if (!riskData.severity || !riskData.probability || !riskData.avoidability) {
            errors.push('Vollst√§ndige Risikobewertung erforderlich');
        }
        
        // Check protection measures
        const measures = this.collectProtectionMeasures();
        const totalMeasures = measures.technical.length + measures.organizational.length + measures.personal.length;
        if (totalMeasures === 0) {
            warnings.push('Keine Schutzma√ünahmen definiert');
        }
        
        // Check legal foundations
        const legalFoundations = this.collectLegalFoundations();
        if (Object.keys(legalFoundations).length === 0) {
            warnings.push('Keine rechtlichen Grundlagen ausgew√§hlt');
        }
        
        // Show validation results
        this.showValidationResults(errors, warnings);
        
        return errors.length === 0;
    }

    showValidationResults(errors, warnings) {
        let message = 'VOLLST√ÑNDIGKEITSPR√úFUNG\n\n';
        
        if (errors.length === 0 && warnings.length === 0) {
            message += '‚úÖ Alle erforderlichen Felder sind vollst√§ndig ausgef√ºllt.\n';
            message += '‚úÖ Die Gef√§hrdungsbeurteilung ist T√úV-konform.';
        } else {
            if (errors.length > 0) {
                message += '‚ùå FEHLER (m√ºssen behoben werden):\n';
                errors.forEach(error => message += `‚Ä¢ ${error}\n`);
                message += '\n';
            }
            
            if (warnings.length > 0) {
                message += '‚ö†Ô∏è WARNUNGEN (sollten behoben werden):\n';
                warnings.forEach(warning => message += `‚Ä¢ ${warning}\n`);
            }
        }
        
        alert(message);
        
        // Enable/disable approve button based on validation
        const approveBtn = document.getElementById('approveBtn');
        if (approveBtn) {
            approveBtn.disabled = errors.length > 0;
        }
    }

    requestGBUReview() {
        if (this.validateGBUCompleteness()) {
            alert('Gef√§hrdungsbeurteilung zur Pr√ºfung freigegeben.\nStatus: Zur Pr√ºfung freigegeben');
            this.updateGBUStatus('under-review');
        }
    }

    approveGBU() {
        alert('Gef√§hrdungsbeurteilung endg√ºltig freigegeben.\nStatus: Genehmigt und rechtskr√§ftig');
        this.updateGBUStatus('approved');
    }

    rejectGBU() {
        const reason = prompt('Grund f√ºr die Ablehnung:');
        if (reason) {
            alert(`Gef√§hrdungsbeurteilung abgelehnt.\nGrund: ${reason}`);
            this.updateGBUStatus('rejected', reason);
        }
    }

    updateGBUStatus(status, note = '') {
        const statusElement = document.getElementById('currentApprovalStatus');
        const statusDate = document.getElementById('statusDate');
        
        if (statusElement) {
            statusElement.className = `status-badge status-${status}`;
            
            const statusTexts = {
                'draft': 'Entwurf',
                'under-review': 'Zur Pr√ºfung freigegeben', 
                'approved': 'Genehmigt',
                'rejected': 'Abgelehnt'
            };
            
            statusElement.textContent = statusTexts[status] || status;
        }
        
        if (statusDate) {
            statusDate.innerHTML = `Status ge√§ndert am: <span>${new Date().toLocaleString('de-DE')}</span>`;
        }
        
        // Update history
        this.addGBUHistoryEntry(status, note);
    }

    addGBUHistoryEntry(action, note = '') {
        const historyContainer = document.getElementById('gbuHistoryContainer');
        if (historyContainer) {
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.innerHTML = `
                <div class="history-date">${new Date().toLocaleString('de-DE')}</div>
                <div class="history-user">${this.getCurrentUser().name}</div>
                <div class="history-action">${this.getActionText(action)}</div>
                ${note ? `<div class="history-note">${note}</div>` : ''}
            `;
            
            historyContainer.insertBefore(historyItem, historyContainer.firstChild);
        }
    }

    getActionText(action) {
        const actions = {
            'draft': 'Gef√§hrdungsbeurteilung erstellt',
            'under-review': 'Zur Pr√ºfung freigegeben',
            'approved': 'Endg√ºltig genehmigt',
            'rejected': 'Abgelehnt'
        };
        
        return actions[action] || action;
    }

    testRiskCalculationSetup() {
        console.log('üß™ Testing risk calculation setup...');
        
        // Test if radio buttons exist
        const radioTests = [
            'severity-1', 'severity-2', 'severity-3', 'severity-4',
            'probability-1', 'probability-2', 'probability-3', 'probability-4',
            'avoidability-1', 'avoidability-2', 'avoidability-3', 'avoidability-4'
        ];
        
        let foundRadios = 0;
        radioTests.forEach(id => {
            const radio = document.getElementById(id);
            if (radio) {
                foundRadios++;
                console.log(`‚úÖ Found radio: ${id}`);
            } else {
                console.log(`‚ùå Missing radio: ${id}`);
            }
        });
        
        console.log(`Found ${foundRadios}/${radioTests.length} radio buttons`);
        
        // Test if display elements exist
        const displayElements = [
            'selectedSeverity', 'selectedProbability', 'selectedAvoidability',
            'calculatedRisk', 'riskLevel', 'requiredActions'
        ];
        
        let foundElements = 0;
        displayElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                foundElements++;
                console.log(`‚úÖ Found display element: ${id}`);
            } else {
                console.log(`‚ùå Missing display element: ${id}`);
            }
        });
        
        console.log(`Found ${foundElements}/${displayElements.length} display elements`);
        
        // Test manual risk calculation
        console.log('üîç Testing manual risk calculation...');
        this.calculateRisk();
    }

    // Supplier Management Setup
    setupSupplierManagement() {
        // Setup supplier management functionality
        this.setupSupplierTabs();
        this.setupSupplierFilters();
        this.setupSupplierModal();
        this.setupSupplierQuickActions();
        this.renderSupplierDashboard();
    }

    setupSupplierTabs() {
        const supplierTabs = document.querySelectorAll('.supplier-tab-btn');
        const supplierTabContents = document.querySelectorAll('.supplier-tab-panel');

        supplierTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.getAttribute('data-tab');
                
                // Update active tab
                supplierTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update active content
                supplierTabContents.forEach(content => {
                    const contentTab = content.id.replace('supplier-', '');
                    if (contentTab === targetTab) {
                        content.classList.add('active');
                        content.style.display = 'block';
                    } else {
                        content.classList.remove('active');
                        content.style.display = 'none';
                    }
                });

                // Render content based on active tab
                this.renderSupplierTabContent(targetTab);
            });
        });

        // Show overview tab by default
        this.renderSupplierTabContent('overview');
    }

    setupSupplierFilters() {
        const statusFilter = document.getElementById('supplierStatusFilter');
        const typeFilter = document.getElementById('supplierTypeFilter');
        const searchInput = document.getElementById('supplierSearch');

        if (statusFilter) {
            statusFilter.addEventListener('change', () => this.filterSuppliers());
        }
        if (typeFilter) {
            typeFilter.addEventListener('change', () => this.filterSuppliers());
        }
        if (searchInput) {
            searchInput.addEventListener('input', () => this.filterSuppliers());
        }
    }

    setupSupplierModal() {
        const addSupplierBtn = document.getElementById('addSupplierBtn');
        const supplierModal = document.getElementById('supplierModal');
        const supplierForm = document.getElementById('supplierForm');

        if (addSupplierBtn) {
            addSupplierBtn.addEventListener('click', () => {
                this.showSupplierModal();
            });
        }

        if (supplierForm) {
            supplierForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveSupplier();
            });
        }

        // Setup modal close functionality
        const modalCloses = document.querySelectorAll('#supplierModal .modal-close');
        modalCloses.forEach(btn => {
            btn.addEventListener('click', () => {
                supplierModal.style.display = 'none';
                this.currentEditingSupplierId = null;
            });
        });

        // Setup evaluation modal
        const evalForm = document.getElementById('evaluationForm');
        if (evalForm) {
            evalForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveSupplierEvaluation();
            });
        }
    }

    setupSupplierQuickActions() {
        const evaluateBtn = document.getElementById('evaluateSupplierBtn');
        const checkCertificatesBtn = document.getElementById('checkCertificatesBtn');
        const planAuditBtn = document.getElementById('planAuditBtn');
        const reportsBtn = document.getElementById('supplierReportsBtn');
        const auditBtn = document.getElementById('supplierAuditBtn');

        if (evaluateBtn) {
            evaluateBtn.addEventListener('click', () => this.openEvaluationModal());
        }
        if (checkCertificatesBtn) {
            checkCertificatesBtn.addEventListener('click', () => this.checkCertificates());
        }
        if (planAuditBtn) {
            planAuditBtn.addEventListener('click', () => this.planAudit());
        }
        if (reportsBtn) {
            reportsBtn.addEventListener('click', () => this.openReportsModal());
        }
        if (auditBtn) {
            auditBtn.addEventListener('click', () => this.planAudit());
        }
    }

    // Supplier Data Management
    initializeDefaultSuppliers() {
        const defaultSuppliers = [
            {
                id: 'SUP001',
                
                // Tab 1: Stammdaten (Basic Data)
                basic: {
                    number: 'L-2024-001',
                    name: 'Mustermann Stahl GmbH',
                    legalForm: 'GmbH',
                    foundingYear: '1985',
                    employeeCount: '250',
                    turnover: '50 Millionen EUR',
                    mainActivity: 'Stahlproduktion und Metallverarbeitung',
                    description: 'F√ºhrender Anbieter von hochwertigen Stahlprodukten und Metallverarbeitungsdienstleistungen',
                    status: 'freigegeben'
                },
                
                // Tab 2: Kontakt & Struktur (Contact & Structure)
                contact: {
                    headquarters: 'Hamburg, Deutschland',
                    address: 'Musterstra√üe 1, 20095 Hamburg',
                    website: 'www.mustermann-stahl.de',
                    contactPerson: 'Max Mustermann',
                    email: 'max@mustermann-stahl.de',
                    phone: '+49 40 123456',
                    fax: '+49 40 123457',
                    emergencyContact: 'Klaus Weber',
                    emergencyPhone: '+49 40 123458',
                    subsidiaries: 'Mustermann Stahl Nord GmbH (Bremen), Mustermann International Ltd. (London)',
                    organizationChart: 'Gesch√§ftsf√ºhrung, Produktionsleitung, Qualit√§tssicherung, Vertrieb',
                    keyPersonnel: 'Max Mustermann (CEO), Anna Weber (CTO), Klaus Schmidt (Produktionsleiter)'
                },
                
                // Tab 3: Gesch√§ftsdaten (Business Data)
                business: {
                    taxId: 'DE123456789',
                    vatId: 'DE987654321',
                    commercialRegister: 'HRB 123456',
                    handelsregisterNumber: 'Hamburg HRB 123456',
                    dunsNumber: '123456789',
                    bankDetails: 'Hamburger Sparkasse, IBAN: DE89 2005 0550 1234 5678 90',
                    creditRating: 'AAA (Excellent)',
                    insurance: 'Allianz Versicherung AG',
                    liabilityInsurance: '10 Millionen EUR Deckung'
                },
                
                // Tab 4: Produkte & Kapazit√§ten (Products & Capacities)
                products: {
                    mainProducts: ['Stahlprodukte', 'Metallverarbeitung', 'Edelstahl', 'Konstruktionsstahl'],
                    productCategories: 'Stahlproduktion, Metallverarbeitung, Oberfl√§chenbehandlung',
                    capacity: '5000 Tonnen/Monat',
                    maxCapacity: '7000 Tonnen/Monat',
                    deliveryTime: '2-3 Wochen',
                    minimumOrderQuantity: '500 kg',
                    technicalSpecifications: 'DIN EN 10025, DIN EN 10204, kundenspezifische Anforderungen',
                    innovation: 'Entwicklung neuer Legierungen, additive Fertigung',
                    rdCapabilities: 'Eigenes F&E-Labor, Kooperationen mit TU Hamburg'
                },
                
                // Tab 5: Qualit√§tssystem (Quality System)
                quality: {
                    qualityStandards: 'ISO 9001:2015, DIN EN 1090, ASME',
                    qualityPolicy: 'Kontinuierliche Verbesserung und Null-Fehler-Prinzip',
                    qualityObjectives: '99.5% Qualit√§tsrate, Kundenzufriedenheit >95%',
                    qualityResponsible: 'Anna Weber (Qualit√§tsmanagerin)',
                    testingCapabilities: 'Zugpr√ºfung, H√§rtepr√ºfung, Ultraschallpr√ºfung, Spektralanalyse',
                    qualityDocumentation: 'Vollst√§ndige Dokumentation nach ISO 9001',
                    improvementProcesses: 'KVP-Programm, Lean Manufacturing',
                    customerComplaints: 'Strukturiertes Beschwerdemanagement, 24h-Reaktionszeit',
                    qualityKpis: 'Ausschussrate <0.5%, Reklamationsquote <0.1%'
                },
                
                // Tab 6: Zertifizierungen (Certifications)
                certifications: {
                    iso9001: 'G√ºltig bis 31.12.2025',
                    iso14001: 'G√ºltig bis 15.08.2025',
                    iso45001: 'G√ºltig bis 20.06.2025',
                    additionalCertifications: 'DIN EN 1090, ASME Code, CE-Kennzeichnung',
                    certificationBodies: 'T√úV Nord, DQS, Bureau Veritas',
                    certificates: [
                        { name: 'ISO 9001', validUntil: '2025-12-31', status: 'g√ºltig' },
                        { name: 'DIN EN 1090', validUntil: '2025-09-15', status: 'g√ºltig' }
                    ]
                },
                
                // Tab 7: Compliance & Recht (Compliance & Legal)
                compliance: {
                    gdprCompliance: 'Vollst√§ndig implementiert, Datenschutzbeauftragter bestellt',
                    antiCorruption: 'Code of Conduct implementiert, j√§hrliche Schulungen',
                    exportControlCompliance: 'Export-Compliance-Programm nach deutschen Au√üenwirtschaftsgesetzen',
                    sanctionsCompliance: 'Sanktionslisten-Screening implementiert',
                    conflictMinerals: 'Rohstoffe aus konfliktfreien Quellen',
                    codeOfConduct: 'Unternehmens-Verhaltenskodex f√ºr alle Mitarbeiter',
                    legalStructure: 'GmbH nach deutschem Recht',
                    contractualRequirements: 'Standard-AGB, individuelle Vertragsgestaltung m√∂glich',
                    litigationHistory: 'Keine relevanten Rechtsstreitigkeiten in den letzten 5 Jahren'
                },
                
                // Tab 8: Nachhaltigkeit (Sustainability)
                sustainability: {
                    environmentalPolicy: 'Umweltmanagementsystem nach ISO 14001',
                    co2Footprint: 'CO2-neutral bis 2030, aktuell 15% Reduktion p.a.',
                    energyManagement: '80% erneuerbare Energien, Energieeffizienzprogramm',
                    wasteManagement: '95% Recyclingquote, Kreislaufwirtschaft implementiert',
                    waterManagement: 'Wassersparende Produktionsverfahren, Aufbereitungsanlage',
                    socialResponsibility: 'Ausbildungspl√§tze, lokale Beschaffung, Charity-Programme',
                    sustainabilityGoals: 'CO2-Neutralit√§t 2030, 100% Kreislaufwirtschaft 2028',
                    sustainabilityReporting: 'J√§hrlicher Nachhaltigkeitsbericht nach GRI-Standards',
                    greenProducts: '60% der Produkte aus recycelten Materialien'
                },
                
                // Tab 9: Risikobewertung (Risk Assessment)
                risk: {
                    businessRisk: 'Niedrig - etabliertes Unternehmen mit diversifiziertem Portfolio',
                    financialRisk: 'Niedrig - solide Finanzlage, AAA-Rating',
                    operationalRisk: 'Mittel - Abh√§ngigkeit von Rohstoffpreisen',
                    reputationalRisk: 'Niedrig - ausgezeichneter Ruf in der Branche',
                    geoRisk: 'Niedrig - Standort in Deutschland',
                    supplyChainRisk: 'Mittel - Diversifizierte Lieferkette implementiert',
                    riskMitigation: 'Risikomanagement-System, Notfallpl√§ne vorhanden',
                    businessContinuity: 'BCP implementiert, regelm√§√üige Tests',
                    emergencyPlanning: '24/7 Notfallbereitschaft, Backup-Systeme'
                },
                
                // Tab 10: Performance-Bewertung (Performance Evaluation)
                performance: {
                    qualityScore: 90,
                    deliveryScore: 85,
                    priceScore: 80,
                    serviceScore: 85,
                    innovationScore: 88,
                    sustainabilityScore: 92,
                    flexibilityScore: 82,
                    communicationScore: 87,
                    overallScore: 86,
                    performanceHistory: 'Konstant hohe Leistung √ºber 3 Jahre',
                    kpiTracking: 'Monatliche KPI-Reviews, Trend-Analyse',
                    benchmarking: 'Top 10% der Branche in allen Kategorien'
                },
                
                // Tab 11: Audit & Monitoring (Audit & Monitoring)
                audit: {
                    lastAuditDate: '2024-01-15',
                    nextAuditDate: '2025-01-15',
                    auditFrequency: 'J√§hrlich',
                    auditType: 'Umfassendes Lieferantenaudit (Qualit√§t, Umwelt, Arbeitsschutz)',
                    auditResults: 'Sehr gut (95/100 Punkte)',
                    auditFindings: '2 Verbesserungsvorschl√§ge, keine kritischen Befunde',
                    correctiveActions: 'Alle Ma√ünahmen fristgerecht umgesetzt',
                    monitoringActivities: 'Quartalsweise Leistungsberichte, monatliche KPI-Tracking',
                    auditReports: 'Vollst√§ndige Dokumentation aller Audits verf√ºgbar'
                },
                
                // Tab 12: Dokumentation (Documentation)
                documentation: {
                    contracts: 'Rahmenvertrag, Qualit√§tsvereinbarung, Liefervertr√§ge',
                    specifications: 'Technische Spezifikationen f√ºr alle Produktgruppen',
                    drawings: 'CAD-Zeichnungen, Konstruktionspl√§ne digital verf√ºgbar',
                    procedures: 'Arbeitsanweisungen, Qualit√§tspr√ºfpl√§ne, Notfallprozeduren',
                    reports: 'Monatliche Leistungsberichte, Qualit√§tsberichte',
                    correspondenceLog: 'Vollst√§ndige E-Mail-Kommunikation archiviert',
                    documentControl: 'Dokumentenmanagementsystem ISO konform',
                    retentionPolicy: '10 Jahre Aufbewahrung aller relevanten Dokumente',
                    accessControl: 'Rollenbasierte Zugriffskontrolle implementiert'
                },
                
                // Tab 13: Kommunikation (Communication)
                communication: {
                    communicationChannels: 'E-Mail, Telefon, Videokonferenz, pers√∂nliche Meetings',
                    meetingFrequency: 'Monatliche Abstimmungsmeetings, quartalsweise Reviews',
                    escalationProcedures: 'Strukturiertes Eskalationsverfahren implementiert',
                    feedbackMechanisms: 'Regelm√§√üige Feedbackgespr√§che, Online-Bewertungssystem',
                    partnershipLevel: 'Strategischer Partner',
                    strategicAlignment: 'Gemeinsame Entwicklungsprojekte, langfristige Roadmap',
                    jointDevelopment: 'Neue Legierungen, nachhaltige Produktionsmethoden',
                    futureOpportunities: 'Expansion in neue M√§rkte, Digitalisierungsprojekte',
                    relationshipManager: 'Klaus Weber (Key Account Manager)'
                },
                
                // Metadata
                metadata: {
                    createdAt: '2024-01-01T00:00:00.000Z',
                    updatedAt: '2024-01-15T10:30:00.000Z',
                    version: 3,
                    lastEvaluatedBy: 'Anna Schmidt',
                    notes: 'Ausgezeichneter strategischer Partner mit kontinuierlich hoher Leistung'
                }
            },
            
            {
                id: 'SUP002',
                
                // Tab 1: Stammdaten (Basic Data)
                basic: {
                    number: 'L-2024-002',
                    name: 'Technik Service Nord',
                    legalForm: 'GmbH & Co. KG',
                    foundingYear: '1992',
                    employeeCount: '85',
                    turnover: '12 Millionen EUR',
                    mainActivity: 'Technische Dienstleistungen und Wartung',
                    description: 'Spezialisiert auf Wartung und Reparatur von Industrieanlagen',
                    status: 'kritisch'
                },
                
                contact: {
                    headquarters: 'Hamburg, Deutschland',
                    address: 'Industrieweg 5, 20097 Hamburg',
                    website: 'www.technik-service-nord.de',
                    contactPerson: 'Anna Schmidt',
                    email: 'a.schmidt@technik-service.de',
                    phone: '+49 40 987654',
                    fax: '+49 40 987655',
                    emergencyContact: 'Bernd Mueller',
                    emergencyPhone: '+49 40 987656',
                    subsidiaries: 'Service Nord Bremen GmbH',
                    organizationChart: 'Gesch√§ftsf√ºhrung, Technik, Service, Verwaltung',
                    keyPersonnel: 'Anna Schmidt (Gesch√§ftsf√ºhrerin), Bernd Mueller (Serviceleiter)'
                },
                
                business: {
                    taxId: 'DE456789123',
                    vatId: 'DE321654987',
                    commercialRegister: 'HRA 456789',
                    handelsregisterNumber: 'Hamburg HRA 456789',
                    dunsNumber: '987654321',
                    bankDetails: 'Commerzbank Hamburg, IBAN: DE12 2004 0000 0123 4567 89',
                    creditRating: 'BBB (Good)',
                    insurance: 'R+V Versicherung',
                    liabilityInsurance: '5 Millionen EUR Deckung'
                },
                
                products: {
                    mainProducts: ['Wartung', 'Reparaturen', 'Technischer Support', 'Instandhaltung'],
                    productCategories: 'Industrieservice, Anlagenwartung, Notfallreparaturen',
                    capacity: '50 Servicetechniker',
                    maxCapacity: '65 Servicetechniker (mit Subunternehmern)',
                    deliveryTime: '24-48 Stunden (Notfall: 4 Stunden)',
                    minimumOrderQuantity: 'Keine Mindestbestellmenge',
                    technicalSpecifications: 'Zertifiziert f√ºr alle g√§ngigen Industrieanlagen',
                    innovation: 'Predictive Maintenance, IoT-Sensoren',
                    rdCapabilities: 'Begrenztes F&E-Budget, Fokus auf Anwendung'
                },
                
                quality: {
                    qualityStandards: 'ISO 9001:2015 (in Implementierung)',
                    qualityPolicy: 'Zuverl√§ssiger Service und Kundenzufriedenheit',
                    qualityObjectives: '95% Kundenzufriedenheit, <5% Nacharbeit',
                    qualityResponsible: 'Bernd Mueller (Serviceleiter)',
                    testingCapabilities: 'Grundlegende Pr√ºfverfahren, mobile Pr√ºfger√§te',
                    qualityDocumentation: 'Ausbauf√§higes Dokumentationssystem',
                    improvementProcesses: 'Monatliche Teammeetings',
                    customerComplaints: 'Informelles Beschwerdemanagement',
                    qualityKpis: 'Kundenzufriedenheit 92%, Nacharbeitsquote 8%'
                },
                
                certifications: {
                    iso9001: 'In Implementierung (Zertifizierung bis Q3 2024)',
                    iso14001: '',
                    iso45001: 'G√ºltig bis 30.06.2024 (Verl√§ngerung erforderlich)',
                    additionalCertifications: 'Elektrofachkraft-Zertifizierung',
                    certificationBodies: 'T√úV Rheinland',
                    certificates: [
                        { name: 'ISO 45001', validUntil: '2024-06-30', status: 'l√§uft ab' }
                    ]
                },
                
                compliance: {
                    gdprCompliance: 'Grundlagen implementiert, Verbesserungsbedarf',
                    antiCorruption: 'Informelle Richtlinien',
                    exportControlCompliance: 'Nicht relevant',
                    sanctionsCompliance: 'Grundlegende Pr√ºfungen',
                    conflictMinerals: 'Nicht relevant',
                    codeOfConduct: 'In Entwicklung',
                    legalStructure: 'GmbH & Co. KG nach deutschem Recht',
                    contractualRequirements: 'Standard-AGB vorhanden',
                    litigationHistory: '1 kleinere Rechtsstreitigkeit (beigelegt)'
                },
                
                sustainability: {
                    environmentalPolicy: 'Grundlegende Umweltrichtlinien',
                    co2Footprint: 'Noch nicht gemessen',
                    energyManagement: 'Konventionelle Energieversorgung',
                    wasteManagement: 'Gesetzliche Mindestanforderungen',
                    waterManagement: 'Standard',
                    socialResponsibility: '3 Ausbildungspl√§tze',
                    sustainabilityGoals: 'Noch nicht definiert',
                    sustainabilityReporting: 'Kein separater Bericht',
                    greenProducts: 'Umweltfreundliche Reinigungsmittel'
                },
                
                risk: {
                    businessRisk: 'Mittel - Abh√§ngigkeit von wenigen Gro√ükunden',
                    financialRisk: 'Mittel - schwankende Auftragslage',
                    operationalRisk: 'Hoch - Fachkr√§ftemangel',
                    reputationalRisk: 'Mittel - vereinzelte Qualit√§tsprobleme',
                    geoRisk: 'Niedrig - lokaler Markt',
                    supplyChainRisk: 'Mittel - Abh√§ngigkeit von Ersatzteillieferanten',
                    riskMitigation: 'Informelle Risikobetrachtung',
                    businessContinuity: 'Grundlegende Notfallpl√§ne',
                    emergencyPlanning: 'Bereitschaftsdienst verf√ºgbar'
                },
                
                performance: {
                    qualityScore: 70,
                    deliveryScore: 60,
                    priceScore: 70,
                    serviceScore: 60,
                    innovationScore: 55,
                    sustainabilityScore: 45,
                    flexibilityScore: 75,
                    communicationScore: 65,
                    overallScore: 63,
                    performanceHistory: 'Schwankende Leistung, Verbesserungstrend',
                    kpiTracking: 'Monatliche Grundauswertung',
                    benchmarking: 'Unterdurchschnittlich'
                },
                
                audit: {
                    lastAuditDate: '2024-01-10',
                    nextAuditDate: '2024-07-10',
                    auditFrequency: 'Halbj√§hrlich (wegen kritischem Status)',
                    auditType: 'Fokus-Audit (Qualit√§t und Arbeitsschutz)',
                    auditResults: 'Befriedigend (65/100 Punkte)',
                    auditFindings: '5 Verbesserungsma√ünahmen, 1 kritischer Befund',
                    correctiveActions: '60% umgesetzt, 2 Ma√ünahmen √ºberf√§llig',
                    monitoringActivities: 'Monatliche √úberwachung erforderlich',
                    auditReports: 'Auditberichte verf√ºgbar'
                },
                
                documentation: {
                    contracts: 'Basis-Servicevertrag',
                    specifications: 'Technische Unterlagen teilweise vorhanden',
                    drawings: 'Begrenzte technische Dokumentation',
                    procedures: 'Grundlegende Arbeitsanweisungen',
                    reports: 'Monatliche Serviceberichte',
                    correspondenceLog: 'E-Mail-Archivierung teilweise',
                    documentControl: 'Verbesserungsbed√ºrftig',
                    retentionPolicy: '5 Jahre Aufbewahrung',
                    accessControl: 'Grundlegende Zugriffskontrolle'
                },
                
                communication: {
                    communicationChannels: 'Telefon, E-Mail, gelegentliche Meetings',
                    meetingFrequency: 'Quartalsweise (sollte h√§ufiger sein)',
                    escalationProcedures: 'Informelle Eskalation',
                    feedbackMechanisms: 'Direktes Feedback bei Problemen',
                    partnershipLevel: 'Operativer Lieferant',
                    strategicAlignment: 'Begrenzt',
                    jointDevelopment: 'Keine gemeinsamen Projekte',
                    futureOpportunities: 'Verbesserung der Servicequalit√§t',
                    relationshipManager: 'Anna Schmidt (Gesch√§ftsf√ºhrerin)'
                },
                
                metadata: {
                    createdAt: '2024-01-01T00:00:00.000Z',
                    updatedAt: '2024-01-10T14:20:00.000Z',
                    version: 2,
                    lastEvaluatedBy: 'Klaus Weber',
                    notes: 'Verbesserungsma√ünahmen erforderlich, erh√∂hte √úberwachung notwendig'
                }
            },
            
            {
                id: 'SUP003',
                
                // Tab 1: Stammdaten (Basic Data)
                basic: {
                    number: 'L-2024-003',
                    name: 'Entsorgung Hamburg GmbH',
                    legalForm: 'GmbH',
                    foundingYear: '1978',
                    employeeCount: '180',
                    turnover: '28 Millionen EUR',
                    mainActivity: 'Abfallentsorgung und Recycling',
                    description: 'F√ºhrender Entsorger f√ºr alle Arten von Industrieabf√§llen und Recycling',
                    status: 'freigegeben'
                },
                
                contact: {
                    headquarters: 'Hamburg, Deutschland',
                    address: 'Hafenstra√üe 10, 20459 Hamburg',
                    website: 'www.entsorgung-hamburg.de',
                    contactPerson: 'Peter M√ºller',
                    email: 'p.mueller@entsorgung-hh.de',
                    phone: '+49 40 555777',
                    fax: '+49 40 555778',
                    emergencyContact: 'Notfall-Hotline',
                    emergencyPhone: '+49 40 555999',
                    subsidiaries: 'Recycling Nord GmbH (Bremen), EcoService S√ºd GmbH (M√ºnchen)',
                    organizationChart: 'Gesch√§ftsf√ºhrung, Betrieb, Umwelt, Sicherheit, Verwaltung',
                    keyPersonnel: 'Peter M√ºller (CEO), Dr. Susanne Green (Umweltmanagerin)'
                },
                
                business: {
                    taxId: 'DE789123456',
                    vatId: 'DE654987321',
                    commercialRegister: 'HRB 789123',
                    handelsregisterNumber: 'Hamburg HRB 789123',
                    dunsNumber: '456789123',
                    bankDetails: 'Deutsche Bank Hamburg, IBAN: DE34 2007 0000 0567 8901 23',
                    creditRating: 'AA (Very Good)',
                    insurance: 'Zurich Versicherung',
                    liabilityInsurance: '20 Millionen EUR Umwelthaftpflicht'
                },
                
                products: {
                    mainProducts: ['Abfallentsorgung', 'Recycling', 'Sonderabfall', 'Beratung'],
                    productCategories: 'Gef√§hrliche Abf√§lle, Wertstoffe, Elektronikschrott, Beratung',
                    capacity: '50.000 Tonnen/Jahr',
                    maxCapacity: '65.000 Tonnen/Jahr',
                    deliveryTime: '24 Stunden (Notfall: 2 Stunden)',
                    minimumOrderQuantity: 'Abh√§ngig von Abfallart',
                    technicalSpecifications: 'Alle erforderlichen Genehmigungen vorhanden',
                    innovation: 'Neue Recyclingverfahren, Kreislaufwirtschaft',
                    rdCapabilities: 'Kooperation mit Umweltforschungsinstituten'
                },
                
                quality: {
                    qualityStandards: 'ISO 9001:2015, ISO 14001:2015, EMAS',
                    qualityPolicy: 'Umweltschutz und nachhaltige Entsorgung',
                    qualityObjectives: '99% ordnungsgem√§√üe Entsorgung, Null Umweltvorf√§lle',
                    qualityResponsible: 'Dr. Susanne Green',
                    testingCapabilities: 'Vollausgestattetes Labor, Schadstoffanalytik',
                    qualityDocumentation: 'Umfassendes QM-System',
                    improvementProcesses: 'Kontinuierlicher Verbesserungsprozess',
                    customerComplaints: 'Strukturiertes System, 24h-Hotline',
                    qualityKpis: 'Entsorgungsquote 99.8%, Null Umweltvorf√§lle'
                },
                
                certifications: {
                    iso9001: 'G√ºltig bis 31.12.2025',
                    iso14001: 'G√ºltig bis 15.08.2025',
                    iso45001: 'G√ºltig bis 20.09.2025',
                    additionalCertifications: 'EMAS, Entsorgungsfachbetrieb, ADR-Zertifikat',
                    certificationBodies: 'T√úV Nord, DEKRA',
                    certificates: [
                        { name: 'Entsorgungsnachweis', validUntil: '2025-03-31', status: 'g√ºltig' },
                        { name: 'ISO 14001', validUntil: '2025-08-15', status: 'g√ºltig' },
                        { name: 'EMAS', validUntil: '2025-12-31', status: 'g√ºltig' }
                    ]
                },
                
                compliance: {
                    gdprCompliance: 'Vollst√§ndig implementiert, extern auditiert',
                    antiCorruption: 'Umfassender Compliance-Kodex',
                    exportControlCompliance: 'Abfallexport nach Basel-Konvention',
                    sanctionsCompliance: 'Vollst√§ndige Compliance-Pr√ºfung',
                    conflictMinerals: 'Nicht relevant f√ºr Entsorgungsgesch√§ft',
                    codeOfConduct: 'Umfassender Verhaltenskodex',
                    legalStructure: 'GmbH nach deutschem Recht',
                    contractualRequirements: 'Umfassende Vertragswerke',
                    litigationHistory: 'Keine relevanten Rechtsstreitigkeiten'
                },
                
                sustainability: {
                    environmentalPolicy: 'Vorreiter in nachhaltiger Entsorgung',
                    co2Footprint: 'CO2-neutral seit 2020',
                    energyManagement: '100% erneuerbare Energien',
                    wasteManagement: '98% Recyclingquote, Null Deponierung',
                    waterManagement: 'Geschlossene Wasserkreisl√§ufe',
                    socialResponsibility: '15 Ausbildungspl√§tze, Umweltbildungsprogramme',
                    sustainabilityGoals: 'Kreislaufwirtschaft 2025, Innovationsf√ºhrer',
                    sustainabilityReporting: 'J√§hrlicher Umweltbericht, EMAS-validiert',
                    greenProducts: '100% der Services umweltorientiert'
                },
                
                risk: {
                    businessRisk: 'Niedrig - stabiler Markt, regulatorischer Schutz',
                    financialRisk: 'Niedrig - diversifizierte Kundenbasis',
                    operationalRisk: 'Mittel - Umgang mit gef√§hrlichen Stoffen',
                    reputationalRisk: 'Niedrig - ausgezeichneter Umweltruf',
                    geoRisk: 'Niedrig - stabiler Standort',
                    supplyChainRisk: 'Niedrig - wenig externe Abh√§ngigkeiten',
                    riskMitigation: 'Umfassendes Risikomanagement',
                    businessContinuity: 'Redundante Systeme, Notfallpl√§ne',
                    emergencyPlanning: '24/7 Bereitschaft, spezialisierte Teams'
                },
                
                performance: {
                    qualityScore: 95,
                    deliveryScore: 90,
                    priceScore: 85,
                    serviceScore: 95,
                    innovationScore: 88,
                    sustainabilityScore: 98,
                    flexibilityScore: 92,
                    communicationScore: 90,
                    overallScore: 92,
                    performanceHistory: 'Kontinuierlich excellente Leistung',
                    kpiTracking: 'Umfassendes KPI-System, monatliche Reviews',
                    benchmarking: 'Branchenf√ºhrer in allen Kategorien'
                },
                
                audit: {
                    lastAuditDate: '2024-01-20',
                    nextAuditDate: '2025-01-20',
                    auditFrequency: 'J√§hrlich',
                    auditType: 'Umfassendes Audit (Qualit√§t, Umwelt, Sicherheit)',
                    auditResults: 'Ausgezeichnet (98/100 Punkte)',
                    auditFindings: 'Keine kritischen Befunde, 1 Verbesserungsvorschlag',
                    correctiveActions: 'Alle Ma√ünahmen zeitnah umgesetzt',
                    monitoringActivities: 'Quartalsweise Reviews, kontinuierliches Monitoring',
                    auditReports: 'Vollst√§ndige Dokumentation verf√ºgbar'
                },
                
                documentation: {
                    contracts: 'Rahmenvertrag Entsorgung, Sondervertr√§ge f√ºr Projekte',
                    specifications: 'Detaillierte Entsorgungsverfahren dokumentiert',
                    drawings: 'Anlagenpl√§ne, Verfahrensschemata',
                    procedures: 'Umfassende Verfahrensanweisungen',
                    reports: 'Monatliche Entsorgungsberichte, Umweltberichte',
                    correspondenceLog: 'Vollst√§ndige Kommunikationshistorie',
                    documentControl: 'ISO-konformes Dokumentenmanagement',
                    retentionPolicy: '30 Jahre Aufbewahrung (gesetzlich)',
                    accessControl: 'H√∂chste Sicherheitsstandards'
                },
                
                communication: {
                    communicationChannels: 'Multi-Channel (digital und pers√∂nlich)',
                    meetingFrequency: 'Monatliche Abstimmungen, quartalsweise Strategiemeetings',
                    escalationProcedures: 'Klare Eskalationswege implementiert',
                    feedbackMechanisms: 'Strukturierte Feedbackprozesse',
                    partnershipLevel: 'Strategischer Partner',
                    strategicAlignment: 'Gemeinsame Nachhaltigkeitsziele',
                    jointDevelopment: 'Neue Recyclingverfahren, Kreislaufwirtschaft',
                    futureOpportunities: 'Expansion der Partnerschaft, neue Services',
                    relationshipManager: 'Dr. Susanne Green (Umweltmanagerin)'
                },
                
                metadata: {
                    createdAt: '2024-01-01T00:00:00.000Z',
                    updatedAt: '2024-01-20T16:45:00.000Z',
                    version: 4,
                    lastEvaluatedBy: 'Dr. Maria Weber',
                    notes: 'Ausgezeichneter Partner mit h√∂chsten Standards in allen Bereichen'
                }
            }
        ];

        this.saveSuppliersToStorage(defaultSuppliers);
        return defaultSuppliers;
    }

    // Enhanced supplier management methods
    showSupplierModal(supplierId = null) {
        const modal = document.getElementById('supplierModal');
        const form = document.getElementById('supplierForm');
        const titleText = document.getElementById('supplierModalTitleText');
        
        if (supplierId) {
            // Edit mode
            titleText.textContent = 'Lieferant bearbeiten';
            this.populateSupplierForm(supplierId);
        } else {
            // Add mode
            titleText.textContent = 'Neuer Lieferant';
            form.reset();
            this.generateSupplierNumber();
            this.currentCertificates = {}; // Reset certificates for new supplier
        }
        
        this.setupSupplierFormTabs();
        this.setupScoreSliders();
        this.setupCertificateManagement();
        modal.style.display = 'block';
    }

    generateSupplierNumber() {
        const year = new Date().getFullYear();
        const existingNumbers = this.suppliers.map(s => s.number);
        let counter = 1;
        let newNumber;
        
        do {
            newNumber = `L-${year}-${counter.toString().padStart(3, '0')}`;
            counter++;
        } while (existingNumbers.includes(newNumber));
        
        document.getElementById('supplierNumber').value = newNumber;
    }

    setupSupplierFormTabs() {
        const tabs = document.querySelectorAll('.supplier-form-tab');
        const contents = document.querySelectorAll('.supplier-form-content');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.getAttribute('data-tab');
                
                // Update active tab
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update active content
                contents.forEach(content => {
                    content.classList.toggle('active', content.getAttribute('data-tab') === targetTab);
                });
            });
        });
    }

    setupScoreSliders() {
        const sliders = ['supplierQualityScore', 'supplierDeliveryScore', 'supplierPriceScore', 'supplierServiceScore'];
        
        sliders.forEach(sliderId => {
            const slider = document.getElementById(sliderId);
            const valueSpan = document.getElementById(sliderId + 'Value');
            
            if (slider && valueSpan) {
                slider.addEventListener('input', () => {
                    valueSpan.textContent = slider.value + '%';
                    this.updateOverallScore();
                });
            }
        });

        // Setup evaluation form sliders too
        const evalSliders = ['evalQualityScore', 'evalDeliveryScore', 'evalPriceScore', 'evalServiceScore'];
        
        evalSliders.forEach(sliderId => {
            const slider = document.getElementById(sliderId);
            const valueSpan = document.getElementById(sliderId + 'Value');
            
            if (slider && valueSpan) {
                slider.addEventListener('input', () => {
                    valueSpan.textContent = slider.value + '%';
                    this.updateEvalOverallScore();
                });
            }
        });
    }

    updateOverallScore() {
        const quality = parseInt(document.getElementById('supplierQualityScore')?.value || 0);
        const delivery = parseInt(document.getElementById('supplierDeliveryScore')?.value || 0);
        const price = parseInt(document.getElementById('supplierPriceScore')?.value || 0);
        const service = parseInt(document.getElementById('supplierServiceScore')?.value || 0);
        
        const overall = Math.round((quality + delivery + price + service) / 4);
        const overallSpan = document.getElementById('supplierOverallScore');
        if (overallSpan) {
            overallSpan.textContent = overall + '%';
        }
    }

    updateEvalOverallScore() {
        const quality = parseInt(document.getElementById('evalQualityScore')?.value || 0);
        const delivery = parseInt(document.getElementById('evalDeliveryScore')?.value || 0);
        const price = parseInt(document.getElementById('evalPriceScore')?.value || 0);
        const service = parseInt(document.getElementById('evalServiceScore')?.value || 0);
        
        const overall = Math.round((quality + delivery + price + service) / 4);
        const overallSpan = document.getElementById('evalOverallScore');
        if (overallSpan) {
            overallSpan.textContent = overall + '%';
        }
    }

    populateSupplierForm(supplierId) {
        const supplier = this.suppliers.find(s => s.id === supplierId);
        if (!supplier) return;

        // Handle both old and new data structures for backward compatibility
        const isOldStructure = supplier.number !== undefined; // Old structure has direct properties
        
        // Helper function to get value from either old or new structure
        const getValue = (newPath, oldPath, defaultValue = '') => {
            if (isOldStructure) {
                return this.getNestedValue(supplier, oldPath) || defaultValue;
            } else {
                return this.getNestedValue(supplier, newPath) || defaultValue;
            }
        };

        // Tab 1: Stammdaten (Basic Data)
        this.setInputValue('supplierNumber', getValue('basic.number', 'number'));
        this.setInputValue('supplierName', getValue('basic.name', 'name'));
        this.setInputValue('legalForm', getValue('basic.legalForm', ''));
        this.setInputValue('foundingYear', getValue('basic.foundingYear', ''));
        this.setInputValue('employeeCount', getValue('basic.employeeCount', ''));
        this.setInputValue('turnover', getValue('basic.turnover', ''));
        this.setInputValue('mainActivity', getValue('basic.mainActivity', ''));
        this.setInputValue('supplierDescription', getValue('basic.description', 'description'));
        this.setInputValue('supplierStatus', getValue('basic.status', 'status', 'neu'));

        // Tab 2: Kontakt & Struktur (Contact & Structure)
        this.setInputValue('headquarters', getValue('contact.headquarters', ''));
        this.setInputValue('supplierAddress', getValue('contact.address', 'contact.address'));
        this.setInputValue('supplierWebsite', getValue('contact.website', 'contact.website'));
        this.setInputValue('contactPerson', getValue('contact.contactPerson', 'contact.person'));
        this.setInputValue('contactEmail', getValue('contact.email', 'contact.email'));
        this.setInputValue('contactPhone', getValue('contact.phone', 'contact.phone'));
        this.setInputValue('contactFax', getValue('contact.fax', 'contact.fax'));
        this.setInputValue('emergencyContact', getValue('contact.emergencyContact', ''));
        this.setInputValue('emergencyPhone', getValue('contact.emergencyPhone', ''));
        this.setInputValue('subsidiaries', getValue('contact.subsidiaries', ''));
        this.setInputValue('organizationChart', getValue('contact.organizationChart', ''));
        this.setInputValue('keyPersonnel', getValue('contact.keyPersonnel', ''));

        // Tab 3: Gesch√§ftsdaten (Business Data)
        this.setInputValue('supplierTaxId', getValue('business.taxId', 'contact.taxId'));
        this.setInputValue('vatId', getValue('business.vatId', ''));
        this.setInputValue('commercialRegister', getValue('business.commercialRegister', ''));
        this.setInputValue('handelsregisterNumber', getValue('business.handelsregisterNumber', ''));
        this.setInputValue('dunsNumber', getValue('business.dunsNumber', ''));
        this.setInputValue('bankDetails', getValue('business.bankDetails', ''));
        this.setInputValue('creditRating', getValue('business.creditRating', ''));
        this.setInputValue('insurance', getValue('business.insurance', ''));
        this.setInputValue('liabilityInsurance', getValue('business.liabilityInsurance', ''));

        // Tab 4: Produkte & Kapazit√§ten (Products & Capacities)
        const products = getValue('products.mainProducts', 'products');
        this.setInputValue('supplierProducts', Array.isArray(products) ? products.join(', ') : products);
        this.setInputValue('productCategories', getValue('products.productCategories', ''));
        this.setInputValue('supplierCapacity', getValue('products.capacity', 'capacity'));
        this.setInputValue('maxCapacity', getValue('products.maxCapacity', ''));
        this.setInputValue('supplierDeliveryTime', getValue('products.deliveryTime', 'deliveryTime'));
        this.setInputValue('minimumOrderQuantity', getValue('products.minimumOrderQuantity', ''));
        this.setInputValue('technicalSpecifications', getValue('products.technicalSpecifications', ''));
        this.setInputValue('innovation', getValue('products.innovation', ''));
        this.setInputValue('rdCapabilities', getValue('products.rdCapabilities', ''));

        // Tab 5: Qualit√§tssystem (Quality System)
        this.setInputValue('supplierQualityStandards', getValue('quality.qualityStandards', 'qualityStandards'));
        this.setInputValue('qualityPolicy', getValue('quality.qualityPolicy', ''));
        this.setInputValue('qualityObjectives', getValue('quality.qualityObjectives', ''));
        this.setInputValue('qualityResponsible', getValue('quality.qualityResponsible', ''));
        this.setInputValue('testingCapabilities', getValue('quality.testingCapabilities', ''));
        this.setInputValue('qualityDocumentation', getValue('quality.qualityDocumentation', ''));
        this.setInputValue('improvementProcesses', getValue('quality.improvementProcesses', ''));
        this.setInputValue('customerComplaints', getValue('quality.customerComplaints', ''));
        this.setInputValue('qualityKpis', getValue('quality.qualityKpis', ''));

        // Tab 6: Zertifizierungen (Certifications)
        this.setInputValue('iso9001', getValue('certifications.iso9001', ''));
        this.setInputValue('iso14001', getValue('certifications.iso14001', ''));
        this.setInputValue('iso45001', getValue('certifications.iso45001', ''));
        this.setInputValue('additionalCertifications', getValue('certifications.additionalCertifications', ''));
        this.setInputValue('certificationBodies', getValue('certifications.certificationBodies', ''));

        // Tab 7: Compliance & Recht (Compliance & Legal)
        this.setInputValue('gdprCompliance', getValue('compliance.gdprCompliance', ''));
        this.setInputValue('antiCorruption', getValue('compliance.antiCorruption', ''));
        this.setInputValue('exportControlCompliance', getValue('compliance.exportControlCompliance', ''));
        this.setInputValue('sanctionsCompliance', getValue('compliance.sanctionsCompliance', ''));
        this.setInputValue('conflictMinerals', getValue('compliance.conflictMinerals', ''));
        this.setInputValue('codeOfConduct', getValue('compliance.codeOfConduct', ''));
        this.setInputValue('legalStructure', getValue('compliance.legalStructure', ''));
        this.setInputValue('contractualRequirements', getValue('compliance.contractualRequirements', ''));
        this.setInputValue('litigationHistory', getValue('compliance.litigationHistory', ''));

        // Tab 8: Nachhaltigkeit (Sustainability)
        this.setInputValue('environmentalPolicy', getValue('sustainability.environmentalPolicy', ''));
        this.setInputValue('co2Footprint', getValue('sustainability.co2Footprint', ''));
        this.setInputValue('energyManagement', getValue('sustainability.energyManagement', ''));
        this.setInputValue('wasteManagement', getValue('sustainability.wasteManagement', ''));
        this.setInputValue('waterManagement', getValue('sustainability.waterManagement', ''));
        this.setInputValue('socialResponsibility', getValue('sustainability.socialResponsibility', ''));
        this.setInputValue('sustainabilityGoals', getValue('sustainability.sustainabilityGoals', ''));
        this.setInputValue('sustainabilityReporting', getValue('sustainability.sustainabilityReporting', ''));
        this.setInputValue('greenProducts', getValue('sustainability.greenProducts', ''));

        // Tab 9: Risikobewertung (Risk Assessment)
        this.setInputValue('businessRisk', getValue('risk.businessRisk', ''));
        this.setInputValue('financialRisk', getValue('risk.financialRisk', ''));
        this.setInputValue('operationalRisk', getValue('risk.operationalRisk', ''));
        this.setInputValue('reputationalRisk', getValue('risk.reputationalRisk', ''));
        this.setInputValue('geoRisk', getValue('risk.geoRisk', ''));
        this.setInputValue('supplyChainRisk', getValue('risk.supplyChainRisk', ''));
        this.setInputValue('riskMitigation', getValue('risk.riskMitigation', ''));
        this.setInputValue('businessContinuity', getValue('risk.businessContinuity', ''));
        this.setInputValue('emergencyPlanning', getValue('risk.emergencyPlanning', ''));

        // Tab 10: Performance-Bewertung (Performance Evaluation)
        this.setInputValue('supplierQualityScore', getValue('performance.qualityScore', 'evaluation.criteria.quality', 75));
        this.setInputValue('supplierDeliveryScore', getValue('performance.deliveryScore', 'evaluation.criteria.delivery', 75));
        this.setInputValue('supplierPriceScore', getValue('performance.priceScore', 'evaluation.criteria.price', 75));
        this.setInputValue('supplierServiceScore', getValue('performance.serviceScore', 'evaluation.criteria.service', 75));
        this.setInputValue('innovationScore', getValue('performance.innovationScore', '', 75));
        this.setInputValue('sustainabilityScore', getValue('performance.sustainabilityScore', '', 75));
        this.setInputValue('flexibilityScore', getValue('performance.flexibilityScore', '', 75));
        this.setInputValue('communicationScore', getValue('performance.communicationScore', '', 75));
        this.setInputValue('performanceHistory', getValue('performance.performanceHistory', ''));
        this.setInputValue('kpiTracking', getValue('performance.kpiTracking', ''));
        this.setInputValue('benchmarking', getValue('performance.benchmarking', ''));

        // Tab 11: Audit & Monitoring (Audit & Monitoring)
        this.setInputValue('lastAuditDate', getValue('audit.lastAuditDate', ''));
        this.setInputValue('nextAuditDate', getValue('audit.nextAuditDate', ''));
        this.setInputValue('auditFrequency', getValue('audit.auditFrequency', ''));
        this.setInputValue('auditType', getValue('audit.auditType', ''));
        this.setInputValue('auditResults', getValue('audit.auditResults', ''));
        this.setInputValue('auditFindings', getValue('audit.auditFindings', ''));
        this.setInputValue('correctiveActions', getValue('audit.correctiveActions', ''));
        this.setInputValue('monitoringActivities', getValue('audit.monitoringActivities', ''));
        this.setInputValue('auditReports', getValue('audit.auditReports', ''));

        // Tab 12: Dokumentation (Documentation)
        this.setInputValue('contracts', getValue('documentation.contracts', ''));
        this.setInputValue('specifications', getValue('documentation.specifications', ''));
        this.setInputValue('drawings', getValue('documentation.drawings', ''));
        this.setInputValue('procedures', getValue('documentation.procedures', ''));
        this.setInputValue('reports', getValue('documentation.reports', ''));
        this.setInputValue('correspondenceLog', getValue('documentation.correspondenceLog', ''));
        this.setInputValue('documentControl', getValue('documentation.documentControl', ''));
        this.setInputValue('retentionPolicy', getValue('documentation.retentionPolicy', ''));
        this.setInputValue('accessControl', getValue('documentation.accessControl', ''));

        // Tab 13: Kommunikation (Communication)
        this.setInputValue('communicationChannels', getValue('communication.communicationChannels', ''));
        this.setInputValue('meetingFrequency', getValue('communication.meetingFrequency', ''));
        this.setInputValue('escalationProcedures', getValue('communication.escalationProcedures', ''));
        this.setInputValue('feedbackMechanisms', getValue('communication.feedbackMechanisms', ''));
        this.setInputValue('partnershipLevel', getValue('communication.partnershipLevel', ''));
        this.setInputValue('strategicAlignment', getValue('communication.strategicAlignment', ''));
        this.setInputValue('jointDevelopment', getValue('communication.jointDevelopment', ''));
        this.setInputValue('futureOpportunities', getValue('communication.futureOpportunities', ''));
        this.setInputValue('relationshipManager', getValue('communication.relationshipManager', ''));

        // Evaluation notes (from metadata)
        this.setInputValue('evaluationNotes', getValue('metadata.notes', 'evaluation.notes'));

        // Update score displays for all performance sliders
        ['supplierQualityScore', 'supplierDeliveryScore', 'supplierPriceScore', 'supplierServiceScore',
         'innovationScore', 'sustainabilityScore', 'flexibilityScore', 'communicationScore'].forEach(id => {
            const slider = document.getElementById(id);
            const valueSpan = document.getElementById(id + 'Value');
            if (slider && valueSpan) {
                valueSpan.textContent = slider.value + '%';
            }
        });

        // Update overall score display
        this.updateOverallScore();

        // Store current editing ID
        this.currentEditingSupplierId = supplierId;
    }

    // Helper function to safely set input values
    setInputValue(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.value = value || '';
        }
    }

    // Helper function to get nested object values safely
    getNestedValue(obj, path) {
        return path.split('.').reduce((current, key) => current && current[key], obj);
    }

    // Custom validation function that handles hidden fields
    validateSupplierForm() {
        const requiredFields = [
            { id: 'supplierNumber', name: 'Lieferantennummer', tab: 'basic' },
            { id: 'supplierName', name: 'Lieferantenname', tab: 'basic' }
        ];
        
        // Check basic required fields
        for (const field of requiredFields) {
            const element = document.getElementById(field.id);
            if (!element || !element.value.trim()) {
                this.showValidationError(field.name + ' ist erforderlich.', field.tab);
                return false;
            }
        }
        
        // Validate certificate fields (only if they have content)
        const certificateFields = document.querySelectorAll('.certificate-field');
        for (const field of certificateFields) {
            const certId = field.getAttribute('data-cert-id');
            const nameInput = document.getElementById(`certName_${certId}`);
            const validUntilInput = document.getElementById(`certValidUntil_${certId}`);
            
            // If certificate name is filled, date is required
            if (nameInput && nameInput.value.trim()) {
                if (!validUntilInput || !validUntilInput.value) {
                    this.showValidationError('G√ºltigkeitsdatum ist erforderlich f√ºr Zertifikat: ' + nameInput.value, 'certifications');
                    return false;
                }
            }
        }
        
        return true;
    }
    
    // Show validation error and switch to appropriate tab
    showValidationError(message, tabName) {
        alert(message);
        
        // Switch to the tab containing the error
        if (tabName) {
            const tabButton = document.querySelector(`[data-tab="${tabName}"]`);
            if (tabButton) {
                tabButton.click();
            }
        }
    }

    saveSupplier() {
        const form = document.getElementById('supplierForm');
        
        // Custom validation that handles hidden fields properly
        const isValid = this.validateSupplierForm();
        if (!isValid) {
            return;
        }

        const formData = new FormData(form);
        
        // Comprehensive supplier data structure for all 13 tabs
        const supplierData = {
            id: this.currentEditingSupplierId || 'SUP' + Date.now(),
            
            // Tab 1: Stammdaten (Basic Data)
            basic: {
                number: formData.get('supplierNumber'),
                name: formData.get('supplierName'),
                legalForm: formData.get('legalForm'),
                foundingYear: formData.get('foundingYear'),
                employeeCount: formData.get('employeeCount'),
                turnover: formData.get('turnover'),
                mainActivity: formData.get('mainActivity'),
                description: formData.get('supplierDescription'),
                status: formData.get('supplierStatus')
            },
            
            // Tab 2: Kontakt & Struktur (Contact & Structure)
            contact: {
                headquarters: formData.get('headquarters'),
                address: formData.get('supplierAddress'),
                website: formData.get('supplierWebsite'),
                contactPerson: formData.get('contactPerson'),
                email: formData.get('contactEmail'),
                phone: formData.get('contactPhone'),
                fax: formData.get('contactFax'),
                emergencyContact: formData.get('emergencyContact'),
                emergencyPhone: formData.get('emergencyPhone'),
                subsidiaries: formData.get('subsidiaries'),
                organizationChart: formData.get('organizationChart'),
                keyPersonnel: formData.get('keyPersonnel')
            },
            
            // Tab 3: Gesch√§ftsdaten (Business Data)
            business: {
                taxId: formData.get('supplierTaxId'),
                vatId: formData.get('vatId'),
                commercialRegister: formData.get('commercialRegister'),
                handelsregisterNumber: formData.get('handelsregisterNumber'),
                dunsNumber: formData.get('dunsNumber'),
                bankDetails: formData.get('bankDetails'),
                creditRating: formData.get('creditRating'),
                insurance: formData.get('insurance'),
                liabilityInsurance: formData.get('liabilityInsurance')
            },
            
            // Tab 4: Produkte & Kapazit√§ten (Products & Capacities)
            products: {
                mainProducts: formData.get('supplierProducts') ? formData.get('supplierProducts').split(',').map(p => p.trim()).filter(p => p) : [],
                productCategories: formData.get('productCategories'),
                capacity: formData.get('supplierCapacity'),
                maxCapacity: formData.get('maxCapacity'),
                deliveryTime: formData.get('supplierDeliveryTime'),
                minimumOrderQuantity: formData.get('minimumOrderQuantity'),
                technicalSpecifications: formData.get('technicalSpecifications'),
                innovation: formData.get('innovation'),
                rdCapabilities: formData.get('rdCapabilities')
            },
            
            // Tab 5: Qualit√§tssystem (Quality System)
            quality: {
                qualityStandards: formData.get('supplierQualityStandards'),
                qualityPolicy: formData.get('qualityPolicy'),
                qualityObjectives: formData.get('qualityObjectives'),
                qualityResponsible: formData.get('qualityResponsible'),
                testingCapabilities: formData.get('testingCapabilities'),
                qualityDocumentation: formData.get('qualityDocumentation'),
                improvementProcesses: formData.get('improvementProcesses'),
                customerComplaints: formData.get('customerComplaints'),
                qualityKpis: formData.get('qualityKpis')
            },
            
            // Tab 6: Zertifizierungen (Certifications)
            certifications: {
                iso9001: formData.get('iso9001'),
                iso14001: formData.get('iso14001'),
                iso45001: formData.get('iso45001'),
                additionalCertifications: formData.get('additionalCertifications'),
                certificationBodies: formData.get('certificationBodies'),
                certificates: this.collectCertificateData()
            },
            
            // Tab 7: Compliance & Recht (Compliance & Legal)
            compliance: {
                gdprCompliance: formData.get('gdprCompliance'),
                antiCorruption: formData.get('antiCorruption'),
                exportControlCompliance: formData.get('exportControlCompliance'),
                sanctionsCompliance: formData.get('sanctionsCompliance'),
                conflictMinerals: formData.get('conflictMinerals'),
                codeOfConduct: formData.get('codeOfConduct'),
                legalStructure: formData.get('legalStructure'),
                contractualRequirements: formData.get('contractualRequirements'),
                litigationHistory: formData.get('litigationHistory')
            },
            
            // Tab 8: Nachhaltigkeit (Sustainability)
            sustainability: {
                environmentalPolicy: formData.get('environmentalPolicy'),
                co2Footprint: formData.get('co2Footprint'),
                energyManagement: formData.get('energyManagement'),
                wasteManagement: formData.get('wasteManagement'),
                waterManagement: formData.get('waterManagement'),
                socialResponsibility: formData.get('socialResponsibility'),
                sustainabilityGoals: formData.get('sustainabilityGoals'),
                sustainabilityReporting: formData.get('sustainabilityReporting'),
                greenProducts: formData.get('greenProducts')
            },
            
            // Tab 9: Risikobewertung (Risk Assessment)
            risk: {
                businessRisk: formData.get('businessRisk'),
                financialRisk: formData.get('financialRisk'),
                operationalRisk: formData.get('operationalRisk'),
                reputationalRisk: formData.get('reputationalRisk'),
                geoRisk: formData.get('geoRisk'),
                supplyChainRisk: formData.get('supplyChainRisk'),
                riskMitigation: formData.get('riskMitigation'),
                businessContinuity: formData.get('businessContinuity'),
                emergencyPlanning: formData.get('emergencyPlanning')
            },
            
            // Tab 10: Performance-Bewertung (Performance Evaluation)
            performance: {
                qualityScore: parseInt(formData.get('supplierQualityScore')) || 0,
                deliveryScore: parseInt(formData.get('supplierDeliveryScore')) || 0,
                priceScore: parseInt(formData.get('supplierPriceScore')) || 0,
                serviceScore: parseInt(formData.get('supplierServiceScore')) || 0,
                innovationScore: parseInt(formData.get('innovationScore')) || 0,
                sustainabilityScore: parseInt(formData.get('sustainabilityScore')) || 0,
                flexibilityScore: parseInt(formData.get('flexibilityScore')) || 0,
                communicationScore: parseInt(formData.get('communicationScore')) || 0,
                overallScore: 0, // Will be calculated
                performanceHistory: formData.get('performanceHistory'),
                kpiTracking: formData.get('kpiTracking'),
                benchmarking: formData.get('benchmarking')
            },
            
            // Tab 11: Audit & Monitoring (Audit & Monitoring)
            audit: {
                lastAuditDate: formData.get('lastAuditDate'),
                nextAuditDate: formData.get('nextAuditDate'),
                auditFrequency: formData.get('auditFrequency'),
                auditType: formData.get('auditType'),
                auditResults: formData.get('auditResults'),
                auditFindings: formData.get('auditFindings'),
                correctiveActions: formData.get('correctiveActions'),
                monitoringActivities: formData.get('monitoringActivities'),
                auditReports: formData.get('auditReports')
            },
            
            // Tab 12: Dokumentation (Documentation)
            documentation: {
                contracts: formData.get('contracts'),
                specifications: formData.get('specifications'),
                drawings: formData.get('drawings'),
                procedures: formData.get('procedures'),
                reports: formData.get('reports'),
                correspondenceLog: formData.get('correspondenceLog'),
                documentControl: formData.get('documentControl'),
                retentionPolicy: formData.get('retentionPolicy'),
                accessControl: formData.get('accessControl')
            },
            
            // Tab 13: Kommunikation (Communication)
            communication: {
                communicationChannels: formData.get('communicationChannels'),
                meetingFrequency: formData.get('meetingFrequency'),
                escalationProcedures: formData.get('escalationProcedures'),
                feedbackMechanisms: formData.get('feedbackMechanisms'),
                partnershipLevel: formData.get('partnershipLevel'),
                strategicAlignment: formData.get('strategicAlignment'),
                jointDevelopment: formData.get('jointDevelopment'),
                futureOpportunities: formData.get('futureOpportunities'),
                relationshipManager: formData.get('relationshipManager')
            },
            
            // Metadata
            metadata: {
                createdAt: this.currentEditingSupplierId ? 
                    this.suppliers.find(s => s.id === this.currentEditingSupplierId)?.metadata?.createdAt : new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                version: this.currentEditingSupplierId ? 
                    ((this.suppliers.find(s => s.id === this.currentEditingSupplierId)?.metadata?.version || 0) + 1) : 1,
                lastEvaluatedBy: this.getCurrentUser()?.name || 'Unknown',
                notes: formData.get('evaluationNotes')
            }
        };
        
        // Calculate overall performance score
        const scores = [
            supplierData.performance.qualityScore,
            supplierData.performance.deliveryScore,
            supplierData.performance.priceScore,
            supplierData.performance.serviceScore,
            supplierData.performance.innovationScore,
            supplierData.performance.sustainabilityScore,
            supplierData.performance.flexibilityScore,
            supplierData.performance.communicationScore
        ].filter(score => score > 0);
        
        supplierData.performance.overallScore = scores.length > 0 ? 
            Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length) : 0;

        // Check for duplicate supplier number (only for new suppliers or when number changed)
        const existingSupplier = this.suppliers.find(s => s.basic?.number === supplierData.basic.number);
        if (existingSupplier && (!this.currentEditingSupplierId || existingSupplier.id !== this.currentEditingSupplierId)) {
            alert('Diese Lieferantennummer ist bereits vergeben. Bitte w√§hlen Sie eine andere.');
            return;
        }

        if (this.currentEditingSupplierId) {
            // Update existing supplier
            const index = this.suppliers.findIndex(s => s.id === this.currentEditingSupplierId);
            if (index !== -1) {
                this.suppliers[index] = supplierData;
            }
        } else {
            // Add new supplier
            this.suppliers.push(supplierData);
        }

        this.saveSuppliersToStorage();
        this.renderSupplierDashboard();
        this.renderSupplierList();
        
        // Determine action before clearing the editing ID
        const action = this.currentEditingSupplierId ? 'aktualisiert' : 'hinzugef√ºgt';
        
        // Close modal and reset editing state
        document.getElementById('supplierModal').style.display = 'none';
        this.currentEditingSupplierId = null;

        alert(`Lieferant "${supplierData.basic.name}" wurde erfolgreich ${action}.`);
    }

    filterSuppliers() {
        console.log('Filtering suppliers...');
        this.renderSupplierList();
    }

    renderSupplierTabContent(tabName) {
        switch (tabName) {
            case 'overview':
                this.renderSupplierDashboard();
                break;
            case 'suppliers':
                this.renderSupplierList();
                break;
            case 'evaluations':
                this.renderSupplierEvaluations();
                break;
            case 'documents':
                this.renderSupplierDocuments();
                break;
            case 'audits':
                this.renderSupplierAudits();
                break;
        }
    }

    renderSupplierDashboard() {
        const stats = this.calculateSupplierStats();
        this.updateSupplierStatistics(stats);
        this.renderRecentSupplierActivity();
    }

    calculateSupplierStats() {
        const suppliers = this.suppliers || [];
        
        const stats = {
            total: suppliers.length,
            approved: suppliers.filter(s => s.status === 'freigegeben').length,
            critical: suppliers.filter(s => s.status === 'kritisch').length,
            blocked: suppliers.filter(s => s.status === 'gesperrt').length,
            new: suppliers.filter(s => s.status === 'neu').length
        };

        stats.avgScore = suppliers.length > 0 
            ? Math.round(suppliers.reduce((sum, s) => sum + (s.evaluation?.score || 0), 0) / suppliers.length)
            : 0;

        return stats;
    }

    updateSupplierStatistics(stats) {
        const elements = {
            total: document.getElementById('totalSuppliersCount'),
            approved: document.getElementById('approvedSuppliersCount'),
            critical: document.getElementById('criticalSuppliersCount'),
            blocked: document.getElementById('blockedSuppliersCount'),
            avgScore: document.getElementById('avgSupplierScore')
        };

        if (elements.total) elements.total.textContent = stats.total;
        if (elements.approved) elements.approved.textContent = stats.approved;
        if (elements.critical) elements.critical.textContent = stats.critical;
        if (elements.blocked) elements.blocked.textContent = stats.blocked;
        if (elements.avgScore) elements.avgScore.textContent = stats.avgScore + '%';
    }

    renderSupplierList() {
        const container = document.getElementById('suppliersList');
        if (!container) return;

        const filteredSuppliers = this.getFilteredSuppliers();
        
        if (filteredSuppliers.length === 0) {
            container.innerHTML = '<p class="no-data">Keine Lieferanten gefunden.</p>';
            return;
        }

        container.innerHTML = filteredSuppliers.map(supplier => `
            <div class="supplier-card" data-id="${supplier.id}">
                <div class="supplier-header">
                    <div class="supplier-info">
                        <h3>${supplier.name}</h3>
                        <span class="supplier-number">${supplier.number}</span>
                    </div>
                    <div class="supplier-status">
                        <span class="status-badge status-${supplier.status}">${this.getStatusLabel(supplier.status)}</span>
                        <span class="supplier-type">${this.getTypeLabel(supplier.type)}</span>
                    </div>
                </div>
                <div class="supplier-details">
                    <div class="supplier-contact">
                        <i class="fas fa-user"></i>
                        <span>${supplier.contact.person}</span>
                        <i class="fas fa-envelope"></i>
                        <span>${supplier.contact.email}</span>
                    </div>
                    <div class="supplier-products">
                        <i class="fas fa-box"></i>
                        <span>${supplier.products.join(', ')}</span>
                    </div>
                </div>
                <div class="supplier-metrics">
                    <div class="metric">
                        <span class="metric-label">Bewertung</span>
                        <span class="metric-value">${supplier.evaluation?.score || 0}%</span>
                    </div>
                    <div class="metric">
                        <span class="metric-label">Zertifikate</span>
                        <span class="metric-value">${supplier.certificates?.length || 0}</span>
                    </div>
                </div>
                <div class="supplier-actions">
                    <button class="btn-secondary" onclick="qhseDashboard.editSupplier('${supplier.id}')">
                        <i class="fas fa-edit"></i> Bearbeiten
                    </button>
                    <button class="btn-primary" onclick="qhseDashboard.evaluateSupplier('${supplier.id}')">
                        <i class="fas fa-star"></i> Bewerten
                    </button>
                </div>
            </div>
        `).join('');
    }

    getFilteredSuppliers() {
        const suppliers = this.suppliers || [];
        const statusFilter = document.getElementById('supplierStatusFilter')?.value || 'all';
        const typeFilter = document.getElementById('supplierTypeFilter')?.value || 'all';
        const searchTerm = document.getElementById('supplierSearch')?.value.toLowerCase() || '';

        return suppliers.filter(supplier => {
            const matchesStatus = statusFilter === '' || supplier.status === statusFilter;
            const matchesType = typeFilter === '' || supplier.type === typeFilter;
            const matchesSearch = !searchTerm || 
                supplier.name.toLowerCase().includes(searchTerm) ||
                supplier.number.toLowerCase().includes(searchTerm) ||
                supplier.contact.person.toLowerCase().includes(searchTerm);

            return matchesStatus && matchesType && matchesSearch;
        });
    }

    getStatusLabel(status) {
        const labels = {
            'freigegeben': 'Freigegeben',
            'kritisch': 'Kritisch',
            'gesperrt': 'Gesperrt',
            'neu': 'Neu'
        };
        return labels[status] || status;
    }

    getTypeLabel(type) {
        const labels = {
            'warenlieferant': 'Warenlieferant',
            'dienstleister': 'Dienstleister',
            'entsorger': 'Entsorger',
            'pruefinstitut': 'Pr√ºfinstitut'
        };
        return labels[type] || type;
    }

    renderSupplierEvaluations() {
        const container = document.getElementById('supplierEvaluationsList');
        if (!container) return;
        
        const evaluations = this.suppliers.filter(s => s.evaluation).map(supplier => ({
            ...supplier.evaluation,
            supplierName: supplier.name,
            supplierId: supplier.id,
            status: supplier.status
        })).sort((a, b) => new Date(b.lastEvaluated) - new Date(a.lastEvaluated));
        
        if (evaluations.length === 0) {
            container.innerHTML = '<p class="no-data">Noch keine Bewertungen vorhanden.</p>';
            return;
        }

        container.innerHTML = `
            <div class="evaluations-header">
                <h3>Bewertungs√ºbersicht</h3>
                <button class="btn-primary" onclick="qhseDashboard.openEvaluationModal()">
                    <i class="fas fa-plus"></i> Neue Bewertung
                </button>
            </div>
            <div class="evaluations-list">
                ${evaluations.map(evaluation => `
                    <div class="evaluation-card">
                        <div class="evaluation-header">
                            <h4>${evaluation.supplierName}</h4>
                            <span class="evaluation-score ${evaluation.score >= 80 ? 'success' : evaluation.score >= 60 ? 'warning' : 'danger'}">
                                ${evaluation.score}%
                            </span>
                        </div>
                        <div class="evaluation-details">
                            <div class="evaluation-criteria">
                                <div class="criterion-small">
                                    <span>Qualit√§t</span>
                                    <span>${evaluation.criteria.quality}%</span>
                                </div>
                                <div class="criterion-small">
                                    <span>Lieferung</span>
                                    <span>${evaluation.criteria.delivery}%</span>
                                </div>
                                <div class="criterion-small">
                                    <span>Preis</span>
                                    <span>${evaluation.criteria.price}%</span>
                                </div>
                                <div class="criterion-small">
                                    <span>Service</span>
                                    <span>${evaluation.criteria.service}%</span>
                                </div>
                            </div>
                            <div class="evaluation-meta">
                                <span class="evaluation-date">${formatDate(evaluation.lastEvaluated)}</span>
                                <span class="evaluation-status status-${evaluation.status}">${this.getStatusLabel(evaluation.status)}</span>
                            </div>
                        </div>
                        <div class="evaluation-actions">
                            <button class="btn-sm btn-secondary" onclick="qhseDashboard.openEvaluationModal('${evaluation.supplierId}')">
                                <i class="fas fa-edit"></i> Bearbeiten
                            </button>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    renderSupplierDocuments() {
        const container = document.getElementById('supplierDocumentsList');
        if (!container) return;
        
        const allDocuments = [];
        this.suppliers.forEach(supplier => {
            if (supplier.certificates) {
                supplier.certificates.forEach(cert => {
                    allDocuments.push({
                        ...cert,
                        supplierName: supplier.name,
                        supplierId: supplier.id,
                        type: 'certificate'
                    });
                });
            }
        });

        container.innerHTML = `
            <div class="documents-header">
                <h3>Dokumente & Zertifikate</h3>
                <div class="documents-filters">
                    <select id="docTypeFilter" class="form-control">
                        <option value="all">Alle Dokumente</option>
                        <option value="certificate">Zertifikate</option>
                        <option value="contract">Vertr√§ge</option>
                        <option value="quality">Qualit√§tsdokumente</option>
                    </select>
                    <select id="docStatusFilter" class="form-control">
                        <option value="all">Alle Status</option>
                        <option value="valid">G√ºltig</option>
                        <option value="expiring">L√§uft ab</option>
                        <option value="expired">Abgelaufen</option>
                    </select>
                </div>
            </div>
            <div class="documents-grid">
                ${allDocuments.length > 0 ? allDocuments.map(doc => {
                    const expiryDate = new Date(doc.validUntil);
                    const today = new Date();
                    const isExpired = expiryDate < today;
                    const isExpiring = !isExpired && expiryDate < new Date(today.getTime() + 90 * 24 * 60 * 60 * 1000);
                    
                    return `
                        <div class="document-card">
                            <div class="document-icon">
                                <i class="fas fa-certificate"></i>
                            </div>
                            <div class="document-info">
                                <h4>${doc.name}</h4>
                                <p class="document-supplier">${doc.supplierName}</p>
                                <div class="document-meta">
                                    <span class="document-expiry ${isExpired ? 'expired' : isExpiring ? 'expiring' : 'valid'}">
                                        ${isExpired ? 'Abgelaufen' : isExpiring ? 'L√§uft ab' : 'G√ºltig'} bis ${formatDate(doc.validUntil)}
                                    </span>
                                </div>
                            </div>
                            <div class="document-actions">
                                ${doc.fileData ? `
                                    <button class="btn-sm btn-secondary" onclick="qhseDashboard.previewSupplierDocument('${doc.supplierId}', '${doc.name}')" title="Vorschau">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn-sm btn-secondary" onclick="qhseDashboard.downloadSupplierDocument('${doc.supplierId}', '${doc.name}')" title="Herunterladen">
                                        <i class="fas fa-download"></i>
                                    </button>
                                ` : `
                                    <span class="no-file-text">Keine Datei</span>
                                `}
                            </div>
                        </div>
                    `;
                }).join('') : '<p class="no-data">Keine Dokumente verf√ºgbar.</p>'}
            </div>
        `;
    }

    renderSupplierAudits() {
        const container = document.getElementById('supplierAuditsList');
        if (!container) return;
        
        // Generate sample audit data based on supplier evaluations
        const auditData = this.suppliers.map(supplier => {
            const lastEval = supplier.evaluation?.lastEvaluated ? new Date(supplier.evaluation.lastEvaluated) : null;
            const score = supplier.evaluation?.score || 0;
            
            // Determine audit status
            let auditStatus = 'planned';
            let auditPriority = 'medium';
            let nextAuditDate = new Date();
            nextAuditDate.setMonth(nextAuditDate.getMonth() + 12);
            
            if (score < 60) {
                auditStatus = 'urgent';
                auditPriority = 'high';
                nextAuditDate.setMonth(nextAuditDate.getMonth() - 10); // Due soon
            } else if (score < 80) {
                auditStatus = 'scheduled';
                auditPriority = 'medium';
                nextAuditDate.setMonth(nextAuditDate.getMonth() - 6);
            }
            
            return {
                supplierId: supplier.id,
                supplierName: supplier.name,
                lastAudit: lastEval,
                nextAudit: nextAuditDate,
                status: auditStatus,
                priority: auditPriority,
                score: score,
                type: supplier.type
            };
        }).sort((a, b) => a.nextAudit - b.nextAudit);
        
        container.innerHTML = `
            <div class="audits-header">
                <h3>Audit-Planung</h3>
                <div class="audits-actions">
                    <button class="btn-secondary" onclick="qhseDashboard.planAudit()">
                        <i class="fas fa-calendar"></i> Audit planen
                    </button>
                    <button class="btn-primary" onclick="qhseDashboard.openNewAuditModal()">
                        <i class="fas fa-plus"></i> Neues Audit
                    </button>
                </div>
            </div>
            <div class="audits-calendar">
                <h4>Anstehende Audits</h4>
                <div class="audits-timeline">
                    ${auditData.slice(0, 8).map(audit => `
                        <div class="audit-item priority-${audit.priority}">
                            <div class="audit-date">
                                <span class="audit-day">${audit.nextAudit.getDate()}</span>
                                <span class="audit-month">${audit.nextAudit.toLocaleDateString('de-DE', { month: 'short' })}</span>
                            </div>
                            <div class="audit-details">
                                <h4>${audit.supplierName}</h4>
                                <p class="audit-type">${this.getTypeLabel(audit.type)}</p>
                                <div class="audit-meta">
                                    <span class="audit-status status-${audit.status}">${this.getAuditStatusLabel(audit.status)}</span>
                                    <span class="audit-score ${audit.score >= 80 ? 'success' : audit.score >= 60 ? 'warning' : 'danger'}">
                                        Score: ${audit.score}%
                                    </span>
                                </div>
                            </div>
                            <div class="audit-actions">
                                <button class="btn-sm btn-secondary" onclick="qhseDashboard.scheduleAudit('${audit.supplierId}')">
                                    <i class="fas fa-calendar"></i>
                                </button>
                                <button class="btn-sm btn-primary" onclick="qhseDashboard.startAudit('${audit.supplierId}')">
                                    <i class="fas fa-play"></i>
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    getAuditStatusLabel(status) {
        const labels = {
            'planned': 'Geplant',
            'scheduled': 'Terminiert', 
            'urgent': 'Dringend',
            'completed': 'Abgeschlossen',
            'overdue': '√úberf√§llig'
        };
        return labels[status] || status;
    }

    // Additional audit methods
    openNewAuditModal() {
        alert('Neues Audit Modal wird in K√ºrze verf√ºgbar sein.');
    }

    scheduleAudit(supplierId) {
        const supplier = this.suppliers.find(s => s.id === supplierId);
        if (supplier) {
            alert(`Audit f√ºr "${supplier.name}" wird geplant.`);
        }
    }

    startAudit(supplierId) {
        const supplier = this.suppliers.find(s => s.id === supplierId);
        if (supplier) {
            alert(`Audit f√ºr "${supplier.name}" wird gestartet.`);
        }
    }

    // Certificate Management Functions
    setupCertificateManagement() {
        const addCertBtn = document.getElementById('addCertificateBtn');
        if (addCertBtn) {
            addCertBtn.addEventListener('click', () => this.addCertificateField());
        }
        
        // Initialize with existing certificates or one empty field
        this.renderCertificateFields();
    }

    addCertificateField() {
        const certificatesList = document.getElementById('modalCertificatesList');
        if (!certificatesList) return;

        const certId = 'cert_' + Date.now();
        const certField = document.createElement('div');
        certField.className = 'certificate-field';
        certField.setAttribute('data-cert-id', certId);
        
        certField.innerHTML = `
            <div class="certificate-header">
                <h4>Zertifikat</h4>
                <button type="button" class="btn-danger btn-sm" onclick="qhseDashboard.removeCertificateField('${certId}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="certName_${certId}">Zertifikat Name *</label>
                    <input type="text" id="certName_${certId}" name="certName_${certId}" 
                           autocomplete="off" required
                           placeholder="z.B. ISO 9001">
                </div>
                <div class="form-group">
                    <label for="certValidUntil_${certId}">G√ºltig bis</label>
                    <input type="date" id="certValidUntil_${certId}" name="certValidUntil_${certId}" 
                           autocomplete="off">
                </div>
            </div>
            <div class="form-group">
                <label for="certFile_${certId}">Zertifikat-Datei</label>
                <input type="file" id="certFile_${certId}" name="certFile_${certId}" 
                       accept=".pdf,.jpg,.jpeg,.png" 
                       onchange="qhseDashboard.handleCertificateUpload('${certId}', this)">
                <small>Unterst√ºtzte Formate: PDF, JPG, PNG (max. 5MB)</small>
            </div>
            <div class="certificate-preview" id="certPreview_${certId}" style="display: none;">
                <div class="preview-content">
                    <i class="fas fa-file-pdf preview-icon"></i>
                    <div class="preview-info">
                        <span class="preview-name"></span>
                        <span class="preview-size"></span>
                    </div>
                    <div class="preview-actions">
                        <button type="button" class="btn-sm btn-secondary" onclick="qhseDashboard.previewCertificate('${certId}')" title="Vorschau">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button type="button" class="btn-sm btn-secondary" onclick="qhseDashboard.downloadCertificate('${certId}')" title="Herunterladen">
                            <i class="fas fa-download"></i>
                        </button>
                        <button type="button" class="btn-sm btn-danger" onclick="qhseDashboard.removeCertificateFile('${certId}')" title="L√∂schen">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        certificatesList.appendChild(certField);
    }

    removeCertificateField(certId) {
        const field = document.querySelector(`[data-cert-id="${certId}"]`);
        if (field && confirm('Zertifikat-Feld entfernen?')) {
            field.remove();
        }
    }

    handleCertificateUpload(certId, fileInput) {
        const file = fileInput.files[0];
        if (!file) return;

        // Validate file size (5MB limit)
        if (file.size > 5 * 1024 * 1024) {
            alert('Datei ist zu gro√ü. Maximum 5MB erlaubt.');
            fileInput.value = '';
            return;
        }

        // Validate file type
        const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
        if (!allowedTypes.includes(file.type)) {
            alert('Nicht unterst√ºtztes Dateiformat. Nur PDF, JPG und PNG erlaubt.');
            fileInput.value = '';
            return;
        }

        // Read file as base64 for storage
        const reader = new FileReader();
        reader.onload = (e) => {
            const certData = {
                name: file.name,
                size: file.size,
                type: file.type,
                data: e.target.result,
                uploadDate: new Date().toISOString()
            };

            // Store certificate data
            this.storeCertificateData(certId, certData);
            
            // Update preview
            this.updateCertificatePreview(certId, certData);
        };
        reader.readAsDataURL(file);
    }

    storeCertificateData(certId, certData) {
        if (!this.currentCertificates) {
            this.currentCertificates = {};
        }
        this.currentCertificates[certId] = certData;
    }

    updateCertificatePreview(certId, certData) {
        const preview = document.getElementById(`certPreview_${certId}`);
        if (!preview) return;

        const nameSpan = preview.querySelector('.preview-name');
        const sizeSpan = preview.querySelector('.preview-size');
        const icon = preview.querySelector('.preview-icon');

        nameSpan.textContent = certData.name;
        sizeSpan.textContent = this.formatFileSize(certData.size);
        
        // Update icon based on file type
        if (certData.type === 'application/pdf') {
            icon.className = 'fas fa-file-pdf preview-icon';
        } else {
            icon.className = 'fas fa-file-image preview-icon';
        }

        preview.style.display = 'block';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    previewCertificate(certId) {
        const certData = this.currentCertificates?.[certId];
        if (!certData) {
            alert('Keine Zertifikat-Daten gefunden.');
            return;
        }

        if (certData.type === 'application/pdf') {
            // Open PDF in new window
            const newWindow = window.open();
            newWindow.document.write(`
                <html>
                    <head><title>${certData.name}</title></head>
                    <body style="margin: 0;">
                        <embed src="${certData.data}" type="application/pdf" width="100%" height="100%">
                    </body>
                </html>
            `);
        } else {
            // Show image in modal
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>${certData.name}</h3>
                        <button class="modal-close" onclick="this.closest('.modal').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body" style="text-align: center;">
                        <img src="${certData.data}" style="max-width: 100%; max-height: 70vh;" alt="${certData.name}">
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }
    }

    downloadCertificate(certId) {
        const certData = this.currentCertificates?.[certId];
        if (!certData) {
            alert('Keine Zertifikat-Daten zum Herunterladen gefunden.');
            return;
        }

        // Create download link
        const link = document.createElement('a');
        link.href = certData.data;
        link.download = certData.name;
        link.style.display = 'none';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    removeCertificateFile(certId) {
        if (confirm('Zertifikat-Datei entfernen?')) {
            const fileInput = document.getElementById(`certFile_${certId}`);
            const preview = document.getElementById(`certPreview_${certId}`);
            
            if (fileInput) fileInput.value = '';
            if (preview) preview.style.display = 'none';
            
            if (this.currentCertificates) {
                delete this.currentCertificates[certId];
            }
        }
    }

    renderCertificateFields() {
        const certificatesList = document.getElementById('modalCertificatesList');
        if (!certificatesList) return;

        // Clear existing fields
        certificatesList.innerHTML = '';

        // If editing existing supplier, load their certificates
        if (this.currentEditingSupplierId) {
            const supplier = this.suppliers.find(s => s.id === this.currentEditingSupplierId);
            if (supplier && supplier.certificates && supplier.certificates.length > 0) {
                supplier.certificates.forEach((cert, index) => {
                    this.addCertificateFieldWithData(cert);
                });
                return;
            }
        }

        // Add one empty certificate field
        this.addCertificateField();
    }

    addCertificateFieldWithData(certData) {
        this.addCertificateField();
        
        // Get the last added field
        const fields = document.querySelectorAll('.certificate-field');
        const lastField = fields[fields.length - 1];
        const certId = lastField.getAttribute('data-cert-id');
        
        // Populate with existing data
        const nameInput = document.getElementById(`certName_${certId}`);
        const validUntilInput = document.getElementById(`certValidUntil_${certId}`);
        
        if (nameInput) nameInput.value = certData.name || '';
        if (validUntilInput) validUntilInput.value = certData.validUntil || '';
        
        // If there's file data, show preview
        if (certData.fileData) {
            this.storeCertificateData(certId, certData.fileData);
            this.updateCertificatePreview(certId, certData.fileData);
        }
    }

    collectCertificateData() {
        const certificates = [];
        const certificateFields = document.querySelectorAll('.certificate-field');
        
        certificateFields.forEach(field => {
            const certId = field.getAttribute('data-cert-id');
            const nameInput = document.getElementById(`certName_${certId}`);
            const validUntilInput = document.getElementById(`certValidUntil_${certId}`);
            
            if (nameInput && nameInput.value.trim()) {
                const certificate = {
                    name: nameInput.value.trim(),
                    validUntil: validUntilInput?.value || '',
                    status: this.calculateCertificateStatus(validUntilInput?.value),
                    fileData: this.currentCertificates?.[certId] || null
                };
                certificates.push(certificate);
            }
        });
        
        return certificates;
    }

    calculateCertificateStatus(validUntil) {
        if (!validUntil) return 'unbekannt';
        
        const expiryDate = new Date(validUntil);
        const today = new Date();
        const threeMonthsFromNow = new Date();
        threeMonthsFromNow.setMonth(today.getMonth() + 3);
        
        if (expiryDate < today) {
            return 'abgelaufen';
        } else if (expiryDate < threeMonthsFromNow) {
            return 'l√§uft ab';
        } else {
            return 'g√ºltig';
        }
    }

    previewSupplierDocument(supplierId, certName) {
        const supplier = this.suppliers.find(s => s.id === supplierId);
        if (!supplier) return;

        const certificate = supplier.certificates?.find(cert => cert.name === certName);
        if (!certificate || !certificate.fileData) {
            alert('Keine Datei f√ºr Vorschau verf√ºgbar.');
            return;
        }

        if (certificate.fileData.type === 'application/pdf') {
            const newWindow = window.open();
            newWindow.document.write(`
                <html>
                    <head><title>${certificate.fileData.name}</title></head>
                    <body style="margin: 0;">
                        <embed src="${certificate.fileData.data}" type="application/pdf" width="100%" height="100%">
                    </body>
                </html>
            `);
        } else {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>${certificate.fileData.name}</h3>
                        <button class="modal-close" onclick="this.closest('.modal').remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body" style="text-align: center;">
                        <img src="${certificate.fileData.data}" style="max-width: 100%; max-height: 70vh;" alt="${certificate.fileData.name}">
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }
    }

    downloadSupplierDocument(supplierId, certName) {
        const supplier = this.suppliers.find(s => s.id === supplierId);
        if (!supplier) return;

        const certificate = supplier.certificates?.find(cert => cert.name === certName);
        if (!certificate || !certificate.fileData) {
            alert('Keine Datei zum Herunterladen verf√ºgbar.');
            return;
        }

        const link = document.createElement('a');
        link.href = certificate.fileData.data;
        link.download = certificate.fileData.name;
        link.style.display = 'none';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    renderRecentSupplierActivity() {
        const container = document.getElementById('recentSupplierActivity');
        if (!container) return;
        
        const activities = [
            { type: 'evaluation', supplier: 'Mustermann Stahl GmbH', date: '2024-01-15', message: 'Bewertung aktualisiert (85%)' },
            { type: 'certificate', supplier: 'Technik Service Nord', date: '2024-01-10', message: 'Zertifikat l√§uft ab: ISO 45001' },
            { type: 'approval', supplier: 'Entsorgung Hamburg GmbH', date: '2024-01-05', message: 'Freigegeben f√ºr Zusammenarbeit' }
        ];

        container.innerHTML = activities.map(activity => `
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-${this.getActivityIcon(activity.type)}"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-header">
                        <span class="activity-supplier">${activity.supplier}</span>
                        <span class="activity-date">${formatDate(activity.date)}</span>
                    </div>
                    <div class="activity-message">${activity.message}</div>
                </div>
            </div>
        `).join('');
    }

    getActivityIcon(type) {
        const icons = {
            'evaluation': 'star',
            'certificate': 'certificate',
            'approval': 'check-circle',
            'audit': 'search'
        };
        return icons[type] || 'info-circle';
    }

    // Storage functions
    saveSuppliersToStorage(suppliers = null) {
        try {
            const suppliersToSave = suppliers || this.suppliers;
            localStorage.setItem('qhse_suppliers', JSON.stringify(suppliersToSave));
            return true;
        } catch (error) {
            console.error('Error saving suppliers:', error);
            return false;
        }
    }

    // Enhanced quick action methods
    openEvaluationModal(supplierId = null) {
        const modal = document.getElementById('supplierEvaluationModal');
        const form = document.getElementById('evaluationForm');
        const supplierSelect = document.getElementById('evalSupplierSelect');
        
        // Populate supplier dropdown
        supplierSelect.innerHTML = '<option value="">Bitte w√§hlen...</option>';
        this.suppliers.forEach(supplier => {
            const option = document.createElement('option');
            option.value = supplier.id;
            option.textContent = `${supplier.name} (${supplier.number})`;
            if (supplier.id === supplierId) {
                option.selected = true;
            }
            supplierSelect.appendChild(option);
        });

        if (supplierId) {
            this.loadSupplierEvaluation(supplierId);
        }

        this.setupScoreSliders();
        modal.style.display = 'block';
    }

    loadSupplierEvaluation(supplierId) {
        const supplier = this.suppliers.find(s => s.id === supplierId);
        if (!supplier || !supplier.evaluation) return;

        const criteria = supplier.evaluation.criteria || {};
        document.getElementById('evalQualityScore').value = criteria.quality || 75;
        document.getElementById('evalDeliveryScore').value = criteria.delivery || 75;
        document.getElementById('evalPriceScore').value = criteria.price || 75;
        document.getElementById('evalServiceScore').value = criteria.service || 75;
        document.getElementById('evalNotes').value = supplier.evaluation.notes || '';

        // Update displays
        this.updateEvalOverallScore();
        ['evalQualityScore', 'evalDeliveryScore', 'evalPriceScore', 'evalServiceScore'].forEach(id => {
            const slider = document.getElementById(id);
            const valueSpan = document.getElementById(id + 'Value');
            if (slider && valueSpan) {
                valueSpan.textContent = slider.value + '%';
            }
        });
    }

    saveSupplierEvaluation() {
        const form = document.getElementById('evaluationForm');
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        const formData = new FormData(form);
        const supplierId = formData.get('evalSupplierSelect');
        
        if (!supplierId) {
            alert('Bitte w√§hlen Sie einen Lieferanten aus.');
            return;
        }

        const supplier = this.suppliers.find(s => s.id === supplierId);
        if (!supplier) return;

        const quality = parseInt(formData.get('evalQualityScore'));
        const delivery = parseInt(formData.get('evalDeliveryScore'));
        const price = parseInt(formData.get('evalPriceScore'));
        const service = parseInt(formData.get('evalServiceScore'));

        supplier.evaluation = {
            score: Math.round((quality + delivery + price + service) / 4),
            lastEvaluated: new Date().toISOString(),
            criteria: { quality, delivery, price, service },
            notes: formData.get('evalNotes')
        };

        // Update status based on score
        if (supplier.evaluation.score >= 80) {
            supplier.status = 'freigegeben';
        } else if (supplier.evaluation.score >= 60) {
            supplier.status = 'kritisch';
        } else {
            supplier.status = 'gesperrt';
        }

        supplier.updatedAt = new Date().toISOString();

        this.saveSuppliersToStorage();
        this.renderSupplierDashboard();
        this.renderSupplierList();

        document.getElementById('supplierEvaluationModal').style.display = 'none';
        alert(`Bewertung f√ºr "${supplier.name}" wurde erfolgreich gespeichert (${supplier.evaluation.score}%).`);
    }

    checkCertificates() {
        const expiringSoon = [];
        const expired = [];
        const today = new Date();
        const threeMonthsFromNow = new Date();
        threeMonthsFromNow.setMonth(today.getMonth() + 3);

        this.suppliers.forEach(supplier => {
            if (supplier.certificates) {
                supplier.certificates.forEach(cert => {
                    const expiryDate = new Date(cert.validUntil);
                    if (expiryDate < today) {
                        expired.push({supplier: supplier.name, certificate: cert.name, date: cert.validUntil});
                    } else if (expiryDate < threeMonthsFromNow) {
                        expiringSoon.push({supplier: supplier.name, certificate: cert.name, date: cert.validUntil});
                    }
                });
            }
        });

        let message = 'Zertifikatsstatus-√úberpr√ºfung:\n\n';
        
        if (expired.length > 0) {
            message += 'üî¥ ABGELAUFENE ZERTIFIKATE:\n';
            expired.forEach(item => {
                message += `‚Ä¢ ${item.supplier}: ${item.certificate} (abgelaufen am ${formatDate(item.date)})\n`;
            });
            message += '\n';
        }

        if (expiringSoon.length > 0) {
            message += 'üü° BALD ABLAUFENDE ZERTIFIKATE (n√§chste 3 Monate):\n';
            expiringSoon.forEach(item => {
                message += `‚Ä¢ ${item.supplier}: ${item.certificate} (l√§uft ab am ${formatDate(item.date)})\n`;
            });
            message += '\n';
        }

        if (expired.length === 0 && expiringSoon.length === 0) {
            message += '‚úÖ Alle Zertifikate sind aktuell und g√ºltig.';
        }

        alert(message);
    }

    planAudit() {
        const suppliersNeedingAudit = this.suppliers.filter(supplier => {
            const lastEvaluated = supplier.evaluation?.lastEvaluated ? new Date(supplier.evaluation.lastEvaluated) : null;
            const oneYearAgo = new Date();
            oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
            
            return !lastEvaluated || lastEvaluated < oneYearAgo || supplier.evaluation.score < 70;
        });

        let message = 'Audit-Planung:\n\n';
        
        if (suppliersNeedingAudit.length > 0) {
            message += 'Folgende Lieferanten ben√∂tigen ein Audit:\n\n';
            suppliersNeedingAudit.forEach(supplier => {
                const reason = supplier.evaluation?.score < 70 ? 'Niedrige Bewertung' : 'Keine aktuelle Bewertung';
                const lastEval = supplier.evaluation?.lastEvaluated ? formatDate(supplier.evaluation.lastEvaluated) : 'Nie';
                message += `‚Ä¢ ${supplier.name}\n  Grund: ${reason}\n  Letzte Bewertung: ${lastEval}\n  Aktueller Score: ${supplier.evaluation?.score || 'N/A'}%\n\n`;
            });
        } else {
            message += '‚úÖ Alle Lieferanten sind aktuell bewertet und ben√∂tigen derzeit kein Audit.';
        }

        alert(message);
    }

    editSupplier(supplierId) {
        this.showSupplierModal(supplierId);
    }

    evaluateSupplier(supplierId) {
        this.openEvaluationModal(supplierId);
    }

    // Reports functionality
    openReportsModal() {
        const modal = document.getElementById('supplierReportsModal');
        this.setupReportsTabs();
        this.renderSupplierReports();
        modal.style.display = 'block';
    }

    setupReportsTabs() {
        const tabs = document.querySelectorAll('.reports-tab');
        const contents = document.querySelectorAll('.reports-tab-content');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.getAttribute('data-tab');
                
                // Update active tab
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update active content
                contents.forEach(content => {
                    content.classList.toggle('active', content.getAttribute('data-tab') === targetTab);
                });

                // Render specific report content
                this.renderReportContent(targetTab);
            });
        });
    }

    renderSupplierReports() {
        this.renderReportContent('overview');
    }

    renderReportContent(reportType) {
        switch (reportType) {
            case 'overview':
                this.renderOverviewReport();
                break;
            case 'performance':
                this.renderPerformanceReport();
                break;
            case 'compliance':
                this.renderComplianceReport();
                break;
        }
    }

    renderOverviewReport() {
        const container = document.getElementById('supplierOverviewReport');
        const stats = this.calculateSupplierStats();
        
        const typeDistribution = {};
        const statusDistribution = {};
        
        this.suppliers.forEach(supplier => {
            typeDistribution[supplier.type] = (typeDistribution[supplier.type] || 0) + 1;
            statusDistribution[supplier.status] = (statusDistribution[supplier.status] || 0) + 1;
        });

        container.innerHTML = `
            <div class="report-summary">
                <h3>Lieferanten-√úbersicht</h3>
                <div class="summary-grid">
                    <div class="summary-card">
                        <h4>Gesamt Lieferanten</h4>
                        <div class="summary-value">${stats.total}</div>
                    </div>
                    <div class="summary-card">
                        <h4>Durchschnittsbewertung</h4>
                        <div class="summary-value">${stats.avgScore}%</div>
                    </div>
                    <div class="summary-card">
                        <h4>Freigegeben</h4>
                        <div class="summary-value success">${stats.approved}</div>
                    </div>
                    <div class="summary-card">
                        <h4>Kritisch</h4>
                        <div class="summary-value warning">${stats.critical}</div>
                    </div>
                </div>
            </div>
            
            <div class="report-charts">
                <div class="chart-section">
                    <h4>Verteilung nach Typ</h4>
                    <div class="chart-bars">
                        ${Object.entries(typeDistribution).map(([type, count]) => `
                            <div class="chart-bar">
                                <span class="bar-label">${this.getTypeLabel(type)}</span>
                                <div class="bar-container">
                                    <div class="bar" style="width: ${(count / stats.total) * 100}%"></div>
                                    <span class="bar-value">${count}</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <div class="chart-section">
                    <h4>Verteilung nach Status</h4>
                    <div class="chart-bars">
                        ${Object.entries(statusDistribution).map(([status, count]) => `
                            <div class="chart-bar">
                                <span class="bar-label">${this.getStatusLabel(status)}</span>
                                <div class="bar-container">
                                    <div class="bar status-${status}" style="width: ${(count / stats.total) * 100}%"></div>
                                    <span class="bar-value">${count}</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
    }

    renderPerformanceReport() {
        const container = document.getElementById('supplierPerformanceReport');
        
        const topPerformers = [...this.suppliers]
            .filter(s => s.evaluation && s.evaluation.score)
            .sort((a, b) => b.evaluation.score - a.evaluation.score)
            .slice(0, 5);

        const lowPerformers = [...this.suppliers]
            .filter(s => s.evaluation && s.evaluation.score)
            .sort((a, b) => a.evaluation.score - b.evaluation.score)
            .slice(0, 5);

        container.innerHTML = `
            <div class="performance-section">
                <h3>Leistungs-Analyse</h3>
                
                <div class="performance-tables">
                    <div class="performance-table">
                        <h4>üèÜ Top Performer</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Lieferant</th>
                                    <th>Bewertung</th>
                                    <th>Status</th>
                                    <th>Letzte Bewertung</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${topPerformers.map(supplier => `
                                    <tr>
                                        <td>${supplier.name}</td>
                                        <td><span class="score-badge success">${supplier.evaluation.score}%</span></td>
                                        <td><span class="status-badge status-${supplier.status}">${this.getStatusLabel(supplier.status)}</span></td>
                                        <td>${formatDate(supplier.evaluation.lastEvaluated)}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="performance-table">
                        <h4>‚ö†Ô∏è Verbesserung erforderlich</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Lieferant</th>
                                    <th>Bewertung</th>
                                    <th>Status</th>
                                    <th>Ma√ünahmen</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${lowPerformers.map(supplier => `
                                    <tr>
                                        <td>${supplier.name}</td>
                                        <td><span class="score-badge ${supplier.evaluation.score < 60 ? 'danger' : 'warning'}">${supplier.evaluation.score}%</span></td>
                                        <td><span class="status-badge status-${supplier.status}">${this.getStatusLabel(supplier.status)}</span></td>
                                        <td>
                                            ${supplier.evaluation.score < 60 ? 'Sofortige Ma√ünahmen' : '√úberwachung'}
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;
    }

    renderComplianceReport() {
        const container = document.getElementById('supplierComplianceReport');
        
        const certificateStatus = {};
        const expiringCertificates = [];
        const today = new Date();
        const threeMonthsFromNow = new Date();
        threeMonthsFromNow.setMonth(today.getMonth() + 3);

        this.suppliers.forEach(supplier => {
            if (supplier.certificates) {
                supplier.certificates.forEach(cert => {
                    const expiryDate = new Date(cert.validUntil);
                    if (expiryDate < today) {
                        cert.complianceStatus = 'expired';
                    } else if (expiryDate < threeMonthsFromNow) {
                        cert.complianceStatus = 'expiring';
                        expiringCertificates.push({
                            supplier: supplier.name,
                            certificate: cert.name,
                            expiryDate: cert.validUntil
                        });
                    } else {
                        cert.complianceStatus = 'valid';
                    }
                    
                    certificateStatus[cert.complianceStatus] = (certificateStatus[cert.complianceStatus] || 0) + 1;
                });
            }
        });

        container.innerHTML = `
            <div class="compliance-section">
                <h3>Compliance-Status</h3>
                
                <div class="compliance-summary">
                    <div class="compliance-card">
                        <h4>G√ºltige Zertifikate</h4>
                        <div class="compliance-value success">${certificateStatus.valid || 0}</div>
                    </div>
                    <div class="compliance-card">
                        <h4>Bald ablaufend</h4>
                        <div class="compliance-value warning">${certificateStatus.expiring || 0}</div>
                    </div>
                    <div class="compliance-card">
                        <h4>Abgelaufen</h4>
                        <div class="compliance-value danger">${certificateStatus.expired || 0}</div>
                    </div>
                </div>
                
                ${expiringCertificates.length > 0 ? `
                    <div class="expiring-certificates">
                        <h4>üö® Bald ablaufende Zertifikate</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Lieferant</th>
                                    <th>Zertifikat</th>
                                    <th>Ablaufdatum</th>
                                    <th>Tage verbleibend</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${expiringCertificates.map(item => {
                                    const daysLeft = Math.ceil((new Date(item.expiryDate) - today) / (1000 * 60 * 60 * 24));
                                    return `
                                        <tr>
                                            <td>${item.supplier}</td>
                                            <td>${item.certificate}</td>
                                            <td>${formatDate(item.expiryDate)}</td>
                                            <td><span class="days-left ${daysLeft <= 30 ? 'danger' : 'warning'}">${daysLeft}</span></td>
                                        </tr>
                                    `;
                                }).join('')}
                            </tbody>
                        </table>
                    </div>
                ` : '<p class="no-issues">‚úÖ Alle Zertifikate sind aktuell.</p>'}
            </div>
        `;
    }

    // Initialize supplier section specifically
    initializeSupplierSection() {
        console.log('Initializing supplier section...');
        
        // Ensure suppliers are loaded
        if (!this.suppliers || this.suppliers.length === 0) {
            console.log('No suppliers found, loading default suppliers...');
            this.suppliers = this.loadSuppliersFromStorage();
        }
        
        // Render supplier dashboard
        this.renderSupplierDashboard();
        this.renderSupplierList();
        
        // Setup supplier event listeners again to ensure they work
        this.ensureSupplierEventListeners();
        
        console.log(`Supplier section initialized with ${this.suppliers.length} suppliers`);
    }

    ensureSupplierEventListeners() {
        // Ensure Add Supplier Button works
        const addSupplierBtn = document.getElementById('addSupplierBtn');
        if (addSupplierBtn) {
            addSupplierBtn.removeEventListener('click', this.handleAddSupplier);
            addSupplierBtn.addEventListener('click', () => {
                console.log('Add supplier button clicked');
                this.showSupplierModal();
            });
        }

        // Ensure Quick Action Buttons work
        const evaluateBtn = document.getElementById('evaluateSupplierBtn');
        if (evaluateBtn) {
            evaluateBtn.removeEventListener('click', this.handleEvaluateSupplier);
            evaluateBtn.addEventListener('click', () => {
                console.log('Evaluate supplier button clicked');
                this.openEvaluationModal();
            });
        }

        const checkCertBtn = document.getElementById('checkCertificatesBtn');
        if (checkCertBtn) {
            checkCertBtn.removeEventListener('click', this.handleCheckCertificates);
            checkCertBtn.addEventListener('click', () => {
                console.log('Check certificates button clicked');
                this.checkCertificates();
            });
        }

        const planAuditBtn = document.getElementById('planAuditBtn');
        if (planAuditBtn) {
            planAuditBtn.removeEventListener('click', this.handlePlanAudit);
            planAuditBtn.addEventListener('click', () => {
                console.log('Plan audit button clicked');
                this.planAudit();
            });
        }

        // Ensure form submission works
        const supplierForm = document.getElementById('supplierForm');
        if (supplierForm) {
            // Remove any existing listeners first
            const newForm = supplierForm.cloneNode(true);
            supplierForm.parentNode.replaceChild(newForm, supplierForm);
            
            // Add new listener
            newForm.addEventListener('submit', (e) => {
                console.log('Supplier form submitted');
                e.preventDefault();
                this.saveSupplier();
            });
        }

        console.log('Supplier event listeners ensured');
    }

    // ====================================
    // VACATION PLANNING & ABSENCE MANAGEMENT
    // ====================================

    setupVacationManagement() {
        // Prevent double initialization
        if (this.vacationManagementInitialized) {
            console.log('üèñÔ∏è Vacation management already initialized, skipping...');
            return;
        }
        
        console.log('üèñÔ∏è Setting up vacation management...');
        
        // Load vacation data
        this.vacationRequests = this.loadVacationRequestsFromStorage();
        this.vacationAccounts = this.loadVacationAccountsFromStorage();
        console.log('Vacation data loaded:', {
            requests: this.vacationRequests.length,
            accounts: Object.keys(this.vacationAccounts).length
        });
        
        // Setup UI components with enhanced debugging
        console.log('üîß Setting up vacation UI components...');
        this.setupVacationTabs();
        this.setupVacationCalendar();
        this.setupVacationForms();
        
        // Render initial content
        console.log('üé® Rendering vacation window.qhseDashboard...');
        this.renderVacationDashboard();
        this.updateVacationBalance();
        
        // Force-trigger initial calendar render
        setTimeout(() => {
            console.log('üîÑ Force-rendering vacation calendar...');
            this.renderVacationCalendar();
        }, 100);
        
        console.log('‚úÖ Vacation management setup complete');
        
        // Add debug info to window for testing
        window.vacationDebug = {
            requests: this.vacationRequests,
            accounts: this.vacationAccounts,
            dashboard: this
        };
        
        // Final verification
        this.verifyVacationSetup();
        
        // Mark as initialized
        this.vacationManagementInitialized = true;
    }

    verifyVacationSetup() {
        console.log('üîç Verifying vacation setup...');
        
        const elements = {
            quickVacationRequestBtn: document.getElementById('quickVacationRequestBtn'),
            quickTeamViewBtn: document.getElementById('quickTeamViewBtn'),
            quickApprovalBtn: document.getElementById('quickApprovalBtn'),
            vacationCalendarGrid: document.getElementById('vacationCalendarGrid'),
            vacationCurrentMonth: document.getElementById('vacationCurrentMonth'),
            vacationPrevMonthBtn: document.getElementById('vacationPrevMonthBtn'),
            vacationNextMonthBtn: document.getElementById('vacationNextMonthBtn'),
            vacationTabs: document.querySelectorAll('.vacation-tab-btn'),
            vacationTabPanels: document.querySelectorAll('.vacation-tab-panel')
        };
        
        console.log('Element verification:', {
            quickVacationRequestBtn: !!elements.quickVacationRequestBtn,
            quickTeamViewBtn: !!elements.quickTeamViewBtn,
            quickApprovalBtn: !!elements.quickApprovalBtn,
            vacationCalendarGrid: !!elements.vacationCalendarGrid,
            vacationCurrentMonth: !!elements.vacationCurrentMonth,
            vacationPrevMonthBtn: !!elements.vacationPrevMonthBtn,
            vacationNextMonthBtn: !!elements.vacationNextMonthBtn,
            vacationTabs: elements.vacationTabs.length,
            vacationTabPanels: elements.vacationTabPanels.length
        });
        
        // Test quick action clicks
        if (elements.quickVacationRequestBtn) {
            console.log('‚úÖ Quick vacation request button ready');
        } else {
            console.error('‚ùå Quick vacation request button missing!');
        }
        
        if (elements.vacationCalendarGrid) {
            console.log('‚úÖ Vacation calendar grid ready');
        } else {
            console.error('‚ùå Vacation calendar grid missing!');
        }
        
        console.log('üîç Vacation setup verification complete');
    }

    loadVacationRequestsFromStorage() {
        try {
            return JSON.parse(localStorage.getItem('qhse_vacation_requests') || '[]');
        } catch (error) {
            console.error('Error loading vacation requests:', error);
            return [];
        }
    }

    loadVacationAccountsFromStorage() {
        try {
            const accounts = JSON.parse(localStorage.getItem('qhse_vacation_accounts') || '{}');
            if (Object.keys(accounts).length === 0) {
                return this.initializeDefaultVacationAccounts();
            }
            return accounts;
        } catch (error) {
            console.error('Error loading vacation accounts:', error);
            return this.initializeDefaultVacationAccounts();
        }
    }

    initializeDefaultVacationAccounts() {
        const accounts = {};
        const currentYear = new Date().getFullYear();
        
        this.users.forEach(user => {
            accounts[user.id] = {
                userId: user.id,
                year: currentYear,
                totalDays: 30, // Standard vacation days
                usedDays: 0,
                pendingDays: 0,
                remainingDays: 30,
                carryOverDays: 0,
                carryOverLimit: 10,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
        });
        
        this.saveVacationAccountsToStorage(accounts);
        return accounts;
    }

    saveVacationRequestsToStorage() {
        localStorage.setItem('qhse_vacation_requests', JSON.stringify(this.vacationRequests));
    }

    saveVacationAccountsToStorage(accounts = this.vacationAccounts) {
        localStorage.setItem('qhse_vacation_accounts', JSON.stringify(accounts));
    }

    setupVacationTabs() {
        const vacationTabs = document.querySelectorAll('.vacation-tab-btn');
        const vacationTabContents = document.querySelectorAll('.vacation-tab-panel');
        
        console.log('Setting up vacation tabs:', {
            tabButtons: vacationTabs.length,
            tabPanels: vacationTabContents.length
        });

        vacationTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.getAttribute('data-tab');
                
                // Update active tab
                vacationTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update active content
                vacationTabContents.forEach(content => {
                    if (content.id === `vacation-${targetTab}`) {
                        content.classList.add('active');
                        content.style.display = 'block';
                    } else {
                        content.classList.remove('active');
                        content.style.display = 'none';
                    }
                });

                // Render content for active tab
                this.renderVacationTabContent(targetTab);
            });
        });

        // Show calendar tab by default
        this.renderVacationTabContent('calendar');
    }

    setupVacationCalendar() {
        console.log('Setting up vacation calendar...');
        const prevBtn = document.getElementById('vacationPrevMonthBtn');
        const nextBtn = document.getElementById('vacationNextMonthBtn');
        const todayBtn = document.getElementById('vacationTodayBtn');
        
        console.log('Calendar buttons found:', {
            prevBtn: !!prevBtn,
            nextBtn: !!nextBtn,
            todayBtn: !!todayBtn
        });
        const viewButtons = document.querySelectorAll('.view-btn');
        
        console.log('View buttons found:', viewButtons.length);

        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                this.currentMonth--;
                if (this.currentMonth < 0) {
                    this.currentMonth = 11;
                    this.currentYear--;
                }
                this.renderVacationCalendar();
            });
        }

        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                this.currentMonth++;
                if (this.currentMonth > 11) {
                    this.currentMonth = 0;
                    this.currentYear++;
                }
                this.renderVacationCalendar();
            });
        }

        if (todayBtn) {
            todayBtn.addEventListener('click', () => {
                const today = new Date();
                this.currentMonth = today.getMonth();
                this.currentYear = today.getFullYear();
                this.renderVacationCalendar();
            });
        }

        viewButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Update active view button
                viewButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                this.currentVacationView = button.getAttribute('data-view');
                console.log('View changed to:', this.currentVacationView);
                this.renderVacationCalendar();
            });
        });

        this.currentVacationView = 'month';
    }

    setupVacationForms() {
        // Vacation request form
        const vacationRequestForm = document.getElementById('vacationRequestForm');
        if (vacationRequestForm) {
            vacationRequestForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.submitVacationRequest();
            });
        }

        // Quick action buttons with enhanced debugging
        console.log('üîß Setting up quick action buttons...');
        
        const quickVacationRequestBtn = document.getElementById('quickVacationRequestBtn');
        if (quickVacationRequestBtn) {
            console.log('‚úÖ Quick vacation request button found, adding event listener');
            // Remove any existing listeners first
            quickVacationRequestBtn.replaceWith(quickVacationRequestBtn.cloneNode(true));
            const newBtn = document.getElementById('quickVacationRequestBtn');
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üöÄ Quick vacation request button clicked!');
                this.showVacationRequestModal();
            });
        } else {
            console.error('‚ùå Quick vacation request button NOT found!');
        }

        const quickTeamViewBtn = document.getElementById('quickTeamViewBtn');
        if (quickTeamViewBtn) {
            console.log('‚úÖ Quick team view button found, adding event listener');
            quickTeamViewBtn.replaceWith(quickTeamViewBtn.cloneNode(true));
            const newTeamBtn = document.getElementById('quickTeamViewBtn');
            newTeamBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('üë• Quick team view button clicked!');
                this.showTeamVacationView();
            });
        } else {
            console.warn('‚ö†Ô∏è Quick team view button NOT found!');
        }

        const quickApprovalBtn = document.getElementById('quickApprovalBtn');
        if (quickApprovalBtn) {
            console.log('‚úÖ Quick approval button found, adding event listener');
            quickApprovalBtn.replaceWith(quickApprovalBtn.cloneNode(true));
            const newApprovalBtn = document.getElementById('quickApprovalBtn');
            newApprovalBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('‚úÖ Quick approval button clicked!');
                this.showVacationApprovalView();
            });
        } else {
            console.warn('‚ö†Ô∏è Quick approval button NOT found!');
        }

        // Section header buttons
        console.log('üîß Setting up section header buttons...');
        
        const newVacationRequestBtn = document.getElementById('newVacationRequestBtn');
        if (newVacationRequestBtn) {
            newVacationRequestBtn.addEventListener('click', () => {
                console.log('üìù New vacation request button clicked');
                this.showVacationRequestModal();
            });
            console.log('‚úÖ New vacation request button event listener added');
        } else {
            console.warn('‚ö†Ô∏è New vacation request button not found');
        }

        const vacationOverviewBtn = document.getElementById('vacationOverviewBtn');
        if (vacationOverviewBtn) {
            vacationOverviewBtn.addEventListener('click', () => {
                console.log('üìä Vacation overview button clicked');
                this.showVacationOverview();
            });
            console.log('‚úÖ Vacation overview button event listener added');
        } else {
            console.warn('‚ö†Ô∏è Vacation overview button not found');
        }

        const teamCalendarBtn = document.getElementById('teamCalendarBtn');
        if (teamCalendarBtn) {
            teamCalendarBtn.addEventListener('click', () => {
                console.log('üë• Team calendar button clicked');
                this.showTeamVacationView();
            });
            console.log('‚úÖ Team calendar button event listener added');
        } else {
            console.warn('‚ö†Ô∏è Team calendar button not found');
        }

        // Modal close functionality
        const vacationModals = document.querySelectorAll('#vacationRequestModal, #vacationApprovalModal, #vacationDetailsModal');
        vacationModals.forEach(modal => {
            const closeButtons = modal.querySelectorAll('.modal-close');
            closeButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    modal.style.display = 'none';
                });
            });

            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });

        // Date validation
        const startDateInput = document.getElementById('vacationStartDate');
        const endDateInput = document.getElementById('vacationEndDate');
        
        if (startDateInput && endDateInput) {
            startDateInput.addEventListener('change', () => {
                this.validateVacationDates();
                this.calculateVacationDays();
            });
            
            endDateInput.addEventListener('change', () => {
                this.validateVacationDates();
                this.calculateVacationDays();
            });
        }
    }

    renderVacationDashboard() {
        this.updateVacationStats();
        this.renderVacationQuickActions();
        this.renderVacationNotifications();
    }

    renderVacationTabContent(tab) {
        switch(tab) {
            case 'calendar':
                this.renderVacationCalendar();
                break;
            case 'requests':
                this.renderMyVacationRequests();
                break;
            case 'approval':
                this.renderVacationApprovals();
                break;
            case 'team':
                this.renderTeamVacationOverview();
                break;
            case 'administration':
                this.renderVacationAdministration();
                break;
        }
    }

    renderVacationCalendar() {
        const calendarContainer = document.getElementById('vacationCalendarGrid');
        if (!calendarContainer) return;

        const monthNames = [
            'Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni',
            'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'
        ];

        // Update header
        const monthYearElement = document.getElementById('vacationCurrentMonth');
        if (monthYearElement) {
            monthYearElement.textContent = `${monthNames[this.currentMonth]} ${this.currentYear}`;
        }

        // Generate calendar based on current view
        switch(this.currentVacationView) {
            case 'month':
                this.renderMonthView(calendarContainer);
                break;
            case 'week':
                this.renderWeekView(calendarContainer);
                break;
            case 'day':
                this.renderDayView(calendarContainer);
                break;
        }
    }

    renderMonthView(container) {
        const firstDay = new Date(this.currentYear, this.currentMonth, 1);
        const lastDay = new Date(this.currentYear, this.currentMonth + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay() + 1); // Start on Monday

        let html = `
            <div class="calendar-grid">
                <div class="calendar-header">
                    <div class="calendar-day-header">Mo</div>
                    <div class="calendar-day-header">Di</div>
                    <div class="calendar-day-header">Mi</div>
                    <div class="calendar-day-header">Do</div>
                    <div class="calendar-day-header">Fr</div>
                    <div class="calendar-day-header">Sa</div>
                    <div class="calendar-day-header">So</div>
                </div>
                <div class="calendar-body">
        `;

        const currentDate = new Date(startDate);
        for (let week = 0; week < 6; week++) {
            for (let day = 0; day < 7; day++) {
                const isCurrentMonth = currentDate.getMonth() === this.currentMonth;
                const isToday = this.isToday(currentDate);
                const dayVacations = this.getVacationsForDate(currentDate);
                
                html += `
                    <div class="calendar-day ${!isCurrentMonth ? 'other-month' : ''} ${isToday ? 'today' : ''}" 
                         data-date="${currentDate.toISOString().split('T')[0]}">
                        <div class="day-number">${currentDate.getDate()}</div>
                        <div class="day-events">
                            ${dayVacations.map(vacation => 
                                `<div class="vacation-event vacation-${vacation.status}" title="${vacation.employee}: ${vacation.type}">
                                    ${vacation.employee.split(' ')[0]}
                                </div>`
                            ).join('')}
                        </div>
                    </div>
                `;
                
                currentDate.setDate(currentDate.getDate() + 1);
            }
        }

        html += `
                </div>
            </div>
        `;

        container.innerHTML = html;

        // Add click handlers for days
        container.querySelectorAll('.calendar-day').forEach(day => {
            day.addEventListener('click', () => {
                const date = day.getAttribute('data-date');
                this.showDayVacationDetails(date);
            });
        });
    }

    renderWeekView(container) {
        // Week view implementation
        const startOfWeek = this.getStartOfWeek(new Date(this.currentYear, this.currentMonth, 1));
        let html = '<div class="week-view">Week view coming soon...</div>';
        container.innerHTML = html;
    }

    renderDayView(container) {
        // Day view implementation
        let html = '<div class="day-view">Day view coming soon...</div>';
        container.innerHTML = html;
    }

    getVacationsForDate(date) {
        const dateStr = date.toISOString().split('T')[0];
        const vacations = [];
        
        this.vacationRequests.forEach(request => {
            if (request.status !== 'genehmigt') return;
            
            const startDate = new Date(request.startDate);
            const endDate = new Date(request.endDate);
            const checkDate = new Date(date);
            
            if (checkDate >= startDate && checkDate <= endDate) {
                const user = this.users.find(u => u.id === request.userId);
                vacations.push({
                    employee: user ? user.displayName : 'Unbekannt',
                    type: request.absenceType,
                    status: request.status
                });
            }
        });
        
        return vacations;
    }

    renderMyVacationRequests() {
        const container = document.getElementById('myVacationRequests');
        if (!container) return;

        const currentUser = this.getCurrentUser();
        const myRequests = this.vacationRequests.filter(r => r.userId === currentUser.id);

        if (myRequests.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-calendar-plus"></i>
                    <h3>Keine Urlaubsantr√§ge</h3>
                    <p>Sie haben noch keine Urlaubsantr√§ge gestellt.</p>
                    <button class="btn btn-primary" onclick="window.qhseDashboard.showVacationRequestModal()">
                        <i class="fas fa-plus"></i> Antrag stellen
                    </button>
                </div>
            `;
            return;
        }

        const html = myRequests.map(request => {
            const startDate = new Date(request.startDate).toLocaleDateString('de-DE');
            const endDate = new Date(request.endDate).toLocaleDateString('de-DE');
            const statusClass = this.getVacationStatusClass(request.status);
            
            return `
                <div class="vacation-request-card">
                    <div class="request-header">
                        <div class="request-dates">
                            <i class="fas fa-calendar"></i>
                            ${startDate} - ${endDate} (${request.workingDays} Tage)
                        </div>
                        <span class="status-badge status-${statusClass}">${request.status}</span>
                    </div>
                    <div class="request-details">
                        <div class="detail-row">
                            <span class="label">Typ:</span>
                            <span>${this.getAbsenceTypeName(request.absenceType)}</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">Antragsdatum:</span>
                            <span>${new Date(request.createdAt).toLocaleDateString('de-DE')}</span>
                        </div>
                        ${request.reason ? `
                            <div class="detail-row">
                                <span class="label">Grund:</span>
                                <span>${request.reason}</span>
                            </div>
                        ` : ''}
                        ${request.substitute ? `
                            <div class="detail-row">
                                <span class="label">Vertretung:</span>
                                <span>${this.getUserDisplayName(request.substitute)}</span>
                            </div>
                        ` : ''}
                    </div>
                    <div class="request-actions">
                        <button class="btn btn-sm btn-outline" onclick="window.qhseDashboard.showVacationDetails('${request.id}')">
                            <i class="fas fa-eye"></i> Details
                        </button>
                        ${request.status === 'eingereicht' ? `
                            <button class="btn btn-sm btn-outline" onclick="window.qhseDashboard.editVacationRequest('${request.id}')">
                                <i class="fas fa-edit"></i> Bearbeiten
                            </button>
                            <button class="btn btn-sm btn-outline btn-danger" onclick="window.qhseDashboard.cancelVacationRequest('${request.id}')">
                                <i class="fas fa-times"></i> Zur√ºckziehen
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = html;
    }

    renderVacationApprovals() {
        const container = document.getElementById('pendingApprovalsList');
        if (!container) return;

        const currentUser = this.getCurrentUser();
        const userRoles = this.roleDefinitions[currentUser.role]?.allowedSections || [];
        
        // Check if user can approve vacations
        if (!userRoles.includes('urlaubsplanung') || !['admin', 'root-admin', 'geschaeftsfuehrung', 'betriebsleiter', 'abteilungsleiter'].includes(currentUser.role)) {
            container.innerHTML = `
                <div class="access-denied">
                    <i class="fas fa-lock"></i>
                    <h3>Keine Berechtigung</h3>
                    <p>Sie haben keine Berechtigung, Urlaubsantr√§ge zu genehmigen.</p>
                </div>
            `;
            return;
        }

        const pendingRequests = this.vacationRequests.filter(r => r.status === 'eingereicht');

        if (pendingRequests.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-check-circle"></i>
                    <h3>Keine ausstehenden Genehmigungen</h3>
                    <p>Alle Urlaubsantr√§ge wurden bearbeitet.</p>
                </div>
            `;
            return;
        }

        const html = pendingRequests.map(request => {
            const user = this.users.find(u => u.id === request.userId);
            const startDate = new Date(request.startDate).toLocaleDateString('de-DE');
            const endDate = new Date(request.endDate).toLocaleDateString('de-DE');
            
            return `
                <div class="vacation-approval-card">
                    <div class="approval-header">
                        <div class="employee-info">
                            <strong>${user ? user.displayName : 'Unbekannt'}</strong>
                            <span class="department">${user ? user.department : ''}</span>
                        </div>
                        <div class="request-dates">
                            <i class="fas fa-calendar"></i>
                            ${startDate} - ${endDate} (${request.workingDays} Tage)
                        </div>
                    </div>
                    <div class="approval-details">
                        <div class="detail-row">
                            <span class="label">Typ:</span>
                            <span>${this.getAbsenceTypeName(request.absenceType)}</span>
                        </div>
                        <div class="detail-row">
                            <span class="label">Verf√ºgbare Urlaubstage:</span>
                            <span>${this.vacationAccounts[request.userId]?.remainingDays || 0} Tage</span>
                        </div>
                        ${request.reason ? `
                            <div class="detail-row">
                                <span class="label">Grund:</span>
                                <span>${request.reason}</span>
                            </div>
                        ` : ''}
                        ${request.substitute ? `
                            <div class="detail-row">
                                <span class="label">Vertretung:</span>
                                <span>${this.getUserDisplayName(request.substitute)}</span>
                            </div>
                        ` : ''}
                    </div>
                    <div class="approval-actions">
                        <button class="btn btn-sm btn-success" onclick="window.qhseDashboard.approveVacationRequest('${request.id}')">
                            <i class="fas fa-check"></i> Genehmigen
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="window.qhseDashboard.rejectVacationRequest('${request.id}')">
                            <i class="fas fa-times"></i> Ablehnen
                        </button>
                        <button class="btn btn-sm btn-outline" onclick="window.qhseDashboard.showVacationApprovalModal('${request.id}')">
                            <i class="fas fa-comment"></i> Mit Kommentar
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = html;
    }

    updateVacationStats() {
        const currentUser = this.getCurrentUser();
        const userAccount = this.vacationAccounts[currentUser.id];
        
        if (!userAccount) return;

        // Update vacation balance display
        const remainingElement = document.getElementById('vacationRemainingDays');
        const usedElement = document.getElementById('vacationUsedDays');
        const totalElement = document.getElementById('vacationTotalDays');
        const pendingElement = document.getElementById('vacationPendingDays');

        if (remainingElement) remainingElement.textContent = userAccount.remainingDays;
        if (usedElement) usedElement.textContent = userAccount.usedDays;
        if (totalElement) totalElement.textContent = userAccount.totalDays;
        if (pendingElement) pendingElement.textContent = userAccount.pendingDays;

        // Update dashboard stats
        const totalRequestsElement = document.getElementById('totalVacationRequests');
        const pendingRequestsElement = document.getElementById('pendingVacationRequests');
        const approvedRequestsElement = document.getElementById('approvedVacationRequests');

        if (totalRequestsElement) {
            totalRequestsElement.textContent = this.vacationRequests.length;
        }
        if (pendingRequestsElement) {
            const pending = this.vacationRequests.filter(r => r.status === 'eingereicht').length;
            pendingRequestsElement.textContent = pending;
        }
        if (approvedRequestsElement) {
            const approved = this.vacationRequests.filter(r => r.status === 'genehmigt').length;
            approvedRequestsElement.textContent = approved;
        }
    }

    showVacationRequestModal() {
        console.log('üéØ showVacationRequestModal called');
        const modal = document.getElementById('vacationRequestModal');
        if (!modal) {
            console.error('‚ùå Vacation request modal not found!');
            alert('Fehler: Urlaubsantrag-Modal nicht gefunden.');
            return;
        }

        console.log('‚úÖ Modal found, setting up form...');

        // Reset form
        const form = document.getElementById('vacationRequestForm');
        if (form) {
            form.reset();
            console.log('‚úÖ Form reset');
        } else {
            console.warn('‚ö†Ô∏è Form not found');
        }

        // Set minimum date to today
        const today = new Date().toISOString().split('T')[0];
        const startDateInput = document.getElementById('vacationStartDate');
        const endDateInput = document.getElementById('vacationEndDate');
        
        if (startDateInput) {
            startDateInput.min = today;
            console.log('‚úÖ Start date min set to:', today);
        }
        if (endDateInput) {
            endDateInput.min = today;
            console.log('‚úÖ End date min set to:', today);
        }

        // Populate substitute dropdown
        this.populateSubstituteDropdown();
        console.log('‚úÖ Substitute dropdown populated');

        // Show modal
        modal.style.display = 'block';
        console.log('‚úÖ Modal displayed');
    }

    populateSubstituteDropdown() {
        const select = document.getElementById('vacationSubstitute');
        if (!select) return;

        const currentUser = this.getCurrentUser();
        const colleagues = this.users.filter(u => 
            u.id !== currentUser.id && 
            u.department === currentUser.department &&
            u.role !== 'mitarbeiter'
        );

        select.innerHTML = '<option value="">Keine Vertretung erforderlich</option>';
        colleagues.forEach(user => {
            select.innerHTML += `<option value="${user.id}">${user.displayName}</option>`;
        });
    }

    submitVacationRequest() {
        const form = document.getElementById('vacationRequestForm');
        if (!form) return;

        const formData = new FormData(form);
        const currentUser = this.getCurrentUser();
        
        const request = {
            id: 'VAC_' + Date.now(),
            userId: currentUser.id,
            absenceType: formData.get('vacationType'),
            startDate: formData.get('vacationStartDate'),
            endDate: formData.get('vacationEndDate'),
            workingDays: this.calculateWorkingDays(formData.get('vacationStartDate'), formData.get('vacationEndDate')),
            reason: formData.get('vacationReason') || '',
            substitute: formData.get('vacationSubstitute') || null,
            status: 'eingereicht',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            workflow: [{
                action: 'eingereicht',
                timestamp: new Date().toISOString(),
                userId: currentUser.id,
                comment: 'Antrag eingereicht'
            }]
        };

        // Validate request
        if (!this.validateVacationRequest(request)) return;

        this.vacationRequests.push(request);
        this.saveVacationRequestsToStorage();

        // Update vacation account
        if (request.absenceType === 'urlaub') {
            const userAccount = this.vacationAccounts[currentUser.id];
            if (userAccount) {
                userAccount.pendingDays += request.workingDays;
                this.saveVacationAccountsToStorage();
            }
        }

        // Close modal and refresh display
        document.getElementById('vacationRequestModal').style.display = 'none';
        this.renderVacationTabContent('requests');
        this.updateVacationStats();

        alert('Urlaubsantrag erfolgreich eingereicht!');
    }

    validateVacationRequest(request) {
        const startDate = new Date(request.startDate);
        const endDate = new Date(request.endDate);
        const today = new Date();

        if (startDate <= today) {
            alert('Das Startdatum muss in der Zukunft liegen.');
            return false;
        }

        if (endDate <= startDate) {
            alert('Das Enddatum muss nach dem Startdatum liegen.');
            return false;
        }

        if (request.absenceType === 'urlaub') {
            const userAccount = this.vacationAccounts[request.userId];
            if (userAccount && request.workingDays > userAccount.remainingDays) {
                alert('Nicht gen√ºgend Urlaubstage verf√ºgbar.');
                return false;
            }
        }

        // Check for conflicts
        const conflicts = this.checkVacationConflicts(request);
        if (conflicts.length > 0) {
            const conflictNames = conflicts.map(c => this.getUserDisplayName(c.userId)).join(', ');
            if (!confirm(`Warnung: √úberschneidung mit anderen Urlauben (${conflictNames}). Trotzdem fortfahren?`)) {
                return false;
            }
        }

        return true;
    }

    checkVacationConflicts(request) {
        const startDate = new Date(request.startDate);
        const endDate = new Date(request.endDate);
        const conflicts = [];

        const currentUser = this.getCurrentUser();
        const departmentColleagues = this.users.filter(u => 
            u.department === currentUser.department && u.id !== currentUser.id
        );

        departmentColleagues.forEach(colleague => {
            const colleagueRequests = this.vacationRequests.filter(r => 
                r.userId === colleague.id && 
                r.status === 'genehmigt' &&
                r.id !== request.id
            );

            colleagueRequests.forEach(existingRequest => {
                const existingStart = new Date(existingRequest.startDate);
                const existingEnd = new Date(existingRequest.endDate);

                if ((startDate <= existingEnd && endDate >= existingStart)) {
                    conflicts.push(existingRequest);
                }
            });
        });

        return conflicts;
    }

    calculateWorkingDays(startDate, endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        let workingDays = 0;

        for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {
            const dayOfWeek = date.getDay();
            if (dayOfWeek !== 0 && dayOfWeek !== 6) { // Not weekend
                workingDays++;
            }
        }

        return workingDays;
    }

    getAbsenceTypeName(type) {
        const types = {
            'urlaub': 'Urlaub',
            'krank': 'Krankheit',
            'fortbildung': 'Fortbildung',
            'elternzeit': 'Elternzeit',
            'sonderurlaub': 'Sonderurlaub',
            'unbezahlt': 'Unbezahlter Urlaub'
        };
        return types[type] || type;
    }

    getVacationStatusClass(status) {
        const classes = {
            'eingereicht': 'pending',
            'genehmigt': 'approved',
            'abgelehnt': 'rejected',
            'storniert': 'cancelled'
        };
        return classes[status] || 'unknown';
    }

    getUserDisplayName(userId) {
        const user = this.users.find(u => u.id === userId);
        return user ? user.displayName : 'Unbekannt';
    }

    isToday(date) {
        const today = new Date();
        return date.toDateString() === today.toDateString();
    }

    getStartOfWeek(date) {
        const start = new Date(date);
        const day = start.getDay();
        const diff = start.getDate() - day + (day === 0 ? -6 : 1);
        return new Date(start.setDate(diff));
    }

    // Additional vacation management methods
    updateVacationBalance() {
        this.updateVacationStats();
    }

    renderVacationQuickActions() {
        // Placeholder for quick actions rendering
        console.log('Rendering vacation quick actions...');
    }

    renderVacationNotifications() {
        // Placeholder for notifications rendering
        console.log('Rendering vacation notifications...');
    }

    renderTeamVacationOverview() {
        const container = document.getElementById('teamAbsencesList');
        if (!container) return;

        const currentUser = this.getCurrentUser();
        const userDepartment = currentUser.department;
        
        // Get team members from same department
        const teamMembers = this.users.filter(u => 
            u.department === userDepartment && u.id !== currentUser.id
        );

        if (teamMembers.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-users"></i>
                    <h3>Keine Teammitglieder</h3>
                    <p>In Ihrer Abteilung sind keine weiteren Mitarbeiter vorhanden.</p>
                </div>
            `;
            return;
        }

        // Get vacation requests for team members
        const teamRequests = this.vacationRequests.filter(r => 
            teamMembers.some(member => member.id === r.userId) &&
            r.status === 'genehmigt'
        );

        let html = '<div class="team-vacation-grid">';
        
        teamMembers.forEach(member => {
            const memberRequests = teamRequests.filter(r => r.userId === member.id);
            const nextVacation = memberRequests
                .filter(r => new Date(r.startDate) > new Date())
                .sort((a, b) => new Date(a.startDate) - new Date(b.startDate))[0];

            html += `
                <div class="team-member-card">
                    <div class="member-info">
                        <strong>${member.displayName}</strong>
                        <span class="member-role">${this.roleDefinitions[member.role]?.name}</span>
                    </div>
                    <div class="vacation-status">
                        ${nextVacation ? `
                            <div class="next-vacation">
                                <i class="fas fa-calendar"></i>
                                ${new Date(nextVacation.startDate).toLocaleDateString('de-DE')} - 
                                ${new Date(nextVacation.endDate).toLocaleDateString('de-DE')}
                                <span class="vacation-type">${this.getAbsenceTypeName(nextVacation.absenceType)}</span>
                            </div>
                        ` : `
                            <div class="no-vacation">
                                <i class="fas fa-check-circle"></i>
                                Keine geplanten Abwesenheiten
                            </div>
                        `}
                    </div>
                    <div class="vacation-count">
                        ${memberRequests.length} Urlaube geplant
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        container.innerHTML = html;
    }

    renderVacationAdministration() {
        // Populate entitlements overview
        const entitlementsContainer = document.getElementById('entitlementsOverview');
        if (entitlementsContainer) {
            const currentUser = this.getCurrentUser();
            
            if (!['admin', 'root-admin'].includes(currentUser.role)) {
                entitlementsContainer.innerHTML = `
                    <div class="access-denied">
                        <i class="fas fa-lock"></i>
                        <p>Keine Berechtigung f√ºr Verwaltungsfunktionen.</p>
                    </div>
                `;
            } else {
                let html = '<div class="entitlements-list">';
                Object.values(this.vacationAccounts).forEach(account => {
                    const user = this.users.find(u => u.id === account.userId);
                    if (user) {
                        html += `
                            <div class="entitlement-item">
                                <div class="employee-name">${user.displayName}</div>
                                <div class="entitlement-details">
                                    <span>${account.totalDays} Tage</span>
                                    <span class="used">${account.usedDays} verbraucht</span>
                                    <span class="remaining">${account.remainingDays} verf√ºgbar</span>
                                </div>
                            </div>
                        `;
                    }
                });
                html += '</div>';
                entitlementsContainer.innerHTML = html;
            }
        }

        // Populate holidays overview
        const holidaysContainer = document.getElementById('holidaysOverview');
        if (holidaysContainer) {
            holidaysContainer.innerHTML = `
                <div class="holidays-list">
                    <div class="holiday-item">
                        <span class="holiday-date">01.01.2024</span>
                        <span class="holiday-name">Neujahr</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">29.03.2024</span>
                        <span class="holiday-name">Karfreitag</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">01.04.2024</span>
                        <span class="holiday-name">Ostermontag</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">01.05.2024</span>
                        <span class="holiday-name">Tag der Arbeit</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">09.05.2024</span>
                        <span class="holiday-name">Christi Himmelfahrt</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">20.05.2024</span>
                        <span class="holiday-name">Pfingstmontag</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">03.10.2024</span>
                        <span class="holiday-name">Tag der Deutschen Einheit</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">25.12.2024</span>
                        <span class="holiday-name">1. Weihnachtsfeiertag</span>
                    </div>
                    <div class="holiday-item">
                        <span class="holiday-date">26.12.2024</span>
                        <span class="holiday-name">2. Weihnachtsfeiertag</span>
                    </div>
                </div>
            `;
        }

        // Populate reports overview
        const reportsContainer = document.getElementById('reportsOverview');
        if (reportsContainer) {
            const totalRequests = this.vacationRequests.length;
            const pendingRequests = this.vacationRequests.filter(r => r.status === 'eingereicht').length;
            const approvedRequests = this.vacationRequests.filter(r => r.status === 'genehmigt').length;

            reportsContainer.innerHTML = `
                <div class="reports-stats">
                    <div class="stat-item">
                        <div class="stat-value">${totalRequests}</div>
                        <div class="stat-label">Gesamt Antr√§ge</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${pendingRequests}</div>
                        <div class="stat-label">Ausstehend</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${approvedRequests}</div>
                        <div class="stat-label">Genehmigt</div>
                    </div>
                </div>
            `;
        }

        // Setup event listeners for admin buttons
        console.log('üîß Setting up vacation administration event listeners...');
        
        const exportBtn = document.getElementById('exportDataBtn');
        const reportsBtn = document.getElementById('generateReportsBtn');
        const holidaysBtn = document.getElementById('manageHolidaysBtn');
        const specialRulesBtn = document.getElementById('specialRulesBtn');
        
        if (exportBtn) {
            exportBtn.addEventListener('click', () => {
                console.log('üìä Export button clicked');
                this.exportVacationData();
            });
            console.log('‚úÖ Export button event listener added');
        } else {
            console.warn('‚ö†Ô∏è Export button not found');
        }
        
        if (reportsBtn) {
            reportsBtn.addEventListener('click', () => {
                console.log('üìà Reports button clicked');
                this.generateVacationReport();
            });
            console.log('‚úÖ Reports button event listener added');
        } else {
            console.warn('‚ö†Ô∏è Reports button not found');
        }
        
        if (holidaysBtn) {
            holidaysBtn.addEventListener('click', () => {
                console.log('üéÑ Holidays management button clicked');
                this.showHolidaysManagement();
            });
            console.log('‚úÖ Holidays management button event listener added');
        } else {
            console.warn('‚ö†Ô∏è Holidays management button not found');
        }
        
        if (specialRulesBtn) {
            specialRulesBtn.addEventListener('click', () => {
                console.log('‚öôÔ∏è Special rules button clicked');
                this.showSpecialRulesManagement();
            });
            console.log('‚úÖ Special rules button event listener added');
        } else {
            console.warn('‚ö†Ô∏è Special rules button not found');
        }
    }

    validateVacationDates() {
        const startInput = document.getElementById('vacationStartDate');
        const endInput = document.getElementById('vacationEndDate');
        
        if (!startInput || !endInput) return;

        const startDate = new Date(startInput.value);
        const endDate = new Date(endInput.value);
        
        if (startDate && endDate && endDate < startDate) {
            endInput.setCustomValidity('Enddatum muss nach dem Startdatum liegen');
        } else {
            endInput.setCustomValidity('');
        }
    }

    calculateVacationDays() {
        const startInput = document.getElementById('vacationStartDate');
        const endInput = document.getElementById('vacationEndDate');
        const daysInput = document.getElementById('vacationDays');
        
        if (!startInput || !endInput || !daysInput) return;

        if (startInput.value && endInput.value) {
            const workingDays = this.calculateWorkingDays(startInput.value, endInput.value);
            daysInput.value = workingDays;
            
            // Update summary if elements exist
            const summaryDays = document.getElementById('summaryDays');
            const summaryPeriod = document.getElementById('summaryPeriod');
            
            if (summaryDays) summaryDays.textContent = workingDays;
            if (summaryPeriod) {
                const startDate = new Date(startInput.value).toLocaleDateString('de-DE');
                const endDate = new Date(endInput.value).toLocaleDateString('de-DE');
                summaryPeriod.textContent = `${startDate} - ${endDate}`;
            }
        } else {
            daysInput.value = '';
            const summaryDays = document.getElementById('summaryDays');
            const summaryPeriod = document.getElementById('summaryPeriod');
            if (summaryDays) summaryDays.textContent = '0';
            if (summaryPeriod) summaryPeriod.textContent = '-';
        }
    }

    showDayVacationDetails(date) {
        const vacations = this.getVacationsForDate(new Date(date));
        
        if (vacations.length === 0) {
            alert('Keine Urlaubseintr√§ge f√ºr diesen Tag.');
            return;
        }

        const details = vacations.map(v => `${v.employee}: ${this.getAbsenceTypeName(v.type)}`).join('\n');
        alert(`Urlaubseintr√§ge f√ºr ${new Date(date).toLocaleDateString('de-DE')}:\n\n${details}`);
    }

    showVacationDetails(requestId) {
        const request = this.vacationRequests.find(r => r.id === requestId);
        if (!request) return;

        const modal = document.getElementById('vacationDetailsModal');
        if (!modal) {
            alert('Details-Modal nicht gefunden.');
            return;
        }

        // Populate modal with request details
        const user = this.users.find(u => u.id === request.userId);
        document.getElementById('detailEmployeeName').textContent = user ? user.displayName : 'Unbekannt';
        document.getElementById('detailVacationType').textContent = this.getAbsenceTypeName(request.absenceType);
        document.getElementById('detailStartDate').textContent = new Date(request.startDate).toLocaleDateString('de-DE');
        document.getElementById('detailEndDate').textContent = new Date(request.endDate).toLocaleDateString('de-DE');
        document.getElementById('detailWorkingDays').textContent = request.workingDays;
        document.getElementById('detailStatus').textContent = request.status;
        document.getElementById('detailReason').textContent = request.reason || 'Kein Grund angegeben';

        modal.style.display = 'block';
    }

    approveVacationRequest(requestId) {
        const request = this.vacationRequests.find(r => r.id === requestId);
        if (!request) return;

        const currentUser = this.getCurrentUser();
        
        // Update request status
        request.status = 'genehmigt';
        request.updatedAt = new Date().toISOString();
        request.workflow.push({
            action: 'genehmigt',
            timestamp: new Date().toISOString(),
            userId: currentUser.id,
            comment: 'Antrag genehmigt'
        });

        // Update vacation account
        if (request.absenceType === 'urlaub') {
            const userAccount = this.vacationAccounts[request.userId];
            if (userAccount) {
                userAccount.usedDays += request.workingDays;
                userAccount.pendingDays -= request.workingDays;
                userAccount.remainingDays = userAccount.totalDays - userAccount.usedDays;
                this.saveVacationAccountsToStorage();
            }
        }

        this.saveVacationRequestsToStorage();
        this.renderVacationApprovals();
        this.updateVacationStats();

        alert(`Urlaubsantrag von ${this.getUserDisplayName(request.userId)} wurde genehmigt.`);
    }

    rejectVacationRequest(requestId) {
        const request = this.vacationRequests.find(r => r.id === requestId);
        if (!request) return;

        const reason = prompt('Grund f√ºr die Ablehnung (optional):');
        const currentUser = this.getCurrentUser();
        
        // Update request status
        request.status = 'abgelehnt';
        request.updatedAt = new Date().toISOString();
        request.workflow.push({
            action: 'abgelehnt',
            timestamp: new Date().toISOString(),
            userId: currentUser.id,
            comment: reason || 'Antrag abgelehnt'
        });

        // Update vacation account (remove pending days)
        if (request.absenceType === 'urlaub') {
            const userAccount = this.vacationAccounts[request.userId];
            if (userAccount) {
                userAccount.pendingDays -= request.workingDays;
                this.saveVacationAccountsToStorage();
            }
        }

        this.saveVacationRequestsToStorage();
        this.renderVacationApprovals();
        this.updateVacationStats();

        alert(`Urlaubsantrag von ${this.getUserDisplayName(request.userId)} wurde abgelehnt.`);
    }

    cancelVacationRequest(requestId) {
        if (!confirm('M√∂chten Sie den Urlaubsantrag wirklich zur√ºckziehen?')) return;

        const request = this.vacationRequests.find(r => r.id === requestId);
        if (!request) return;

        const currentUser = this.getCurrentUser();
        
        // Update request status
        request.status = 'storniert';
        request.updatedAt = new Date().toISOString();
        request.workflow.push({
            action: 'storniert',
            timestamp: new Date().toISOString(),
            userId: currentUser.id,
            comment: 'Antrag zur√ºckgezogen'
        });

        // Update vacation account (remove pending days)
        if (request.absenceType === 'urlaub') {
            const userAccount = this.vacationAccounts[request.userId];
            if (userAccount) {
                userAccount.pendingDays -= request.workingDays;
                this.saveVacationAccountsToStorage();
            }
        }

        this.saveVacationRequestsToStorage();
        this.renderMyVacationRequests();
        this.updateVacationStats();

        alert('Urlaubsantrag wurde zur√ºckgezogen.');
    }

    editVacationRequest(requestId) {
        const request = this.vacationRequests.find(r => r.id === requestId);
        if (!request) return;

        // Pre-fill the modal with existing data
        document.getElementById('vacationStartDate').value = request.startDate;
        document.getElementById('vacationEndDate').value = request.endDate;
        document.getElementById('vacationType').value = request.absenceType;
        document.getElementById('vacationReason').value = request.reason;
        document.getElementById('vacationSubstitute').value = request.substitute || '';

        // Set editing mode
        this.editingVacationRequestId = requestId;
        
        this.showVacationRequestModal();
    }

    showVacationApprovalModal(requestId) {
        const modal = document.getElementById('vacationApprovalModal');
        if (!modal) {
            alert('Approval-Modal nicht gefunden.');
            return;
        }

        const request = this.vacationRequests.find(r => r.id === requestId);
        if (!request) return;

        // Store current request ID for approval
        this.currentApprovalRequestId = requestId;

        modal.style.display = 'block';
    }

    showTeamVacationView() {
        // Switch to team tab
        const teamTab = document.querySelector('.vacation-tab-btn[data-tab="team"]');
        if (teamTab) {
            teamTab.click();
        }
    }

    showVacationApprovalView() {
        // Switch to approval tab
        const approvalTab = document.querySelector('.vacation-tab-btn[data-tab="approval"]');
        if (approvalTab) {
            approvalTab.click();
        }
    }

    showVacationOverview() {
        console.log('üìä Opening vacation overview...');
        
        // Create modal for vacation overview
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.id = 'vacationOverviewModal';
        modal.style.display = 'block';
        
        const currentYear = new Date().getFullYear();
        const allRequests = this.vacationRequests || [];
        const yearRequests = allRequests.filter(r => 
            new Date(r.startDate).getFullYear() === currentYear
        );
        
        // Calculate statistics
        const stats = {
            total: yearRequests.length,
            pending: yearRequests.filter(r => r.status === 'eingereicht').length,
            approved: yearRequests.filter(r => r.status === 'genehmigt').length,
            rejected: yearRequests.filter(r => r.status === 'abgelehnt').length,
            cancelled: yearRequests.filter(r => r.status === 'zurueckgezogen').length
        };
        
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-chart-bar"></i> Urlaubs√ºbersicht ${currentYear}</h2>
                    <button class="modal-close" onclick="this.closest('.modal').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="vacation-overview">
                        <div class="overview-stats">
                            <h3>Jahresstatistik ${currentYear}</h3>
                            <div class="stats-grid">
                                <div class="stat-item">
                                    <div class="stat-number">${stats.total}</div>
                                    <div class="stat-label">Gesamt Antr√§ge</div>
                                </div>
                                <div class="stat-item pending">
                                    <div class="stat-number">${stats.pending}</div>
                                    <div class="stat-label">Ausstehend</div>
                                </div>
                                <div class="stat-item approved">
                                    <div class="stat-number">${stats.approved}</div>
                                    <div class="stat-label">Genehmigt</div>
                                </div>
                                <div class="stat-item rejected">
                                    <div class="stat-number">${stats.rejected}</div>
                                    <div class="stat-label">Abgelehnt</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="overview-chart">
                            <h3>Monatsverteilung</h3>
                            <div class="month-chart">
                                ${this.renderMonthlyVacationChart(yearRequests)}
                            </div>
                        </div>
                        
                        <div class="overview-departments">
                            <h3>Nach Abteilungen</h3>
                            <div class="departments-list">
                                ${this.renderDepartmentVacationStats(yearRequests)}
                            </div>
                        </div>
                        
                        <div class="overview-actions">
                            <button class="btn-primary" onclick="window.qhseDashboard.generateVacationReport()">
                                <i class="fas fa-file-alt"></i> Bericht generieren
                            </button>
                            <button class="btn-secondary" onclick="window.qhseDashboard.exportVacationData()">
                                <i class="fas fa-download"></i> Daten exportieren
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Close modal on backdrop click
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    renderMonthlyVacationChart(requests) {
        const months = [
            'Jan', 'Feb', 'M√§r', 'Apr', 'Mai', 'Jun',
            'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'
        ];
        
        const monthlyData = Array(12).fill(0);
        requests.forEach(request => {
            const month = new Date(request.startDate).getMonth();
            monthlyData[month]++;
        });
        
        const maxValue = Math.max(...monthlyData, 1);
        
        return months.map((month, index) => {
            const height = (monthlyData[index] / maxValue) * 100;
            return `
                <div class="month-bar">
                    <div class="bar-fill" style="height: ${height}%"></div>
                    <div class="month-label">${month}</div>
                    <div class="month-value">${monthlyData[index]}</div>
                </div>
            `;
        }).join('');
    }

    renderDepartmentVacationStats(requests) {
        const departments = {};
        
        requests.forEach(request => {
            const user = this.users.find(u => u.id === request.userId);
            const dept = user ? user.department : 'Unbekannt';
            
            if (!departments[dept]) {
                departments[dept] = { total: 0, approved: 0, pending: 0 };
            }
            
            departments[dept].total++;
            if (request.status === 'genehmigt') departments[dept].approved++;
            if (request.status === 'eingereicht') departments[dept].pending++;
        });
        
        return Object.entries(departments).map(([dept, stats]) => `
            <div class="department-stat">
                <div class="department-name">${dept}</div>
                <div class="department-numbers">
                    <span class="total">${stats.total} gesamt</span>
                    <span class="approved">${stats.approved} genehmigt</span>
                    <span class="pending">${stats.pending} ausstehend</span>
                </div>
            </div>
        `).join('');
    }

    exportVacationData() {
        const data = {
            requests: this.vacationRequests,
            accounts: this.vacationAccounts,
            exportDate: new Date().toISOString(),
            users: this.users.map(u => ({ id: u.id, displayName: u.displayName, department: u.department }))
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `urlaubsdaten_${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        alert('Urlaubsdaten wurden exportiert.');
    }

    generateVacationReport() {
        const currentYear = new Date().getFullYear();
        const yearRequests = this.vacationRequests.filter(r => 
            new Date(r.startDate).getFullYear() === currentYear
        );
        
        let report = `URLAUBSBERICHT ${currentYear}\n`;
        report += `===========================================\n\n`;
        report += `Gesamtstatistiken:\n`;
        report += `- Antr√§ge gesamt: ${yearRequests.length}\n`;
        report += `- Genehmigt: ${yearRequests.filter(r => r.status === 'genehmigt').length}\n`;
        report += `- Abgelehnt: ${yearRequests.filter(r => r.status === 'abgelehnt').length}\n`;
        report += `- Ausstehend: ${yearRequests.filter(r => r.status === 'eingereicht').length}\n\n`;
        
        // Group by department
        const departments = {};
        yearRequests.forEach(request => {
            const user = this.users.find(u => u.id === request.userId);
            const dept = user ? user.department : 'Unbekannt';
            if (!departments[dept]) departments[dept] = [];
            departments[dept].push(request);
        });
        
        report += `Nach Abteilungen:\n`;
        Object.entries(departments).forEach(([dept, requests]) => {
            report += `- ${dept}: ${requests.length} Antr√§ge\n`;
        });
        
        const blob = new Blob([report], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `urlaubsbericht_${currentYear}.txt`;
        a.click();
        URL.revokeObjectURL(url);
        
        alert('Urlaubsbericht wurde erstellt.');
    }

    showHolidaysManagement() {
        console.log('üéÑ Opening holidays management...');
        
        // Create modal for holidays management
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.id = 'holidaysManagementModal';
        modal.style.display = 'block';
        
        const currentYear = new Date().getFullYear();
        const holidays = this.loadHolidaysFromStorage();
        
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-calendar-plus"></i> Feiertage verwalten - ${currentYear}</h2>
                    <button class="modal-close" onclick="this.closest('.modal').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="holidays-management">
                        <div class="holidays-form">
                            <h3>Neuen Feiertag hinzuf√ºgen</h3>
                            <form id="addHolidayForm">
                                <div class="form-group">
                                    <label for="holidayDate">Datum:</label>
                                    <input type="date" id="holidayDate" name="holidayDate" required>
                                </div>
                                <div class="form-group">
                                    <label for="holidayName">Name:</label>
                                    <input type="text" id="holidayName" name="holidayName" placeholder="z.B. Neujahr" required>
                                </div>
                                <div class="form-group">
                                    <label for="holidayType">Typ:</label>
                                    <select id="holidayType" name="holidayType">
                                        <option value="national">Bundesfeiertag</option>
                                        <option value="regional">Regionaler Feiertag</option>
                                        <option value="company">Betriebsfeiertag</option>
                                    </select>
                                </div>
                                <button type="submit" class="btn-primary">
                                    <i class="fas fa-plus"></i> Hinzuf√ºgen
                                </button>
                            </form>
                        </div>
                        <div class="holidays-list">
                            <h3>Aktuelle Feiertage ${currentYear}</h3>
                            <div id="holidaysList">
                                ${this.renderHolidaysList(holidays)}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Setup event listeners for the form
        const form = document.getElementById('addHolidayForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.addHoliday();
            });
        }
        
        // Close modal on backdrop click
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    showSpecialRulesManagement() {
        console.log('‚öôÔ∏è Opening special rules management...');
        
        // Create modal for special rules management
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.id = 'specialRulesModal';
        modal.style.display = 'block';
        
        const specialRules = this.loadSpecialRulesFromStorage();
        
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2><i class="fas fa-cogs"></i> Sonderregelungen verwalten</h2>
                    <button class="modal-close" onclick="this.closest('.modal').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="special-rules-management">
                        <div class="rules-form">
                            <h3>Neue Sonderregelung hinzuf√ºgen</h3>
                            <form id="addSpecialRuleForm">
                                <div class="form-group">
                                    <label for="ruleTitle">Titel:</label>
                                    <input type="text" id="ruleTitle" name="ruleTitle" placeholder="z.B. Homeoffice-Regelung" required>
                                </div>
                                <div class="form-group">
                                    <label for="ruleDescription">Beschreibung:</label>
                                    <textarea id="ruleDescription" name="ruleDescription" rows="3" 
                                              placeholder="Beschreibung der Sonderregelung..." required></textarea>
                                </div>
                                <div class="form-group">
                                    <label for="ruleCategory">Kategorie:</label>
                                    <select id="ruleCategory" name="ruleCategory">
                                        <option value="vacation">Urlaubsregelung</option>
                                        <option value="working_time">Arbeitszeit</option>
                                        <option value="approval">Genehmigungsverfahren</option>
                                        <option value="calculation">Berechnung</option>
                                        <option value="other">Sonstiges</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="ruleApplicable">G√ºltig f√ºr:</label>
                                    <select id="ruleApplicable" name="ruleApplicable" multiple>
                                        ${this.getAllDepartments().map(dept => 
                                            `<option value="${dept}">${dept}</option>`
                                        ).join('')}
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>
                                        <input type="checkbox" id="ruleActive" name="ruleActive" checked>
                                        Regel aktiv
                                    </label>
                                </div>
                                <button type="submit" class="btn-primary">
                                    <i class="fas fa-plus"></i> Hinzuf√ºgen
                                </button>
                            </form>
                        </div>
                        <div class="rules-list">
                            <h3>Aktuelle Sonderregelungen</h3>
                            <div id="specialRulesList">
                                ${this.renderSpecialRulesList(specialRules)}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Setup event listeners for the form
        const form = document.getElementById('addSpecialRuleForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.addSpecialRule();
            });
        }
        
        // Close modal on backdrop click
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    // ====================================
    // HOLIDAYS & SPECIAL RULES MANAGEMENT
    // ====================================

    loadHolidaysFromStorage() {
        try {
            const holidays = JSON.parse(localStorage.getItem('qhse_holidays') || '[]');
            // Initialize with default German holidays if empty
            if (holidays.length === 0) {
                return this.getDefaultGermanHolidays();
            }
            return holidays;
        } catch (error) {
            console.error('Error loading holidays:', error);
            return this.getDefaultGermanHolidays();
        }
    }

    saveHolidaysToStorage(holidays = this.holidays) {
        localStorage.setItem('qhse_holidays', JSON.stringify(holidays));
    }

    getDefaultGermanHolidays() {
        const currentYear = new Date().getFullYear();
        return [
            { id: 'new-year', date: `${currentYear}-01-01`, name: 'Neujahr', type: 'national' },
            { id: 'good-friday', date: `${currentYear}-03-29`, name: 'Karfreitag', type: 'national' },
            { id: 'easter-monday', date: `${currentYear}-04-01`, name: 'Ostermontag', type: 'national' },
            { id: 'labor-day', date: `${currentYear}-05-01`, name: 'Tag der Arbeit', type: 'national' },
            { id: 'ascension', date: `${currentYear}-05-09`, name: 'Christi Himmelfahrt', type: 'national' },
            { id: 'whit-monday', date: `${currentYear}-05-20`, name: 'Pfingstmontag', type: 'national' },
            { id: 'german-unity', date: `${currentYear}-10-03`, name: 'Tag der Deutschen Einheit', type: 'national' },
            { id: 'christmas-eve', date: `${currentYear}-12-24`, name: 'Heiligabend', type: 'company' },
            { id: 'christmas', date: `${currentYear}-12-25`, name: '1. Weihnachtstag', type: 'national' },
            { id: 'boxing-day', date: `${currentYear}-12-26`, name: '2. Weihnachtstag', type: 'national' },
            { id: 'new-years-eve', date: `${currentYear}-12-31`, name: 'Silvester', type: 'company' }
        ];
    }

    renderHolidaysList(holidays) {
        if (!holidays || holidays.length === 0) {
            return '<div class="no-holidays">Keine Feiertage definiert</div>';
        }

        return holidays.map(holiday => {
            const date = new Date(holiday.date);
            const formattedDate = date.toLocaleDateString('de-DE');
            const typeIcon = {
                'national': 'üá©üá™',
                'regional': 'üèõÔ∏è',
                'company': 'üè¢'
            }[holiday.type] || 'üìÖ';

            return `
                <div class="holiday-item" data-holiday-id="${holiday.id}">
                    <div class="holiday-info">
                        <span class="holiday-icon">${typeIcon}</span>
                        <span class="holiday-date">${formattedDate}</span>
                        <span class="holiday-name">${holiday.name}</span>
                        <span class="holiday-type">${holiday.type}</span>
                    </div>
                    <div class="holiday-actions">
                        <button class="btn-secondary btn-small" onclick="window.qhseDashboard.editHoliday('${holiday.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-danger btn-small" onclick="window.qhseDashboard.deleteHoliday('${holiday.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    addHoliday() {
        const form = document.getElementById('addHolidayForm');
        if (!form) return;

        const formData = new FormData(form);
        const holidayData = {
            id: 'holiday-' + Date.now(),
            date: formData.get('holidayDate'),
            name: formData.get('holidayName'),
            type: formData.get('holidayType'),
            createdAt: new Date().toISOString()
        };

        const holidays = this.loadHolidaysFromStorage();
        holidays.push(holidayData);
        this.saveHolidaysToStorage(holidays);

        // Update display
        const holidaysList = document.getElementById('holidaysList');
        if (holidaysList) {
            holidaysList.innerHTML = this.renderHolidaysList(holidays);
        }

        // Reset form
        form.reset();
        
        console.log('‚úÖ Holiday added:', holidayData);
        alert('Feiertag wurde hinzugef√ºgt!');
    }

    deleteHoliday(holidayId) {
        if (!confirm('M√∂chten Sie diesen Feiertag wirklich l√∂schen?')) return;

        let holidays = this.loadHolidaysFromStorage();
        holidays = holidays.filter(h => h.id !== holidayId);
        this.saveHolidaysToStorage(holidays);

        // Update display
        const holidaysList = document.getElementById('holidaysList');
        if (holidaysList) {
            holidaysList.innerHTML = this.renderHolidaysList(holidays);
        }

        console.log('‚úÖ Holiday deleted:', holidayId);
        alert('Feiertag wurde gel√∂scht!');
    }

    editHoliday(holidayId) {
        const holidays = this.loadHolidaysFromStorage();
        const holiday = holidays.find(h => h.id === holidayId);
        if (!holiday) return;

        // Pre-fill form with existing data
        document.getElementById('holidayDate').value = holiday.date;
        document.getElementById('holidayName').value = holiday.name;
        document.getElementById('holidayType').value = holiday.type;

        // Remove old holiday and let user re-add with changes
        this.deleteHoliday(holidayId);
    }

    // Special Rules Management
    loadSpecialRulesFromStorage() {
        try {
            return JSON.parse(localStorage.getItem('qhse_special_rules') || '[]');
        } catch (error) {
            console.error('Error loading special rules:', error);
            return [];
        }
    }

    saveSpecialRulesToStorage(rules) {
        localStorage.setItem('qhse_special_rules', JSON.stringify(rules));
    }

    renderSpecialRulesList(rules) {
        if (!rules || rules.length === 0) {
            return '<div class="no-rules">Keine Sonderregelungen definiert</div>';
        }

        return rules.map(rule => {
            const statusIcon = rule.active ? '‚úÖ' : '‚ùå';
            const categoryIcon = {
                'vacation': 'üèñÔ∏è',
                'working_time': '‚è∞',
                'approval': '‚úÖ',
                'calculation': 'üßÆ',
                'other': 'üìã'
            }[rule.category] || 'üìã';

            return `
                <div class="rule-item ${rule.active ? 'active' : 'inactive'}" data-rule-id="${rule.id}">
                    <div class="rule-header">
                        <span class="rule-icon">${categoryIcon}</span>
                        <h4 class="rule-title">${rule.title}</h4>
                        <span class="rule-status">${statusIcon}</span>
                    </div>
                    <div class="rule-description">${rule.description}</div>
                    <div class="rule-meta">
                        <span class="rule-category">Kategorie: ${rule.category}</span>
                        <span class="rule-departments">G√ºltig f√ºr: ${rule.applicableDepartments?.join(', ') || 'Alle'}</span>
                    </div>
                    <div class="rule-actions">
                        <button class="btn-secondary btn-small" onclick="window.qhseDashboard.editSpecialRule('${rule.id}')">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-${rule.active ? 'warning' : 'success'} btn-small" 
                                onclick="window.qhseDashboard.toggleSpecialRule('${rule.id}')">
                            <i class="fas fa-${rule.active ? 'pause' : 'play'}"></i>
                        </button>
                        <button class="btn-danger btn-small" onclick="window.qhseDashboard.deleteSpecialRule('${rule.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    addSpecialRule() {
        const form = document.getElementById('addSpecialRuleForm');
        if (!form) return;

        const formData = new FormData(form);
        const ruleData = {
            id: 'rule-' + Date.now(),
            title: formData.get('ruleTitle'),
            description: formData.get('ruleDescription'),
            category: formData.get('ruleCategory'),
            applicableDepartments: Array.from(formData.getAll('ruleApplicable')),
            active: formData.get('ruleActive') === 'on',
            createdAt: new Date().toISOString(),
            createdBy: this.getCurrentUser().id
        };

        const rules = this.loadSpecialRulesFromStorage();
        rules.push(ruleData);
        this.saveSpecialRulesToStorage(rules);

        // Update display
        const rulesList = document.getElementById('specialRulesList');
        if (rulesList) {
            rulesList.innerHTML = this.renderSpecialRulesList(rules);
        }

        // Reset form
        form.reset();
        
        console.log('‚úÖ Special rule added:', ruleData);
        alert('Sonderregelung wurde hinzugef√ºgt!');
    }

    deleteSpecialRule(ruleId) {
        if (!confirm('M√∂chten Sie diese Sonderregelung wirklich l√∂schen?')) return;

        let rules = this.loadSpecialRulesFromStorage();
        rules = rules.filter(r => r.id !== ruleId);
        this.saveSpecialRulesToStorage(rules);

        // Update display
        const rulesList = document.getElementById('specialRulesList');
        if (rulesList) {
            rulesList.innerHTML = this.renderSpecialRulesList(rules);
        }

        console.log('‚úÖ Special rule deleted:', ruleId);
        alert('Sonderregelung wurde gel√∂scht!');
    }

    toggleSpecialRule(ruleId) {
        const rules = this.loadSpecialRulesFromStorage();
        const rule = rules.find(r => r.id === ruleId);
        if (!rule) return;

        rule.active = !rule.active;
        rule.updatedAt = new Date().toISOString();
        rule.updatedBy = this.getCurrentUser().id;

        this.saveSpecialRulesToStorage(rules);

        // Update display
        const rulesList = document.getElementById('specialRulesList');
        if (rulesList) {
            rulesList.innerHTML = this.renderSpecialRulesList(rules);
        }

        console.log('‚úÖ Special rule toggled:', rule);
        alert(`Sonderregelung wurde ${rule.active ? 'aktiviert' : 'deaktiviert'}!`);
    }

    editSpecialRule(ruleId) {
        const rules = this.loadSpecialRulesFromStorage();
        const rule = rules.find(r => r.id === ruleId);
        if (!rule) return;

        // Pre-fill form with existing data
        document.getElementById('ruleTitle').value = rule.title;
        document.getElementById('ruleDescription').value = rule.description;
        document.getElementById('ruleCategory').value = rule.category;
        document.getElementById('ruleActive').checked = rule.active;

        // Set multiple select values
        const departmentSelect = document.getElementById('ruleApplicable');
        if (departmentSelect && rule.applicableDepartments) {
            Array.from(departmentSelect.options).forEach(option => {
                option.selected = rule.applicableDepartments.includes(option.value);
            });
        }

        // Remove old rule and let user re-add with changes
        this.deleteSpecialRule(ruleId);
    }

    getAllDepartments() {
        return [...new Set(this.users.map(user => user.department).filter(dept => dept))];
    }

    resetVacationYear() {
        if (!confirm('M√∂chten Sie wirklich ein neues Urlaubsjahr starten? Dies setzt alle Urlaubskonten zur√ºck.')) {
            return;
        }
        
        const currentYear = new Date().getFullYear();
        
        // Reset all vacation accounts for new year
        Object.keys(this.vacationAccounts).forEach(userId => {
            const account = this.vacationAccounts[userId];
            account.year = currentYear;
            account.usedDays = 0;
            account.pendingDays = 0;
            account.remainingDays = account.totalDays + account.carryOverDays;
            account.carryOverDays = Math.min(account.remainingDays, account.carryOverLimit);
            account.updatedAt = new Date().toISOString();
        });
        
        this.saveVacationAccountsToStorage();
        this.updateVacationStats();
        
        alert('Neues Urlaubsjahr wurde initialisiert.');
    }

    // ===================================
    // ENTERPRISE ST√ñRUNGSMELDUNG FUNCTIONS
    // ===================================

    // Modal Management Functions
    minimizeModal() {
        const modal = document.getElementById('reportIssueModal');
        if (modal) {
            modal.style.transform = 'scale(0.8)';
            modal.style.opacity = '0.5';
            setTimeout(() => {
                modal.style.transform = 'scale(1)';
                modal.style.opacity = '1';
            }, 300);
        }
    }

    toggleFullscreen() {
        const modal = document.getElementById('reportIssueModal');
        if (modal) {
            modal.classList.toggle('fullscreen-modal');
            const btn = modal.querySelector('.fullscreen-btn i');
            if (btn) {
                btn.className = modal.classList.contains('fullscreen-modal') ? 'fas fa-compress' : 'fas fa-expand';
            }
        }
    }

    // Advanced Voice Input with AI Analysis
    enableAdvancedVoiceInput() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            alert('‚ùå Sprachaufnahme wird von diesem Browser nicht unterst√ºtzt.');
            return;
        }

        // Show voice visualization
        this.showVoiceVisualization();

        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        
        recognition.lang = 'de-DE';
        recognition.continuous = true;
        recognition.interimResults = true;
        
        let isRecording = false;
        let finalTranscript = '';

        recognition.onstart = () => {
            isRecording = true;
            this.updateVoiceStatus('üé§ Sprechen Sie jetzt - AI analysiert...');
        };
        
        recognition.onresult = (event) => {
            let interimTranscript = '';
            
            for (let i = event.resultIndex; i < event.results.length; i++) {
                const transcript = event.results[i][0].transcript;
                if (event.results[i].isFinal) {
                    finalTranscript += transcript + '. ';
                } else {
                    interimTranscript += transcript;
                }
            }
            
            // AI-powered keyword analysis
            this.analyzeVoiceKeywords(finalTranscript + interimTranscript);
        };

        recognition.onend = () => {
            isRecording = false;
            this.hideVoiceVisualization();
            
            if (finalTranscript) {
                // AI-enhanced voice processing
                const processedText = this.processVoiceWithAI(finalTranscript);
                this.fillFormFromVoiceInput(processedText);
                alert('‚úÖ Spracheingabe erfolgreich verarbeitet und analysiert!');
            }
        };

        recognition.onerror = (event) => {
            this.hideVoiceVisualization();
            alert('‚ùå Sprachaufnahme fehlgeschlagen: ' + event.error);
        };

        recognition.start();
        
        // Auto-stop after 30 seconds
        setTimeout(() => {
            if (isRecording) {
                recognition.stop();
            }
        }, 30000);
    }

    // Smart Camera with AI Image Analysis
    enableSmartCamera() {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('‚ùå Kamera-Zugriff wird von diesem Browser nicht unterst√ºtzt.');
            return;
        }

        this.showCameraPreview();
        
        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
            .then(stream => {
                const video = document.createElement('video');
                video.srcObject = stream;
                video.autoplay = true;
                
                const viewfinder = document.querySelector('.camera-viewfinder');
                if (viewfinder) {
                    viewfinder.innerHTML = '';
                    viewfinder.appendChild(video);
                    
                    // Add capture button functionality
                    const captureBtn = viewfinder.parentElement.querySelector('.camera-btn');
                    if (captureBtn) {
                        captureBtn.onclick = () => this.captureAndAnalyzeImage(video, stream);
                    }
                }
            })
            .catch(err => {
                this.hideCameraPreview();
                alert('‚ùå Kamera konnte nicht aktiviert werden: ' + err.message);
            });
    }

    captureAndAnalyzeImage(video, stream) {
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0);
        
        // Stop camera stream
        stream.getTracks().forEach(track => track.stop());
        
        // Convert to blob and analyze
        canvas.toBlob(blob => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const imageData = e.target.result;
                this.analyzeImageWithAI(imageData);
                this.addImageToIssue(imageData);
                this.hideCameraPreview();
            };
            reader.readAsDataURL(blob);
        }, 'image/jpeg', 0.8);
    }

    // Real-time Form Analysis
    startRealTimeAnalysis() {
        this.showRealtimeAnalysis();
        
        // Analyze form completion in real-time
        const analysisInterval = setInterval(() => {
            const metrics = this.calculateFormMetrics();
            this.updateAnalysisMetrics(metrics);
            
            // Generate suggestions based on current input
            const suggestions = this.generateIntelligentSuggestions();
            this.updateAnalysisSuggestions(suggestions);
        }, 2000);

        // Stop analysis when modal closes
        const modal = document.getElementById('reportIssueModal');
        if (modal) {
            const observer = new MutationObserver(mutations => {
                if (!document.contains(modal)) {
                    clearInterval(analysisInterval);
                    observer.disconnect();
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });
        }
    }

    // Predictive Analytics
    enablePredictiveAnalysis() {
        this.showPredictionPanel();
        
        setTimeout(() => {
            const predictions = this.generatePredictions();
            this.updatePredictionCards(predictions);
        }, 1500);
    }

    // Emergency Mode
    triggerEmergencyMode() {
        const modal = document.getElementById('reportIssueModal');
        if (modal) {
            modal.classList.add('emergency-mode');
            
            // Auto-fill emergency values
            document.getElementById('issuePriority').value = 'critical';
            document.getElementById('issueCategory').value = 'safety';
            
            // Update indicators
            this.updatePriorityIndicator('critical');
            
            // Add emergency styling
            const header = modal.querySelector('.enterprise-modal-header');
            if (header) {
                header.style.background = 'linear-gradient(135deg, #dc2626, #991b1b)';
                header.style.animation = 'emergencyPulse 1s infinite';
            }
            
            alert('üö® NOTFALL-MODUS AKTIVIERT!\nH√∂chste Priorit√§t gesetzt. Alle relevanten Stellen werden sofort benachrichtigt.');
        }
    }

    // Priority Mode
    setPriorityMode() {
        document.getElementById('issuePriority').value = 'high';
        this.updatePriorityIndicator('high');
        alert('‚ö° Eilig-Modus aktiviert! Priorit√§t auf "Hoch" gesetzt.');
    }

    // Duplicate Last Issue
    duplicateLastIssue() {
        if (this.issues && this.issues.length > 0) {
            const lastIssue = this.issues[this.issues.length - 1];
            
            // Fill form with last issue data
            document.getElementById('issueTitle').value = lastIssue.title + ' (Kopie)';
            document.getElementById('issueDescription').value = lastIssue.description;
            document.getElementById('issueCategory').value = lastIssue.category || '';
            document.getElementById('issuePriority').value = lastIssue.priority || 'medium';
            
            if (lastIssue.machineId) {
                document.getElementById('issueMachine').value = lastIssue.machineId;
                this.updateMachineInfo(lastIssue.machineId);
            }
            
            this.updatePriorityIndicator(lastIssue.priority || 'medium');
            alert('üìã Letzte St√∂rung dupliziert! Sie k√∂nnen die Daten anpassen.');
        } else {
            alert('‚ùå Keine vorherigen St√∂rungen gefunden.');
        }
    }

    // Save Draft
    saveDraft() {
        const draftData = {
            machine: document.getElementById('issueMachine').value,
            priority: document.getElementById('issuePriority').value,
            category: document.getElementById('issueCategory').value,
            title: document.getElementById('issueTitle').value,
            description: document.getElementById('issueDescription').value,
            timestamp: new Date().toISOString()
        };
        
        localStorage.setItem('qhse_issue_draft', JSON.stringify(draftData));
        alert('üíæ Entwurf gespeichert! Sie k√∂nnen sp√§ter daran weiterarbeiten.');
    }

    // Voice Visualization Functions
    showVoiceVisualization() {
        const existing = document.querySelector('.voice-visualization');
        if (existing) existing.remove();
        
        const modal = document.getElementById('reportIssueModal');
        const body = modal?.querySelector('.modal-body');
        if (body) {
            const visualization = document.createElement('div');
            visualization.className = 'voice-visualization active';
            visualization.innerHTML = `
                <h4><i class="fas fa-microphone"></i> AI-Sprach-Analyse</h4>
                <div class="voice-waveform">
                    <div class="wave-bar"></div>
                    <div class="wave-bar"></div>
                    <div class="wave-bar"></div>
                    <div class="wave-bar"></div>
                    <div class="wave-bar"></div>
                </div>
                <div class="voice-status">Bereit f√ºr Spracheingabe...</div>
                <div class="voice-keywords"></div>
            `;
            body.insertBefore(visualization, body.firstChild);
        }
    }

    hideVoiceVisualization() {
        const visualization = document.querySelector('.voice-visualization');
        if (visualization) {
            visualization.classList.remove('active');
            setTimeout(() => visualization.remove(), 500);
        }
    }

    updateVoiceStatus(status) {
        const statusElement = document.querySelector('.voice-status');
        if (statusElement) {
            statusElement.textContent = status;
        }
    }

    // Camera Preview Functions
    showCameraPreview() {
        const existing = document.querySelector('.camera-preview');
        if (existing) existing.remove();
        
        const modal = document.getElementById('reportIssueModal');
        const body = modal?.querySelector('.modal-body');
        if (body) {
            const preview = document.createElement('div');
            preview.className = 'camera-preview active';
            preview.innerHTML = `
                <h4><i class="fas fa-camera"></i> Smart Camera</h4>
                <div class="camera-viewfinder">
                    <i class="fas fa-camera fa-3x"></i>
                    <p>Kamera wird gestartet...</p>
                    <div class="camera-overlay"></div>
                </div>
                <div class="camera-controls">
                    <button class="camera-btn" title="Foto aufnehmen">
                        <i class="fas fa-camera"></i>
                    </button>
                </div>
            `;
            body.insertBefore(preview, body.firstChild);
        }
    }

    hideCameraPreview() {
        const preview = document.querySelector('.camera-preview');
        if (preview) {
            preview.classList.remove('active');
            setTimeout(() => preview.remove(), 500);
        }
    }

    // Real-time Analysis Functions
    showRealtimeAnalysis() {
        const existing = document.querySelector('.realtime-analysis');
        if (existing) existing.remove();
        
        const modal = document.getElementById('reportIssueModal');
        const body = modal?.querySelector('.modal-body');
        if (body) {
            const analysis = document.createElement('div');
            analysis.className = 'realtime-analysis active';
            analysis.innerHTML = `
                <div class="analysis-header">
                    <div class="analysis-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <h3 class="analysis-title">Live-Formular-Analyse</h3>
                </div>
                <div class="analysis-metrics">
                    <div class="metric-card">
                        <div class="metric-value" id="completionRate">0%</div>
                        <div class="metric-label">Vollst√§ndigkeit</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="qualityScore">0</div>
                        <div class="metric-label">Qualit√§tsscore</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="estimatedTime">0 Min</div>
                        <div class="metric-label">Restzeit</div>
                    </div>
                </div>
                <div class="analysis-suggestions">
                    <div class="suggestions-title">
                        <i class="fas fa-lightbulb"></i> AI-Empfehlungen
                    </div>
                    <ul class="suggestion-list" id="suggestionsList">
                        <li class="suggestion-item">Analysiere Eingaben...</li>
                    </ul>
                </div>
            `;
            body.insertBefore(analysis, body.firstChild);
        }
    }

    // Prediction Panel Functions
    showPredictionPanel() {
        const existing = document.querySelector('.prediction-panel');
        if (existing) existing.remove();
        
        const modal = document.getElementById('reportIssueModal');
        const body = modal?.querySelector('.modal-body');
        if (body) {
            const panel = document.createElement('div');
            panel.className = 'prediction-panel active';
            panel.innerHTML = `
                <div class="prediction-header">
                    <div class="prediction-icon">
                        <i class="fas fa-crystal-ball"></i>
                    </div>
                    <h3 class="prediction-title">Prognose-Analyse</h3>
                </div>
                <div class="prediction-cards">
                    <div class="prediction-card">
                        <div class="prediction-type">Reparaturdauer</div>
                        <div class="prediction-value" id="repairTime">Wird berechnet...</div>
                        <div class="prediction-confidence">
                            <div class="confidence-bar">
                                <div class="confidence-fill" style="width: 0%"></div>
                            </div>
                            <span class="confidence-text" id="repairConfidence">0% Konfidenz</span>
                        </div>
                    </div>
                    <div class="prediction-card">
                        <div class="prediction-type">Ausfallkosten</div>
                        <div class="prediction-value" id="downtimeCost">Wird berechnet...</div>
                        <div class="prediction-confidence">
                            <div class="confidence-bar">
                                <div class="confidence-fill" style="width: 0%"></div>
                            </div>
                            <span class="confidence-text" id="costConfidence">0% Konfidenz</span>
                        </div>
                    </div>
                </div>
            `;
            body.insertBefore(panel, body.firstChild);
        }
    }

    // AI Processing Functions
    processVoiceWithAI(transcript) {
        // Enhanced voice processing with AI
        let processed = transcript;
        
        // Auto-detect urgency keywords
        const urgencyKeywords = ['notfall', 'kritisch', 'sofort', 'eilig', 'gefahr', 'unfall'];
        const hasUrgency = urgencyKeywords.some(keyword => 
            processed.toLowerCase().includes(keyword)
        );
        
        if (hasUrgency) {
            document.getElementById('issuePriority').value = 'critical';
            this.updatePriorityIndicator('critical');
        }
        
        // Auto-detect category
        const categoryKeywords = {
            'electrical': ['strom', 'elektrik', 'spannung', 'kurzschluss', 'sicherung'],
            'hydraulic': ['hydraulik', '√∂l', 'druck', 'pumpe', 'zylinder', 'leckage'],
            'mechanical': ['mechanik', 'verschlei√ü', 'bruch', 'vibration', 'lager'],
            'software': ['software', 'programm', 'system', 'computer', 'bildschirm']
        };
        
        for (const [category, keywords] of Object.entries(categoryKeywords)) {
            if (keywords.some(keyword => processed.toLowerCase().includes(keyword))) {
                document.getElementById('issueCategory').value = category;
                break;
            }
        }
        
        return processed;
    }

    analyzeVoiceKeywords(text) {
        const keywords = this.extractKeywords(text);
        const keywordsContainer = document.querySelector('.voice-keywords');
        
        if (keywordsContainer && keywords.length > 0) {
            keywordsContainer.innerHTML = keywords.map(keyword => 
                `<span class="keyword-tag">${keyword}</span>`
            ).join('');
        }
    }

    extractKeywords(text) {
        const importantWords = ['st√∂rung', 'defekt', 'ausfall', 'problem', 'fehler', 'alarm', 
                               'hydraulik', 'elektrik', 'mechanik', 'software', 'notfall', 'kritisch'];
        
        const words = text.toLowerCase().split(/\s+/);
        return words.filter(word => 
            importantWords.some(important => word.includes(important))
        ).slice(0, 5);
    }

    analyzeImageWithAI(imageData) {
        // Simulate AI image analysis
        setTimeout(() => {
            const analysisResults = [
                'üîç Hydraulikschlauch mit Leckage erkannt',
                '‚ö†Ô∏è √ñlfleck auf dem Boden sichtbar',
                'üîß Empfehlung: Sofortiger Austausch erforderlich',
                'üìä Risikobewertung: Mittel bis Hoch'
            ];
            
            const description = document.getElementById('issueDescription');
            if (description) {
                description.value += '\n\nü§ñ AI-Bildanalyse:\n' + analysisResults.join('\n');
            }
            
            alert('ü§ñ AI-Bildanalyse abgeschlossen!\nErgebnisse wurden zur Beschreibung hinzugef√ºgt.');
        }, 2000);
    }

    fillFormFromVoiceInput(processedText) {
        const description = document.getElementById('issueDescription');
        if (description) {
            const currentText = description.value;
            description.value = currentText + (currentText ? '\n\n' : '') + 
                               'üé§ Spracheingabe:\n' + processedText;
        }
    }

    addImageToIssue(imageData) {
        const filesList = document.getElementById('filesList');
        if (filesList) {
            const imagePreview = document.createElement('div');
            imagePreview.className = 'uploaded-file-item';
            imagePreview.innerHTML = `
                <img src="${imageData}" alt="Captured Image" style="max-width: 200px; max-height: 150px; border-radius: 0.5rem;">
                <div class="file-info">
                    <span class="file-name">üì∏ Aufgenommenes Foto</span>
                    <span class="file-size">Kamerabild</span>
                </div>
                <button class="remove-file-btn" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            filesList.appendChild(imagePreview);
        }
    }

    calculateFormMetrics() {
        const fields = [
            'issueMachine', 'issuePriority', 'issueCategory', 
            'issueTitle', 'issueDescription'
        ];
        
        let completed = 0;
        let totalLength = 0;
        
        fields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field && field.value.trim()) {
                completed++;
                totalLength += field.value.length;
            }
        });
        
        return {
            completion: Math.round((completed / fields.length) * 100),
            quality: Math.min(100, Math.round(totalLength / 10)),
            estimatedTime: Math.max(0, (fields.length - completed) * 2)
        };
    }

    updateAnalysisMetrics(metrics) {
        const completionEl = document.getElementById('completionRate');
        const qualityEl = document.getElementById('qualityScore');
        const timeEl = document.getElementById('estimatedTime');
        
        if (completionEl) completionEl.textContent = metrics.completion + '%';
        if (qualityEl) qualityEl.textContent = metrics.quality;
        if (timeEl) timeEl.textContent = metrics.estimatedTime + ' Min';
    }

    generateIntelligentSuggestions() {
        const machine = document.getElementById('issueMachine').value;
        const category = document.getElementById('issueCategory').value;
        const priority = document.getElementById('issuePriority').value;
        
        const suggestions = [];
        
        if (!machine) {
            suggestions.push('W√§hlen Sie die betroffene Maschine aus');
        }
        
        if (!category) {
            suggestions.push('Kategorisieren Sie die Art der St√∂rung');
        }
        
        if (priority === 'critical') {
            suggestions.push('Bei kritischen St√∂rungen: Notfallkontakte informieren');
            suggestions.push('Dokumentieren Sie Sicherheitsma√ünahmen');
        }
        
        if (category === 'hydraulic') {
            suggestions.push('Pr√ºfen Sie auf Leckagen und Druckverlust');
            suggestions.push('Foto der betroffenen Komponenten aufnehmen');
        }
        
        return suggestions;
    }

    updateAnalysisSuggestions(suggestions) {
        const suggestionsList = document.getElementById('suggestionsList');
        if (suggestionsList && suggestions.length > 0) {
            suggestionsList.innerHTML = suggestions.map(suggestion =>
                `<li class="suggestion-item">${suggestion}</li>`
            ).join('');
        }
    }

    generatePredictions() {
        const category = document.getElementById('issueCategory').value;
        const priority = document.getElementById('issuePriority').value;
        
        // Simulate predictive analytics
        const baseTimes = {
            'hydraulic': { min: 2, max: 8, cost: 1500 },
            'electrical': { min: 1, max: 4, cost: 800 },
            'mechanical': { min: 4, max: 12, cost: 2500 },
            'software': { min: 0.5, max: 2, cost: 300 }
        };
        
        const priorityMultiplier = {
            'low': 1.5,
            'medium': 1.0,
            'high': 0.7,
            'critical': 0.4
        };
        
        const baseData = baseTimes[category] || baseTimes['mechanical'];
        const multiplier = priorityMultiplier[priority] || 1.0;
        
        const repairTime = Math.round((baseData.min + Math.random() * (baseData.max - baseData.min)) * multiplier);
        const cost = Math.round(baseData.cost * multiplier * (1 + Math.random() * 0.5));
        
        return {
            repairTime: repairTime + ' Stunden',
            cost: cost + ' ‚Ç¨',
            repairConfidence: Math.round(60 + Math.random() * 30),
            costConfidence: Math.round(50 + Math.random() * 40)
        };
    }

    updatePredictionCards(predictions) {
        const repairTimeEl = document.getElementById('repairTime');
        const costEl = document.getElementById('downtimeCost');
        const repairConfEl = document.getElementById('repairConfidence');
        const costConfEl = document.getElementById('costConfidence');
        
        if (repairTimeEl) repairTimeEl.textContent = predictions.repairTime;
        if (costEl) costEl.textContent = predictions.cost;
        if (repairConfEl) {
            repairConfEl.textContent = predictions.repairConfidence + '% Konfidenz';
            const bar = repairConfEl.parentElement.querySelector('.confidence-fill');
            if (bar) bar.style.width = predictions.repairConfidence + '%';
        }
        if (costConfEl) {
            costConfEl.textContent = predictions.costConfidence + '% Konfidenz';
            const bar = costConfEl.parentElement.querySelector('.confidence-fill');
            if (bar) bar.style.width = predictions.costConfidence + '%';
        }
    }

    analyzeHistoricalData() {
        const machine = document.getElementById('issueMachine').value;
        const category = document.getElementById('issueCategory').value;
        
        // Simulate historical analysis
        setTimeout(() => {
            const results = [
                '√Ñhnliche Hydraulikst√∂rung vor 3 Monaten',
                'Durchschnittliche Reparaturdauer: 4.5 Stunden',
                'Erfolgreiche L√∂sungen: Schlauch-Austausch (60%), Ventil-Reinigung (25%)',
                'Pr√§ventive Ma√ünahme: W√∂chentliche Druckpr√ºfung'
            ];
            
            const analysisDiv = document.getElementById('historicalAnalysis');
            if (analysisDiv) {
                analysisDiv.innerHTML = `
                    <h5>üìä Historische Analyse abgeschlossen:</h5>
                    <ul>
                        ${results.map(result => `<li>${result}</li>`).join('')}
                    </ul>
                `;
            }
        }, 1500);
    }

    // T√úV-konforme Implementierung der erweiterten Audit-√úbertragung
    submitAdvancedAuditOffer() {
        const form = document.getElementById('advancedAuditForm');
        if (!form) {
            console.error('Advanced audit form not found');
            return;
        }

        // Sammle alle T√úV-konformen Formulardaten mit HTML-Escaping
        const formData = {
            // Sektion 1: Audit-Identifikation & Akkreditierung
            auditId: this.escapeHtml(document.getElementById('auditId')?.value || ''),
            certificationBodyCode: this.escapeHtml(document.getElementById('certificationBodyCode')?.value || ''),
            accreditationNumber: this.escapeHtml(document.getElementById('accreditationNumber')?.value || ''),
            standard: this.escapeHtml(document.getElementById('auditStandardAdv')?.value || ''),
            auditType: this.escapeHtml(document.getElementById('auditTypeAdv')?.value || ''),
            iafCode: this.escapeHtml(document.getElementById('iafCode')?.value || ''),
            
            // Sektion 2: Audit-Scope & Normative Anforderungen
            scopeDescription: this.escapeHtml(document.getElementById('scopeDescription')?.value || ''),
            processScope: this.getCheckedValues('processScope'),
            siteScope: this.escapeHtml(document.getElementById('siteScope')?.value || ''),
            exclusions: this.escapeHtml(document.getElementById('exclusions')?.value || ''),
            
            // Sektion 3: Kunde & Organisationsdaten
            customerCompany: this.escapeHtml(document.getElementById('customerCompany')?.value || ''),
            customerRegistration: this.escapeHtml(document.getElementById('customerRegistration')?.value || ''),
            customerCountry: this.escapeHtml(document.getElementById('customerCountry')?.value || ''),
            customerVatId: this.escapeHtml(document.getElementById('customerVatId')?.value || ''),
            customerZip: this.escapeHtml(document.getElementById('customerZip')?.value || ''),
            customerCity: this.escapeHtml(document.getElementById('customerCity')?.value || ''),
            customerStreet: this.escapeHtml(document.getElementById('customerStreet')?.value || ''),
            employeeCount: this.escapeHtml(document.getElementById('employeeCount')?.value || ''),
            annualRevenue: this.escapeHtml(document.getElementById('annualRevenue')?.value || ''),
            
            // Sektion 4: Audit-Zeitplanung & Ressourcen
            auditStartDate: document.getElementById('auditStartDateAdv')?.value || '',
            auditEndDate: document.getElementById('auditEndDateAdv')?.value || '',
            auditDuration: this.escapeHtml(document.getElementById('auditDuration')?.value || ''),
            auditLanguage: this.escapeHtml(document.getElementById('auditLanguage')?.value || ''),
            leadAuditorRequired: this.escapeHtml(document.getElementById('leadAuditorRequired')?.value || ''),
            hostAuditorId: this.currentUserId,
            travelRequired: document.getElementById('travelRequired')?.checked || false,
            overnightRequired: document.getElementById('overnightRequired')?.checked || false,
            
            // Sektion 5: T√úV-Compliance & Risikobewertung
            riskCategory: this.escapeHtml(document.getElementById('riskCategory')?.value || ''),
            complianceLevel: this.escapeHtml(document.getElementById('complianceLevel')?.value || ''),
            regulatoryRequirements: this.getCheckedValues('regulations'),
            specialRequirements: this.escapeHtml(document.getElementById('specialRequirements')?.value || ''),
            
            // Sektion 6: Optionale Angaben
            exchangeReason: this.escapeHtml(document.getElementById('exchangeReason')?.value || ''),
            preferredRegion: this.escapeHtml(document.getElementById('preferredRegion')?.value || ''),
            maxTravelDistance: this.escapeHtml(document.getElementById('maxTravelDistance')?.value || ''),
            notesForApplicants: this.escapeHtml(document.getElementById('notesForApplicants')?.value || ''),
            
            // T√úV-Compliance Best√§tigungen
            confirmAccuracy: document.getElementById('confirmAccuracy')?.checked || false,
            confirmCompetence: document.getElementById('confirmCompetence')?.checked || false,
            confirmImpartiality: document.getElementById('confirmImpartiality')?.checked || false,
            confirmDataProtection: document.getElementById('confirmDataProtection')?.checked || false
        };

        // Umfassende Validierung aller Pflichtfelder
        const validationErrors = [];
        
        // Grunddaten-Validierung
        if (!formData.auditId) validationErrors.push('Audit-ID ist erforderlich');
        if (!formData.standard) validationErrors.push('Standard ist erforderlich');
        if (!formData.auditType) validationErrors.push('Audit-Typ ist erforderlich');
        if (!formData.iafCode) validationErrors.push('IAF-Code ist erforderlich');
        if (!formData.scopeDescription) validationErrors.push('Scope-Beschreibung ist erforderlich');
        if (!formData.processScope || formData.processScope.length === 0) validationErrors.push('Mindestens ein Prozess-Scope muss ausgew√§hlt werden');
        
        // Kundendaten-Validierung
        if (!formData.customerCompany) validationErrors.push('Firmenname ist erforderlich');
        if (!formData.customerCountry) validationErrors.push('Land ist erforderlich');
        if (!formData.customerZip) validationErrors.push('PLZ ist erforderlich');
        if (!formData.customerCity) validationErrors.push('Ort ist erforderlich');
        if (!formData.customerStreet) validationErrors.push('Stra√üe ist erforderlich');
        
        // Zeitraum-Validierung
        if (!formData.auditStartDate) validationErrors.push('Startdatum ist erforderlich');
        if (!formData.auditEndDate) validationErrors.push('Enddatum ist erforderlich');
        if (!formData.auditLanguage) validationErrors.push('Audit-Sprache ist erforderlich');
        
        // Zus√§tzliche Validierungen
        if (formData.auditId && !this.isValidAuditId(formData.auditId)) {
            validationErrors.push('Ung√ºltiges Audit-ID Format (z.B. AUD-2024-001)');
        }
        
        if (formData.auditStartDate && formData.auditEndDate) {
            const startDate = new Date(formData.auditStartDate);
            const endDate = new Date(formData.auditEndDate);
            const today = new Date();
            
            if (startDate < today) {
                validationErrors.push('Startdatum darf nicht in der Vergangenheit liegen');
            }
            if (endDate < startDate) {
                validationErrors.push('Enddatum muss nach dem Startdatum liegen');
            }
        }
        
        // Pr√ºfe auf doppelte Audit-IDs
        if (formData.auditId && this.auditExchanges.some(a => a.auditId === formData.auditId)) {
            validationErrors.push('Diese Audit-ID ist bereits vergeben');
        }
        
        // Fehlerbehandlung
        if (validationErrors.length > 0) {
            this.showNotification('Validierungsfehler', 
                `Bitte korrigieren Sie folgende Fehler:\n‚Ä¢ ${validationErrors.join('\n‚Ä¢ ')}`, 
                'error');
            return;
        }

        // Audit-Objekt erstellen
        const auditOffer = {
            id: 'audit_' + Date.now(),
            ...formData,
            createdAt: new Date().toISOString(),
            createdBy: this.currentUserId,
            createdByName: this.getCurrentUser().displayName || this.getCurrentUser().name,
            status: 'Verf√ºgbar',
            applications: [],
            matchingScore: null,
            version: '1.0',
            lastModified: new Date().toISOString()
        };

        // Speichere in auditExchanges
        this.auditExchanges.push(auditOffer);
        this.saveAuditExchangesToStorage();

        // Erfolgsmeldung mit T√úV-konformer Benachrichtigung
        this.showNotification('Audit erfolgreich hinzugef√ºgt', 
            `Audit "${auditOffer.auditId}" wurde erfolgreich zur Tauschb√∂rse hinzugef√ºgt.`, 
            'success');

        // Automatische Kompetenzpr√ºfung initiieren
        this.performAutomaticAuditorMatching(auditOffer);

        // Benachrichtige qualifizierte Auditoren √ºber das neue Audit
        this.notifyQualifiedAuditors(auditOffer);

        // Schlie√üe Modal
        document.querySelector('.advanced-audit-form-overlay')?.remove();

        // Aktualisiere Anzeige
        this.renderAuditExchangeOffers();
        this.renderAuditExchangeRequests();
        
        console.log('‚úÖ Advanced audit offer submitted successfully:', auditOffer);
    }

    // Audit-ID Validierung
    isValidAuditId(auditId) {
        // Format: AUD-YYYY-NNN oder √§hnlich
        const auditIdRegex = /^[A-Z]{2,5}-\d{4}-\d{3}$/;
        return auditIdRegex.test(auditId);
    }

    // Automatische Auditor-Matching nach Spezifikation
    performAutomaticAuditorMatching(auditOffer) {
        if (!this.auditors || this.auditors.length === 0) {
            console.log('‚ÑπÔ∏è Keine Auditoren f√ºr automatisches Matching verf√ºgbar');
            return;
        }

        const qualifiedAuditors = [];
        
        // Pr√ºfe jeden Auditor gegen die Anforderungen
        this.auditors.forEach(auditor => {
            const matchResult = this.calculateAdvancedMatchScore(auditor, auditOffer);
            
            if (matchResult.qualified) {
                qualifiedAuditors.push({
                    auditor: auditor,
                    score: matchResult.score,
                    matchDetails: matchResult.matchDetails
                });
            }
        });

        // Sortiere nach Score (h√∂chster zuerst)
        qualifiedAuditors.sort((a, b) => b.score - a.score);

        // Automatische Benachrichtigung an Disposition
        if (qualifiedAuditors.length > 0) {
            const topMatches = qualifiedAuditors.slice(0, 3);
            this.notifyDispositionOfMatches(auditOffer, topMatches);
        } else {
            this.notifyDispositionOfNoMatches(auditOffer);
        }

        // Speichere Matching-Ergebnisse
        auditOffer.matchingResults = qualifiedAuditors;
        this.saveAuditExchangesToStorage();
    }

    // Benachrichtigungen f√ºr Disposition
    notifyDispositionOfMatches(auditOffer, matches) {
        const message = `Neue Audit-Anfrage "${auditOffer.auditId}" hat ${matches.length} qualifizierte Treffer gefunden.`;
        this.showNotification('Automatisches Matching', message, 'info');
        
        // Hier w√ºrde normalerweise eine echte Benachrichtigung an die Disposition gesendet
        console.log('üìß Disposition-Benachrichtigung:', {
            auditId: auditOffer.auditId,
            matches: matches.length,
            topAuditors: matches.map(m => m.auditor.name)
        });
    }

    notifyDispositionOfNoMatches(auditOffer) {
        const message = `F√ºr Audit "${auditOffer.auditId}" wurden keine qualifizierten Auditoren gefunden.`;
        this.showNotification('Kein automatisches Matching', message, 'warning');
        
        console.log('‚ö†Ô∏è Kein Matching f√ºr Audit:', auditOffer.auditId);
    }

    // T√úV-konforme Benachrichtigungssystem
    showNotification(title, message, type = 'info') {
        const container = document.getElementById('notificationContainer');
        if (!container) return;

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-header">
                <strong>${this.escapeHtml(title)}</strong>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
            <div class="notification-body">
                ${this.escapeHtml(message)}
            </div>
        `;

        container.appendChild(notification);

        // Automatisches Entfernen nach 5 Sekunden
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

}

// Global dashboard instance for onclick handlers
// Dashboard will be initialized in index.html
// This allows for proper global access to the instance

// Additional utility functions
function formatDate(date) {
    return new Date(date).toLocaleDateString('de-DE');
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Export functionality for reports
function exportToCSV(data, filename) {
    const csv = data.map(row => row.join(',')).join('\n');
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
}

// Print functionality
function printSection(sectionId) {
    const section = document.getElementById(sectionId);
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>QHSE Bericht - Hoffmann & Voss GmbH</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .no-print { display: none; }
                    @media print {
                        .no-print { display: none !important; }
                    }
                </style>
            </head>
            <body>
                <h1>Hoffmann & Voss GmbH - QHSE Management System</h1>
                <p>Erstellt am: ${new Date().toLocaleDateString('de-DE')}</p>
                <hr>
                ${section.innerHTML}
            </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}

// Simple Machine Management Functions (Global functions)
let machines = JSON.parse(localStorage.getItem('qhse_machines') || '[]');

function openMachineModal() {
    console.log('üîß Opening machine modal...');
    const modal = document.getElementById('machineModal');
    if (modal) {
        modal.style.display = 'flex';
        // Focus first input
        setTimeout(() => {
            const firstInput = modal.querySelector('input');
            if (firstInput) firstInput.focus();
        }, 100);
    }
}

function closeMachineModal() {
    const modal = document.getElementById('machineModal');
    if (modal) {
        modal.style.display = 'none';
        // Reset form
        const form = document.getElementById('machineForm');
        if (form) form.reset();
    }
}

function saveMachine() {
    const form = document.getElementById('machineForm');
    if (!form) return;
    
    // Get form data
    const machineData = {
        id: Date.now().toString(),
        name: document.getElementById('machineName').value.trim(),
        type: document.getElementById('machineType').value,
        location: document.getElementById('machineLocation').value.trim(),
        status: document.getElementById('machineStatus').value,
        notes: document.getElementById('machineNotes').value.trim(),
        createdAt: new Date().toISOString()
    };
    
    // Validate required fields
    if (!machineData.name || !machineData.type || !machineData.location || !machineData.status) {
        alert('Bitte f√ºllen Sie alle Pflichtfelder (*) aus!');
        return;
    }
    
    // Add to machines array
    machines.push(machineData);
    
    // Save to storage
    localStorage.setItem('qhse_machines', JSON.stringify(machines));
    
    // Update UI
    updateMachineStats();
    renderMachinesList();
    
    // Close modal
    closeMachineModal();
    
    // Show success message
    alert(`‚úÖ Maschine "${machineData.name}" wurde erfolgreich hinzugef√ºgt!`);
}

function updateMachineStats() {
    const total = machines.length;
    const active = machines.filter(m => m.status === 'In Betrieb').length;
    const maintenance = machines.filter(m => m.status === 'Wartung').length;
    
    const totalElement = document.getElementById('totalMachines');
    const activeElement = document.getElementById('activeMachines');
    const maintenanceElement = document.getElementById('maintenanceMachines');
    
    if (totalElement) totalElement.textContent = total;
    if (activeElement) activeElement.textContent = active;
    if (maintenanceElement) maintenanceElement.textContent = maintenance;
}

function renderMachinesList() {
    const container = document.getElementById('machinesList');
    if (!container) return;
    
    if (machines.length === 0) {
        container.innerHTML = `
            <div class="no-items-message">
                <i class="fas fa-cogs"></i>
                <p>Noch keine Maschinen vorhanden</p>
                <button class="btn-primary" onclick="openMachineModal()">
                    <i class="fas fa-plus"></i> Erste Maschine hinzuf√ºgen
                </button>
            </div>
        `;
        return;
    }
    
    container.innerHTML = machines.map(machine => `
        <div class="item-card">
            <div class="item-header">
                <h4>${machine.name}</h4>
                <span class="status-badge status-${machine.status.toLowerCase().replace(' ', '-')}">${machine.status}</span>
            </div>
            <div class="item-details">
                <p><strong>Typ:</strong> ${machine.type}</p>
                <p><strong>Standort:</strong> ${machine.location}</p>
                ${machine.notes ? `<p><strong>Bemerkungen:</strong> ${machine.notes}</p>` : ''}
                <p><small>Erstellt: ${new Date(machine.createdAt).toLocaleDateString('de-DE')}</small></p>
            </div>
            <div class="item-actions">
                <button onclick="deleteMachine('${machine.id}')" class="btn-danger btn-sm">
                    <i class="fas fa-trash"></i> L√∂schen
                </button>
            </div>
        </div>
    `).join('');
}

function deleteMachine(machineId) {
    const machine = machines.find(m => m.id === machineId);
    if (!machine) return;
    
    if (confirm(`M√∂chten Sie die Maschine "${machine.name}" wirklich l√∂schen?`)) {
        machines = machines.filter(m => m.id !== machineId);
        localStorage.setItem('qhse_machines', JSON.stringify(machines));
        updateMachineStats();
        renderMachinesList();
        alert('‚úÖ Maschine wurde erfolgreich gel√∂scht!');
    }
}

// Setup machine management when DOM is loaded

// Dashboard initialization is handled in index.html
// to ensure proper timing with DOM elements

// Global functions for onclick handlers
function openRiskAssessmentModal(gbuId = null) {
    if (window.qhseDashboard) {
        window.qhseDashboard.openRiskAssessmentModal(gbuId);
    }
}

function generateRiskAssessmentReport() {
    alert('üìä Bericht wird generiert... (Feature wird noch implementiert)');
}

function exportRiskAssessments() {
    alert('üì§ Export wird vorbereitet... (Feature wird noch implementiert)');
}

function searchRiskAssessments() {
    alert('üîç Suche wird ausgef√ºhrt... (Feature wird noch implementiert)');
}

function filterRiskAssessments() {
    alert('üóÇÔ∏è Filter werden angewendet... (Feature wird noch implementiert)');
}

function sortRiskAssessments(column) {
    alert(`üìä Sortierung nach ${column}... (Feature wird noch implementiert)`);
}

function addMeasure(type) {
    if (window.qhseDashboard) {
        window.qhseDashboard.addProtectiveMeasure(type);
    } else {
        alert('System wird noch geladen...');
    }
}

function removeMeasure(measureId) {
    if (window.qhseDashboard) {
        window.qhseDashboard.removeProtectiveMeasure(measureId);
    } else {
        alert('System wird noch geladen...');
    }
}

function loadMeasureTemplate(templateType) {
    if (window.qhseDashboard) {
        window.qhseDashboard.loadMeasureTemplate(templateType);
    } else {
        alert('System wird noch geladen...');
    }
}

function addSpecificMeasure(measureType) {
    if (window.qhseDashboard) {
        window.qhseDashboard.addSpecificMeasure(measureType);
    } else {
        alert('System wird noch geladen...');
    }
}

function removeMeasure(measureId) {
    if (window.qhseDashboard) {
        window.qhseDashboard.removeMeasure(measureId);
    } else {
        alert('System wird noch geladen...');
    }
}

function addDigitalSignature(signerType) {
    const inputId = `${signerType}_unterschrift`;
    const inputElement = document.getElementById(inputId);
    if (inputElement) {
        const currentUser = window.qhseDashboard ? window.qhseDashboard.getCurrentUser() : null;
        if (currentUser) {
            const timestamp = new Date().toLocaleString('de-DE');
            const signature = `Digital signiert von ${currentUser.displayName || currentUser.name} am ${timestamp}`;
            inputElement.value = signature;
            inputElement.style.backgroundColor = '#e8f5e8';
            inputElement.style.fontWeight = 'bold';
            alert(`Digitale Unterschrift als ${signerType} hinzugef√ºgt.`);
        } else {
            alert('Benutzerinformationen nicht verf√ºgbar.');
        }
    }
}

function validateGBUCompleteness() {
    // Check if required fields are filled
    const requiredChecks = [
        { field: 'gbuTitel', name: 'Titel/Bezeichnung' },
        { field: 'gbuBereich', name: 'Bereich/Abteilung' },
        { field: 'gbuVerantwortlicher', name: 'Verantwortlicher' },
        { field: 'arbeitsplatzBezeichnung', name: 'Arbeitsplatz-Bezeichnung' },
        { field: 'taetigkeitsbeschreibung', name: 'T√§tigkeitsbeschreibung' }
    ];
    
    const missingFields = [];
    requiredChecks.forEach(check => {
        const element = document.getElementById(check.field);
        if (element && !element.value.trim()) {
            missingFields.push(check.name);
        }
    });
    
    // Check if hazards are selected
    const selectedHazards = document.querySelectorAll('#tab-gefaehrdungsanalyse input[type="checkbox"]:checked');
    if (selectedHazards.length === 0) {
        missingFields.push('Gef√§hrdungsauswahl');
    }
    
    // Check if measures are added
    const measures = document.querySelectorAll('.protective-measure');
    if (measures.length === 0) {
        missingFields.push('Schutzma√ünahmen');
    }
    
    if (missingFields.length > 0) {
        alert(`Folgende Pflichtfelder sind noch nicht ausgef√ºllt:\n- ${missingFields.join('\n- ')}`);
        return false;
    } else {
        alert('‚úÖ GBU ist vollst√§ndig ausgef√ºllt und bereit f√ºr die Pr√ºfung.');
        return true;
    }
}

function requestGBUReview() {
    if (validateGBUCompleteness()) {
        const statusElement = document.getElementById('currentApprovalStatus');
        if (statusElement) {
            statusElement.textContent = 'Zur Pr√ºfung';
            statusElement.className = 'status-badge status-review';
        }
        
        const stepReview = document.getElementById('step-review');
        if (stepReview) {
            stepReview.classList.add('completed');
        }
        
        alert('GBU wurde zur fachlichen Pr√ºfung freigegeben.');
    }
}

function approveGBU() {
    const confirmApproval = confirm('M√∂chten Sie diese Gef√§hrdungsbeurteilung endg√ºltig freigeben?\n\nDadurch wird sie rechtskr√§ftig und verbindlich.');
    if (confirmApproval) {
        const statusElement = document.getElementById('currentApprovalStatus');
        if (statusElement) {
            statusElement.textContent = 'Freigegeben';
            statusElement.className = 'status-badge status-approved';
        }
        
        const stepApproval = document.getElementById('step-approval');
        if (stepApproval) {
            stepApproval.classList.add('completed');
        }
        
        // Set approval date
        const freigabeDatum = document.getElementById('freigabe_datum');
        if (freigabeDatum && !freigabeDatum.value) {
            freigabeDatum.value = new Date().toISOString().split('T')[0];
        }
        
        alert('‚úÖ Gef√§hrdungsbeurteilung wurde erfolgreich freigegeben und ist ab sofort g√ºltig.');
    }
}

function rejectGBU() {
    const reason = prompt('Bitte geben Sie den Grund f√ºr die Ablehnung an:');
    if (reason) {
        const statusElement = document.getElementById('currentApprovalStatus');
        if (statusElement) {
            statusElement.textContent = 'Abgelehnt';
            statusElement.className = 'status-badge status-rejected';
        }
        
        const pruefer_kommentar = document.getElementById('pruefer_kommentar');
        if (pruefer_kommentar) {
            pruefer_kommentar.value = `ABGELEHNT - ${reason}`;
        }
        
        alert('GBU wurde abgelehnt. √úberarbeitung erforderlich.');
    }
}

function validateGBUCompleteness() {
    if (window.qhseDashboard) {
        window.qhseDashboard.validateGBUCompleteness();
    } else {
        alert('System wird noch geladen...');
    }
}

// PDF Export Functions for Risk Assessment
function generateCompleteGBUReport() {
    if (window.qhseDashboard) {
        window.qhseDashboard.generateCompleteGBUReport();
    } else {
        alert('System wird noch geladen...');
    }
}

function generateComplianceReport() {
    if (window.qhseDashboard) {
        window.qhseDashboard.generateComplianceReport();
    } else {
        alert('System wird noch geladen...');
    }
}

function generateQualificationReport() {
    if (window.qhseDashboard) {
        window.qhseDashboard.generateQualificationReport();
    } else {
        alert('System wird noch geladen...');
    }
}

function validateGBUCompleteness() {
    if (window.qhseDashboard) {
        window.qhseDashboard.validateGBUCompleteness();
    } else {
        alert('System wird noch geladen...');
    }
}

function requestGBUReview() {
    if (window.qhseDashboard) {
        window.qhseDashboard.requestGBUReview();
    } else {
        alert('System wird noch geladen...');
    }
}

function approveGBU() {
    if (window.qhseDashboard) {
        window.qhseDashboard.approveGBU();
    } else {
        alert('System wird noch geladen...');
    }
}

function rejectGBU() {
    if (window.qhseDashboard) {
        window.qhseDashboard.rejectGBU();
    } else {
        alert('System wird noch geladen...');
    }
}

// Legacy functions (deprecated)
function generateGBUPDF() {
    generateCompleteGBUReport();
}

// Legacy functions (deprecated)
function generateGBUPDF() {
    generateCompleteGBUReport();
}

function generateGBUExcel() {
    alert('üìä Excel wird generiert... (Feature wird noch implementiert)');
}

function generateGBUWord() {
    alert('üìù Word-Dokument wird generiert... (Feature wird noch implementiert)');
}

function requestRevisionGBU() {
    requestGBUReview();
}

// Global functions for GBU action buttons
function openRiskAssessmentModal() {
    if (window.qhseDashboard) {
        window.qhseDashboard.openRiskAssessmentModal();
    } else {
        alert('System wird noch geladen...');
    }
}

function generateRiskAssessmentReport() {
    if (window.qhseDashboard) {
        alert('üìã Bericht wird erstellt... (Feature wird noch implementiert)');
    } else {
        alert('System wird noch geladen...');
    }
}

function exportRiskAssessments() {
    if (window.qhseDashboard) {
        alert('üì§ Export wird vorbereitet... (Feature wird noch implementiert)');
    } else {
        alert('System wird noch geladen...');
    }
}

// Global Training Export Functions
function exportTrainingOverview(format) {
    if (window.qhseDashboard) {
        const reportData = window.qhseDashboard.prepareTrainingReportData('overview');
        switch (format) {
            case 'csv':
                window.qhseDashboard.exportTrainingReportAsCSV(reportData, 'overview');
                break;
            case 'excel':
                window.qhseDashboard.exportTrainingReportAsExcel(reportData, 'overview');
                break;
            case 'pdf':
                window.qhseDashboard.exportTrainingReportAsPDF(reportData, 'overview');
                break;
        }
    } else {
        alert('System wird noch geladen...');
    }
}

function exportTrainingCompletion(format) {
    if (window.qhseDashboard) {
        const reportData = window.qhseDashboard.prepareTrainingReportData('completion');
        switch (format) {
            case 'csv':
                window.qhseDashboard.exportTrainingReportAsCSV(reportData, 'completion');
                break;
            case 'excel':
                window.qhseDashboard.exportTrainingReportAsExcel(reportData, 'completion');
                break;
            case 'pdf':
                window.qhseDashboard.exportTrainingReportAsPDF(reportData, 'completion');
                break;
        }
    } else {
        alert('System wird noch geladen...');
    }
}

function exportTrainingCompliance(format) {
    if (window.qhseDashboard) {
        const reportData = window.qhseDashboard.prepareTrainingReportData('compliance');
        switch (format) {
            case 'csv':
                window.qhseDashboard.exportTrainingReportAsCSV(reportData, 'compliance');
                break;
            case 'excel':
                window.qhseDashboard.exportTrainingReportAsExcel(reportData, 'compliance');
                break;
            case 'pdf':
                window.qhseDashboard.exportTrainingReportAsPDF(reportData, 'compliance');
                break;
        }
    } else {
        alert('System wird noch geladen...');
    }
}

function exportTrainingIndividual(format) {
    if (window.qhseDashboard) {
        // Get selected user from the individual report form
        const userSelect = document.querySelector('#individual-user-select');
        const userId = userSelect ? userSelect.value : null;
        
        if (!userId) {
            alert('Bitte w√§hlen Sie zun√§chst einen Benutzer aus.');
            return;
        }
        
        const reportData = window.qhseDashboard.prepareTrainingReportData('individual', { userId });
        switch (format) {
            case 'csv':
                window.qhseDashboard.exportTrainingReportAsCSV(reportData, 'individual');
                break;
            case 'excel':
                window.qhseDashboard.exportTrainingReportAsExcel(reportData, 'individual');
                break;
            case 'pdf':
                window.qhseDashboard.exportTrainingReportAsPDF(reportData, 'individual');
                break;
        }
    } else {
        alert('System wird noch geladen...');
    }
}

// ===== ERWEITERTE AUDITOR-SUCHE FUNKTIONEN =====

// Globale Funktionen f√ºr erweiterte Auditor-Suche
window.updateStandardSpecificRequirements = function() {
    const standard = document.getElementById('primaryStandard')?.value;
    const requirementsDiv = document.getElementById('industrySpecificRequirements');
    
    if (!requirementsDiv || !standard) return;
    
    const standardRequirements = {
        'ISO 9001': {
            title: 'ISO 9001 spezifische Anforderungen',
            fields: [
                'Erfahrung mit internen Audits',
                'Kenntnisse Prozessmanagement',
                'Kunden- und Lieferantenbewertung',
                'Korrektur- und Vorbeugungsma√ünahmen'
            ]
        },
        'IATF 16949': {
            title: 'IATF 16949 Automotive-Anforderungen',
            fields: [
                'Automotive SPICE Kenntnisse',
                'PPAP/MSA Erfahrung',
                'Produktionsfreigabeprozess',
                'Supplier-Quality-Assurance'
            ]
        },
        'AS9100': {
            title: 'AS9100 Aerospace-Anforderungen',
            fields: [
                'Aerospace-Materialqualifikation',
                'FOD (Foreign Object Debris) Kontrolle',
                'Projektmanagement',
                'Configuration Management'
            ]
        },
        'ISO 13485': {
            title: 'ISO 13485 Medizinprodukte-Anforderungen',
            fields: [
                'MDR-Kenntnisse (EU 2017/745)',
                'Risikomanagement ISO 14971',
                'Design Controls',
                'Post-Market Surveillance'
            ]
        }
    };
    
    const requirements = standardRequirements[standard];
    if (requirements) {
        requirementsDiv.innerHTML = `
            <h5>${requirements.title}</h5>
            <div class="checkbox-group">
                ${requirements.fields.map(field => `
                    <label class="checkbox-label">
                        <input type="checkbox" name="standardSpecificReqs" value="${field}">
                        <span class="checkmark"></span>
                        ${field}
                    </label>
                `).join('')}
            </div>
        `;
    } else {
        requirementsDiv.innerHTML = '';
    }
};

window.updateIndustryRequirements = function() {
    const industry = document.getElementById('requiredIndustry')?.value;
    const requirementsDiv = document.getElementById('industrySpecificRequirements');
    
    if (!requirementsDiv || !industry) return;
    
    const industryRequirements = {
        'Automotive': {
            title: 'Automotive-spezifische Anforderungen',
            fields: [
                'IATF 16949 Erfahrung',
                'Tier-1/Tier-2 Lieferanten-Audits',
                'Produktionsfreigabeprozess (PPA)',
                'Automotive-Standards (VDA, AIAG)',
                'Layered Process Audits (LPA)'
            ]
        },
        'Medical': {
            title: 'Medizintechnik-spezifische Anforderungen',
            fields: [
                'MDR/IVDR Kenntnisse',
                'FDA QSR Erfahrung',
                'Risikomanagement ISO 14971',
                'Sterile Verpackung',
                'Biokompatibilit√§t'
            ]
        },
        'Food': {
            title: 'Lebensmittel-spezifische Anforderungen',
            fields: [
                'HACCP-Konzept',
                'BRC/IFS Standards',
                'Allergenmanagement',
                'Hygiene-Monitoring',
                'R√ºckverfolgbarkeit'
            ]
        }
    };
    
    const requirements = industryRequirements[industry];
    if (requirements) {
        requirementsDiv.innerHTML = `
            <h5>${requirements.title}</h5>
            <div class="checkbox-group">
                ${requirements.fields.map(field => `
                    <label class="checkbox-label">
                        <input type="checkbox" name="industrySpecificReqs" value="${field}">
                        <span class="checkmark"></span>
                        ${field}
                    </label>
                `).join('')}
            </div>
        `;
    }
};

// Erweitere QHSEDashboard mit erweiterten Auditor-Suche Funktionen
QHSEDashboard.prototype.setupAdvancedAuditorSearch = function() {
    const form = document.getElementById('advancedAuditorSearchForm');
    if (form) {
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.performAdvancedAuditorSearch();
        });
    }
    
    // Make functions globally available
    window.resetAdvancedAuditorSearch = () => this.resetAdvancedAuditorSearch();
    window.saveSearchCriteria = () => this.saveSearchCriteria();
    window.sortAuditorResults = (sortBy) => this.sortAuditorResults(sortBy);
};

QHSEDashboard.prototype.performAdvancedAuditorSearch = function() {
    try {
        const form = document.getElementById('advancedAuditorSearchForm');
        const formData = new FormData(form);
        const currentUser = this.getCurrentUser();
        
        // Sammle Suchkriterien
        const searchCriteria = {
            requiredAccreditation: formData.get('requiredAccreditation'),
            primaryStandard: formData.get('primaryStandard'),
            secondaryStandards: formData.getAll('secondaryStandards'),
            minExperience: parseInt(formData.get('minExperience')),
            requiredIndustry: formData.get('requiredIndustry'),
            companySize: formData.get('companySize'),
            riskCategory: formData.get('riskCategory'),
            auditLocation: formData.get('auditLocation'),
            maxTravelDistance: formData.get('maxTravelDistance'),
            requiredLanguages: formData.getAll('requiredLanguages'),
            requiredAvailability: formData.get('requiredAvailability'),
            auditType: formData.get('auditType'),
            auditDuration: parseFloat(formData.get('auditDuration')),
            conflictCheck: formData.getAll('conflictCheck'),
            budgetRange: formData.get('budgetRange'),
            travelCosts: formData.get('travelCosts'),
            additionalRequirements: formData.get('additionalRequirements'),
            standardSpecificReqs: formData.getAll('standardSpecificReqs'),
            industrySpecificReqs: formData.getAll('industrySpecificReqs')
        };
        
        // F√ºhre erweiterte Suche durch
        const results = this.searchQualifiedAuditors(searchCriteria);
        
        // Zeige Ergebnisse an
        this.displayAuditorSearchResults(results, searchCriteria);
        
        console.log('Advanced auditor search completed:', searchCriteria, results);
        
    } catch (error) {
        console.error('Error in advanced auditor search:', error);
        this.showNotification('Fehler bei der Auditor-Suche.', 'error');
    }
};

QHSEDashboard.prototype.searchQualifiedAuditors = function(criteria) {
    const results = [];
    
    this.auditors.forEach(auditor => {
        let score = 0;
        let matches = [];
        let issues = [];
        
        // Akkreditierung pr√ºfen (Critical - muss erf√ºllt sein)
        if (criteria.requiredAccreditation) {
            if (auditor.certification === criteria.requiredAccreditation) {
                score += 25;
                matches.push(`‚úÖ ${criteria.requiredAccreditation} zertifiziert`);
            } else {
                issues.push(`‚ùå Fehlende Akkreditierung: ${criteria.requiredAccreditation}`);
                return; // Ausschlusskriterium
            }
        }
        
        // Prim√§rer Standard pr√ºfen (Critical)
        if (criteria.primaryStandard) {
            if (auditor.standards && auditor.standards.includes(criteria.primaryStandard)) {
                score += 20;
                matches.push(`‚úÖ ${criteria.primaryStandard} Erfahrung`);
            } else {
                issues.push(`‚ùå Fehlende Standard-Erfahrung: ${criteria.primaryStandard}`);
                return; // Ausschlusskriterium
            }
        }
        
        // Mindesterfahrung pr√ºfen (Critical)
        if (criteria.minExperience) {
            const auditorExp = this.parseExperienceYears(auditor.experience);
            if (auditorExp >= criteria.minExperience) {
                score += 15;
                matches.push(`‚úÖ ${auditorExp} Jahre Erfahrung (min. ${criteria.minExperience})`);
            } else {
                issues.push(`‚ùå Unzureichende Erfahrung: ${auditorExp} Jahre (min. ${criteria.minExperience})`);
                return; // Ausschlusskriterium
            }
        }
        
        // Branchenerfahrung pr√ºfen
        if (criteria.requiredIndustry) {
            if (auditor.industries && auditor.industries.includes(criteria.requiredIndustry)) {
                score += 15;
                matches.push(`‚úÖ ${criteria.requiredIndustry} Branchenerfahrung`);
            } else {
                score -= 10;
                issues.push(`‚ö†Ô∏è Keine ${criteria.requiredIndustry} Branchenerfahrung`);
            }
        }
        
        // Zus√§tzliche Standards
        if (criteria.secondaryStandards && criteria.secondaryStandards.length > 0) {
            const matchedSecondary = criteria.secondaryStandards.filter(std => 
                auditor.standards && auditor.standards.includes(std)
            );
            score += matchedSecondary.length * 5;
            matchedSecondary.forEach(std => {
                matches.push(`‚úÖ Zusatzqualifikation: ${std}`);
            });
        }
        
        // Verf√ºgbarkeit pr√ºfen
        if (criteria.requiredAvailability) {
            const availabilityMatch = this.checkAvailabilityMatch(auditor.availability, criteria.requiredAvailability);
            if (availabilityMatch) {
                score += 10;
                matches.push(`‚úÖ Verf√ºgbar: ${auditor.availability}`);
            } else {
                score -= 5;
                issues.push(`‚ö†Ô∏è Verf√ºgbarkeit: ${auditor.availability} (gew√ºnscht: ${criteria.requiredAvailability})`);
            }
        }
        
        // Standort/Reisebereitschaft pr√ºfen
        if (criteria.auditLocation && criteria.maxTravelDistance) {
            const locationMatch = this.checkLocationMatch(auditor, criteria.auditLocation, criteria.maxTravelDistance);
            if (locationMatch.suitable) {
                score += locationMatch.score;
                matches.push(`‚úÖ ${locationMatch.message}`);
            } else {
                score -= 5;
                issues.push(`‚ö†Ô∏è ${locationMatch.message}`);
            }
        }
        
        // Sprachen pr√ºfen
        if (criteria.requiredLanguages && criteria.requiredLanguages.length > 0) {
            const languageScore = this.checkLanguageRequirements(auditor, criteria.requiredLanguages);
            score += languageScore.points;
            languageScore.matches.forEach(match => matches.push(match));
            languageScore.issues.forEach(issue => issues.push(issue));
        }
        
        // Nur Auditoren mit Score > 40 anzeigen (mindestens Grundqualifikation)
        if (score >= 40) {
            results.push({
                auditor: auditor,
                score: Math.min(score, 100), // Max 100 Punkte
                matches: matches,
                issues: issues,
                qualification: this.getQualificationLevel(score),
                relevance: score / 100
            });
        }
    });
    
    // Sortiere nach Score (h√∂chster zuerst)
    return results.sort((a, b) => b.score - a.score);
};

QHSEDashboard.prototype.parseExperienceYears = function(experienceString) {
    if (!experienceString) return 0;
    
    // Parse verschiedene Formate: "5+ Jahre", "3-5 Jahre", "10 Jahre", etc.
    const match = experienceString.match(/(\d+)/);
    if (match) {
        return parseInt(match[1]);
    }
    
    // Fallback f√ºr Textangaben
    const lowerExp = experienceString.toLowerCase();
    if (lowerExp.includes('10+') || lowerExp.includes('mehr als 10')) return 15;
    if (lowerExp.includes('6-10')) return 8;
    if (lowerExp.includes('3-5')) return 4;
    if (lowerExp.includes('1-2')) return 1.5;
    
    return 0;
};

QHSEDashboard.prototype.checkAvailabilityMatch = function(auditorAvailability, requiredAvailability) {
    const availabilityRanking = {
        'Sofort verf√ºgbar': 1,
        'Innerhalb 1 Woche': 1,
        'Kurzfristig': 2,
        'Innerhalb 1 Monat': 2,
        'Mittelfristig': 3,
        'Langfristig': 4,
        'Nach Absprache': 3
    };
    
    const auditorRank = availabilityRanking[auditorAvailability] || 4;
    const requiredRank = availabilityRanking[requiredAvailability] || 4;
    
    return auditorRank <= requiredRank;
};

QHSEDashboard.prototype.checkLocationMatch = function(auditor, auditLocation, maxTravelDistance) {
    // Vereinfachte Standort-Pr√ºfung (in echter Anwendung w√ºrde man APIs verwenden)
    const auditorCity = auditor.city?.toLowerCase() || '';
    const targetLocation = auditLocation.toLowerCase();
    
    // Direkte √úbereinstimmung
    if (auditorCity.includes(targetLocation) || targetLocation.includes(auditorCity)) {
        return {
            suitable: true,
            score: 15,
            message: `Standort: ${auditor.city} (lokal)`
        };
    }
    
    // PLZ-Bereich pr√ºfen (vereinfacht)
    if (maxTravelDistance === 'national' || maxTravelDistance === 'international') {
        return {
            suitable: true,
            score: 10,
            message: `Bundesweite/internationale T√§tigkeit m√∂glich`
        };
    }
    
    // Entfernungsbasierte Bewertung (vereinfacht)
    const distance = parseInt(maxTravelDistance);
    if (!isNaN(distance)) {
        if (distance >= 200) {
            return {
                suitable: true,
                score: 8,
                message: `Gro√üe Anreise akzeptiert (bis ${distance}km)`
            };
        } else if (distance >= 100) {
            return {
                suitable: true,
                score: 5,
                message: `Mittlere Anreise (bis ${distance}km)`
            };
        }
    }
    
    return {
        suitable: false,
        score: 0,
        message: `Standort m√∂glicherweise zu weit entfernt`
    };
};

QHSEDashboard.prototype.checkLanguageRequirements = function(auditor, requiredLanguages) {
    const result = {
        points: 0,
        matches: [],
        issues: []
    };
    
    // Vereinfacht: Annahme dass Deutsch immer verf√ºgbar ist
    if (requiredLanguages.includes('Deutsch')) {
        result.points += 5;
        result.matches.push('‚úÖ Deutsch verf√ºgbar');
    }
    
    // Andere Sprachen als Bonus
    const otherLanguages = requiredLanguages.filter(lang => lang !== 'Deutsch');
    if (otherLanguages.length > 0) {
        // In echter Anwendung w√ºrde man Sprachkenntnisse im Auditor-Profil speichern
        result.points += otherLanguages.length * 2;
        otherLanguages.forEach(lang => {
            result.matches.push(`‚ûï ${lang} erw√ºnscht`);
        });
    }
    
    return result;
};

QHSEDashboard.prototype.getQualificationLevel = function(score) {
    if (score >= 85) return { level: 'excellent', label: 'Hervorragend qualifiziert', color: '#10b981' };
    if (score >= 70) return { level: 'good', label: 'Gut qualifiziert', color: '#3b82f6' };
    if (score >= 55) return { level: 'adequate', label: 'Ausreichend qualifiziert', color: '#f59e0b' };
    return { level: 'marginal', label: 'Bedingt geeignet', color: '#ef4444' };
};

QHSEDashboard.prototype.displayAuditorSearchResults = function(results, criteria) {
    const resultsSection = document.getElementById('auditorSearchResults');
    const resultsCount = document.getElementById('resultsCount');
    const resultsList = document.getElementById('searchResultsList');
    
    if (!resultsSection || !resultsCount || !resultsList) return;
    
    resultsCount.textContent = results.length;
    resultsSection.style.display = 'block';
    
    if (results.length === 0) {
        resultsList.innerHTML = `
            <div class="no-results">
                <div class="no-results-icon">
                    <i class="fas fa-search"></i>
                </div>
                <h4>Keine passenden Auditoren gefunden</h4>
                <p>Versuchen Sie, die Suchkriterien anzupassen oder weniger restriktive Filter zu verwenden.</p>
                <button class="btn btn-primary" onclick="qhseDashboard.resetAdvancedAuditorSearch()">
                    Suche anpassen
                </button>
            </div>
        `;
        return;
    }
    
    resultsList.innerHTML = results.map(result => `
        <div class="auditor-result-card" data-score="${result.score}">
            <div class="result-header">
                <div class="auditor-basic-info">
                    <div class="auditor-name">
                        <h4>${this.escapeHtml(result.auditor.firstName)} ${this.escapeHtml(result.auditor.lastName)}</h4>
                        <span class="auditor-certification">${this.escapeHtml(result.auditor.certification)}</span>
                    </div>
                    <div class="qualification-score">
                        <div class="score-circle" style="background: ${result.qualification.color}">
                            ${result.score}
                        </div>
                        <span class="qualification-label" style="color: ${result.qualification.color}">
                            ${result.qualification.label}
                        </span>
                    </div>
                </div>
                <div class="auditor-contact-info">
                    <div class="contact-item">
                        <i class="fas fa-map-marker-alt"></i>
                        <span>${this.escapeHtml(result.auditor.city)}, ${this.escapeHtml(result.auditor.country)}</span>
                    </div>
                    <div class="contact-item">
                        <i class="fas fa-clock"></i>
                        <span>${this.escapeHtml(result.auditor.availability)}</span>
                    </div>
                </div>
            </div>
            
            <div class="result-details">
                <div class="qualifications-section">
                    <h5><i class="fas fa-certificate"></i> Qualifikationen & Standards</h5>
                    <div class="standards-list">
                        ${(result.auditor.standards || []).map(std => 
                            `<span class="standard-badge ${criteria.primaryStandard === std ? 'primary' : 'secondary'}">${this.escapeHtml(std)}</span>`
                        ).join('')}
                    </div>
                    <div class="experience-info">
                        <strong>Erfahrung:</strong> ${this.escapeHtml(result.auditor.experience || 'Nicht angegeben')} | 
                        <strong>Branchen:</strong> ${(result.auditor.industries || []).slice(0, 3).map(ind => this.escapeHtml(ind)).join(', ')}
                    </div>
                </div>
                
                <div class="matching-analysis">
                    <div class="matches">
                        <h6><i class="fas fa-check-circle"></i> Erf√ºllte Anforderungen</h6>
                        <ul>
                            ${result.matches.map(match => `<li>${match}</li>`).join('')}
                        </ul>
                    </div>
                    ${result.issues.length > 0 ? `
                        <div class="issues">
                            <h6><i class="fas fa-exclamation-triangle"></i> Zu beachtende Punkte</h6>
                            <ul>
                                ${result.issues.map(issue => `<li>${issue}</li>`).join('')}
                            </ul>
                        </div>
                    ` : ''}
                </div>
            </div>
            
            <div class="result-actions">
                <button class="btn btn-primary" onclick="qhseDashboard.contactAuditor('${result.auditor.id}')">
                    <i class="fas fa-envelope"></i>
                    Kontakt aufnehmen
                </button>
                <button class="btn btn-secondary" onclick="qhseDashboard.viewAuditorDetails('${result.auditor.id}')">
                    <i class="fas fa-user"></i>
                    Profil anzeigen
                </button>
                <button class="btn btn-outline" onclick="qhseDashboard.requestAuditOffer('${result.auditor.id}')">
                    <i class="fas fa-handshake"></i>
                    Audit anfragen
                </button>
            </div>
        </div>
    `).join('');
    
    this.showNotification(`${results.length} qualifizierte Auditoren gefunden!`, 'success');
};

QHSEDashboard.prototype.resetAdvancedAuditorSearch = function() {
    const form = document.getElementById('advancedAuditorSearchForm');
    const resultsSection = document.getElementById('auditorSearchResults');
    
    if (form) form.reset();
    if (resultsSection) resultsSection.style.display = 'none';
    
    // Reset dynamic sections
    const industryReqs = document.getElementById('industrySpecificRequirements');
    if (industryReqs) industryReqs.innerHTML = '';
    
    this.showNotification('Suchformular zur√ºckgesetzt.', 'info');
};

QHSEDashboard.prototype.contactAuditor = function(auditorId) {
    const auditor = this.auditors.find(a => a.id === auditorId);
    if (!auditor) return;
    
    // Hier w√ºrde normalerweise ein Kontakt-Modal oder E-Mail-Client ge√∂ffnet
    const message = `Sehr geehrte/r ${auditor.firstName} ${auditor.lastName},\n\n` +
                   `ich bin interessiert an Ihrer Expertise f√ºr ein Audit-Projekt.\n\n` +
                   `Bitte kontaktieren Sie mich f√ºr weitere Details.\n\n` +
                   `Mit freundlichen Gr√º√üen`;
    
    if (auditor.email) {
        window.location.href = `mailto:${auditor.email}?subject=Audit-Anfrage&body=${encodeURIComponent(message)}`;
    } else {
        this.showNotification('E-Mail-Adresse nicht verf√ºgbar.', 'error');
    }
};

QHSEDashboard.prototype.setupAuditPlanGenerator = function() {
    console.log('üîß Setting up Audit Plan Generator module...');
    
    // Initialize audit plan data
    this.auditPlans = this.loadAuditPlansFromStorage();
    this.auditBlockCounter = 0;
    
    // Setup event listeners after DOM is ready
    setTimeout(() => {
        this.initializeAuditPlanGenerator();
    }, 100);
};

QHSEDashboard.prototype.loadAuditPlansFromStorage = function() {
    try {
        const stored = localStorage.getItem('qhse_audit_plans');
        return stored ? JSON.parse(stored) : [];
    } catch (error) {
        console.error('Error loading audit plans:', error);
        return [];
    }
};

QHSEDashboard.prototype.saveAuditPlansToStorage = function() {
    try {
        localStorage.setItem('qhse_audit_plans', JSON.stringify(this.auditPlans));
        return true;
    } catch (error) {
        console.error('Error saving audit plans:', error);
        return false;
    }
};

QHSEDashboard.prototype.initializeAuditPlanGenerator = function() {
    console.log('üöÄ Initializing Audit Plan Generator...');
    
    // Show empty state if container is empty
    const container = document.getElementById('auditBlocksContainer');
    if (container && container.children.length === 0) {
        this.showAuditBlocksEmptyState();
    } else {
        // Initialize drag and drop for existing blocks
        this.initializeDragAndDrop();
    }
    
    // Set today's date as default for all date inputs
    const today = new Date().toISOString().split('T')[0];
    
    const auditDateInput = document.getElementById('auditDate');
    if (auditDateInput && !auditDateInput.value) {
        auditDateInput.value = today;
    }
    
    const auditStartDateInput = document.getElementById('auditStartDate');
    if (auditStartDateInput && !auditStartDateInput.value) {
        auditStartDateInput.value = today;
    }
    
    const auditEndDateInput = document.getElementById('auditEndDate');
    if (auditEndDateInput && !auditEndDateInput.value) {
        // Default to tomorrow for end date
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        auditEndDateInput.value = tomorrow.toISOString().split('T')[0];
    }
    
    // Make methods globally available
    window.addAuditBlock = () => this.addAuditBlock();
    window.removeAuditBlock = (blockId) => this.removeAuditBlock(blockId);
    window.duplicateAuditBlock = (blockId) => this.duplicateAuditBlock(blockId);
    window.generateAuditPlan = () => this.generateAuditPlan();
    window.toggleAuditDateInputs = () => this.toggleAuditDateInputs();
    window.updateDepartmentField = (selectElement) => this.updateDepartmentField(selectElement);
    window.updateTopicsField = (selectElement) => this.updateTopicsField(selectElement);
    window.clearAuditPlan = () => this.clearAuditPlan();
    window.exportAuditPlan = () => this.exportAuditPlan();
    window.printAuditPlan = () => this.printAuditPlan();
    window.saveAuditPlan = () => this.saveAuditPlan();
    window.exportAuditPlanWord = () => this.exportAuditPlanWord();
    window.exportAuditPlanPDF = () => this.exportAuditPlanPDF();
};

QHSEDashboard.prototype.addAuditBlock = function() {
    this.auditBlockCounter++;
    const blockId = `audit-block-${this.auditBlockCounter}`;
    
    const blockHtml = `
        <div class="audit-block" id="${blockId}">
            <div class="block-header">
                <div class="block-title">
                    <i class="fas fa-grip-vertical drag-handle" title="Ziehen zum Verschieben"></i>
                    <i class="fas fa-calendar-alt"></i>
                    Audit-Block #${this.auditBlockCounter}
                </div>
                <div class="block-controls">
                    <button type="button" class="block-btn duplicate" onclick="duplicateAuditBlock('${blockId}')">
                        <i class="fas fa-copy"></i>
                    </button>
                    <button type="button" class="block-btn remove" onclick="removeAuditBlock('${blockId}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            
            <div class="block-form">
                <div class="block-form-group datetime-group">
                    <label>Datum und Uhrzeit</label>
                    <div class="datetime-controls">
                        <div class="datetime-options">
                            <label class="checkbox-label">
                                <input type="checkbox" name="showBlockDate" onchange="toggleBlockDateDisplay(this)" checked>
                                <span class="checkmark"></span>
                                Datum anzeigen
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="useDifferentDate" onchange="toggleBlockDateInput(this)">
                                <span class="checkmark"></span>
                                Anderes Datum verwenden
                            </label>
                        </div>
                        <div class="datetime-inputs">
                            <div class="date-time-row">
                                <div class="date-input-group" id="dateInputGroup">
                                    <label>Datum</label>
                                    <input type="date" name="blockDate" value="">
                                </div>
                                <div class="time-input-group">
                                    <label>Von</label>
                                    <input type="time" name="startTime" value="09:00">
                                </div>
                                <div class="time-input-group">
                                    <label>Bis</label>
                                    <input type="time" name="endTime" value="10:00">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="block-form-group">
                    <label>Abteilung/Bereich</label>
                    <div class="department-input-container">
                        <select name="departmentSelect" onchange="updateDepartmentField(this)">
                            <option value="">Bitte w√§hlen oder eigene Eingabe...</option>
                            <option value="Er√∂ffnungsgespr√§ch">Er√∂ffnungsgespr√§ch</option>
                            <option value="Mittagspause">Mittagspause</option>
                            <option value="Kaffeepause">Kaffeepause</option>
                            <option value="Standortwechsel">Standortwechsel</option>
                            <option value="Informationsaustausch">Informationsaustausch</option>
                            <option value="Auditorenzeit">Auditorenzeit</option>
                            <option value="Abschlussgespr√§ch">Abschlussgespr√§ch</option>
                            <option value="Gesch√§ftsf√ºhrung">Gesch√§ftsf√ºhrung</option>
                            <option value="Qualit√§tsmanagement">Qualit√§tsmanagement</option>
                            <option value="Produktion">Produktion</option>
                            <option value="Vertrieb">Vertrieb</option>
                            <option value="Einkauf">Einkauf</option>
                            <option value="Personalwesen">Personalwesen</option>
                            <option value="Buchhaltung">Buchhaltung</option>
                            <option value="IT">IT</option>
                            <option value="Lager/Logistik">Lager/Logistik</option>
                            <option value="Entwicklung">Entwicklung</option>
                            <option value="Wartung">Wartung</option>
                            <option value="Arbeitssicherheit">Arbeitssicherheit</option>
                            <option value="Umweltmanagement">Umweltmanagement</option>
                            <option value="Kundenservice">Kundenservice</option>
                            <option value="Marketing">Marketing</option>
                            <option value="Eigene Eingabe">‚Üí Eigene Eingabe</option>
                        </select>
                        <input type="text" name="department" placeholder="Oder eigene Eingabe..." style="margin-top: 5px;">
                    </div>
                </div>
                <div class="block-form-group">
                    <label>Auditoren</label>
                    <input type="text" name="auditors" placeholder="z.B. Dr. Schmidt, M. M√ºller">
                </div>
                <div class="block-form-group">
                    <label>Gespr√§chspartner</label>
                    <input type="text" name="contact" placeholder="z.B. Max M√ºller (QM-Leiter)">
                </div>
                <div class="block-form-group">
                    <label>Norm(en)</label>
                    <select name="standards" multiple style="height: 80px;">
                        <option value="ISO 9001">ISO 9001</option>
                        <option value="ISO 14001">ISO 14001</option>
                        <option value="ISO 45001">ISO 45001</option>
                        <option value="ISO 27001">ISO 27001</option>
                        <option value="IATF 16949">IATF 16949</option>
                        <option value="AS9100">AS9100</option>
                        <option value="ISO 13485">ISO 13485</option>
                        <option value="ISO 22000">ISO 22000</option>
                        <option value="ISO 50001">ISO 50001</option>
                    </select>
                    <small>Strg+Klick f√ºr Mehrfachauswahl</small>
                </div>
                <div class="block-form-group">
                    <label>Normkapitel</label>
                    <input type="text" name="chapters" placeholder="z.B. 7.5, 8.5.1, 9.2">
                </div>
                <div class="block-form-group full-width">
                    <label>Themen/Prozesse</label>
                    <div class="topics-input-container">
                        <select name="topicsSelect" onchange="updateTopicsField(this)">
                            <option value="">Themen ausw√§hlen (abh√§ngig von Abteilung)...</option>
                        </select>
                        <textarea name="topics" rows="3" placeholder="Oder eigene Themen/Prozesse eingeben..."></textarea>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    const container = document.getElementById('auditBlocksContainer');
    
    // Remove empty state if present
    const emptyState = container.querySelector('.audit-blocks-empty');
    if (emptyState) {
        emptyState.remove();
    }
    
    container.insertAdjacentHTML('beforeend', blockHtml);
    
    // Initialize date input state
    const block = document.getElementById(blockId);
    const dateInput = block.querySelector('input[name="blockDate"]');
    
    // Set initial state: date input disabled and semi-transparent
    if (dateInput) {
        dateInput.disabled = true;
        dateInput.style.opacity = '0.5';
    }
    
    // Enable drag and drop for the new block
    this.initializeDragAndDrop();
    
    this.showNotification('Audit-Block hinzugef√ºgt', 'success');
};

// Initialize drag and drop functionality for audit blocks
QHSEDashboard.prototype.initializeDragAndDrop = function() {
    const container = document.getElementById('auditBlocksContainer');
    const blocks = container.querySelectorAll('.audit-block');
    
    blocks.forEach(block => {
        // Make block draggable
        block.draggable = true;
        
        // Remove existing event listeners to prevent duplicates
        block.removeEventListener('dragstart', this.handleDragStart);
        block.removeEventListener('dragover', this.handleDragOver);
        block.removeEventListener('dragenter', this.handleDragEnter);
        block.removeEventListener('dragleave', this.handleDragLeave);
        block.removeEventListener('drop', this.handleDrop);
        block.removeEventListener('dragend', this.handleDragEnd);
        
        // Add event listeners
        block.addEventListener('dragstart', this.handleDragStart.bind(this));
        block.addEventListener('dragover', this.handleDragOver.bind(this));
        block.addEventListener('dragenter', this.handleDragEnter.bind(this));
        block.addEventListener('dragleave', this.handleDragLeave.bind(this));
        block.addEventListener('drop', this.handleDrop.bind(this));
        block.addEventListener('dragend', this.handleDragEnd.bind(this));
    });
};

// Drag and drop event handlers
QHSEDashboard.prototype.handleDragStart = function(e) {
    this.draggedElement = e.target;
    e.target.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', e.target.outerHTML);
};

QHSEDashboard.prototype.handleDragOver = function(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
};

QHSEDashboard.prototype.handleDragEnter = function(e) {
    e.preventDefault();
    if (e.target.classList.contains('audit-block') && e.target !== this.draggedElement) {
        e.target.classList.add('drag-over');
    }
};

QHSEDashboard.prototype.handleDragLeave = function(e) {
    if (e.target.classList.contains('audit-block')) {
        e.target.classList.remove('drag-over');
    }
};

QHSEDashboard.prototype.handleDrop = function(e) {
    e.preventDefault();
    
    if (e.target.classList.contains('audit-block') && e.target !== this.draggedElement) {
        const container = document.getElementById('auditBlocksContainer');
        const allBlocks = Array.from(container.querySelectorAll('.audit-block'));
        const draggedIndex = allBlocks.indexOf(this.draggedElement);
        const targetIndex = allBlocks.indexOf(e.target);
        
        if (draggedIndex < targetIndex) {
            // Insert after target
            container.insertBefore(this.draggedElement, e.target.nextSibling);
        } else {
            // Insert before target
            container.insertBefore(this.draggedElement, e.target);
        }
        
        // Re-number the blocks
        this.renumberAuditBlocks();
        
        this.showNotification('Audit-Block verschoben', 'success');
    }
    
    e.target.classList.remove('drag-over');
};

QHSEDashboard.prototype.handleDragEnd = function(e) {
    e.target.classList.remove('dragging');
    
    // Remove drag-over class from all blocks
    const allBlocks = document.querySelectorAll('.audit-block');
    allBlocks.forEach(block => {
        block.classList.remove('drag-over');
    });
    
    this.draggedElement = null;
};

// Audit Times Management Functions
QHSEDashboard.prototype.auditorRowCounter = 0;

QHSEDashboard.prototype.addAuditorRow = function() {
    this.auditorRowCounter++;
    const rowId = `auditor-row-${this.auditorRowCounter}`;
    
    const rowHtml = `
        <tr id="${rowId}" class="auditor-row">
            <td class="auditor-name-cell">
                <input type="text" class="auditor-name-input" placeholder="Auditor Name" onchange="updateAuditTimeTotals()">
                <button type="button" class="remove-auditor-btn" onclick="removeAuditorRow('${rowId}')" title="Auditor entfernen">
                    <i class="fas fa-times"></i>
                </button>
            </td>
            <td><input type="number" class="time-input" data-standard="iso9001" data-type="onsite" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso9001" data-type="remote" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso14001" data-type="onsite" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso14001" data-type="remote" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso45001" data-type="onsite" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso45001" data-type="remote" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso50001" data-type="onsite" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso50001" data-type="remote" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso27001" data-type="onsite" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td><input type="number" class="time-input" data-standard="iso27001" data-type="remote" step="0.25" min="0" value="0" onchange="updateAuditTimeTotals()"></td>
            <td class="total-cell">0,00</td>
        </tr>
    `;
    
    const tableBody = document.getElementById('auditTimesTableBody');
    tableBody.insertAdjacentHTML('beforeend', rowHtml);
    
    this.updateAuditTimeTotals();
    this.showNotification('Auditor hinzugef√ºgt', 'success');
};

QHSEDashboard.prototype.removeAuditorRow = function(rowId) {
    if (confirm('M√∂chten Sie diesen Auditor wirklich entfernen?')) {
        const row = document.getElementById(rowId);
        if (row) {
            row.remove();
            this.updateAuditTimeTotals();
            this.showNotification('Auditor entfernt', 'success');
        }
    }
};

QHSEDashboard.prototype.updateAuditTimeTotals = function() {
    const standards = ['iso9001', 'iso14001', 'iso45001', 'iso50001', 'iso27001'];
    const types = ['onsite', 'remote'];
    
    // Initialize totals
    const totals = {};
    standards.forEach(standard => {
        totals[standard] = { onsite: 0, remote: 0, total: 0 };
    });
    totals.overall = { onsite: 0, remote: 0, total: 0 };
    
    // Calculate row totals and update individual total cells
    const rows = document.querySelectorAll('.auditor-row');
    rows.forEach(row => {
        let rowTotal = 0;
        
        standards.forEach(standard => {
            types.forEach(type => {
                const input = row.querySelector(`input[data-standard="${standard}"][data-type="${type}"]`);
                const value = parseFloat(input.value) || 0;
                totals[standard][type] += value;
                totals.overall[type] += value;
                rowTotal += value;
            });
        });
        
        // Update row total
        const totalCell = row.querySelector('.total-cell');
        totalCell.textContent = rowTotal.toFixed(2);
        totals.overall.total += rowTotal;
    });
    
    // Update footer totals
    standards.forEach(standard => {
        types.forEach(type => {
            const elementId = `total-${standard}-${type}`;
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = totals[standard][type].toFixed(2);
            }
        });
        
        totals[standard].total = totals[standard].onsite + totals[standard].remote;
    });
    
    // Update overall total
    const overallElement = document.getElementById('total-overall');
    if (overallElement) {
        overallElement.textContent = totals.overall.total.toFixed(2);
    }
    
    // Calculate and update remote percentages
    standards.forEach(standard => {
        const standardTotal = totals[standard].total;
        const remotePercent = standardTotal > 0 ? Math.round((totals[standard].remote / standardTotal) * 100) : 0;
        const percentElement = document.getElementById(`remote-percent-${standard}`);
        if (percentElement) {
            percentElement.textContent = remotePercent;
        }
    });
    
    // Overall remote percentage
    const overallRemotePercent = totals.overall.total > 0 ? Math.round((totals.overall.remote / totals.overall.total) * 100) : 0;
    const overallPercentElement = document.getElementById('remote-percent-overall');
    if (overallPercentElement) {
        overallPercentElement.textContent = overallRemotePercent;
    }
};

// Check if audit times data should be displayed
QHSEDashboard.prototype.hasAuditTimesData = function(auditTimesData) {
    if (!auditTimesData) return false;
    
    // Show if there's a location specified
    if (auditTimesData.location && auditTimesData.location.trim()) {
        return true;
    }
    
    // Show if there are any auditor rows (even without names) with time data
    const auditorRows = document.querySelectorAll('.auditor-row');
    if (auditorRows.length > 0) {
        return true;
    }
    
    // Show if there are any non-zero totals
    if (auditTimesData.totals && auditTimesData.totals.overall && auditTimesData.totals.overall.total > 0) {
        return true;
    }
    
    return false;
};

// Collect audit times data from the table
QHSEDashboard.prototype.collectAuditTimesData = function() {
    const standards = ['iso9001', 'iso14001', 'iso45001', 'iso50001', 'iso27001'];
    const types = ['onsite', 'remote'];
    
    const auditTimesData = {
        location: document.getElementById('auditLocation')?.value || '',
        auditors: [],
        totals: {},
        remotePercentages: {}
    };
    
    // Initialize totals
    standards.forEach(standard => {
        auditTimesData.totals[standard] = { onsite: 0, remote: 0, total: 0 };
    });
    auditTimesData.totals.overall = { onsite: 0, remote: 0, total: 0 };
    
    // Collect auditor data
    const auditorRows = document.querySelectorAll('.auditor-row');
    auditorRows.forEach(row => {
        const auditorData = {
            name: row.querySelector('.auditor-name-input')?.value || '',
            times: {},
            total: 0
        };
        
        let auditorTotal = 0;
        
        standards.forEach(standard => {
            auditorData.times[standard] = { onsite: 0, remote: 0 };
            
            types.forEach(type => {
                const input = row.querySelector(`input[data-standard="${standard}"][data-type="${type}"]`);
                const value = parseFloat(input?.value) || 0;
                auditorData.times[standard][type] = value;
                auditTimesData.totals[standard][type] += value;
                auditTimesData.totals.overall[type] += value;
                auditorTotal += value;
            });
        });
        
        auditorData.total = auditorTotal;
        auditTimesData.totals.overall.total += auditorTotal;
        
        // Add auditor if they have a name or any time data
        if (auditorData.name || auditorTotal > 0) {
            // Use fallback name if no name provided
            if (!auditorData.name) {
                auditorData.name = `Auditor ${auditTimesData.auditors.length + 1}`;
            }
            auditTimesData.auditors.push(auditorData);
        }
    });
    
    // Calculate totals for standards
    standards.forEach(standard => {
        auditTimesData.totals[standard].total = auditTimesData.totals[standard].onsite + auditTimesData.totals[standard].remote;
    });
    
    // Calculate remote percentages
    standards.forEach(standard => {
        const standardTotal = auditTimesData.totals[standard].total;
        auditTimesData.remotePercentages[standard] = standardTotal > 0 ? 
            Math.round((auditTimesData.totals[standard].remote / standardTotal) * 100) : 0;
    });
    
    // Overall remote percentage
    auditTimesData.remotePercentages.overall = auditTimesData.totals.overall.total > 0 ? 
        Math.round((auditTimesData.totals.overall.remote / auditTimesData.totals.overall.total) * 100) : 0;
    
    return auditTimesData;
};

// Render audit plan footer with final notes and distribution
QHSEDashboard.prototype.renderAuditPlanFooter = function(planData) {
    return `
        <div class="audit-plan-footer">
            <div class="footer-notes">
                <div class="note-section">
                    <p class="remote-indicator"><strong>* = Auditor nimmt remote am Audit teil</strong></p>
                </div>
                
                <div class="note-section">
                    <p><strong>Auditieren mehrere Auditoren, so muss die Nachweisf√ºhrung getrennt erfolgen (Ausnahme Top Management). Entsprechende Ansprechpartner im Unternehmen sind im Auditplan zu benennen.</strong></p>
                </div>
                
                <div class="note-section">
                    <p><strong>Arbeitsunterlagen werden vertragsgem√§√ü vertraulich behandelt und gesichert aufbewahrt.</strong></p>
                </div>
            </div>
            
            <div class="distribution-section">
                <div class="distribution-column">
                    <h6><strong>Verteiler beim Auftraggeber:</strong></h6>
                    <p class="distribution-note">(vom Auftraggeber festzulegen)</p>
                    <div class="distribution-lines">
                        <div class="distribution-line">_________________________________</div>
                        <div class="distribution-line">_________________________________</div>
                        <div class="distribution-line">_________________________________</div>
                    </div>
                </div>
                
                <div class="distribution-column">
                    <h6><strong>Verteiler zum Auditplan:</strong></h6>
                    <div class="distribution-checkboxes">
                        <div class="checkbox-row">
                            <span class="checkbox">‚òë</span>
                            <span class="checkbox-label">Auftraggeber</span>
                            <span class="checkbox">‚òë</span>
                            <span class="checkbox-label">Zertifizierungsstelle(n)</span>
                        </div>
                        <div class="checkbox-row">
                            <span class="checkbox">‚òê</span>
                            <span class="checkbox-label">Auditor/Gutachter/Experte</span>
                            <span class="checkbox">‚òë</span>
                            <span class="checkbox-label">Datenbank</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
};

// Render audit times overview for generated plan
QHSEDashboard.prototype.renderAuditTimesOverview = function(auditTimesData) {
    const standards = ['iso9001', 'iso14001', 'iso45001', 'iso50001', 'iso27001'];
    const standardLabels = {
        'iso9001': 'ISO 9001',
        'iso14001': 'ISO 14001', 
        'iso45001': 'ISO 45001',
        'iso50001': 'ISO 50001',
        'iso27001': 'ISO 27001'
    };
    
    let auditorRowsHtml = '';
    
    // Generate auditor rows
    auditTimesData.auditors.forEach(auditor => {
        auditorRowsHtml += `
            <tr class="auditor-times-row">
                <td class="auditor-name">${auditor.name}</td>
        `;
        
        standards.forEach(standard => {
            auditorRowsHtml += `
                <td>${auditor.times[standard].onsite.toFixed(2)}</td>
                <td>${auditor.times[standard].remote.toFixed(2)}</td>
            `;
        });
        
        auditorRowsHtml += `<td class="total-time">${auditor.total.toFixed(2)}</td></tr>`;
    });
    
    return `
        <div class="config-section audit-times-overview">
            <h5><i class="fas fa-clock"></i> Auditzeiten-√úbersicht nach Standards</h5>
            ${auditTimesData.location ? `<p class="audit-location"><strong>Standort:</strong> ${auditTimesData.location}</p>` : ''}
            <p class="audit-description">Zur internen Auswertung sollte den Auditoren ein Raum zur Verf√ºgung stehen. Auditbeauftragte begleiten die Auditoren w√§hrend des gesamten Audits. Sp√§testens im Einf√ºhrungsgespr√§ch ist das Auditoren-Team √ºber die arbeitssicherheitsrelevanten Aspekte im Unternehmen zu unterrichten.</p>
            
            <div class="audit-times-table-wrapper">
                <table class="generated-audit-times-table">
                    <thead>
                        <tr>
                            <th rowspan="2">Auditor</th>
                            ${standards.map(standard => `<th colspan="2">${standardLabels[standard]}</th>`).join('')}
                            <th rowspan="2">Zeit gesamt</th>
                        </tr>
                        <tr>
                            ${standards.map(() => '<th>vor Ort</th><th>remote</th>').join('')}
                        </tr>
                    </thead>
                    <tbody>
                        ${auditorRowsHtml}
                    </tbody>
                    <tfoot>
                        <tr class="totals-times-row">
                            <td><strong>Auditzeit</strong></td>
                            ${standards.map(standard => `
                                <td>${auditTimesData.totals[standard].onsite.toFixed(2)}</td>
                                <td>${auditTimesData.totals[standard].remote.toFixed(2)}</td>
                            `).join('')}
                            <td><strong>${auditTimesData.totals.overall.total.toFixed(2)}</strong></td>
                        </tr>
                        <tr class="remote-percent-times-row">
                            <td><strong>Remote-Anteil %</strong></td>
                            ${standards.map(standard => `
                                <td>${auditTimesData.remotePercentages[standard]}</td>
                                <td>-</td>
                            `).join('')}
                            <td><strong>${auditTimesData.remotePercentages.overall}</strong></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    `;
};


// Toggle block date display visibility in generated plan
QHSEDashboard.prototype.toggleBlockDateDisplay = function(checkbox) {
    const block = checkbox.closest('.audit-block');
    const dateInputGroup = block.querySelector('.date-input-group');
    
    if (checkbox.checked) {
        dateInputGroup.style.display = 'block';
    } else {
        dateInputGroup.style.display = 'none';
        // Also uncheck "use different date" if hiding date display
        const useDifferentDateCheckbox = block.querySelector('input[name="useDifferentDate"]');
        if (useDifferentDateCheckbox) {
            useDifferentDateCheckbox.checked = false;
            this.toggleBlockDateInput(useDifferentDateCheckbox);
        }
    }
};

// Toggle block date input functionality
QHSEDashboard.prototype.toggleBlockDateInput = function(checkbox) {
    const block = checkbox.closest('.audit-block');
    const dateInput = block.querySelector('input[name="blockDate"]');
    
    if (checkbox.checked) {
        dateInput.disabled = false;
        dateInput.style.opacity = '1';
        // Set default date to today
        if (!dateInput.value) {
            dateInput.value = new Date().toISOString().split('T')[0];
        }
    } else {
        dateInput.disabled = true;
        dateInput.style.opacity = '0.5';
        dateInput.value = '';
    }
};

// Audit Plan Header Functions
QHSEDashboard.prototype.addZNNumber = function() {
    const znInput = document.getElementById('znNumberInput');
    const znValue = znInput.value.trim();
    
    if (!znValue) {
        this.showNotification('Bitte eine ZN-Nummer eingeben', 'warning');
        return;
    }
    
    // Check if ZN already exists
    if (this.znNumbers && this.znNumbers.includes(znValue)) {
        this.showNotification('Diese ZN-Nummer ist bereits vorhanden', 'warning');
        return;
    }
    
    // Initialize znNumbers array if not exists
    if (!this.znNumbers) {
        this.znNumbers = [];
    }
    
    // Add to array
    this.znNumbers.push(znValue);
    
    // Clear input
    znInput.value = '';
    
    // Update display
    this.updateZNNumbersDisplay();
    this.showNotification('ZN-Nummer hinzugef√ºgt', 'success');
};

QHSEDashboard.prototype.updateZNNumbersDisplay = function() {
    const znNumbersList = document.getElementById('znNumbersList');
    
    if (!this.znNumbers || this.znNumbers.length === 0) {
        znNumbersList.innerHTML = '<p class="zn-empty">Noch keine ZN-Nummern hinzugef√ºgt</p>';
        return;
    }
    
    znNumbersList.innerHTML = this.znNumbers.map(zn => `
        <div class="zn-number-item">
            <span class="zn-number-text">${zn}</span>
            <button type="button" onclick="removeZNNumber('${zn}')" class="btn-remove-zn" title="ZN-Nummer entfernen">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `).join('');
};

QHSEDashboard.prototype.removeZNNumber = function(znValue) {
    if (confirm(`ZN-Nummer "${znValue}" entfernen?`)) {
        this.znNumbers = this.znNumbers.filter(zn => zn !== znValue);
        this.updateZNNumbersDisplay();
        this.showNotification('ZN-Nummer entfernt', 'success');
    }
};

QHSEDashboard.prototype.triggerLogoUpload = function() {
    document.getElementById('logoUpload').click();
};

QHSEDashboard.prototype.handleLogoUpload = function(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    // Validate file size (2MB)
    if (file.size > 2 * 1024 * 1024) {
        this.showNotification('Logo zu gro√ü. Maximum 2MB erlaubt.', 'error');
        return;
    }
    
    // Validate file type
    if (!file.type.startsWith('image/')) {
        this.showNotification('Nur Bilddateien erlaubt (JPG, PNG, SVG)', 'error');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
        const logoImage = document.getElementById('logoImage');
        const logoPreview = document.getElementById('logoPreview');
        const logoUploadArea = document.querySelector('.logo-upload-area');
        
        logoImage.src = e.target.result;
        logoPreview.style.display = 'block';
        logoUploadArea.style.display = 'none';
        
        // Store logo data for later use in plan generation
        this.logoData = e.target.result;
        this.showNotification('Logo hochgeladen', 'success');
    };
    
    reader.readAsDataURL(file);
};

QHSEDashboard.prototype.removeLogo = function() {
    const logoPreview = document.getElementById('logoPreview');
    const logoUploadArea = document.querySelector('.logo-upload-area');
    const logoUpload = document.getElementById('logoUpload');
    
    logoPreview.style.display = 'none';
    logoUploadArea.style.display = 'flex';
    logoUpload.value = '';
    this.logoData = null;
    
    this.showNotification('Logo entfernt', 'success');
};

// Global functions for onclick handlers
window.addZNNumber = function() {
    window.qhseDashboard.addZNNumber();
};

window.removeZNNumber = function(znValue) {
    window.qhseDashboard.removeZNNumber(znValue);
};

window.handleZNInputKeypress = function(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        window.qhseDashboard.addZNNumber();
    }
};

// Multi-Select Dropdown Functions
window.toggleAuditCriteriaDropdown = function() {
    const dropdown = document.getElementById('auditCriteriaDropdown');
    const display = document.querySelector('.multi-select-display');
    
    if (dropdown.style.display === 'none') {
        dropdown.style.display = 'block';
        display.classList.add('open');
    } else {
        dropdown.style.display = 'none';
        display.classList.remove('open');
    }
};

// Update display when checkboxes change
QHSEDashboard.prototype.updateAuditCriteriaDisplay = function() {
    const checkboxes = document.querySelectorAll('input[name="auditCriteria"]:checked');
    const display = document.getElementById('auditCriteriaDisplay');
    
    if (checkboxes.length === 0) {
        display.textContent = 'Bitte w√§hlen Sie Standards aus...';
        display.style.color = 'var(--text-secondary)';
    } else {
        const selected = Array.from(checkboxes).map(cb => {
            // Show only ISO standard part for display
            return cb.value.split(',')[0];
        });
        display.textContent = selected.join(', ');
        display.style.color = 'var(--text-primary)';
    }
};

QHSEDashboard.prototype.getSelectedAuditCriteria = function() {
    const checkboxes = document.querySelectorAll('input[name="auditCriteria"]:checked');
    return Array.from(checkboxes).map(cb => cb.value);
};

QHSEDashboard.prototype.getExternalAuditors = function() {
    const externalAuditors = [];
    
    // Check externe Auditoren
    const auditor1Checkbox = document.querySelector('input[name="externalAuditor1"]');
    const auditor1Input = document.querySelector('.external-auditor-item:nth-child(1) .external-auditor-input');
    if (auditor1Checkbox && auditor1Checkbox.checked && auditor1Input && auditor1Input.value.trim()) {
        externalAuditors.push(`extern, Firma: ${auditor1Input.value.trim()}`);
    }
    
    const auditor2Checkbox = document.querySelector('input[name="externalAuditor2"]');
    const auditor2Input = document.querySelector('.external-auditor-item:nth-child(2) .external-auditor-input');
    if (auditor2Checkbox && auditor2Checkbox.checked && auditor2Input && auditor2Input.value.trim()) {
        externalAuditors.push(`extern, Firma: ${auditor2Input.value.trim()}`);
    }
    
    return externalAuditors;
};

QHSEDashboard.prototype.getExternalStaff = function() {
    const externalStaff = [];
    
    // Check weitere externe Mitarbeiter
    const staff1Checkbox = document.querySelector('input[name="externalStaff1"]');
    const staff1Input = document.querySelector('.external-staff-item:nth-child(1) .external-staff-input');
    if (staff1Checkbox && staff1Checkbox.checked && staff1Input && staff1Input.value.trim()) {
        externalStaff.push(`extern, Firma: ${staff1Input.value.trim()}`);
    }
    
    const staff2Checkbox = document.querySelector('input[name="externalStaff2"]');
    const staff2Input = document.querySelector('.external-staff-item:nth-child(2) .external-staff-input');
    if (staff2Checkbox && staff2Checkbox.checked && staff2Input && staff2Input.value.trim()) {
        externalStaff.push(`extern, Firma: ${staff2Input.value.trim()}`);
    }
    
    return externalStaff;
};

QHSEDashboard.prototype.setupDropdownOutsideClick = function() {
    document.addEventListener('click', (event) => {
        const dropdown = document.getElementById('auditCriteriaDropdown');
        const container = document.querySelector('.multi-select-container');
        const display = document.querySelector('.multi-select-display');
        
        if (dropdown && !container.contains(event.target)) {
            dropdown.style.display = 'none';
            display.classList.remove('open');
        }
    });
};

window.triggerLogoUpload = function() {
    window.qhseDashboard.triggerLogoUpload();
};

window.updateAuditCriteriaDisplay = function() {
    window.qhseDashboard.updateAuditCriteriaDisplay();
};

window.handleLogoUpload = function(event) {
    window.qhseDashboard.handleLogoUpload(event);
};

window.removeLogo = function() {
    window.qhseDashboard.removeLogo();
};

window.toggleBlockDateDisplay = function(checkbox) {
    window.qhseDashboard.toggleBlockDateDisplay(checkbox);
};

window.toggleBlockDateInput = function(checkbox) {
    window.qhseDashboard.toggleBlockDateInput(checkbox);
};

window.addAuditorRow = function() {
    window.qhseDashboard.addAuditorRow();
};

window.removeAuditorRow = function(rowId) {
    window.qhseDashboard.removeAuditorRow(rowId);
};

window.updateAuditTimeTotals = function() {
    window.qhseDashboard.updateAuditTimeTotals();
};

// Renumber audit blocks after reordering
QHSEDashboard.prototype.renumberAuditBlocks = function() {
    const container = document.getElementById('auditBlocksContainer');
    const blocks = container.querySelectorAll('.audit-block');
    
    blocks.forEach((block, index) => {
        const blockNumber = index + 1;
        const titleElement = block.querySelector('.block-title');
        if (titleElement) {
            // Update the title text
            const titleText = titleElement.textContent || titleElement.innerText;
            const newTitle = titleText.replace(/Audit-Block #\d+/, `Audit-Block #${blockNumber}`);
            titleElement.innerHTML = titleElement.innerHTML.replace(/Audit-Block #\d+/, `Audit-Block #${blockNumber}`);
        }
    });
};

QHSEDashboard.prototype.removeAuditBlock = function(blockId) {
    if (confirm('M√∂chten Sie diesen Audit-Block wirklich l√∂schen?')) {
        const block = document.getElementById(blockId);
        block.remove();
        
        // Show empty state if no blocks left
        const container = document.getElementById('auditBlocksContainer');
        if (container.children.length === 0) {
            this.showAuditBlocksEmptyState();
        }
        
        this.showNotification('Audit-Block gel√∂scht', 'success');
    }
};

QHSEDashboard.prototype.duplicateAuditBlock = function(blockId) {
    const originalBlock = document.getElementById(blockId);
    
    // Collect data from original block
    const inputs = originalBlock.querySelectorAll('input, select, textarea');
    const blockData = {};
    
    inputs.forEach(input => {
        if (input.type === 'select-multiple') {
            blockData[input.name] = Array.from(input.selectedOptions).map(option => option.value);
        } else {
            blockData[input.name] = input.value;
        }
    });
    
    // Create new block
    this.addAuditBlock();
    
    // Fill with copied data
    const newBlock = document.querySelector('.audit-block:last-child');
    const newInputs = newBlock.querySelectorAll('input, select, textarea');
    
    newInputs.forEach(input => {
        if (blockData[input.name] !== undefined) {
            if (input.type === 'select-multiple') {
                Array.from(input.options).forEach(option => {
                    option.selected = blockData[input.name].includes(option.value);
                });
            } else if (input.name !== 'startTime' && input.name !== 'endTime') {
                input.value = blockData[input.name];
            }
        }
    });
    
    // Adjust times for new block
    const startTime = newBlock.querySelector('input[name="startTime"]');
    const endTime = newBlock.querySelector('input[name="endTime"]');
    if (blockData.endTime) {
        startTime.value = blockData.endTime;
        const start = new Date(`2000-01-01T${blockData.endTime}`);
        start.setMinutes(start.getMinutes() + parseInt(blockData.duration || 60));
        endTime.value = start.toTimeString().substr(0, 5);
    }
    
    this.showNotification('Audit-Block dupliziert', 'success');
};

QHSEDashboard.prototype.showAuditBlocksEmptyState = function() {
    const container = document.getElementById('auditBlocksContainer');
    container.innerHTML = `
        <div class="audit-blocks-empty">
            <i class="fas fa-calendar-plus"></i>
            <h4>Keine Audit-Bl√∂cke definiert</h4>
            <p>Klicken Sie auf "Block hinzuf√ºgen" um Ihren ersten Audit-Block zu erstellen.</p>
        </div>
    `;
};

QHSEDashboard.prototype.clearAuditPlan = function() {
    if (confirm('M√∂chten Sie wirklich alle Eingaben zur√ºcksetzen?')) {
        // Clear configuration
        document.getElementById('auditTitle').value = '';
        document.getElementById('auditDateType').value = 'single';
        document.getElementById('auditDate').value = new Date().toISOString().split('T')[0];
        document.getElementById('auditStartDate').value = new Date().toISOString().split('T')[0];
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        document.getElementById('auditEndDate').value = tomorrow.toISOString().split('T')[0];
        document.getElementById('auditLocation').value = '';
        document.getElementById('auditType').value = '';
        document.getElementById('leadAuditor').value = '';
        document.getElementById('auditTeam').value = '';
        
        // Reset date input visibility
        this.toggleAuditDateInputs();
        
        // Clear blocks
        const container = document.getElementById('auditBlocksContainer');
        container.innerHTML = '';
        this.showAuditBlocksEmptyState();
        
        // Hide generated plan
        document.getElementById('generatedPlanSection').style.display = 'none';
        
        this.auditBlockCounter = 0;
        this.showNotification('Auditplan zur√ºckgesetzt', 'success');
    }
};

QHSEDashboard.prototype.toggleAuditDateInputs = function() {
    const dateType = document.getElementById('auditDateType').value;
    const singleDateGroup = document.getElementById('singleDateGroup');
    const startDateGroup = document.getElementById('startDateGroup');
    const endDateGroup = document.getElementById('endDateGroup');
    
    if (dateType === 'single') {
        singleDateGroup.style.display = 'block';
        startDateGroup.style.display = 'none';
        endDateGroup.style.display = 'none';
    } else {
        singleDateGroup.style.display = 'none';
        startDateGroup.style.display = 'block';
        endDateGroup.style.display = 'block';
    }
};

QHSEDashboard.prototype.updateDepartmentField = function(selectElement) {
    const container = selectElement.closest('.department-input-container');
    const textInput = container.querySelector('input[name="department"]');
    const selectedValue = selectElement.value;
    
    if (selectedValue === "Eigene Eingabe") {
        // Focus on text input for custom entry
        textInput.value = '';
        textInput.focus();
        textInput.placeholder = "Eigene Eingabe...";
    } else if (selectedValue) {
        // Set selected value to text input
        textInput.value = selectedValue;
        textInput.placeholder = "Oder eigene Eingabe...";
    } else {
        // Clear text input if no selection
        textInput.value = '';
        textInput.placeholder = "Oder eigene Eingabe...";
    }
    
    // Update topics dropdown based on department selection
    this.updateTopicsDropdown(selectElement, selectedValue);
};

QHSEDashboard.prototype.updateTopicsDropdown = function(departmentSelect, departmentValue) {
    // Find topics dropdown in the same audit block
    const auditBlock = departmentSelect.closest('.audit-block');
    const topicsSelect = auditBlock ? auditBlock.querySelector('select[name="topicsSelect"]') : null;
    
    if (!topicsSelect) return;
    
    // Clear existing options except the first one
    topicsSelect.innerHTML = '<option value="">Themen ausw√§hlen...</option>';
    
    // Define topics based on department
    const topicsMap = {
        'Er√∂ffnungsgespr√§ch': [
            'Begr√º√üung und Vorstellung',
            'Audit-Ablauf und Zeitplan',
            'Organisatorische Hinweise',
            'Audit-Kriterien und -Umfang',
            'Vertraulichkeitsvereinbarung'
        ],
        'Mittagspause': ['Pause', 'Networking', 'Informeller Austausch'],
        'Kaffeepause': ['Pause', 'Kurzer Austausch', 'Erholung'],
        'Standortwechsel': ['Transport', 'Ortsbesichtigung', 'Sicherheitsunterweisung'],
        'Informationsaustausch': [
            'Zwischenbesprechung',
            'Abstimmung im Audit-Team',
            'Kl√§rung offener Fragen',
            'Dokumentenauswertung'
        ],
        'Auditorenzeit': [
            'Bewertung der Erkenntnisse',
            'Dokumentation der Feststellungen',
            'Vorbereitung Abschlussgespr√§ch',
            'Team-Abstimmung'
        ],
        'Abschlussgespr√§ch': [
            'Pr√§sentation der Audit-Ergebnisse',
            'Diskussion der Feststellungen',
            'Ma√ünahmenplanung',
            'Zertifizierungsempfehlung',
            'Verabschiedung'
        ],
        'Gesch√§ftsf√ºhrung': [
            'Managementbewertung (9.3)',
            'Unternehmenspolitik und -ziele',
            'Ressourcenbereitstellung',
            'F√ºhrung und Verpflichtung (5.1)',
            'Strategische Ausrichtung'
        ],
        'Qualit√§tsmanagement': [
            'QM-Handbuch und Dokumentation (7.5)',
            'Prozessmanagement (4.4)',
            'Qualit√§tsziele und -planung (6.2)',
            'Interne Audits (9.2)',
            'Managementbewertung (9.3)',
            'Korrektur- und Vorbeugungsma√ünahmen (10.2)',
            'Kundenzufriedenheit (9.1.2)'
        ],
        'Produktion': [
            'Produktionsplanung und -steuerung (8.1)',
            'Produktrealisierung (8.5)',
            'Produktfreigabe (8.6)',
            'Nichtkonformit√§t (10.2)',
            'Pr√ºfmittel√ºberwachung (7.1.5)',
            'Arbeitsanweisungen (7.5)',
            'Produktidentifikation und R√ºckverfolgbarkeit (8.5.2)'
        ],
        'Vertrieb': [
            'Kundenanforderungen (8.2.2)',
            'Angebotserstellung (8.2.3)',
            'Vertragspr√ºfung (8.2.3)',
            'Kundenkommunikation (8.2.1)',
            'Kundenzufriedenheit (9.1.2)',
            'Reklamationsbearbeitung (8.2.1)'
        ],
        'Einkauf': [
            'Lieferantenbewertung (8.4.1)',
            'Beschaffungsprozess (8.4)',
            'Eingangspr√ºfung (8.4.3)',
            'Lieferantenaudits (8.4.2)',
            'Bestellabwicklung (8.4.2)'
        ],
        'Personalwesen': [
            'Kompetenz und Bewusstsein (7.2)',
            'Schulungsmanagement (7.2)',
            'Personalplanung (7.1.2)',
            'Arbeitspl√§tze und Arbeitsumgebung (7.1.4)',
            'Mitarbeiterzufriedenheit'
        ],
        'IT': [
            'Dokumentenlenkung (7.5.3)',
            'Datensicherheit',
            'IT-Infrastruktur (7.1.3)',
            'Software-Validierung',
            'Backup-Strategien'
        ],
        'Entwicklung': [
            'Designkontrolle (8.3)',
            'Produktentwicklung (8.3)',
            'Designvalidierung (8.3.5)',
            '√Ñnderungsmanagement (8.3.6)',
            'Konstruktionsunterlagen (7.5)'
        ],
        'Wartung': [
            'Instandhaltungsplanung (7.1.3)',
            'Pr√§ventive Wartung',
            'Kalibrierung von Pr√ºfmitteln (7.1.5)',
            'St√∂rungsbearbeitung',
            'Wartungsdokumentation'
        ],
        'Arbeitssicherheit': [
            'Gef√§hrdungsbeurteilung',
            'Arbeitsschutzma√ünahmen',
            'Sicherheitsunterweisungen',
            'Unfallberichterstattung',
            'PSA-Management'
        ],
        'Umweltmanagement': [
            'Umweltaspekte und -auswirkungen',
            'Umweltziele und -programme',
            'Abfallmanagement',
            'Energiemanagement',
            'Emissions√ºberwachung'
        ]
    };
    
    // Add relevant topics
    const relevantTopics = topicsMap[departmentValue] || [];
    relevantTopics.forEach(topic => {
        const option = document.createElement('option');
        option.value = topic;
        option.textContent = topic;
        topicsSelect.appendChild(option);
    });
    
    // Add "Eigene Eingabe" option
    if (relevantTopics.length > 0) {
        const customOption = document.createElement('option');
        customOption.value = 'Eigene Eingabe';
        customOption.textContent = '‚Üí Eigene Eingabe';
        topicsSelect.appendChild(customOption);
    }
};

QHSEDashboard.prototype.updateTopicsField = function(selectElement) {
    const container = selectElement.closest('.topics-input-container');
    const textArea = container.querySelector('textarea[name="topics"]');
    const selectedValue = selectElement.value;
    
    if (selectedValue === "Eigene Eingabe") {
        // Focus on textarea for custom entry
        textArea.value = '';
        textArea.focus();
        textArea.placeholder = "Eigene Themen/Prozesse eingeben...";
    } else if (selectedValue) {
        // Add selected value to textarea (append if there's already content)
        const currentValue = textArea.value.trim();
        if (currentValue) {
            textArea.value = currentValue + '\n‚Ä¢ ' + selectedValue;
        } else {
            textArea.value = '‚Ä¢ ' + selectedValue;
        }
        textArea.placeholder = "Weitere Themen hinzuf√ºgen...";
    }
};

QHSEDashboard.prototype.calculateTimeDifference = function(startTime, endTime) {
    const start = new Date(`2000-01-01T${startTime}`);
    const end = new Date(`2000-01-01T${endTime}`);
    const diffMs = end - start;
    return Math.max(0, Math.round(diffMs / (1000 * 60))); // Return minutes, minimum 0
};

QHSEDashboard.prototype.generateAuditPlan = function() {
    // Set default values for removed fields
    const title = 'Auditplan';
    const date = new Date().toISOString().split('T')[0];
    const dateDisplay = new Date(date).toLocaleDateString('de-DE');
    const dateType = 'single';
    
    const location = document.getElementById('auditLocation')?.value || 'Nicht angegeben';
    const type = document.getElementById('auditType')?.value || 'IA';
    const leadAuditor = document.getElementById('leadAuditor')?.value || 'Nicht angegeben';
    
    // Collect audit standards (optional)
    const auditStandards = [];
    document.querySelectorAll('input[name="auditStandards"]:checked').forEach(checkbox => {
        auditStandards.push(checkbox.value);
    });
    
    // If no standards selected, add default message
    if (auditStandards.length === 0) {
        auditStandards.push('Noch nicht festgelegt');
    }
    
    // Collect audit blocks (optional)
    const blocks = [];
    const blockElements = document.querySelectorAll('.audit-block');
    
    // Collect block data (no validation - all optional)
    for (let block of blockElements) {
        const blockData = {};
        const inputs = block.querySelectorAll('input, select, textarea');
        
        inputs.forEach(input => {
            if (input.type === 'select-multiple') {
                const selected = Array.from(input.selectedOptions).map(option => option.value);
                blockData[input.name] = selected.length > 0 ? selected : ['Nicht angegeben'];
            } else if (input.type !== 'checkbox') { // Skip checkboxes in general collection
                blockData[input.name] = input.value || 'Nicht angegeben';
            }
        });
        
        // Handle date display options
        const showBlockDateCheckbox = block.querySelector('input[name="showBlockDate"]');
        const useDifferentDateCheckbox = block.querySelector('input[name="useDifferentDate"]');
        const blockDateInput = block.querySelector('input[name="blockDate"]');
        
        // Determine if date should be shown in generated plan
        blockData.showDate = showBlockDateCheckbox ? showBlockDateCheckbox.checked : true;
        
        // Determine which date to use
        if (useDifferentDateCheckbox && useDifferentDateCheckbox.checked && blockDateInput && blockDateInput.value) {
            blockData.blockDate = blockDateInput.value;
        } else {
            blockData.blockDate = ''; // Use main audit date
        }
        
        blocks.push(blockData);
    }
    
    // Sort blocks by start time (only if blocks exist and have valid start times)
    if (blocks.length > 0) {
        blocks.sort((a, b) => {
            const timeA = a.startTime && a.startTime !== 'Nicht angegeben' ? a.startTime : '08:00';
            const timeB = b.startTime && b.startTime !== 'Nicht angegeben' ? b.startTime : '08:00';
            return new Date(`2000-01-01T${timeA}`) - new Date(`2000-01-01T${timeB}`);
        });
    }
    
    // Use stored ZN numbers
    const selectedZNs = this.znNumbers || [];
    
    // Generate plan with all configuration data
    const planData = {
        id: 'plan_' + Date.now(),
        title,
        date,
        dateDisplay,
        dateType,
        startDate: date,
        znNumbers: selectedZNs,
        logoData: this.logoData || null,
        endDate: date,
        location,
        type,
        leadAuditor,
        // Basic data
        client: document.getElementById('auditClient')?.value || '',
        scope: document.getElementById('auditScope')?.value || '',
        auditCriteria: this.getSelectedAuditCriteria(),
        // Audit details
        clientContact: document.getElementById('clientContact')?.value || '',
        language: document.getElementById('auditLanguage')?.value || '',
        standards: auditStandards,
        objective: document.getElementById('auditObjective')?.value || '',
        // Team
        auditors: document.getElementById('auditors')?.value || '',
        trainees: document.getElementById('trainees')?.value || '',
        experts: document.getElementById('experts')?.value || '',
        externalAuditors: this.getExternalAuditors(),
        externalStaff: this.getExternalStaff(),
        // Organization
        shiftSystem: document.getElementById('shiftSystem')?.value || '',
        shiftChanges: document.getElementById('shiftChanges')?.value || '',
        auditMethod: document.getElementById('auditMethod')?.value || '',
        ictTechnology: document.getElementById('ictTechnology')?.value || '',
        ictTestDate: document.getElementById('ictTestDate')?.value || '',
        ictNoChanges: document.getElementById('ictNoChanges')?.checked || false,
        remarks: document.getElementById('auditRemarks')?.value || '',
        // Default time configuration (Zeitkonfiguration removed from UI)
        startTime: '08:00',
        endTime: '16:00', 
        openingDuration: 30,
        closingDuration: 60,
        auditorTimeDuration: 45,
        breakType: 'standard',
        blocks,
        auditTimes: this.collectAuditTimesData(),
        createdAt: new Date().toISOString()
    };
    
    this.currentPlanData = planData;
    this.renderAuditPlan(planData);
    this.showNotification('Auditplan erfolgreich generiert!', 'success');
};

QHSEDashboard.prototype.renderAuditPlan = function(planData) {
    const planItems = [];
    
    // No automatic sessions - only user-defined audit blocks
    
    // Add only user-defined audit blocks (no automatic sessions)
    if (planData.blocks && planData.blocks.length > 0) {
        planData.blocks.forEach(block => {
            // Add audit block with calculated duration
            const startTime = block.startTime || '09:00';
            const endTime = block.endTime || '10:00';
            const duration = this.calculateTimeDifference(startTime, endTime);
            
            // Determine block type based on department name
            let blockType = 'audit';
            const dept = (block.department || '').toLowerCase();
            if (dept.includes('er√∂ffnung')) blockType = 'opening';
            else if (dept.includes('pause') || dept.includes('mittagspause') || dept.includes('kaffeepause')) blockType = 'break';
            else if (dept.includes('auditorenzeit')) blockType = 'auditor-time';
            else if (dept.includes('abschluss')) blockType = 'closing';
            else if (dept.includes('standortwechsel')) blockType = 'travel';
            
            planItems.push({
                type: blockType,
                time: startTime,
                endTime: endTime,
                duration: duration,
                department: block.department || 'Nicht angegeben',
                auditors: block.auditors || 'Nicht angegeben',
                contact: block.contact || 'Nicht angegeben',
                topics: block.topics || 'Noch zu definieren',
                standards: Array.isArray(block.standards) ? block.standards.join(', ') : (block.standards || 'Noch nicht festgelegt'),
                chapters: block.chapters || '-'
            });
        });
    } else {
        // Show message if no blocks are configured
        planItems.push({
            type: 'info',
            time: '-',
            endTime: '-',
            duration: 0,
            department: 'Keine Audit-Bl√∂cke konfiguriert',
            auditors: '-',
            contact: '-',
            topics: 'Bitte f√ºgen Sie Audit-Bl√∂cke hinzu, um einen detaillierten Plan zu erstellen.',
            standards: '-',
            chapters: '-'
        });
    }
    
    // Generate HTML table with comprehensive T√úV-compliant header
    let tableHtml = `
        <div class="plan-info">
            <!-- Grunddaten -->
            <div class="config-section">
                <div class="info-grid">
                    <p><strong>Auftraggeber:</strong> ${planData.client || ''}</p>
                    <div class="approval-notice-display">
                        <i class="fas fa-info-circle"></i>
                        Sofern vom Auftraggeber keine √Ñnderungen des Auditplans bis 1 Woche vor dem Audittermin eingehen, so gilt dieser als genehmigt.
                    </div>
                    <p><strong>Standort(e) / Produktionsst√§tte(n) / tempor√§re Standorte / andere Orte der Leistungserbringung:</strong> ${planData.location || ''}</p>
                    <p><strong>Geltungsbereich:</strong> ${planData.scope || ''}</p>
                    <p><strong>Normgrundlage, Auditkriterien:</strong></p>
                    ${planData.auditCriteria && planData.auditCriteria.length > 0 ? 
                        `<div class="criteria-display">${planData.auditCriteria.map(criteria => `‚Ä¢ ${criteria}`).join('<br>')}</div>` : 
                        '<div class="criteria-display">Bitte Standards ausw√§hlen</div>'
                    }
                </div>
            </div>

            <!-- Audit-Details -->
            <div class="config-section">
                <div class="info-grid">
                    <p><strong>Auditart:</strong> ${planData.type || ''}</p>
                    <p><strong>Beauftragter des Kunden:</strong> ${planData.clientContact || ''}</p>
                    <p><strong>Auditziel:</strong></p>
                    <div class="audit-objective">${planData.objective ? planData.objective.replace(/\n/g, '<br>') : '√úberpr√ºfung des Managementsystems auf Konformit√§t mit den Auditkriterien, Stichprobenverfahren mit dem Ziel: Erstzertifizierung - Stufe 1 und Aufrechterhaltung der Zertifizierung<br><br>Feststellung der F√§higkeit des Managementsystems zur Sicherstellung der Erf√ºllung anzuwendender gesetzlicher, beh√∂rdlicher und vertraglicher Anforderungen<br><br>Feststellung der Wirksamkeit des Managementsystems in Bezug auf eine begr√ºndete Erwartung zur Erreichung der festgelegten Ziele der Organisation'}</div>
                    <p><strong>Auditsprache(n):</strong> ${planData.language || ''}</p>
                </div>
            </div>

            <!-- Audit-Team -->
            <div class="config-section">
                <div class="info-grid">
                    <p><strong>Auditleiter:</strong> ${planData.leadAuditor || 'Klicken oder tippen Sie hier, um Text einzugeben.'}</p>
                    <p><strong>Auditor(en):</strong> ${planData.auditors || 'hier k√∂nnen mehrere Auditoren stehen'}</p>
                    <p><strong>Externe Auditoren:</strong></p>
                    <div class="external-team-display">
                        ${planData.externalAuditors && planData.externalAuditors.length > 0 ? 
                            planData.externalAuditors.map(auditor => `‚Ä¢ ${auditor}`).join('<br>') :
                            '‚òí extern, Firma:<br>‚òê extern, Firma:'
                        }
                    </div>
                    <p><strong>Trainee(s):</strong> ${planData.trainees || ''}</p>
                    <p><strong>Expert(en):</strong> ${planData.experts || ''}</p>
                    <p><strong>Weitere externe Mitarbeiter:</strong></p>
                    <div class="external-team-display">
                        ${planData.externalStaff && planData.externalStaff.length > 0 ? 
                            planData.externalStaff.map(staff => `‚Ä¢ ${staff}`).join('<br>') :
                            '‚òê extern, Firma:<br>‚òê extern, Firma:'
                        }
                    </div>
                </div>
            </div>

            <!-- Betriebsorganisation -->
            <div class="config-section">
                <div class="info-grid">
                    <p><strong>Schichtsystem</strong></p>
                    <div class="checkbox-display">
                        ${planData.shiftSystems && planData.shiftSystems.length > 0 ? 
                            planData.shiftSystems.map(system => `‚òë ${system}`).join('<br>') :
                            '‚òê 1-Schicht<br>‚òê 2-Schicht<br>‚òê 3-Schicht<br>‚òê'
                        }
                    </div>
                    <p><strong>Schicht√ºbergaben</strong> ${planData.shiftChanges || ''}</p>
                    <p><strong>Bemerkung</strong> ${planData.remarks || ''}</p>
                    <p><strong>Auditmethode</strong></p>
                    <div class="checkbox-display">
                        ${planData.auditMethods && planData.auditMethods.length > 0 ? 
                            planData.auditMethods.map(method => `‚òë ${method}`).join('<br>') :
                            '‚òê vor Ort<br>‚òê vor Ort & remote<br>‚òê 100% remote'
                        }
                    </div>
                    <p><strong>IKT Angaben</strong> Eingesetzte Technik ${planData.ictTechnology || ''}</p>
                    <p><strong>IKT Test</strong> Positiv getestet am ${planData.ictTestDate || ''}</p>
                    <div class="checkbox-display">
                        ${planData.ictNoChanges ? '‚òë' : '‚òê'} Test erfolgte im letzten Audit, es gab keine √Ñnderungen
                    </div>
                    <p><strong>Gastgeber (host)</strong> ${planData.hostContact || ''}</p>
                </div>
            </div>

            <!-- Audit Times Overview -->
            ${planData.auditTimes && this.hasAuditTimesData(planData.auditTimes) ? this.renderAuditTimesOverview(planData.auditTimes) : ''}

            <!-- Customer & Organization Data -->
            ${planData.customerCompany ? `
            <div class="config-section">
                <h5><i class="fas fa-building"></i> Kunde & Organisation</h5>
                <div class="info-grid">
                    <p><strong>Unternehmen:</strong> ${planData.customerCompany}</p>
                    ${planData.customerRegistration ? `<p><strong>Handelsregisternummer:</strong> ${planData.customerRegistration}</p>` : ''}
                    ${planData.customerCountry ? `<p><strong>Land:</strong> ${planData.customerCountry}</p>` : ''}
                    ${planData.customerVatId ? `<p><strong>USt-IdNr.:</strong> ${planData.customerVatId}</p>` : ''}
                    ${planData.customerStreet || planData.customerZip || planData.customerCity ? `
                        <p><strong>Adresse:</strong> 
                        ${[planData.customerStreet, planData.customerZip + ' ' + planData.customerCity].filter(Boolean).join(', ')}</p>
                    ` : ''}
                    ${planData.employeeCount ? `<p><strong>Mitarbeiteranzahl:</strong> ${planData.employeeCount}</p>` : ''}
                    ${planData.annualRevenue ? `<p><strong>Jahresumsatz:</strong> ${planData.annualRevenue}</p>` : ''}
                </div>
            </div>
            ` : ''}

            <!-- Audit Scope & Requirements -->
            ${planData.scopeDescription || planData.processScope || planData.siteScope ? `
            <div class="config-section">
                <h5><i class="fas fa-crosshairs"></i> Audit-Geltungsbereich</h5>
                <div class="info-grid">
                    ${planData.scopeDescription ? `<p><strong>Geltungsbereich:</strong> ${planData.scopeDescription}</p>` : ''}
                    ${planData.processScope && planData.processScope.length > 0 ? `<p><strong>Prozess-Geltungsbereich:</strong> ${planData.processScope.join(', ')}</p>` : ''}
                    ${planData.siteScope ? `<p><strong>Standort-Geltungsbereich:</strong> ${planData.siteScope}</p>` : ''}
                    ${planData.exclusions ? `<p><strong>Ausschl√ºsse (4.3):</strong> ${planData.exclusions}</p>` : ''}
                    ${planData.standards && planData.standards.length > 0 ? `<p><strong>Normgrundlage:</strong> ${planData.standards.join(', ')}</p>` : ''}
                </div>
            </div>
            ` : ''}

            <!-- T√úV-Compliance & Risk Assessment -->
            ${planData.riskCategory || planData.complianceLevel || planData.regulatoryRequirements ? `
            <div class="config-section">
                <h5><i class="fas fa-shield-alt"></i> T√úV-Compliance & Risikobewertung</h5>
                <div class="info-grid">
                    ${planData.riskCategory ? `<p><strong>Risikokategorie:</strong> ${planData.riskCategory}</p>` : ''}
                    ${planData.complianceLevel ? `<p><strong>Compliance-Niveau:</strong> ${planData.complianceLevel}</p>` : ''}
                    ${planData.regulatoryRequirements && planData.regulatoryRequirements.length > 0 ? `<p><strong>Regulatorische Anforderungen:</strong> ${planData.regulatoryRequirements.join(', ')}</p>` : ''}
                    ${planData.specialRequirements ? `<p><strong>Besondere Anforderungen:</strong> ${planData.specialRequirements}</p>` : ''}
                </div>
            </div>
            ` : ''}

            <!-- Plan Header with Logo and ZN -->
            <div class="plan-header-display">
                ${planData.logoData ? `<div class="logo-display"><img src="${planData.logoData}" alt="Logo" class="plan-logo"></div>` : ''}
                <div class="plan-title-display">
                    <h2>Auditplan</h2>
                    ${planData.znNumbers && planData.znNumbers.length > 0 ? `<p class="zn-info">ZN: ${planData.znNumbers.join(', ')}</p>` : ''}
                </div>
            </div>
        </div>
        
        <table>
            <thead>
                <tr>
                    <th>Datum / Uhrzeit</th>
                    <th>Organisationseinheit und Prozesse</th>
                    <th>Auditor / K√ºrzel<br>remote=*</th>
                    <th>Gespr√§chspartner</th>
                    <th>Normkapitel</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    planItems.forEach(item => {
        // Use endTime if available, otherwise calculate from duration
        const endTimeFormatted = item.endTime ? item.endTime : (() => {
            const calculatedEnd = new Date(`2000-01-01T${item.time}`);
            calculatedEnd.setMinutes(calculatedEnd.getMinutes() + item.duration);
            return this.formatTime(calculatedEnd);
        })();
        
        // Combine department and topics for "Organisationseinheit und Prozesse"
        const orgUnitAndProcesses = [
            item.department ? `<span class="plan-type-indicator plan-type-${item.type}">${item.type}</span> ${item.department}` : '',
            item.topics ? `Prozesse: ${item.topics}` : ''
        ].filter(Boolean).join('<br>');
        
        // Add date to time display based on block settings
        let dateTime;
        if (item.showDate !== false) { // Show date unless explicitly set to false
            const displayDate = item.blockDate || planData.auditDate;
            dateTime = displayDate ? 
                `${displayDate}<br>${item.time} - ${endTimeFormatted}` : 
                `${item.time} - ${endTimeFormatted}`;
        } else {
            // Only show time, no date
            dateTime = `${item.time} - ${endTimeFormatted}`;
        }
        
        // Combine standards and chapters for "Normkapitel"
        const normChapters = [
            item.standards ? `Norm(en): ${item.standards}` : '',
            item.chapters ? `Kapitel: ${item.chapters}` : ''
        ].filter(Boolean).join('<br>');

        tableHtml += `
            <tr>
                <td class="datetime-cell">${dateTime}</td>
                <td class="org-processes-cell">${orgUnitAndProcesses || '-'}</td>
                <td class="auditors-cell">${item.auditors || '-'}</td>
                <td class="contact-cell">${item.contact || '-'}</td>
                <td class="norm-chapters-cell">${normChapters || '-'}</td>
            </tr>
        `;
    });
    
    tableHtml += `
            </tbody>
        </table>
    `;
    
    // Add final audit plan notes and distribution list
    tableHtml += this.renderAuditPlanFooter(planData);
    
    // Clear any cached content and render fresh
    const auditPlanContainer = document.getElementById('auditPlanTable');
    if (!auditPlanContainer) {
        console.error('‚ùå auditPlanTable Container nicht gefunden');
        return;
    }
    
    auditPlanContainer.innerHTML = ''; // Clear first
    auditPlanContainer.innerHTML = tableHtml;
    document.getElementById('generatedPlanSection').style.display = 'block';
    
    // Scroll to generated plan
    document.getElementById('generatedPlanSection').scrollIntoView({ behavior: 'smooth' });
};

QHSEDashboard.prototype.getBreakSchedule = function(breakType, startTime, endTime) {
    const breaks = [];
    const start = new Date(startTime);
    const end = new Date(`2000-01-01T${endTime}`);
    
    switch (breakType) {
        case 'standard':
            // Coffee break at 10:00
            if (start.getHours() < 10) {
                breaks.push({
                    time: new Date('2000-01-01T10:00'),
                    duration: 15,
                    name: 'Kaffeepause'
                });
            }
            // Lunch break at 12:00
            breaks.push({
                time: new Date('2000-01-01T12:00'),
                duration: 60,
                name: 'Mittagspause'
            });
            break;
            
        case 'extended':
            // First coffee break at 09:30
            breaks.push({
                time: new Date('2000-01-01T09:30'),
                duration: 15,
                name: 'Kaffeepause'
            });
            // Lunch break at 12:00
            breaks.push({
                time: new Date('2000-01-01T12:00'),
                duration: 60,
                name: 'Mittagspause'
            });
            // Afternoon coffee break at 14:30
            breaks.push({
                time: new Date('2000-01-01T14:30'),
                duration: 15,
                name: 'Kaffeepause'
            });
            break;
            
        case 'minimal':
            // Only lunch break at 12:00
            breaks.push({
                time: new Date('2000-01-01T12:00'),
                duration: 45,
                name: 'Mittagspause'
            });
            break;
            
        case 'custom':
            // User would define custom breaks - for now just lunch
            breaks.push({
                time: new Date('2000-01-01T12:00'),
                duration: 60,
                name: 'Mittagspause'
            });
            break;
    }
    
    // Filter breaks that fit within the time window
    return breaks.filter(breakItem => {
        return breakItem.time >= start && breakItem.time < end;
    });
};

QHSEDashboard.prototype.formatTime = function(date) {
    return date.toTimeString().substr(0, 5);
};

QHSEDashboard.prototype.saveAuditPlan = function() {
    if (!this.currentPlanData) {
        this.showNotification('Kein Auditplan zum Speichern vorhanden.', 'error');
        return;
    }
    
    // Add to saved plans
    this.auditPlans.push(this.currentPlanData);
    
    if (this.saveAuditPlansToStorage()) {
        this.showNotification('Auditplan erfolgreich gespeichert!', 'success');
    } else {
        this.showNotification('Fehler beim Speichern des Auditplans.', 'error');
    }
};

QHSEDashboard.prototype.exportAuditPlan = function() {
    const table = document.querySelector('#auditPlanTable table');
    if (!table) {
        this.showNotification('Kein Auditplan zum Exportieren vorhanden.', 'error');
        return;
    }
    
    // Create CSV content
    const rows = [];
    const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent.trim());
    rows.push(headers.join(';'));
    
    const dataRows = table.querySelectorAll('tbody tr');
    dataRows.forEach(row => {
        const cells = Array.from(row.querySelectorAll('td')).map(td => {
            return td.textContent.trim().replace(/;/g, ',');
        });
        rows.push(cells.join(';'));
    });
    
    const csvContent = rows.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    const title = document.getElementById('auditTitle').value || 'Auditplan';
    const date = document.getElementById('auditDate').value || new Date().toISOString().split('T')[0];
    const filename = `${title}_${date}.csv`;
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showNotification('Auditplan als CSV exportiert!', 'success');
};

QHSEDashboard.prototype.exportAuditPlanWord = function() {
    if (!this.currentPlanData) {
        this.showNotification('Kein Auditplan zum Exportieren vorhanden.', 'error');
        return;
    }
    
    const title = this.currentPlanData.title || 'Auditplan';
    const date = this.currentPlanData.date || new Date().toISOString().split('T')[0];
    
    // Get table HTML
    const tableHtml = document.getElementById('auditPlanTable').innerHTML;
    
    // Create Word document content
    const wordContent = `
        <html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'>
        <head>
            <meta charset='utf-8'>
            <title>${title}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .plan-info { margin-bottom: 20px; page-break-inside: avoid; }
                .plan-info h4 { margin-bottom: 10px; font-size: 18px; }
                .plan-info p { margin: 5px 0; }
                table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                th, td { border: 1px solid #333; padding: 8px; text-align: left; vertical-align: top; }
                th { background-color: #f5f5f5; font-weight: bold; }
                .plan-type-indicator { 
                    display: inline-block; 
                    padding: 2px 6px; 
                    border-radius: 8px; 
                    font-size: 0.8em; 
                    font-weight: bold; 
                    text-transform: uppercase; 
                    margin-right: 8px;
                }
                .plan-type-opening { background: #dcfce7; color: #166534; }
                .plan-type-audit { background: #dbeafe; color: #1e40af; }
                .plan-type-break { background: #fef3c7; color: #92400e; }
                .plan-type-auditor-time { background: #f3e8ff; color: #7c3aed; }
                .plan-type-closing { background: #fee2e2; color: #dc2626; }
                @page { margin: 2cm; }
            </style>
        </head>
        <body>
            ${tableHtml}
        </body>
        </html>
    `;
    
    const blob = new Blob([wordContent], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
    const url = URL.createObjectURL(blob);
    
    const filename = `${title}_${date}.doc`;
    
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    this.showNotification('Auditplan als Word-Dokument exportiert!', 'success');
};

QHSEDashboard.prototype.exportAuditPlanPDF = function() {
    if (!this.currentPlanData) {
        this.showNotification('Kein Auditplan zum Exportieren vorhanden.', 'error');
        return;
    }
    
    const title = this.currentPlanData.title || 'Auditplan';
    const date = this.currentPlanData.date || new Date().toISOString().split('T')[0];
    
    // Create print window for PDF generation
    const printWindow = window.open('', '_blank');
    const tableHtml = document.getElementById('auditPlanTable').innerHTML;
    
    printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>${title}</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    margin: 0; 
                    padding: 20px; 
                    font-size: 12px;
                }
                .header-info { 
                    margin-bottom: 20px; 
                    border-bottom: 2px solid #333; 
                    padding-bottom: 15px;
                }
                .plan-header-export {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    gap: 20px;
                }
                .logo-container {
                    flex: 0 0 auto;
                }
                .export-logo {
                    max-height: 60px;
                    max-width: 120px;
                    object-fit: contain;
                }
                .title-container {
                    flex: 1;
                    text-align: center;
                }
                .title-container h2 { 
                    margin: 0; 
                    font-size: 24px; 
                    color: #333;
                    font-weight: bold;
                }
                .zn-display {
                    margin: 5px 0 0 0;
                    font-size: 14px;
                    color: #666;
                    font-weight: 500;
                }
                .plan-info { 
                    margin-bottom: 20px; 
                    page-break-inside: avoid;
                }
                .plan-info h4 { 
                    margin-bottom: 10px; 
                    font-size: 16px;
                    color: #333;
                }
                .plan-info p { 
                    margin: 5px 0; 
                    line-height: 1.4;
                }
                table { 
                    width: 100%; 
                    border-collapse: collapse; 
                    margin-top: 15px;
                    page-break-inside: auto;
                }
                th, td { 
                    border: 1px solid #333; 
                    padding: 6px; 
                    text-align: left; 
                    vertical-align: top;
                    font-size: 11px;
                    line-height: 1.3;
                }
                th { 
                    background-color: #f5f5f5; 
                    font-weight: bold;
                    font-size: 12px;
                }
                .plan-type-indicator { 
                    display: inline-block; 
                    padding: 1px 4px; 
                    border-radius: 6px; 
                    font-size: 0.7em; 
                    font-weight: bold; 
                    text-transform: uppercase; 
                    margin-right: 6px;
                }
                .plan-type-opening { background: #dcfce7; color: #166534; }
                .plan-type-audit { background: #dbeafe; color: #1e40af; }
                .plan-type-break { background: #fef3c7; color: #92400e; }
                .plan-type-auditor-time { background: #f3e8ff; color: #7c3aed; }
                .plan-type-closing { background: #fee2e2; color: #dc2626; }
                @media print {
                    body { margin: 0; }
                    .plan-info { page-break-inside: avoid; }
                    table { page-break-inside: auto; }
                    tr { page-break-inside: avoid; page-break-after: auto; }
                }
                .header-info {
                    text-align: center;
                    margin-bottom: 30px;
                    border-bottom: 2px solid #333;
                    padding-bottom: 15px;
                }
                .header-info h2 {
                    margin: 0 0 10px 0;
                    color: #333;
                }
                .footer {
                    margin-top: 30px;
                    padding-top: 15px;
                    border-top: 1px solid #ccc;
                    font-size: 10px;
                    color: #666;
                    text-align: center;
                }
            </style>
        </head>
        <body>
            <div class="header-info">
                <div class="plan-header-export">
                    ${this.currentPlanData.logoData ? `<div class="logo-container"><img src="${this.currentPlanData.logoData}" alt="Logo" class="export-logo"></div>` : ''}
                    <div class="title-container">
                        <h2>Auditplan</h2>
                        ${this.currentPlanData.znNumbers && this.currentPlanData.znNumbers.length > 0 ? `<p class="zn-display">ZN: ${this.currentPlanData.znNumbers.join(', ')}</p>` : ''}
                    </div>
                </div>
            </div>
            ${tableHtml}
        </body>
        </html>
    `);
    
    printWindow.document.close();
    
    // Wait for content to load, then trigger print dialog
    setTimeout(() => {
        printWindow.print();
        // Note: User needs to select "Save as PDF" in the print dialog
    }, 500);
    
    this.showNotification('PDF-Export gestartet! W√§hlen Sie "Als PDF speichern" im Druckdialog.', 'info');
};

QHSEDashboard.prototype.printAuditPlan = function() {
    const planContent = document.getElementById('auditPlanTable').innerHTML;
    if (!planContent) {
        this.showNotification('Kein Auditplan zum Drucken vorhanden.', 'error');
        return;
    }
    
    const printWindow = window.open('', '_blank');
    const title = document.getElementById('auditTitle').value || 'Auditplan';
    
    printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>${title}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; font-size: 12px; }
                .plan-info { margin-bottom: 20px; }
                .plan-info h4 { margin-bottom: 10px; }
                table { width: 100%; border-collapse: collapse; }
                th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
                th { background-color: #f5f5f5; font-weight: bold; }
                .plan-type-indicator { 
                    display: inline-block; 
                    padding: 2px 6px; 
                    border-radius: 8px; 
                    font-size: 0.7em; 
                    font-weight: bold; 
                    text-transform: uppercase; 
                    margin-right: 8px;
                }
                .plan-type-opening { background: #dcfce7; color: #166534; }
                .plan-type-audit { background: #dbeafe; color: #1e40af; }
                .plan-type-break { background: #fef3c7; color: #92400e; }
                .plan-type-auditor-time { background: #f3e8ff; color: #7c3aed; }
                .plan-type-closing { background: #fee2e2; color: #dc2626; }
                @media print {
                    body { margin: 0; }
                    .plan-info { page-break-inside: avoid; }
                }
            </style>
        </head>
        <body>
            ${planContent}
        </body>
        </html>
    `);
    
    printWindow.document.close();
    printWindow.print();
    
    this.showNotification('Druckvorschau ge√∂ffnet!', 'success');
};

// Removed duplicate functions - now integrated into QHSE Dashboard class

